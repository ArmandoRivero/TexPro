
contact_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  0800c780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0003ccd4  240001d8  0800c958  000201d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2403ceac  0800c958  0002ceac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cbc2  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ba4  00000000  00000000  0003cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016a8  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001500  00000000  00000000  00042018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036db4  00000000  00000000  00043518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cf7b  00000000  00000000  0007a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ecfd  00000000  00000000  00097247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e5f44  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006b30  00000000  00000000  001e5f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c4a8 	.word	0x0800c4a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800c4a8 	.word	0x0800c4a8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 80003d6:	b08e      	sub	sp, #56	; 0x38
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  expDuration_us = 6*(int)(exposureVal/60);
 80003da:	4bc9      	ldr	r3, [pc, #804]	; (8000700 <main+0x330>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4ac9      	ldr	r2, [pc, #804]	; (8000704 <main+0x334>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	441a      	add	r2, r3
 80003e6:	1152      	asrs	r2, r2, #5
 80003e8:	17db      	asrs	r3, r3, #31
 80003ea:	1ad2      	subs	r2, r2, r3
 80003ec:	4613      	mov	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4413      	add	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	461a      	mov	r2, r3
 80003f6:	4bc4      	ldr	r3, [pc, #784]	; (8000708 <main+0x338>)
 80003f8:	601a      	str	r2, [r3, #0]
  unsigned int offset_red, offset_green, offset_blue;
  unsigned char gain_red, gain_green, gain_blue;


  uint8_t singlePx_value[TOTAL_PIXELS*2]; //*2 since the USB 8 bit at a time
  unsigned int organizeDataToSend = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8000400:	443a      	add	r2, r7
 8000402:	6013      	str	r3, [r2, #0]
  int idxUSB,idx;
  /* Data settings */
  /***********************************************************************************************************/

  encoder_resolution = 0.1;   // in [um]
 8000404:	4bc1      	ldr	r3, [pc, #772]	; (800070c <main+0x33c>)
 8000406:	4ac2      	ldr	r2, [pc, #776]	; (8000710 <main+0x340>)
 8000408:	601a      	str	r2, [r3, #0]
  encoder_distance = 0.5; // in [um] -> (0.5 [um] = 5 tick)
 800040a:	4bc2      	ldr	r3, [pc, #776]	; (8000714 <main+0x344>)
 800040c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000410:	601a      	str	r2, [r3, #0]

  // Timing - Integration time of the CIS
  // (1) Resolution of 10 [us] [it depends on the timer frequency (1/timer_freq)]
  // (2) Maximum error of 50 [us] [it depends on the time difference respect to the rising edge of the CDSCLK2 (CP) signal]
  exposure_time = 1000;   // in [us]
 8000412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000416:	f642 02a8 	movw	r2, #10408	; 0x28a8
 800041a:	443a      	add	r2, r7
 800041c:	6013      	str	r3, [r2, #0]

  // Timing - LED duration
  // (1) Resolution of 10 [us] [it depends on the timer frequency (1/timer_freq)]
  LEDR_time = 0;  // in [us]
 800041e:	4bbe      	ldr	r3, [pc, #760]	; (8000718 <main+0x348>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
  LEDG_time = 0;  // in [us]
 8000424:	4bbd      	ldr	r3, [pc, #756]	; (800071c <main+0x34c>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
  LEDB_time = 0;  // in [us]
 800042a:	4bbd      	ldr	r3, [pc, #756]	; (8000720 <main+0x350>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]

  // Input gain - From 0 (gain = 1) to 63 (gain = 6)
  gain_red = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	f642 02a7 	movw	r2, #10407	; 0x28a7
 8000436:	443a      	add	r2, r7
 8000438:	7013      	strb	r3, [r2, #0]
  gain_green = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	f642 02a6 	movw	r2, #10406	; 0x28a6
 8000440:	443a      	add	r2, r7
 8000442:	7013      	strb	r3, [r2, #0]
  gain_blue = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f642 02a5 	movw	r2, #10405	; 0x28a5
 800044a:	443a      	add	r2, r7
 800044c:	7013      	strb	r3, [r2, #0]

  // Input offset - From 0 (0 [mV]) to 255 (+300 [mV]) or from 256 (0 [mV]) to 511 (-300 [mV])
  offset_red = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8000454:	443a      	add	r2, r7
 8000456:	6013      	str	r3, [r2, #0]
  offset_green = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f642 029c 	movw	r2, #10396	; 0x289c
 800045e:	443a      	add	r2, r7
 8000460:	6013      	str	r3, [r2, #0]
  offset_blue = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	f642 0298 	movw	r2, #10392	; 0x2898
 8000468:	443a      	add	r2, r7
 800046a:	6013      	str	r3, [r2, #0]

  /***********************************************************************************************************/

  // ADC gain
  red_PGA_reg = 0b0010000000000000 | gain_red;
 800046c:	f642 03a7 	movw	r3, #10407	; 0x28a7
 8000470:	443b      	add	r3, r7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	f642 0294 	movw	r2, #10388	; 0x2894
 800047c:	443a      	add	r2, r7
 800047e:	6013      	str	r3, [r2, #0]
  green_PGA_reg = 0b0011000000000000 | gain_green;
 8000480:	f642 03a6 	movw	r3, #10406	; 0x28a6
 8000484:	443b      	add	r3, r7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800048c:	f642 0290 	movw	r2, #10384	; 0x2890
 8000490:	443a      	add	r2, r7
 8000492:	6013      	str	r3, [r2, #0]
  blue_PGA_reg = 0b0100000000000000 | gain_blue;
 8000494:	f642 03a5 	movw	r3, #10405	; 0x28a5
 8000498:	443b      	add	r3, r7
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a0:	f642 028c 	movw	r2, #10380	; 0x288c
 80004a4:	443a      	add	r2, r7
 80004a6:	6013      	str	r3, [r2, #0]

  // ADC offset
  red_offset_reg = 0b0101000000000000 | offset_red;
 80004a8:	f642 03a0 	movw	r3, #10400	; 0x28a0
 80004ac:	443b      	add	r3, r7
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80004b4:	f642 0288 	movw	r2, #10376	; 0x2888
 80004b8:	443a      	add	r2, r7
 80004ba:	6013      	str	r3, [r2, #0]
  green_offset_reg = 0b0110000000000000 | offset_green;
 80004bc:	f642 039c 	movw	r3, #10396	; 0x289c
 80004c0:	443b      	add	r3, r7
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80004c8:	f642 0284 	movw	r2, #10372	; 0x2884
 80004cc:	443a      	add	r2, r7
 80004ce:	6013      	str	r3, [r2, #0]
  blue_offset_reg = 0b0111000000000000 | offset_blue;
 80004d0:	f642 0398 	movw	r3, #10392	; 0x2898
 80004d4:	443b      	add	r3, r7
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004dc:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80004e0:	6013      	str	r3, [r2, #0]

  // Number of multiplexing phases
  exposureTime_phase = (unsigned int)(((exposure_time / 1000000.0) * timer_freq) / 6.0);
 80004e2:	f642 03a8 	movw	r3, #10408	; 0x28a8
 80004e6:	443b      	add	r3, r7
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	ee07 3a90 	vmov	s15, r3
 80004ee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80004f2:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 80006f0 <main+0x320>
 80004f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004fa:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80006f8 <main+0x328>
 80004fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000502:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000506:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800050a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800050e:	ee17 2a90 	vmov	r2, s15
 8000512:	4b84      	ldr	r3, [pc, #528]	; (8000724 <main+0x354>)
 8000514:	601a      	str	r2, [r3, #0]
  LEDR_phase = (unsigned int)(((LEDR_time / 1000000.0) * timer_freq) / 6.0);
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <main+0x348>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	ee07 3a90 	vmov	s15, r3
 800051e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000522:	ed9f 5b73 	vldr	d5, [pc, #460]	; 80006f0 <main+0x320>
 8000526:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800052a:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80006f8 <main+0x328>
 800052e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000532:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000536:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800053a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800053e:	ee17 2a90 	vmov	r2, s15
 8000542:	4b79      	ldr	r3, [pc, #484]	; (8000728 <main+0x358>)
 8000544:	601a      	str	r2, [r3, #0]
  LEDG_phase = (unsigned int)(((LEDG_time / 1000000.0) * timer_freq) / 6.0);
 8000546:	4b75      	ldr	r3, [pc, #468]	; (800071c <main+0x34c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	ee07 3a90 	vmov	s15, r3
 800054e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000552:	ed9f 5b67 	vldr	d5, [pc, #412]	; 80006f0 <main+0x320>
 8000556:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800055a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80006f8 <main+0x328>
 800055e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000562:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000566:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800056a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800056e:	ee17 2a90 	vmov	r2, s15
 8000572:	4b6e      	ldr	r3, [pc, #440]	; (800072c <main+0x35c>)
 8000574:	601a      	str	r2, [r3, #0]
  LEDB_phase = (unsigned int)(((LEDB_time / 1000000.0) * timer_freq) / 6.0);
 8000576:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <main+0x350>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	ee07 3a90 	vmov	s15, r3
 800057e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000582:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80006f0 <main+0x320>
 8000586:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800058a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80006f8 <main+0x328>
 800058e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000592:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000596:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800059a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800059e:	ee17 2a90 	vmov	r2, s15
 80005a2:	4b63      	ldr	r3, [pc, #396]	; (8000730 <main+0x360>)
 80005a4:	601a      	str	r2, [r3, #0]

  // Number of residual ticks
  LEDR_residual = (unsigned int)((LEDR_time / 1000000.0) * timer_freq) % 6 + 1;
 80005a6:	4b5c      	ldr	r3, [pc, #368]	; (8000718 <main+0x348>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80005b2:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80006f0 <main+0x320>
 80005b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005ba:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 80006f8 <main+0x328>
 80005be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005c6:	ee17 1a90 	vmov	r1, s15
 80005ca:	4b5a      	ldr	r3, [pc, #360]	; (8000734 <main+0x364>)
 80005cc:	fba3 2301 	umull	r2, r3, r3, r1
 80005d0:	089a      	lsrs	r2, r3, #2
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	1c53      	adds	r3, r2, #1
 80005de:	4a56      	ldr	r2, [pc, #344]	; (8000738 <main+0x368>)
 80005e0:	6013      	str	r3, [r2, #0]
  LEDG_residual = (unsigned int)((LEDG_time / 1000000.0) * timer_freq) % 6 + 1;
 80005e2:	4b4e      	ldr	r3, [pc, #312]	; (800071c <main+0x34c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	ee07 3a90 	vmov	s15, r3
 80005ea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80005ee:	ed9f 5b40 	vldr	d5, [pc, #256]	; 80006f0 <main+0x320>
 80005f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005f6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80006f8 <main+0x328>
 80005fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000602:	ee17 1a90 	vmov	r1, s15
 8000606:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <main+0x364>)
 8000608:	fba3 2301 	umull	r2, r3, r3, r1
 800060c:	089a      	lsrs	r2, r3, #2
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	1aca      	subs	r2, r1, r3
 8000618:	1c53      	adds	r3, r2, #1
 800061a:	4a48      	ldr	r2, [pc, #288]	; (800073c <main+0x36c>)
 800061c:	6013      	str	r3, [r2, #0]
  LEDB_residual = (unsigned int)((LEDB_time / 1000000.0) * timer_freq) % 6 + 1;
 800061e:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x350>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800062a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80006f0 <main+0x320>
 800062e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000632:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80006f8 <main+0x328>
 8000636:	ee27 7b06 	vmul.f64	d7, d7, d6
 800063a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800063e:	ee17 1a90 	vmov	r1, s15
 8000642:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <main+0x364>)
 8000644:	fba3 2301 	umull	r2, r3, r3, r1
 8000648:	089a      	lsrs	r2, r3, #2
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	1c53      	adds	r3, r2, #1
 8000656:	4a3a      	ldr	r2, [pc, #232]	; (8000740 <main+0x370>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fb5b 	bl	8001d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 fbeb 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fcff 	bl	8001064 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000666:	f000 fc57 	bl	8000f18 <MX_SPI1_Init>
  MX_TIM2_Init();
 800066a:	f000 fcad 	bl	8000fc8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800066e:	f009 fed1 	bl	800a414 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Configuring AD9826 through SPI*/
  MACRO_AD9826_CLR_SCLK
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <main+0x374>)
 8000674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000678:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1,(uint8_t *)&reg_AD9826_config, 1, HAL_MAX_DELAY);
 800067a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067e:	2201      	movs	r2, #1
 8000680:	4931      	ldr	r1, [pc, #196]	; (8000748 <main+0x378>)
 8000682:	4832      	ldr	r0, [pc, #200]	; (800074c <main+0x37c>)
 8000684:	f005 fa78 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0x374>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <main+0x374>)
 8000692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000696:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_MUXconfig, 1, HAL_MAX_DELAY);
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	2201      	movs	r2, #1
 800069e:	492c      	ldr	r1, [pc, #176]	; (8000750 <main+0x380>)
 80006a0:	482a      	ldr	r0, [pc, #168]	; (800074c <main+0x37c>)
 80006a2:	f005 fa69 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <main+0x374>)
 80006a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ac:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <main+0x374>)
 80006b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b4:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ba:	2201      	movs	r2, #1
 80006bc:	4925      	ldr	r1, [pc, #148]	; (8000754 <main+0x384>)
 80006be:	4823      	ldr	r0, [pc, #140]	; (800074c <main+0x37c>)
 80006c0:	f005 fa5a 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <main+0x374>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <main+0x374>)
 80006ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d2:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d8:	2201      	movs	r2, #1
 80006da:	491f      	ldr	r1, [pc, #124]	; (8000758 <main+0x388>)
 80006dc:	481b      	ldr	r0, [pc, #108]	; (800074c <main+0x37c>)
 80006de:	f005 fa4b 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <main+0x374>)
 80006e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e8:	e038      	b.n	800075c <main+0x38c>
 80006ea:	bf00      	nop
 80006ec:	f3af 8000 	nop.w
 80006f0:	00000000 	.word	0x00000000
 80006f4:	412e8480 	.word	0x412e8480
 80006f8:	00000000 	.word	0x00000000
 80006fc:	40f86a00 	.word	0x40f86a00
 8000700:	24000070 	.word	0x24000070
 8000704:	88888889 	.word	0x88888889
 8000708:	2403105c 	.word	0x2403105c
 800070c:	24031044 	.word	0x24031044
 8000710:	3dcccccd 	.word	0x3dcccccd
 8000714:	24031048 	.word	0x24031048
 8000718:	24031018 	.word	0x24031018
 800071c:	2403101c 	.word	0x2403101c
 8000720:	24031020 	.word	0x24031020
 8000724:	24031024 	.word	0x24031024
 8000728:	24031028 	.word	0x24031028
 800072c:	2403102c 	.word	0x2403102c
 8000730:	24031030 	.word	0x24031030
 8000734:	aaaaaaab 	.word	0xaaaaaaab
 8000738:	24031034 	.word	0x24031034
 800073c:	24031038 	.word	0x24031038
 8000740:	2403103c 	.word	0x2403103c
 8000744:	58020c00 	.word	0x58020c00
 8000748:	0800c518 	.word	0x0800c518
 800074c:	240001f4 	.word	0x240001f4
 8000750:	0800c51c 	.word	0x0800c51c
 8000754:	24000008 	.word	0x24000008
 8000758:	2400000c 	.word	0x2400000c
 800075c:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 800075e:	4ba9      	ldr	r3, [pc, #676]	; (8000a04 <main+0x634>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076a:	2201      	movs	r2, #1
 800076c:	49a6      	ldr	r1, [pc, #664]	; (8000a08 <main+0x638>)
 800076e:	48a7      	ldr	r0, [pc, #668]	; (8000a0c <main+0x63c>)
 8000770:	f005 fa02 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 8000774:	4ba3      	ldr	r3, [pc, #652]	; (8000a04 <main+0x634>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 800077c:	4ba1      	ldr	r3, [pc, #644]	; (8000a04 <main+0x634>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000782:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 8000784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000788:	2201      	movs	r2, #1
 800078a:	49a1      	ldr	r1, [pc, #644]	; (8000a10 <main+0x640>)
 800078c:	489f      	ldr	r0, [pc, #636]	; (8000a0c <main+0x63c>)
 800078e:	f005 f9f3 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 8000792:	4b9c      	ldr	r3, [pc, #624]	; (8000a04 <main+0x634>)
 8000794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000798:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 800079a:	4b9a      	ldr	r3, [pc, #616]	; (8000a04 <main+0x634>)
 800079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a0:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a6:	2201      	movs	r2, #1
 80007a8:	499a      	ldr	r1, [pc, #616]	; (8000a14 <main+0x644>)
 80007aa:	4898      	ldr	r0, [pc, #608]	; (8000a0c <main+0x63c>)
 80007ac:	f005 f9e4 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 80007b0:	4b94      	ldr	r3, [pc, #592]	; (8000a04 <main+0x634>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	619a      	str	r2, [r3, #24]

  MACRO_AD9826_CLR_SCLK
 80007b8:	4b92      	ldr	r3, [pc, #584]	; (8000a04 <main+0x634>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	619a      	str	r2, [r3, #24]
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c4:	2201      	movs	r2, #1
 80007c6:	4994      	ldr	r1, [pc, #592]	; (8000a18 <main+0x648>)
 80007c8:	4890      	ldr	r0, [pc, #576]	; (8000a0c <main+0x63c>)
 80007ca:	f005 f9d5 	bl	8005b78 <HAL_SPI_Transmit>
  MACRO_AD9826_SET_SCLK
 80007ce:	4b8d      	ldr	r3, [pc, #564]	; (8000a04 <main+0x634>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    // tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <main+0x64c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	4890      	ldr	r0, [pc, #576]	; (8000a20 <main+0x650>)
 80007de:	f00a fbd3 	bl	800af88 <strtok>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a8f      	ldr	r2, [pc, #572]	; (8000a24 <main+0x654>)
 80007e6:	6013      	str	r3, [r2, #0]
    if (token != NULL)
 80007e8:	4b8e      	ldr	r3, [pc, #568]	; (8000a24 <main+0x654>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f000 8226 	beq.w	8000c3e <main+0x86e>
    {
      if(strcmp(token,strCMD_1) == 0)
 80007f2:	4b8c      	ldr	r3, [pc, #560]	; (8000a24 <main+0x654>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	498c      	ldr	r1, [pc, #560]	; (8000a28 <main+0x658>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd89 	bl	8000310 <strcmp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10d      	bne.n	8000820 <main+0x450>
      {
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always after receiving
 8000804:	2240      	movs	r2, #64	; 0x40
 8000806:	2100      	movs	r1, #0
 8000808:	4885      	ldr	r0, [pc, #532]	; (8000a20 <main+0x650>)
 800080a:	f00a fb95 	bl	800af38 <memset>

        enableSampleTimerFlag = 1;
 800080e:	4b87      	ldr	r3, [pc, #540]	; (8000a2c <main+0x65c>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
 8000814:	4886      	ldr	r0, [pc, #536]	; (8000a30 <main+0x660>)
 8000816:	f005 fce1 	bl	80061dc <HAL_TIM_Base_Start_IT>

        MACRO_LED_YELLOW_SET
 800081a:	4b86      	ldr	r3, [pc, #536]	; (8000a34 <main+0x664>)
 800081c:	2202      	movs	r2, #2
 800081e:	619a      	str	r2, [r3, #24]
//        GPIOE->BSRR = GPIO_PIN_1;  // On-board Yellow LED Set to "1"
      }
      if(strcmp(token,strCMD_2) == 0)
 8000820:	4b80      	ldr	r3, [pc, #512]	; (8000a24 <main+0x654>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4984      	ldr	r1, [pc, #528]	; (8000a38 <main+0x668>)
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd72 	bl	8000310 <strcmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d137      	bne.n	80008a2 <main+0x4d2>
      {
        token = strtok(NULL,tokenSeparator);
 8000832:	4b7a      	ldr	r3, [pc, #488]	; (8000a1c <main+0x64c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f00a fba5 	bl	800af88 <strtok>
 800083e:	4603      	mov	r3, r0
 8000840:	4a78      	ldr	r2, [pc, #480]	; (8000a24 <main+0x654>)
 8000842:	6013      	str	r3, [r2, #0]
        if(strcmp(token,strCMD_2_1) == 0)
 8000844:	4b77      	ldr	r3, [pc, #476]	; (8000a24 <main+0x654>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	497c      	ldr	r1, [pc, #496]	; (8000a3c <main+0x66c>)
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd60 	bl	8000310 <strcmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d120      	bne.n	8000898 <main+0x4c8>
        {
          token = strtok(NULL,tokenSeparator);
 8000856:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <main+0x64c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	2000      	movs	r0, #0
 800085e:	f00a fb93 	bl	800af88 <strtok>
 8000862:	4603      	mov	r3, r0
 8000864:	4a6f      	ldr	r2, [pc, #444]	; (8000a24 <main+0x654>)
 8000866:	6013      	str	r3, [r2, #0]

          exposureVal = atoi(token);
 8000868:	4b6e      	ldr	r3, [pc, #440]	; (8000a24 <main+0x654>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f00a fb27 	bl	800aec0 <atoi>
 8000872:	4603      	mov	r3, r0
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <main+0x670>)
 8000876:	6013      	str	r3, [r2, #0]
          expDuration_us = 6*(int)(exposureVal/15);
 8000878:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <main+0x670>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a71      	ldr	r2, [pc, #452]	; (8000a44 <main+0x674>)
 800087e:	fb82 1203 	smull	r1, r2, r2, r3
 8000882:	441a      	add	r2, r3
 8000884:	10d2      	asrs	r2, r2, #3
 8000886:	17db      	asrs	r3, r3, #31
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	461a      	mov	r2, r3
 8000894:	4b6c      	ldr	r3, [pc, #432]	; (8000a48 <main+0x678>)
 8000896:	601a      	str	r2, [r3, #0]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000898:	2240      	movs	r2, #64	; 0x40
 800089a:	2100      	movs	r1, #0
 800089c:	4860      	ldr	r0, [pc, #384]	; (8000a20 <main+0x650>)
 800089e:	f00a fb4b 	bl	800af38 <memset>
      }

      if(strcmp(token,strCMD_3) == 0)
 80008a2:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <main+0x654>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4969      	ldr	r1, [pc, #420]	; (8000a4c <main+0x67c>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd31 	bl	8000310 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d136      	bne.n	8000922 <main+0x552>
      {
        token = strtok(NULL,tokenSeparator);
 80008b4:	4b59      	ldr	r3, [pc, #356]	; (8000a1c <main+0x64c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	2000      	movs	r0, #0
 80008bc:	f00a fb64 	bl	800af88 <strtok>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a58      	ldr	r2, [pc, #352]	; (8000a24 <main+0x654>)
 80008c4:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <main+0x654>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a faf8 	bl	800aec0 <atoi>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a5f      	ldr	r2, [pc, #380]	; (8000a50 <main+0x680>)
 80008d4:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 63)
 80008d6:	4b5e      	ldr	r3, [pc, #376]	; (8000a50 <main+0x680>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b3f      	cmp	r3, #63	; 0x3f
 80008dc:	dc1c      	bgt.n	8000918 <main+0x548>
        {
          reg_AD9826_redPGA &= 0xFFC0;  // clear only gain bits
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <main+0x684>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80008e6:	4013      	ands	r3, r2
 80008e8:	4a5a      	ldr	r2, [pc, #360]	; (8000a54 <main+0x684>)
 80008ea:	6013      	str	r3, [r2, #0]
          reg_AD9826_redPGA |= tokenVal;
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <main+0x684>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a57      	ldr	r2, [pc, #348]	; (8000a50 <main+0x680>)
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	4a57      	ldr	r2, [pc, #348]	; (8000a54 <main+0x684>)
 80008f8:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <main+0x634>)
 80008fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000900:	619a      	str	r2, [r3, #24]
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 8000902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000906:	2201      	movs	r2, #1
 8000908:	4952      	ldr	r1, [pc, #328]	; (8000a54 <main+0x684>)
 800090a:	4840      	ldr	r0, [pc, #256]	; (8000a0c <main+0x63c>)
 800090c:	f005 f934 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000910:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <main+0x634>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	619a      	str	r2, [r3, #24]

//          msgVCP_len = sprintf(msgVCP, "RPGA %d\n", tokenVal);
//          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000918:	2240      	movs	r2, #64	; 0x40
 800091a:	2100      	movs	r1, #0
 800091c:	4840      	ldr	r0, [pc, #256]	; (8000a20 <main+0x650>)
 800091e:	f00a fb0b 	bl	800af38 <memset>
      }

      if(strcmp(token,strCMD_4) == 0)
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <main+0x654>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	494c      	ldr	r1, [pc, #304]	; (8000a58 <main+0x688>)
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcf1 	bl	8000310 <strcmp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d136      	bne.n	80009a2 <main+0x5d2>
      {
        token = strtok(NULL,tokenSeparator);
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <main+0x64c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2000      	movs	r0, #0
 800093c:	f00a fb24 	bl	800af88 <strtok>
 8000940:	4603      	mov	r3, r0
 8000942:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <main+0x654>)
 8000944:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <main+0x654>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f00a fab8 	bl	800aec0 <atoi>
 8000950:	4603      	mov	r3, r0
 8000952:	4a3f      	ldr	r2, [pc, #252]	; (8000a50 <main+0x680>)
 8000954:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 63)
 8000956:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <main+0x680>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b3f      	cmp	r3, #63	; 0x3f
 800095c:	dc1c      	bgt.n	8000998 <main+0x5c8>
        {
          reg_AD9826_greenPGA &= 0xFFC0;  // clear only gain bits
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <main+0x68c>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000966:	4013      	ands	r3, r2
 8000968:	4a3c      	ldr	r2, [pc, #240]	; (8000a5c <main+0x68c>)
 800096a:	6013      	str	r3, [r2, #0]
          reg_AD9826_greenPGA |= tokenVal;
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <main+0x68c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <main+0x680>)
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	4313      	orrs	r3, r2
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <main+0x68c>)
 8000978:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <main+0x634>)
 800097c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000980:	619a      	str	r2, [r3, #24]
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000986:	2201      	movs	r2, #1
 8000988:	4934      	ldr	r1, [pc, #208]	; (8000a5c <main+0x68c>)
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <main+0x63c>)
 800098c:	f005 f8f4 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <main+0x634>)
 8000992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000996:	619a      	str	r2, [r3, #24]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	2100      	movs	r1, #0
 800099c:	4820      	ldr	r0, [pc, #128]	; (8000a20 <main+0x650>)
 800099e:	f00a facb 	bl	800af38 <memset>
      }

      if(strcmp(token,strCMD_5) == 0)
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <main+0x654>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	492e      	ldr	r1, [pc, #184]	; (8000a60 <main+0x690>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fcb1 	bl	8000310 <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d167      	bne.n	8000a84 <main+0x6b4>
      {
        token = strtok(NULL,tokenSeparator);
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <main+0x64c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2000      	movs	r0, #0
 80009bc:	f00a fae4 	bl	800af88 <strtok>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <main+0x654>)
 80009c4:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <main+0x654>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f00a fa78 	bl	800aec0 <atoi>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <main+0x680>)
 80009d4:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 63)
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <main+0x680>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b3f      	cmp	r3, #63	; 0x3f
 80009dc:	dc4d      	bgt.n	8000a7a <main+0x6aa>
        {
          reg_AD9826_bluePGA &= 0xFFC0;  // clear only gain bits
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <main+0x638>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80009e6:	4013      	ands	r3, r2
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <main+0x638>)
 80009ea:	6013      	str	r3, [r2, #0]
          reg_AD9826_bluePGA |= tokenVal;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <main+0x638>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <main+0x680>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <main+0x638>)
 80009f8:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <main+0x634>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a00:	619a      	str	r2, [r3, #24]
 8000a02:	e02f      	b.n	8000a64 <main+0x694>
 8000a04:	58020c00 	.word	0x58020c00
 8000a08:	24000010 	.word	0x24000010
 8000a0c:	240001f4 	.word	0x240001f4
 8000a10:	24000014 	.word	0x24000014
 8000a14:	24000018 	.word	0x24000018
 8000a18:	2400001c 	.word	0x2400001c
 8000a1c:	24000020 	.word	0x24000020
 8000a20:	240002c8 	.word	0x240002c8
 8000a24:	2403100c 	.word	0x2403100c
 8000a28:	24000028 	.word	0x24000028
 8000a2c:	24031010 	.word	0x24031010
 8000a30:	2400027c 	.word	0x2400027c
 8000a34:	58021000 	.word	0x58021000
 8000a38:	24000038 	.word	0x24000038
 8000a3c:	2400003c 	.word	0x2400003c
 8000a40:	24000070 	.word	0x24000070
 8000a44:	88888889 	.word	0x88888889
 8000a48:	2403105c 	.word	0x2403105c
 8000a4c:	24000040 	.word	0x24000040
 8000a50:	24031058 	.word	0x24031058
 8000a54:	24000008 	.word	0x24000008
 8000a58:	24000048 	.word	0x24000048
 8000a5c:	2400000c 	.word	0x2400000c
 8000a60:	24000050 	.word	0x24000050
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4983      	ldr	r1, [pc, #524]	; (8000c78 <main+0x8a8>)
 8000a6c:	4883      	ldr	r0, [pc, #524]	; (8000c7c <main+0x8ac>)
 8000a6e:	f005 f883 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000a72:	4b83      	ldr	r3, [pc, #524]	; (8000c80 <main+0x8b0>)
 8000a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a78:	619a      	str	r2, [r3, #24]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4881      	ldr	r0, [pc, #516]	; (8000c84 <main+0x8b4>)
 8000a80:	f00a fa5a 	bl	800af38 <memset>
      }

      if(strcmp(token,strCMD_6) == 0)
 8000a84:	4b80      	ldr	r3, [pc, #512]	; (8000c88 <main+0x8b8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4980      	ldr	r1, [pc, #512]	; (8000c8c <main+0x8bc>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fc40 	bl	8000310 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d135      	bne.n	8000b02 <main+0x732>
      {
        token = strtok(NULL,tokenSeparator);
 8000a96:	4b7e      	ldr	r3, [pc, #504]	; (8000c90 <main+0x8c0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f00a fa73 	bl	800af88 <strtok>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a78      	ldr	r2, [pc, #480]	; (8000c88 <main+0x8b8>)
 8000aa6:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 8000aa8:	4b77      	ldr	r3, [pc, #476]	; (8000c88 <main+0x8b8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00a fa07 	bl	800aec0 <atoi>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <main+0x8c4>)
 8000ab6:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 255)
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <main+0x8c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2bff      	cmp	r3, #255	; 0xff
 8000abe:	dc1b      	bgt.n	8000af8 <main+0x728>
        {
          reg_AD9826_redOffset &= 0xFF00;  // clear only gain bits
 8000ac0:	4b75      	ldr	r3, [pc, #468]	; (8000c98 <main+0x8c8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000ac8:	4a73      	ldr	r2, [pc, #460]	; (8000c98 <main+0x8c8>)
 8000aca:	6013      	str	r3, [r2, #0]
          reg_AD9826_redOffset |= tokenVal;
 8000acc:	4b72      	ldr	r3, [pc, #456]	; (8000c98 <main+0x8c8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a70      	ldr	r2, [pc, #448]	; (8000c94 <main+0x8c4>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	4a70      	ldr	r2, [pc, #448]	; (8000c98 <main+0x8c8>)
 8000ad8:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 8000ada:	4b69      	ldr	r3, [pc, #420]	; (8000c80 <main+0x8b0>)
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae0:	619a      	str	r2, [r3, #24]
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	496b      	ldr	r1, [pc, #428]	; (8000c98 <main+0x8c8>)
 8000aea:	4864      	ldr	r0, [pc, #400]	; (8000c7c <main+0x8ac>)
 8000aec:	f005 f844 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000af0:	4b63      	ldr	r3, [pc, #396]	; (8000c80 <main+0x8b0>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	619a      	str	r2, [r3, #24]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	2100      	movs	r1, #0
 8000afc:	4861      	ldr	r0, [pc, #388]	; (8000c84 <main+0x8b4>)
 8000afe:	f00a fa1b 	bl	800af38 <memset>
      }
      if(strcmp(token,strCMD_7) == 0)
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <main+0x8b8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4965      	ldr	r1, [pc, #404]	; (8000c9c <main+0x8cc>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc01 	bl	8000310 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d135      	bne.n	8000b80 <main+0x7b0>
      {
        token = strtok(NULL,tokenSeparator);
 8000b14:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <main+0x8c0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f00a fa34 	bl	800af88 <strtok>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <main+0x8b8>)
 8000b24:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 8000b26:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <main+0x8b8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00a f9c8 	bl	800aec0 <atoi>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <main+0x8c4>)
 8000b34:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 255)
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <main+0x8c4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	dc1b      	bgt.n	8000b76 <main+0x7a6>
        {
          reg_AD9826_greenOffset &= 0xFF00;  // clear only gain bits
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <main+0x8d0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000b46:	4a56      	ldr	r2, [pc, #344]	; (8000ca0 <main+0x8d0>)
 8000b48:	6013      	str	r3, [r2, #0]
          reg_AD9826_greenOffset |= tokenVal;
 8000b4a:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <main+0x8d0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a51      	ldr	r2, [pc, #324]	; (8000c94 <main+0x8c4>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	4a52      	ldr	r2, [pc, #328]	; (8000ca0 <main+0x8d0>)
 8000b56:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <main+0x8b0>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	619a      	str	r2, [r3, #24]
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b64:	2201      	movs	r2, #1
 8000b66:	494e      	ldr	r1, [pc, #312]	; (8000ca0 <main+0x8d0>)
 8000b68:	4844      	ldr	r0, [pc, #272]	; (8000c7c <main+0x8ac>)
 8000b6a:	f005 f805 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <main+0x8b0>)
 8000b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b74:	619a      	str	r2, [r3, #24]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4842      	ldr	r0, [pc, #264]	; (8000c84 <main+0x8b4>)
 8000b7c:	f00a f9dc 	bl	800af38 <memset>
      }
      if(strcmp(token,strCMD_8) == 0)
 8000b80:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <main+0x8b8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4947      	ldr	r1, [pc, #284]	; (8000ca4 <main+0x8d4>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fbc2 	bl	8000310 <strcmp>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d135      	bne.n	8000bfe <main+0x82e>
      {
        token = strtok(NULL,tokenSeparator);
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <main+0x8c0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4619      	mov	r1, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f00a f9f5 	bl	800af88 <strtok>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <main+0x8b8>)
 8000ba2:	6013      	str	r3, [r2, #0]

        tokenVal = atoi(token);
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <main+0x8b8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00a f989 	bl	800aec0 <atoi>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <main+0x8c4>)
 8000bb2:	6013      	str	r3, [r2, #0]
        if(tokenVal <= 255)
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <main+0x8c4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2bff      	cmp	r3, #255	; 0xff
 8000bba:	dc1b      	bgt.n	8000bf4 <main+0x824>
        {
          reg_AD9826_blueOffset &= 0xFF00;  // clear only gain bits
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <main+0x8d8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000bc4:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <main+0x8d8>)
 8000bc6:	6013      	str	r3, [r2, #0]
          reg_AD9826_blueOffset |= tokenVal;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <main+0x8d8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a31      	ldr	r2, [pc, #196]	; (8000c94 <main+0x8c4>)
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	4a35      	ldr	r2, [pc, #212]	; (8000ca8 <main+0x8d8>)
 8000bd4:	6013      	str	r3, [r2, #0]

          MACRO_AD9826_CLR_SCLK
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <main+0x8b0>)
 8000bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bdc:	619a      	str	r2, [r3, #24]
          HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be2:	2201      	movs	r2, #1
 8000be4:	4930      	ldr	r1, [pc, #192]	; (8000ca8 <main+0x8d8>)
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <main+0x8ac>)
 8000be8:	f004 ffc6 	bl	8005b78 <HAL_SPI_Transmit>
          MACRO_AD9826_SET_SCLK
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <main+0x8b0>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	619a      	str	r2, [r3, #24]
        }
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4822      	ldr	r0, [pc, #136]	; (8000c84 <main+0x8b4>)
 8000bfa:	f00a f99d 	bl	800af38 <memset>
      }



      if(strcmp(token,strCMD_ver) == 0)
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <main+0x8b8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	492a      	ldr	r1, [pc, #168]	; (8000cac <main+0x8dc>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fb83 	bl	8000310 <strcmp>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d116      	bne.n	8000c3e <main+0x86e>
      {
        msgVCP_len = sprintf(msgVCP, "Ver: %d.%d\n", codeVer, codeVerTest);
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <main+0x8e0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <main+0x8e4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4927      	ldr	r1, [pc, #156]	; (8000cb8 <main+0x8e8>)
 8000c1a:	4828      	ldr	r0, [pc, #160]	; (8000cbc <main+0x8ec>)
 8000c1c:	f00a f994 	bl	800af48 <siprintf>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <main+0x8f0>)
 8000c24:	6013      	str	r3, [r2, #0]
        CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <main+0x8f0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <main+0x8ec>)
 8000c30:	f009 fcc6 	bl	800a5c0 <CDC_Transmit_HS>
        memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000c34:	2240      	movs	r2, #64	; 0x40
 8000c36:	2100      	movs	r1, #0
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <main+0x8b4>)
 8000c3a:	f00a f97d 	bl	800af38 <memset>

    }



    if(send_data_main)
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <main+0x8f4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f43f adc7 	beq.w	80007d6 <main+0x406>
    {
      MACRO_LED_YELLOW_CLR
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <main+0x8f8>)
 8000c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4e:	619a      	str	r2, [r3, #24]
//      GPIOE->BSRR = (uint32_t)GPIO_PIN_1 << 16U; // On-board Yellow LED Set to "0"

      HAL_TIM_Base_Stop_IT(&htim2);
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <main+0x8fc>)
 8000c52:	f005 fb49 	bl	80062e8 <HAL_TIM_Base_Stop_IT>
      organizeDataToSend = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8000c5c:	443a      	add	r2, r7
 8000c5e:	6013      	str	r3, [r2, #0]
      idxUSB = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000c66:	443a      	add	r2, r7
 8000c68:	6013      	str	r3, [r2, #0]
      idx = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f642 02ac 	movw	r2, #10412	; 0x28ac
 8000c70:	443a      	add	r2, r7
 8000c72:	6013      	str	r3, [r2, #0]


      while(organizeDataToSend == 0)
 8000c74:	e0bb      	b.n	8000dee <main+0xa1e>
 8000c76:	bf00      	nop
 8000c78:	24000010 	.word	0x24000010
 8000c7c:	240001f4 	.word	0x240001f4
 8000c80:	58020c00 	.word	0x58020c00
 8000c84:	240002c8 	.word	0x240002c8
 8000c88:	2403100c 	.word	0x2403100c
 8000c8c:	24000058 	.word	0x24000058
 8000c90:	24000020 	.word	0x24000020
 8000c94:	24031058 	.word	0x24031058
 8000c98:	24000014 	.word	0x24000014
 8000c9c:	24000060 	.word	0x24000060
 8000ca0:	24000018 	.word	0x24000018
 8000ca4:	24000068 	.word	0x24000068
 8000ca8:	2400001c 	.word	0x2400001c
 8000cac:	24000024 	.word	0x24000024
 8000cb0:	24000000 	.word	0x24000000
 8000cb4:	24000004 	.word	0x24000004
 8000cb8:	0800c4c4 	.word	0x0800c4c4
 8000cbc:	24018968 	.word	0x24018968
 8000cc0:	24031008 	.word	0x24031008
 8000cc4:	24031041 	.word	0x24031041
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	2400027c 	.word	0x2400027c
      {
        //-CH1 (red)
        singlePx_value[idxUSB]   = reg_High[idx];
 8000cd0:	4a54      	ldr	r2, [pc, #336]	; (8000e24 <main+0xa54>)
 8000cd2:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000cd6:	443b      	add	r3, r7
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8000ce4:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 8000ce8:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000cec:	443b      	add	r3, r7
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
        singlePx_value[idxUSB+1] = reg_Low[idx];
 8000cf6:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <main+0xa58>)
 8000cf8:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000cfc:	443b      	add	r3, r7
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d04:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000d08:	443b      	add	r3, r7
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2d1      	uxtb	r1, r2
 8000d10:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8000d14:	f6a2 02b8 	subw	r2, r2, #2232	; 0x8b8
 8000d18:	54d1      	strb	r1, [r2, r3]
        //-CH2 (Green)
        singlePx_value[idxUSB+2] = reg_High[idx+1];
 8000d1a:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000d1e:	443b      	add	r3, r7
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <main+0xa54>)
 8000d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2a:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000d2e:	443b      	add	r3, r7
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3302      	adds	r3, #2
 8000d34:	b2d1      	uxtb	r1, r2
 8000d36:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8000d3a:	f6a2 02b8 	subw	r2, r2, #2232	; 0x8b8
 8000d3e:	54d1      	strb	r1, [r2, r3]
        singlePx_value[idxUSB+3] = reg_Low[idx+1];
 8000d40:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000d44:	443b      	add	r3, r7
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a37      	ldr	r2, [pc, #220]	; (8000e28 <main+0xa58>)
 8000d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d50:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000d54:	443b      	add	r3, r7
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3303      	adds	r3, #3
 8000d5a:	b2d1      	uxtb	r1, r2
 8000d5c:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8000d60:	f6a2 02b8 	subw	r2, r2, #2232	; 0x8b8
 8000d64:	54d1      	strb	r1, [r2, r3]
        //-CH3 (Blue)
        singlePx_value[idxUSB+4] = reg_High[idx+2];
 8000d66:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000d6a:	443b      	add	r3, r7
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <main+0xa54>)
 8000d72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d76:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000d7a:	443b      	add	r3, r7
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3304      	adds	r3, #4
 8000d80:	b2d1      	uxtb	r1, r2
 8000d82:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8000d86:	f6a2 02b8 	subw	r2, r2, #2232	; 0x8b8
 8000d8a:	54d1      	strb	r1, [r2, r3]
        singlePx_value[idxUSB+5] = reg_Low[idx+2];
 8000d8c:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000d90:	443b      	add	r3, r7
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3302      	adds	r3, #2
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <main+0xa58>)
 8000d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9c:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000da0:	443b      	add	r3, r7
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3305      	adds	r3, #5
 8000da6:	b2d1      	uxtb	r1, r2
 8000da8:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 8000dac:	f6a2 02b8 	subw	r2, r2, #2232	; 0x8b8
 8000db0:	54d1      	strb	r1, [r2, r3]

        idxUSB = idxUSB + 6;
 8000db2:	f642 03b0 	movw	r3, #10416	; 0x28b0
 8000db6:	443b      	add	r3, r7
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3306      	adds	r3, #6
 8000dbc:	f642 02b0 	movw	r2, #10416	; 0x28b0
 8000dc0:	443a      	add	r2, r7
 8000dc2:	6013      	str	r3, [r2, #0]
        idx    = idx + 3;
 8000dc4:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000dc8:	443b      	add	r3, r7
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	f642 02ac 	movw	r2, #10412	; 0x28ac
 8000dd2:	443a      	add	r2, r7
 8000dd4:	6013      	str	r3, [r2, #0]

        if(idx >= TOTAL_PIXELS)
 8000dd6:	f642 03ac 	movw	r3, #10412	; 0x28ac
 8000dda:	443b      	add	r3, r7
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 8000de2:	db04      	blt.n	8000dee <main+0xa1e>
        {
          organizeDataToSend = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8000dea:	443a      	add	r2, r7
 8000dec:	6013      	str	r3, [r2, #0]
      while(organizeDataToSend == 0)
 8000dee:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8000df2:	443b      	add	r3, r7
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f43f af6a 	beq.w	8000cd0 <main+0x900>
        }

      }
      //singlePx_value[TOTAL_PIXELS - 2] = (uint8_t) "\r";
      //singlePx_value[TOTAL_PIXELS - 1] = (uint8_t) "\n";
      __NOP();
 8000dfc:	bf00      	nop
      CDC_Transmit_HS(singlePx_value, TOTAL_PIXELS * 2);
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <main+0xa5c>)
 8000e00:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000e04:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000e08:	443b      	add	r3, r7
 8000e0a:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f009 fbd6 	bl	800a5c0 <CDC_Transmit_HS>
      //HAL_Delay(300);
      //memset(singlePx_value,0,TOTAL_PIXELS * 2);


      //CDC_Transmit_HS((uint8_t *) "\r\n", 1);
      HAL_TIM_Base_Start_IT(&htim2);
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <main+0xa60>)
 8000e16:	f005 f9e1 	bl	80061dc <HAL_TIM_Base_Start_IT>
      /*HAL_TIM_Base_Stop_IT(&htim2);   // Stop interrupt of TIM2

       */
      send_data_main = 0;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <main+0xa64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
    token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000e20:	e4d9      	b.n	80007d6 <main+0x406>
 8000e22:	bf00      	nop
 8000e24:	24031068 	.word	0x24031068
 8000e28:	24036168 	.word	0x24036168
 8000e2c:	ffffd748 	.word	0xffffd748
 8000e30:	2400027c 	.word	0x2400027c
 8000e34:	24031041 	.word	0x24031041

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	; 0x70
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00a f876 	bl	800af38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00a f870 	bl	800af38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 fdd1 	bl	8003a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e7a:	bf00      	nop
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <SystemClock_Config+0xdc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e88:	d1f8      	bne.n	8000e7c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e8a:	2321      	movs	r3, #33	; 0x21
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000ea4:	2344      	movs	r3, #68	; 0x44
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000eac:	2303      	movs	r3, #3
 8000eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000ebc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fde4 	bl	8003a94 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ed2:	f000 fc8d 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	233f      	movs	r3, #63	; 0x3f
 8000ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ee6:	2340      	movs	r3, #64	; 0x40
 8000ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2103      	movs	r1, #3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f977 	bl	80041f0 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f08:	f000 fc72 	bl	80017f0 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3770      	adds	r7, #112	; 0x70
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024800 	.word	0x58024800

08000f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <MX_SPI1_Init+0xac>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f34:	220f      	movs	r2, #15
 8000f36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_SPI1_Init+0xa8>)
 8000fac:	f004 fcde 	bl	800596c <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000fb6:	f000 fc1b 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240001f4 	.word	0x240001f4
 8000fc4:	40013000 	.word	0x40013000

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM2_Init+0x98>)
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 343;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ff0:	f240 1257 	movw	r2, #343	; 0x157
 8000ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_TIM2_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM2_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <MX_TIM2_Init+0x98>)
 8001010:	f005 f88d 	bl	800612e <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800101a:	f000 fbe9 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_TIM2_Init+0x98>)
 800102c:	f005 faaa 	bl	8006584 <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001036:	f000 fbdb 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM2_Init+0x98>)
 8001048:	f005 fd00 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001052:	f000 fbcd 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400027c 	.word	0x2400027c

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	4bc1      	ldr	r3, [pc, #772]	; (8001380 <MX_GPIO_Init+0x31c>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4abf      	ldr	r2, [pc, #764]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4bbd      	ldr	r3, [pc, #756]	; (8001380 <MX_GPIO_Init+0x31c>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4bb9      	ldr	r3, [pc, #740]	; (8001380 <MX_GPIO_Init+0x31c>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4ab8      	ldr	r2, [pc, #736]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4bb5      	ldr	r3, [pc, #724]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4bb2      	ldr	r3, [pc, #712]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4ab0      	ldr	r2, [pc, #704]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4bae      	ldr	r3, [pc, #696]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d4:	4baa      	ldr	r3, [pc, #680]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4aa9      	ldr	r2, [pc, #676]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4ba6      	ldr	r3, [pc, #664]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4ba3      	ldr	r3, [pc, #652]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4aa1      	ldr	r2, [pc, #644]	; (8001380 <MX_GPIO_Init+0x31c>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b9f      	ldr	r3, [pc, #636]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b9b      	ldr	r3, [pc, #620]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a9a      	ldr	r2, [pc, #616]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b97      	ldr	r3, [pc, #604]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	4b94      	ldr	r3, [pc, #592]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a92      	ldr	r2, [pc, #584]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b90      	ldr	r3, [pc, #576]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <MX_GPIO_Init+0x31c>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a8b      	ldr	r2, [pc, #556]	; (8001380 <MX_GPIO_Init+0x31c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b88      	ldr	r3, [pc, #544]	; (8001380 <MX_GPIO_Init+0x31c>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_GREEN_Pin|DRV_RED_Pin|DRV_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2136      	movs	r1, #54	; 0x36
 800116e:	4885      	ldr	r0, [pc, #532]	; (8001384 <MX_GPIO_Init+0x320>)
 8001170:	f001 f93e 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEST_PIN_Pin|PIN_TEST1_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7120 	mov.w	r1, #640	; 0x280
 800117a:	4883      	ldr	r0, [pc, #524]	; (8001388 <MX_GPIO_Init+0x324>)
 800117c:	f001 f938 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f244 0101 	movw	r1, #16385	; 0x4001
 8001186:	4881      	ldr	r0, [pc, #516]	; (800138c <MX_GPIO_Init+0x328>)
 8001188:	f001 f932 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2102      	movs	r1, #2
 8001190:	487f      	ldr	r0, [pc, #508]	; (8001390 <MX_GPIO_Init+0x32c>)
 8001192:	f001 f92d 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800119c:	487d      	ldr	r0, [pc, #500]	; (8001394 <MX_GPIO_Init+0x330>)
 800119e:	f001 f927 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	487a      	ldr	r0, [pc, #488]	; (8001394 <MX_GPIO_Init+0x330>)
 80011aa:	f001 f921 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV_GREEN_Pin DRV_RED_Pin DRV_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DRV_GREEN_Pin|DRV_RED_Pin|DRV_BLUE_Pin|LED_YELLOW_Pin;
 80011ae:	2336      	movs	r3, #54	; 0x36
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	486f      	ldr	r0, [pc, #444]	; (8001384 <MX_GPIO_Init+0x320>)
 80011c6:	f000 ff6b 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE6 PE7 PE8
                           PE10 PE12 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80011ca:	f249 53c9 	movw	r3, #38345	; 0x95c9
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4869      	ldr	r0, [pc, #420]	; (8001384 <MX_GPIO_Init+0x320>)
 80011e0:	f000 ff5e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin ENCODER_B_Pin ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ENCODER_B_Pin|ENCODER_Z_Pin;
 80011e4:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4867      	ldr	r0, [pc, #412]	; (8001398 <MX_GPIO_Init+0x334>)
 80011fa:	f000 ff51 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF8
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011fe:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	485d      	ldr	r0, [pc, #372]	; (8001388 <MX_GPIO_Init+0x324>)
 8001214:	f000 ff44 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_PIN_Pin PIN_TEST1_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin|PIN_TEST1_Pin;
 8001218:	f44f 7320 	mov.w	r3, #640	; 0x280
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4855      	ldr	r0, [pc, #340]	; (8001388 <MX_GPIO_Init+0x324>)
 8001232:	f000 ff35 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001236:	f641 03cd 	movw	r3, #6349	; 0x18cd
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4853      	ldr	r0, [pc, #332]	; (8001398 <MX_GPIO_Init+0x334>)
 800124c:	f000 ff28 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001250:	2302      	movs	r3, #2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001260:	230b      	movs	r3, #11
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	484b      	ldr	r0, [pc, #300]	; (8001398 <MX_GPIO_Init+0x334>)
 800126c:	f000 ff18 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8001270:	f248 13d9 	movw	r3, #33241	; 0x81d9
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4845      	ldr	r0, [pc, #276]	; (800139c <MX_GPIO_Init+0x338>)
 8001286:	f000 ff0b 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800128a:	2306      	movs	r3, #6
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129a:	230b      	movs	r3, #11
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	483d      	ldr	r0, [pc, #244]	; (800139c <MX_GPIO_Init+0x338>)
 80012a6:	f000 fefb 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012aa:	2330      	movs	r3, #48	; 0x30
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ba:	230b      	movs	r3, #11
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4834      	ldr	r0, [pc, #208]	; (8001398 <MX_GPIO_Init+0x334>)
 80012c6:	f000 feeb 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80012ca:	f244 0301 	movw	r3, #16385	; 0x4001
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	482a      	ldr	r0, [pc, #168]	; (800138c <MX_GPIO_Init+0x328>)
 80012e4:	f000 fedc 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB15 PB4 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80012e8:	f649 7316 	movw	r3, #40726	; 0x9f16
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4823      	ldr	r0, [pc, #140]	; (800138c <MX_GPIO_Init+0x328>)
 80012fe:	f000 fecf 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 PG4
                           PG5 PG6 PG8 PG9
                           PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001302:	f248 737d 	movw	r3, #34685	; 0x877d
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <MX_GPIO_Init+0x32c>)
 8001318:	f000 fec2 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_TEST2_Pin */
  GPIO_InitStruct.Pin = PIN_TEST2_Pin;
 800131c:	2302      	movs	r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PIN_TEST2_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <MX_GPIO_Init+0x32c>)
 8001334:	f000 feb4 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D4_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D4_Pin|D3_Pin;
 8001338:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_GPIO_Init+0x320>)
 800134e:	f000 fea7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <MX_GPIO_Init+0x328>)
 8001370:	f000 fe96 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001374:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	e010      	b.n	80013a0 <MX_GPIO_Init+0x33c>
 800137e:	bf00      	nop
 8001380:	58024400 	.word	0x58024400
 8001384:	58021000 	.word	0x58021000
 8001388:	58021400 	.word	0x58021400
 800138c:	58020400 	.word	0x58020400
 8001390:	58021800 	.word	0x58021800
 8001394:	58020c00 	.word	0x58020c00
 8001398:	58020800 	.word	0x58020800
 800139c:	58020000 	.word	0x58020000
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013aa:	2307      	movs	r3, #7
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4837      	ldr	r0, [pc, #220]	; (8001494 <MX_GPIO_Init+0x430>)
 80013b6:	f000 fe73 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin SP_Pin CDSCLK2_Pin ADCCLK_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin
 80013ba:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4830      	ldr	r0, [pc, #192]	; (8001494 <MX_GPIO_Init+0x430>)
 80013d4:	f000 fe64 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80013d8:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4829      	ldr	r0, [pc, #164]	; (8001494 <MX_GPIO_Init+0x430>)
 80013ee:	f000 fe57 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4824      	ldr	r0, [pc, #144]	; (8001498 <MX_GPIO_Init+0x434>)
 8001408:	f000 fe4a 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001412:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	481e      	ldr	r0, [pc, #120]	; (800149c <MX_GPIO_Init+0x438>)
 8001424:	f000 fe3c 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001428:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143a:	230b      	movs	r3, #11
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <MX_GPIO_Init+0x434>)
 8001446:	f000 fe2b 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D5_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D5_Pin;
 800144a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <MX_GPIO_Init+0x434>)
 8001460:	f000 fe1e 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin;
 8001464:	23c0      	movs	r3, #192	; 0xc0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	480a      	ldr	r0, [pc, #40]	; (80014a0 <MX_GPIO_Init+0x43c>)
 8001478:	f000 fe12 	bl	80020a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2017      	movs	r0, #23
 8001482:	f000 fdd8 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001486:	2017      	movs	r0, #23
 8001488:	f000 fdef 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58020c00 	.word	0x58020c00
 8001498:	58021800 	.word	0x58021800
 800149c:	58020800 	.word	0x58020800
 80014a0:	58020400 	.word	0x58020400

080014a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (pin PC8)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b4:	d11a      	bne.n	80014ec <HAL_GPIO_EXTI_Callback+0x48>
  {
    encoder_tick++;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80014be:	6013      	str	r3, [r2, #0]
    if(encoder_tick == (unsigned int)(encoder_distance/encoder_resolution))
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_EXTI_Callback+0x58>)
 80014c2:	edd3 6a00 	vldr	s13, [r3]
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_GPIO_EXTI_Callback+0x5c>)
 80014c8:	ed93 7a00 	vldr	s14, [r3]
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_EXTI_Callback+0x48>
    {
      encoder_tick= 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
      get_image = 1;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_GPIO_EXTI_Callback+0x60>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
      // Test pin (PF7)
      // odr = GPIOF->ODR;
      // GPIOF->BSRR = ((odr & GPIO_PIN_7) << 16U) | (~odr & GPIO_PIN_7);
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	24031014 	.word	0x24031014
 80014fc:	24031048 	.word	0x24031048
 8001500:	24031044 	.word	0x24031044
 8001504:	24031040 	.word	0x24031040

08001508 <HAL_TIM_PeriodElapsedCallback>:

//-Tick every 10[uS]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(enableSampleTimerFlag==1)
 8001510:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	f040 8135 	bne.w	8001784 <HAL_TIM_PeriodElapsedCallback+0x27c>
  {
    //---ADC_Clk: To generate a 50KHz frequency (ADCCLK - pin PD13)
    odr = GPIOD->ODR;
 800151a:	4b9d      	ldr	r3, [pc, #628]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a9d      	ldr	r2, [pc, #628]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001520:	6013      	str	r3, [r2, #0]
    GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 8001522:	4b9c      	ldr	r3, [pc, #624]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800152c:	4b99      	ldr	r3, [pc, #612]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	43db      	mvns	r3, r3
 8001532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001536:	4996      	ldr	r1, [pc, #600]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001538:	4313      	orrs	r3, r2
 800153a:	618b      	str	r3, [r1, #24]
//    odr = GPIOD->ODR;
//    GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);


    //---Toggle CDSCLK2 and CP_Clk: To generate the frequency for the ADC Sampling  and the readout (CDSCLK2 and CP_Clk - pin PD12)
    if(Tim2_tick == 0)
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x46>
    {
      MACRO_CIS_CLR_CPCLK;
 8001546:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154c:	619a      	str	r2, [r3, #24]
      //GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
    }

    // The CP clock is always 6 ticks (4 at low level, 2 at high level) non symetrical clock
    // since this signal is used for the AFE as CDSCLK2
    if (Tim2_tick == 5)
 800154e:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d110      	bne.n	800157a <HAL_TIM_PeriodElapsedCallback+0x72>
    {
      MACRO_CIS_SET_CPCLK;
 8001558:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800155a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155e:	619a      	str	r2, [r3, #24]
      //GPIOD->BSRR = GPIO_PIN_12;                  // CP_Clk set to 1
      Tim2_tick = 0;
 8001560:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
      CP_cnt++;
 8001566:	4b8d      	ldr	r3, [pc, #564]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	b29b      	uxth	r3, r3
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001576:	801a      	strh	r2, [r3, #0]
 8001578:	e008      	b.n	800158c <HAL_TIM_PeriodElapsedCallback+0x84>
    }
    else
    {
      Tim2_tick++;
 800157a:	4b87      	ldr	r3, [pc, #540]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	b29b      	uxth	r3, r3
 8001582:	3301      	adds	r3, #1
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b83      	ldr	r3, [pc, #524]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800158a:	801a      	strh	r2, [r3, #0]
    }



    ADC_cnt++;
 800158c:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800158e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001592:	b29b      	uxth	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800159c:	801a      	strh	r2, [r3, #0]

    //---CIS SP signal to set exposure duration (SP_CIS - pin PD11)
    // sensor starts acquiring immediately at the tick=2 of the timer counter
    // The Integration time is defined by the 'expDuration_us' variable
    // there is no reading of the data from the sensor between these two pulses
    if(tick_SP == 2 || tick_SP == (expDuration_us+2) )
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d008      	beq.n	80015ba <HAL_TIM_PeriodElapsedCallback+0xb2>
 80015a8:	4b7e      	ldr	r3, [pc, #504]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b7d      	ldr	r3, [pc, #500]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3302      	adds	r3, #2
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d104      	bne.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0xbc>
    {
      MACRO_CIS_SET_SP;
 80015ba:	4b75      	ldr	r3, [pc, #468]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	e011      	b.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0xe0>
      //GPIOD->BSRR = GPIO_PIN_11;              // SP_CIS Set to 1
    }
    else if(tick_SP == 7 || tick_SP == (expDuration_us+7) )
 80015c4:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	d008      	beq.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0xd8>
 80015ce:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3307      	adds	r3, #7
 80015dc:	429a      	cmp	r2, r3
 80015de:	d103      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0xe0>
    {
      MACRO_CIS_CLR_SP;
 80015e0:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e6:	619a      	str	r2, [r3, #24]
      //GPIOD->BSRR = (uint32_t)GPIO_PIN_11 << 16U; // SP_CIS Set to 0
    }

    if(tick_SP == (expDuration_us+2) )
 80015e8:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b6d      	ldr	r3, [pc, #436]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3302      	adds	r3, #2
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d102      	bne.n	8001600 <HAL_TIM_PeriodElapsedCallback+0xf8>
    {
      CP_cnt=0;
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
    }

    tick_SP++;
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	b29b      	uxth	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001610:	801a      	strh	r2, [r3, #0]




    // read all ports
    if ( (CP_cnt > INATIVE_PIXELS) && (CP_cnt <= INATIVE_PIXELS + EFFECTIVE_PIXELS + 100) ) // 100 is an exageration value of
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	2b28      	cmp	r3, #40	; 0x28
 800161a:	f340 8098 	ble.w	800174e <HAL_TIM_PeriodElapsedCallback+0x246>
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	f240 724c 	movw	r2, #1868	; 0x74c
 8001628:	4293      	cmp	r3, r2
 800162a:	f300 8090 	bgt.w	800174e <HAL_TIM_PeriodElapsedCallback+0x246>
                                                                                            // oversampling never reach due to next loop control
    {
      // D0: pin PG12
      ADC_B0 = (GPIOG->IDR >> 12) & 0x01;
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	0b1b      	lsrs	r3, r3, #12
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800163a:	6013      	str	r3, [r2, #0]
      // D1: pin PE9
      ADC_B1 = (GPIOE->IDR >> 9) & 0x01;
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	0a5b      	lsrs	r3, r3, #9
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001648:	6013      	str	r3, [r2, #0]
      // D2: pin PE11
      ADC_B2 = (GPIOE->IDR >> 11) & 0x01;
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	0adb      	lsrs	r3, r3, #11
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	4a59      	ldr	r2, [pc, #356]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001656:	6013      	str	r3, [r2, #0]
      // D3: pin PE14
      ADC_B3 = (GPIOE->IDR >> 14) & 0x01;
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	0b9b      	lsrs	r3, r3, #14
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001664:	6013      	str	r3, [r2, #0]
      // D4: pin PE13
      ADC_B4 = (GPIOE->IDR >> 13) & 0x01;
 8001666:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	0b5b      	lsrs	r3, r3, #13
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001672:	6013      	str	r3, [r2, #0]
      // D5: pin PG14
      ADC_B5 = (GPIOG->IDR >> 14) & 0x01;
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	0b9b      	lsrs	r3, r3, #14
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001680:	6013      	str	r3, [r2, #0]
      // D6: pin PB6
      ADC_B6 = (GPIOB->IDR >> 6) & 0x01;
 8001682:	4b52      	ldr	r3, [pc, #328]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	099b      	lsrs	r3, r3, #6
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800168e:	6013      	str	r3, [r2, #0]
      // D7: pin PB7
      ADC_B7 = (GPIOB->IDR >> 7) & 0x01;
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	09db      	lsrs	r3, r3, #7
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800169c:	6013      	str	r3, [r2, #0]

      if(alternateByte == 1)
 800169e:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12c      	bne.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x1f8>
      {
        reg_Low[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 80016a6:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	005a      	lsls	r2, r3, #1
 80016ac:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	431a      	orrs	r2, r3
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	431a      	orrs	r2, r3
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	431a      	orrs	r2, r3
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	019b      	lsls	r3, r3, #6
 80016d8:	ea42 0103 	orr.w	r1, r2, r3
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	01da      	lsls	r2, r3, #7
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	493d      	ldr	r1, [pc, #244]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        i++;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016f6:	6013      	str	r3, [r2, #0]
        alternateByte = 0;
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e026      	b.n	800174e <HAL_TIM_PeriodElapsedCallback+0x246>
      }
      else
      {
        reg_High[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	005a      	lsls	r2, r3, #1
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	431a      	orrs	r2, r3
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	431a      	orrs	r2, r3
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	431a      	orrs	r2, r3
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	015b      	lsls	r3, r3, #5
 800172a:	431a      	orrs	r2, r3
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	ea42 0103 	orr.w	r1, r2, r3
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	01da      	lsls	r2, r3, #7
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        alternateByte = 1;
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
      }
    }

    if (i == TOTAL_PIXELS)//CP_cnt == (INATIVE_PIXELS + EFFECTIVE_PIXELS+1+1) ) // one oversample cycle added
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 8001756:	d115      	bne.n	8001784 <HAL_TIM_PeriodElapsedCallback+0x27c>
    {
      HAL_TIM_Base_Stop_IT(&htim2);
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800175a:	f004 fdc5 	bl	80062e8 <HAL_TIM_Base_Stop_IT>

      MACRO_CIS_CLR_CPCLK;
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001764:	619a      	str	r2, [r3, #24]
      //GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
      send_data_main = 1;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
      enableSampleTimerFlag = 0;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
      CP_cnt = 0;
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
      tick_SP = 0;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800177a:	2200      	movs	r2, #0
 800177c:	801a      	strh	r2, [r3, #0]
      i = 0;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
    {
        odr = GPIOD->ODR;
        GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);
    }
   */
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	24031010 	.word	0x24031010
 8001790:	58020c00 	.word	0x58020c00
 8001794:	2403104c 	.word	0x2403104c
 8001798:	24031052 	.word	0x24031052
 800179c:	24031050 	.word	0x24031050
 80017a0:	24031056 	.word	0x24031056
 80017a4:	24031054 	.word	0x24031054
 80017a8:	2403105c 	.word	0x2403105c
 80017ac:	58021800 	.word	0x58021800
 80017b0:	2403b268 	.word	0x2403b268
 80017b4:	58021000 	.word	0x58021000
 80017b8:	2403b26c 	.word	0x2403b26c
 80017bc:	2403b270 	.word	0x2403b270
 80017c0:	2403b274 	.word	0x2403b274
 80017c4:	2403b278 	.word	0x2403b278
 80017c8:	2403b27c 	.word	0x2403b27c
 80017cc:	58020400 	.word	0x58020400
 80017d0:	2403b280 	.word	0x2403b280
 80017d4:	2403b284 	.word	0x2403b284
 80017d8:	24031064 	.word	0x24031064
 80017dc:	24031060 	.word	0x24031060
 80017e0:	24036168 	.word	0x24036168
 80017e4:	24031068 	.word	0x24031068
 80017e8:	2400027c 	.word	0x2400027c
 80017ec:	24031041 	.word	0x24031041

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_MspInit+0x30>)
 8001804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x30>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x30>)
 8001814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	58024400 	.word	0x58024400

08001830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0b8      	sub	sp, #224	; 0xe0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	22b4      	movs	r2, #180	; 0xb4
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fb71 	bl	800af38 <memset>
  if(hspi->Instance==SPI1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <HAL_SPI_MspInit+0x104>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d165      	bne.n	800192c <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001866:	2300      	movs	r3, #0
 8001868:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	4618      	mov	r0, r3
 8001870:	f003 f81e 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800187a:	f7ff ffb9 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_SPI_MspInit+0x108>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001884:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <HAL_SPI_MspInit+0x108>)
 8001886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_SPI_MspInit+0x108>)
 8001890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_SPI_MspInit+0x108>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <HAL_SPI_MspInit+0x108>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_SPI_MspInit+0x108>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_SPI_MspInit+0x108>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_SPI_MspInit+0x108>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_SPI_MspInit+0x108>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018d8:	2320      	movs	r3, #32
 80018da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f0:	2305      	movs	r3, #5
 80018f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018fa:	4619      	mov	r1, r3
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <HAL_SPI_MspInit+0x10c>)
 80018fe:	f000 fbcf 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001902:	2320      	movs	r3, #32
 8001904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191a:	2305      	movs	r3, #5
 800191c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <HAL_SPI_MspInit+0x110>)
 8001928:	f000 fbba 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	37e0      	adds	r7, #224	; 0xe0
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013000 	.word	0x40013000
 8001938:	58024400 	.word	0x58024400
 800193c:	58020000 	.word	0x58020000
 8001940:	58020400 	.word	0x58020400

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d116      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	201c      	movs	r0, #28
 800197a:	f000 fb5c 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800197e:	201c      	movs	r0, #28
 8001980:	f000 fb73 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	58024400 	.word	0x58024400

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019dc:	f000 fa0c 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 80019e8:	2080      	movs	r0, #128	; 0x80
 80019ea:	f000 fd1a 	bl	8002422 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80019ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019f2:	f000 fd16 	bl	8002422 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM2_IRQHandler+0x10>)
 8001a02:	f004 fca0 	bl	8006346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2400027c 	.word	0x2400027c

08001a10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <OTG_HS_IRQHandler+0x10>)
 8001a16:	f000 fe75 	bl	8002704 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2403c770 	.word	0x2403c770

08001a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a3e:	f009 fa43 	bl	800aec8 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
	return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a66:	e7fe      	b.n	8001a66 <_exit+0x12>

08001a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e00a      	b.n	8001a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a7a:	f3af 8000 	nop.w
 8001a7e:	4601      	mov	r1, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf0      	blt.n	8001a7a <_read+0x12>
	}

return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e009      	b.n	8001ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf1      	blt.n	8001ab4 <_write+0x12>
	}
	return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_close>:

int _close(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b02:	605a      	str	r2, [r3, #4]
	return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_isatty>:

int _isatty(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f009 f9a8 	bl	800aec8 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24050000 	.word	0x24050000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	2403b288 	.word	0x2403b288
 8001bac:	2403ceb0 	.word	0x2403ceb0

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <SystemInit+0xf0>)
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <SystemInit+0xf0>)
 8001bbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <SystemInit+0xf4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d807      	bhi.n	8001be2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <SystemInit+0xf4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <SystemInit+0xf4>)
 8001bdc:	f043 0307 	orr.w	r3, r3, #7
 8001be0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <SystemInit+0xf8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <SystemInit+0xf8>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <SystemInit+0xf8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <SystemInit+0xf8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <SystemInit+0xf8>)
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <SystemInit+0xfc>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SystemInit+0xf4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SystemInit+0xf4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 030f 	bic.w	r3, r3, #15
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <SystemInit+0xf4>)
 8001c16:	f043 0307 	orr.w	r3, r3, #7
 8001c1a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <SystemInit+0xf8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <SystemInit+0xf8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <SystemInit+0xf8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <SystemInit+0xf8>)
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <SystemInit+0x100>)
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <SystemInit+0xf8>)
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <SystemInit+0x104>)
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <SystemInit+0xf8>)
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <SystemInit+0x108>)
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <SystemInit+0xf8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <SystemInit+0xf8>)
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <SystemInit+0x108>)
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <SystemInit+0xf8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <SystemInit+0xf8>)
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <SystemInit+0x108>)
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <SystemInit+0xf8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <SystemInit+0xf8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <SystemInit+0xf8>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <SystemInit+0xf8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <SystemInit+0xf8>)
 8001c72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <SystemInit+0xf8>)
 8001c78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001c7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <SystemInit+0xf8>)
 8001c82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c86:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001c88:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <SystemInit+0x10c>)
 8001c8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	52002000 	.word	0x52002000
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cb0:	02020200 	.word	0x02020200
 8001cb4:	01ff0000 	.word	0x01ff0000
 8001cb8:	01010280 	.word	0x01010280
 8001cbc:	52004000 	.word	0x52004000

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc4:	f7ff ff74 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cca:	490d      	ldr	r1, [pc, #52]	; (8001d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	; (8001d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cee:	f009 f8f1 	bl	800aed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7fe fb6d 	bl	80003d0 <main>
  bx  lr
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d00:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001d04:	0800c780 	.word	0x0800c780
  ldr r2, =_sbss
 8001d08:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001d0c:	2403ceac 	.word	0x2403ceac

08001d10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC3_IRQHandler>
	...

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f000 f980 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d20:	f002 fc1c 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_Init+0x68>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	4913      	ldr	r1, [pc, #76]	; (8001d80 <HAL_Init+0x6c>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_Init+0x68>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_Init+0x6c>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_Init+0x70>)
 8001d56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_Init+0x74>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f814 	bl	8001d8c <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e002      	b.n	8001d74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6e:	f7ff fd45 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	0800c520 	.word	0x0800c520
 8001d84:	24000078 	.word	0x24000078
 8001d88:	24000074 	.word	0x24000074

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_InitTick+0x60>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e021      	b.n	8001de4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_InitTick+0x64>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_InitTick+0x60>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f965 	bl	8002086 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd4:	f000 f92f 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x68>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	24000080 	.word	0x24000080
 8001df0:	24000074 	.word	0x24000074
 8001df4:	2400007c 	.word	0x2400007c

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	24000080 	.word	0x24000080
 8001e1c:	2403b28c 	.word	0x2403b28c

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	2403b28c 	.word	0x2403b28c

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000080 	.word	0x24000080

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	05fa0000 	.word	0x05fa0000

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff40 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff33 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa4 	bl	8001fdc <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ae:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <HAL_GPIO_Init+0x228>)
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020b2:	e18c      	b.n	80023ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 817e 	beq.w	80023c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d005      	beq.n	80020e4 <HAL_GPIO_Init+0x44>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	69b9      	ldr	r1, [r7, #24]
 80021d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0203 	and.w	r2, r3, #3
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80d8 	beq.w	80023c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_GPIO_Init+0x22c>)
 800221a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800221e:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_GPIO_Init+0x22c>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_GPIO_Init+0x22c>)
 800222a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x230>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_GPIO_Init+0x234>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d04a      	beq.n	80022f8 <HAL_GPIO_Init+0x258>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_GPIO_Init+0x238>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02b      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_GPIO_Init+0x23c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_GPIO_Init+0x240>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x21a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_GPIO_Init+0x244>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x216>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a18      	ldr	r2, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x248>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x212>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_GPIO_Init+0x24c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_GPIO_Init+0x250>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x20a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_GPIO_Init+0x254>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x206>
 80022a2:	2309      	movs	r3, #9
 80022a4:	e029      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022a6:	230a      	movs	r3, #10
 80022a8:	e027      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e025      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e023      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e021      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e01f      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e01d      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e01b      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e019      	b.n	80022fa <HAL_GPIO_Init+0x25a>
 80022c6:	bf00      	nop
 80022c8:	58000080 	.word	0x58000080
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58000400 	.word	0x58000400
 80022d4:	58020000 	.word	0x58020000
 80022d8:	58020400 	.word	0x58020400
 80022dc:	58020800 	.word	0x58020800
 80022e0:	58020c00 	.word	0x58020c00
 80022e4:	58021000 	.word	0x58021000
 80022e8:	58021400 	.word	0x58021400
 80022ec:	58021800 	.word	0x58021800
 80022f0:	58021c00 	.word	0x58021c00
 80022f4:	58022400 	.word	0x58022400
 80022f8:	2300      	movs	r3, #0
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	4093      	lsls	r3, r2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230a:	4938      	ldr	r1, [pc, #224]	; (80023ec <HAL_GPIO_Init+0x34c>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800236c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ae6b 	bne.w	80020b4 <HAL_GPIO_Init+0x14>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	58000400 	.word	0x58000400

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f82b 	bl	80014a4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002458:	b08f      	sub	sp, #60	; 0x3c
 800245a:	af0a      	add	r7, sp, #40	; 0x28
 800245c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e116      	b.n	8002696 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f008 f9e4 	bl	800a850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fcab 	bl	8006e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	687e      	ldr	r6, [r7, #4]
 80024b4:	466d      	mov	r5, sp
 80024b6:	f106 0410 	add.w	r4, r6, #16
 80024ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ca:	1d33      	adds	r3, r6, #4
 80024cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	f004 fb76 	bl	8006bc0 <USB_CoreInit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0d7      	b.n	8002696 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 fc99 	bl	8006e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e04a      	b.n	800258e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	333d      	adds	r3, #61	; 0x3d
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	333c      	adds	r3, #60	; 0x3c
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	b298      	uxth	r0, r3
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3344      	adds	r3, #68	; 0x44
 8002534:	4602      	mov	r2, r0
 8002536:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3340      	adds	r3, #64	; 0x40
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3348      	adds	r3, #72	; 0x48
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334c      	adds	r3, #76	; 0x4c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3354      	adds	r3, #84	; 0x54
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3af      	bcc.n	80024f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e044      	b.n	8002628 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	3301      	adds	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d3b5      	bcc.n	800259e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	687e      	ldr	r6, [r7, #4]
 800263a:	466d      	mov	r5, sp
 800263c:	f106 0410 	add.w	r4, r6, #16
 8002640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002648:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002650:	1d33      	adds	r3, r6, #4
 8002652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	f004 fc31 	bl	8006ebc <USB_DevInit>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e014      	b.n	8002696 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f98b 	bl	80039a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f005 fd7f 	bl	8008192 <USB_DevDisconnect>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_Start+0x1c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e020      	b.n	80026fc <HAL_PCD_Start+0x5e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d109      	bne.n	80026de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fb7c 	bl	8006de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f005 fd2f 	bl	8008150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08d      	sub	sp, #52	; 0x34
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fded 	bl	80082fa <USB_GetMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 84b7 	bne.w	8003096 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f005 fd51 	bl	80081d4 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 84ad 	beq.w	8003094 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f005 fd3e 	bl	80081d4 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 0202 	and.w	r2, r2, #2
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f005 fd2c 	bl	80081d4 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d161      	bne.n	800284a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0210 	bic.w	r2, r2, #16
 8002794:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	0c5b      	lsrs	r3, r3, #17
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d124      	bne.n	800280c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d035      	beq.n	800283a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	6a38      	ldr	r0, [r7, #32]
 80027e2:	f005 fb63 	bl	8007eac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f2:	441a      	add	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	441a      	add	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	621a      	str	r2, [r3, #32]
 800280a:	e016      	b.n	800283a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	2b06      	cmp	r3, #6
 8002816:	d110      	bne.n	800283a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800281e:	2208      	movs	r2, #8
 8002820:	4619      	mov	r1, r3
 8002822:	6a38      	ldr	r0, [r7, #32]
 8002824:	f005 fb42 	bl	8007eac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002834:	441a      	add	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0210 	orr.w	r2, r2, #16
 8002848:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f005 fcc0 	bl	80081d4 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285e:	f040 80a7 	bne.w	80029b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f005 fcc5 	bl	80081fa <USB_ReadDevAllOutEpInterrupt>
 8002870:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002872:	e099      	b.n	80029a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 808e 	beq.w	800299c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f005 fce9 	bl	8008262 <USB_ReadDevOutEPInterrupt>
 8002890:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00c      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a8:	461a      	mov	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 feef 	bl	8003694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00c      	beq.n	80028da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	2308      	movs	r3, #8
 80028d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 ffc5 	bl	8003864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d030      	beq.n	8002962 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d109      	bne.n	8002920 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	78db      	ldrb	r3, [r3, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f008 f8a4 	bl	800aa98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	461a      	mov	r2, r3
 800295e:	2302      	movs	r3, #2
 8002960:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002978:	461a      	mov	r2, r3
 800297a:	2320      	movs	r3, #32
 800297c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f af62 	bne.w	8002874 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f005 fc0d 	bl	80081d4 <USB_ReadInterrupts>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c4:	f040 80db 	bne.w	8002b7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f005 fc2e 	bl	800822e <USB_ReadDevAllInEpInterrupt>
 80029d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029d8:	e0cd      	b.n	8002b76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80c2 	beq.w	8002b6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fc54 	bl	800829e <USB_ReadDevInEPInterrupt>
 80029f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d057      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69f9      	ldr	r1, [r7, #28]
 8002a1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a22:	4013      	ands	r3, r2
 8002a24:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d132      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334c      	adds	r3, #76	; 0x4c
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4403      	add	r3, r0
 8002a60:	3348      	adds	r3, #72	; 0x48
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4419      	add	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4403      	add	r3, r0
 8002a74:	334c      	adds	r3, #76	; 0x4c
 8002a76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d113      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x3a2>
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3354      	adds	r3, #84	; 0x54
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	f005 fc5d 	bl	8008360 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f007 ff6e 	bl	800a98e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2308      	movs	r3, #8
 8002acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b00:	461a      	mov	r2, r3
 8002b02:	2340      	movs	r3, #64	; 0x40
 8002b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d023      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b12:	6a38      	ldr	r0, [r7, #32]
 8002b14:	f004 fb30 	bl	8007178 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	78db      	ldrb	r3, [r3, #3]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d108      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f007 ffbb 	bl	800aabc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b52:	461a      	mov	r2, r3
 8002b54:	2302      	movs	r3, #2
 8002b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fd08 	bl	800357a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af2e 	bne.w	80029da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 fb26 	bl	80081d4 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b92:	d122      	bne.n	8002bda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d108      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bba:	2100      	movs	r1, #0
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ff13 	bl	80039e8 <HAL_PCDEx_LPM_Callback>
 8002bc2:	e002      	b.n	8002bca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f007 ff59 	bl	800aa7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f005 faf8 	bl	80081d4 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bee:	d112      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f007 ff15 	bl	800aa30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 fada 	bl	80081d4 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c2a:	d121      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002c3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d111      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c60:	2101      	movs	r1, #1
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fec0 	bl	80039e8 <HAL_PCDEx_LPM_Callback>
 8002c68:	e002      	b.n	8002c70 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f007 fee0 	bl	800aa30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 faad 	bl	80081d4 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	f040 80b7 	bne.w	8002df6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fa68 	bl	8007178 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cac:	e046      	b.n	8002d3c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	0151      	lsls	r1, r2, #5
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	440a      	add	r2, r1
 8002cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ce0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cf4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	0151      	lsls	r1, r2, #5
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	440a      	add	r2, r1
 8002d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	0151      	lsls	r1, r2, #5
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	440a      	add	r2, r1
 8002d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	3301      	adds	r3, #1
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3b3      	bcc.n	8002cae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d54:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d72:	f043 030b 	orr.w	r3, r3, #11
 8002d76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d88:	f043 030b 	orr.w	r3, r3, #11
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	e015      	b.n	8002dbc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f242 032b 	movw	r3, #8235	; 0x202b
 8002da4:	4313      	orrs	r3, r2
 8002da6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db6:	f043 030b 	orr.w	r3, r3, #11
 8002dba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002de0:	461a      	mov	r2, r3
 8002de2:	f005 fabd 	bl	8008360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f005 f9ea 	bl	80081d4 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0a:	d124      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f005 fa81 	bl	8008318 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fa29 	bl	8007272 <USB_GetDevSpeed>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681c      	ldr	r4, [r3, #0]
 8002e2c:	f001 fd10 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8002e30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f003 ff2e 	bl	8006c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f007 fdcc 	bl	800a9de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 f9ba 	bl	80081d4 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d10a      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f007 fda9 	bl	800a9c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f002 0208 	and.w	r2, r2, #8
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 f9a5 	bl	80081d4 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d122      	bne.n	8002eda <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e014      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fb27 	bl	8003518 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	3301      	adds	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3e5      	bcc.n	8002ea6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f005 f978 	bl	80081d4 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eee:	d13b      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e02b      	b.n	8002f4e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3340      	adds	r3, #64	; 0x40
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d115      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da12      	bge.n	8002f48 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	333f      	adds	r3, #63	; 0x3f
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fae8 	bl	8003518 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3ce      	bcc.n	8002ef6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 f931 	bl	80081d4 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f7c:	d155      	bne.n	800302a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7e:	2301      	movs	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	e045      	b.n	8003010 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d12e      	bne.n	800300a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da2b      	bge.n	800300a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fbe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d121      	bne.n	800300a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003006:	6053      	str	r3, [r2, #4]
            break;
 8003008:	e007      	b.n	800301a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	3301      	adds	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003016:	429a      	cmp	r2, r3
 8003018:	d3b4      	bcc.n	8002f84 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f005 f8d0 	bl	80081d4 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d10a      	bne.n	8003056 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f007 fd4d 	bl	800aae0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f005 f8ba 	bl	80081d4 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d115      	bne.n	8003096 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f007 fd3d 	bl	800aafc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	e000      	b.n	8003096 <HAL_PCD_IRQHandler+0x992>
      return;
 8003094:	bf00      	nop
    }
  }
}
 8003096:	3734      	adds	r7, #52	; 0x34
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_PCD_SetAddress+0x1a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e013      	b.n	80030de <HAL_PCD_SetAddress+0x42>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f005 f818 	bl	8008104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	461a      	mov	r2, r3
 80030f4:	4603      	mov	r3, r0
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	460b      	mov	r3, r1
 80030fa:	803b      	strh	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da0f      	bge.n	800312c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	3338      	adds	r3, #56	; 0x38
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
 800312a:	e00f      	b.n	800314c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 020f 	and.w	r2, r3, #15
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003158:	883a      	ldrh	r2, [r7, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	78ba      	ldrb	r2, [r7, #2]
 8003162:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003176:	78bb      	ldrb	r3, [r7, #2]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d102      	bne.n	8003182 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_PCD_EP_Open+0xaa>
 800318c:	2302      	movs	r3, #2
 800318e:	e00e      	b.n	80031ae <HAL_PCD_EP_Open+0xc8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 f88c 	bl	80072bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031ac:	7afb      	ldrb	r3, [r7, #11]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da0f      	bge.n	80031ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	3338      	adds	r3, #56	; 0x38
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	705a      	strb	r2, [r3, #1]
 80031e8:	e00f      	b.n	800320a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_PCD_EP_Close+0x6e>
 8003220:	2302      	movs	r3, #2
 8003222:	e00e      	b.n	8003242 <HAL_PCD_EP_Close+0x8c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68f9      	ldr	r1, [r7, #12]
 8003232:	4618      	mov	r0, r3
 8003234:	f004 f8ca 	bl	80073cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	460b      	mov	r3, r1
 8003258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	f004 fbb1 	bl	8007a24 <USB_EP0StartXfer>
 80032c2:	e008      	b.n	80032d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	f004 f957 	bl	8007584 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	460b      	mov	r3, r1
 800331e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3338      	adds	r3, #56	; 0x38
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2201      	movs	r2, #1
 800334e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003350:	7afb      	ldrb	r3, [r7, #11]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	b2da      	uxtb	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d102      	bne.n	800336a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	f004 fb4f 	bl	8007a24 <USB_EP0StartXfer>
 8003386:	e008      	b.n	800339a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	f004 f8f5 	bl	8007584 <USB_EPStartXfer>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d901      	bls.n	80033c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e050      	b.n	8003464 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da0f      	bge.n	80033ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3338      	adds	r3, #56	; 0x38
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	705a      	strb	r2, [r3, #1]
 80033e8:	e00d      	b.n	8003406 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_SetStall+0x82>
 8003422:	2302      	movs	r3, #2
 8003424:	e01e      	b.n	8003464 <HAL_PCD_EP_SetStall+0xc0>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fd91 	bl	8007f5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	b2d9      	uxtb	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003454:	461a      	mov	r2, r3
 8003456:	f004 ff83 	bl	8008360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d901      	bls.n	800348a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e042      	b.n	8003510 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800348a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348e:	2b00      	cmp	r3, #0
 8003490:	da0f      	bge.n	80034b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3338      	adds	r3, #56	; 0x38
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	705a      	strb	r2, [r3, #1]
 80034b0:	e00f      	b.n	80034d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_PCD_EP_ClrStall+0x86>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e00e      	b.n	8003510 <HAL_PCD_EP_ClrStall+0xa4>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fd99 	bl	8008038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da0c      	bge.n	8003546 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3338      	adds	r3, #56	; 0x38
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e00c      	b.n	8003560 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fbb8 	bl	8007cdc <USB_EPStopXfer>
 800356c:	4603      	mov	r3, r0
 800356e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003570:	7afb      	ldrb	r3, [r7, #11]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28
 800357e:	af02      	add	r7, sp, #8
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	3338      	adds	r3, #56	; 0x38
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d901      	bls.n	80035b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06c      	b.n	800368c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d902      	bls.n	80035ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3303      	adds	r3, #3
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d6:	e02b      	b.n	8003630 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d902      	bls.n	80035f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3303      	adds	r3, #3
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6919      	ldr	r1, [r3, #16]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360c:	b2db      	uxtb	r3, r3
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	6978      	ldr	r0, [r7, #20]
 8003614:	f004 fc0c 	bl	8007e30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	441a      	add	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	b29b      	uxth	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	429a      	cmp	r2, r3
 8003644:	d809      	bhi.n	800365a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364e:	429a      	cmp	r2, r3
 8003650:	d203      	bcs.n	800365a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1be      	bne.n	80035d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	429a      	cmp	r2, r3
 8003664:	d811      	bhi.n	800368a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2201      	movs	r2, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	43db      	mvns	r3, r3
 8003680:	6939      	ldr	r1, [r7, #16]
 8003682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003686:	4013      	ands	r3, r2
 8003688:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	333c      	adds	r3, #60	; 0x3c
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d17b      	bne.n	80037c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a61      	ldr	r2, [pc, #388]	; (800385c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f240 80b9 	bls.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b3 	beq.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fc:	6093      	str	r3, [r2, #8]
 80036fe:	e0a7      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	2320      	movs	r3, #32
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	e098      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 8093 	bne.w	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a4b      	ldr	r2, [pc, #300]	; (800385c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d90f      	bls.n	8003752 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	6093      	str	r3, [r2, #8]
 8003750:	e07e      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	0159      	lsls	r1, r3, #5
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	440b      	add	r3, r1
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d114      	bne.n	80037b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800379c:	461a      	mov	r2, r3
 800379e:	2101      	movs	r1, #1
 80037a0:	f004 fdde 	bl	8008360 <USB_EP0_OutStart>
 80037a4:	e006      	b.n	80037b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f007 f8cc 	bl	800a958 <HAL_PCD_DataOutStageCallback>
 80037c0:	e046      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d124      	bne.n	8003814 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	e032      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	2320      	movs	r3, #32
 8003804:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f007 f8a3 	bl	800a958 <HAL_PCD_DataOutStageCallback>
 8003812:	e01d      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d114      	bne.n	8003844 <PCD_EP_OutXfrComplete_int+0x1b0>
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800383c:	461a      	mov	r2, r3
 800383e:	2100      	movs	r1, #0
 8003840:	f004 fd8e 	bl	8008360 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f007 f884 	bl	800a958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	4f54300a 	.word	0x4f54300a
 8003860:	4f54310a 	.word	0x4f54310a

08003864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	333c      	adds	r3, #60	; 0x3c
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d90e      	bls.n	80038b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f007 f83b 	bl	800a934 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <PCD_EP_OutSetupPacket_int+0x88>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d90c      	bls.n	80038e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d108      	bne.n	80038e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d8:	461a      	mov	r2, r3
 80038da:	2101      	movs	r1, #1
 80038dc:	f004 fd40 	bl	8008360 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	4f54300a 	.word	0x4f54300a

080038f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
 80038fc:	4613      	mov	r3, r2
 80038fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800390e:	883b      	ldrh	r3, [r7, #0]
 8003910:	0419      	lsls	r1, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	430a      	orrs	r2, r1
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
 800391c:	e028      	b.n	8003970 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e00d      	b.n	800394e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	3340      	adds	r3, #64	; 0x40
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4413      	add	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	3301      	adds	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	3b01      	subs	r3, #1
 8003954:	429a      	cmp	r2, r3
 8003956:	d3ec      	bcc.n	8003932 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003958:	883b      	ldrh	r3, [r7, #0]
 800395a:	0418      	lsls	r0, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	3b01      	subs	r3, #1
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4302      	orrs	r2, r0
 8003968:	3340      	adds	r3, #64	; 0x40
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	10000003 	.word	0x10000003

080039e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d00a      	beq.n	8003a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01f      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e01d      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	490f      	ldr	r1, [pc, #60]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a3a:	f7fe f9f1 	bl	8001e20 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a42:	f7fe f9ed 	bl	8001e20 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a50:	d901      	bls.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d1ee      	bne.n	8003a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	58024800 	.word	0x58024800

08003a74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a82:	60d3      	str	r3, [r2, #12]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	58024800 	.word	0x58024800

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e39d      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003abe:	4b86      	ldr	r3, [pc, #536]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d007      	beq.n	8003ada <HAL_RCC_OscConfig+0x46>
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b18      	cmp	r3, #24
 8003ace:	d110      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ada:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d168      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e377      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x76>
 8003afc:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a75      	ldr	r2, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e02e      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b71      	ldr	r3, [pc, #452]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a70      	ldr	r2, [pc, #448]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b6e      	ldr	r3, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6d      	ldr	r2, [pc, #436]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0xbc>
 8003b36:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a67      	ldr	r2, [pc, #412]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a64      	ldr	r2, [pc, #400]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a60      	ldr	r2, [pc, #384]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5d      	ldr	r2, [pc, #372]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe f956 	bl	8001e20 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe f952 	bl	8001e20 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e32b      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b8a:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe4>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe f942 	bl	8001e20 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe f93e 	bl	8001e20 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e317      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x10c>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 808c 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd0:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bda:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x162>
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b18      	cmp	r3, #24
 8003bea:	d137      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1c8>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d132      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x17a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e2e9      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c0e:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0219 	bic.w	r2, r3, #25
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	492f      	ldr	r1, [pc, #188]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c20:	f7fe f8fe 	bl	8001e20 <HAL_GetTick>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fe f8fa 	bl	8001e20 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e2d3      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	4920      	ldr	r1, [pc, #128]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c5a:	e045      	b.n	8003ce8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d026      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0219 	bic.w	r2, r3, #25
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4919      	ldr	r1, [pc, #100]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fe f8d3 	bl	8001e20 <HAL_GetTick>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7e:	f7fe f8cf 	bl	8001e20 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e2a8      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
 8003cb0:	e01a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fe f8af 	bl	8001e20 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe f8ab 	bl	8001e20 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d903      	bls.n	8003cdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e284      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
 8003cd8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d06a      	beq.n	8003dca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf4:	4b90      	ldr	r3, [pc, #576]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cfe:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d007      	beq.n	8003d1a <HAL_RCC_OscConfig+0x286>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b18      	cmp	r3, #24
 8003d0e:	d11b      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2b4>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d116      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d1a:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x29e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e257      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d32:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	497d      	ldr	r1, [pc, #500]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d46:	e040      	b.n	8003dca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d023      	beq.n	8003d98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d50:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a78      	ldr	r2, [pc, #480]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f860 	bl	8001e20 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d64:	f7fe f85c 	bl	8001e20 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e235      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d76:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	4969      	ldr	r1, [pc, #420]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
 8003d96:	e018      	b.n	8003dca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d98:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a66      	ldr	r2, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe f83c 	bl	8001e20 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dac:	f7fe f838 	bl	8001e20 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e211      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dbe:	4b5e      	ldr	r3, [pc, #376]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d036      	beq.n	8003e44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d019      	beq.n	8003e12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dde:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4a55      	ldr	r2, [pc, #340]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe f819 	bl	8001e20 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe f815 	bl	8001e20 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1ee      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x35e>
 8003e10:	e018      	b.n	8003e44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	4a48      	ldr	r2, [pc, #288]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd ffff 	bl	8001e20 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fd fffb 	bl	8001e20 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1d4      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e38:	4b3f      	ldr	r3, [pc, #252]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d036      	beq.n	8003ebe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d019      	beq.n	8003e8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e58:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e64:	f7fd ffdc 	bl	8001e20 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e6c:	f7fd ffd8 	bl	8001e20 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1b1      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3d8>
 8003e8a:	e018      	b.n	8003ebe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e98:	f7fd ffc2 	bl	8001e20 <HAL_GetTick>
 8003e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ea0:	f7fd ffbe 	bl	8001e20 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e197      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8086 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd ffa2 	bl	8001e20 <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fd ff9e 	bl	8001e20 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e177      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x480>
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4ac>
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a02      	ldr	r2, [pc, #8]	; (8003f38 <HAL_RCC_OscConfig+0x4a4>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	e021      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e6>
 8003f36:	bf00      	nop
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	58024800 	.word	0x58024800
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d10c      	bne.n	8003f62 <HAL_RCC_OscConfig+0x4ce>
 8003f48:	4b83      	ldr	r3, [pc, #524]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a82      	ldr	r2, [pc, #520]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
 8003f54:	4b80      	ldr	r3, [pc, #512]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a7f      	ldr	r2, [pc, #508]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	e00b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e6>
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a79      	ldr	r2, [pc, #484]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003f74:	f023 0304 	bic.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d015      	beq.n	8003fae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fd ff4d 	bl	8001e20 <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fd ff49 	bl	8001e20 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e120      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fa0:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ee      	beq.n	8003f8a <HAL_RCC_OscConfig+0x4f6>
 8003fac:	e014      	b.n	8003fd8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fd ff37 	bl	8001e20 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd ff33 	bl	8001e20 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e10a      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fcc:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ff 	beq.w	80041e0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fea:	2b18      	cmp	r3, #24
 8003fec:	f000 80ba 	beq.w	8004164 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f040 8095 	bne.w	8004124 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a56      	ldr	r2, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fd ff0b 	bl	8001e20 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd ff07 	bl	8001e20 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0e0      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004020:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402c:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800402e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004030:	4b4a      	ldr	r3, [pc, #296]	; (800415c <HAL_RCC_OscConfig+0x6c8>)
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	430a      	orrs	r2, r1
 8004040:	4945      	ldr	r1, [pc, #276]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	628b      	str	r3, [r1, #40]	; 0x28
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	3b01      	subs	r3, #1
 800404c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	3b01      	subs	r3, #1
 8004056:	025b      	lsls	r3, r3, #9
 8004058:	b29b      	uxth	r3, r3
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	3b01      	subs	r3, #1
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004076:	4938      	ldr	r1, [pc, #224]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004088:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800408a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408c:	4b34      	ldr	r3, [pc, #208]	; (8004160 <HAL_RCC_OscConfig+0x6cc>)
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004094:	00d2      	lsls	r2, r2, #3
 8004096:	4930      	ldr	r1, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f023 020c 	bic.w	r2, r3, #12
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	492b      	ldr	r1, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f023 0202 	bic.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	4927      	ldr	r1, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4a24      	ldr	r2, [pc, #144]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd fe90 	bl	8001e20 <HAL_GetTick>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fe8c 	bl	8001e20 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e065      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x670>
 8004122:	e05d      	b.n	80041e0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd fe76 	bl	8001e20 <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fe72 	bl	8001e20 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e04b      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_OscConfig+0x6c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x6a4>
 8004156:	e043      	b.n	80041e0 <HAL_RCC_OscConfig+0x74c>
 8004158:	58024400 	.word	0x58024400
 800415c:	fffffc0c 	.word	0xfffffc0c
 8004160:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCC_OscConfig+0x758>)
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_OscConfig+0x758>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b01      	cmp	r3, #1
 8004176:	d031      	beq.n	80041dc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0203 	and.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d12a      	bne.n	80041dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d122      	bne.n	80041dc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d11a      	bne.n	80041dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	0a5b      	lsrs	r3, r3, #9
 80041aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d111      	bne.n	80041dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	0c1b      	lsrs	r3, r3, #16
 80041bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d108      	bne.n	80041dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0e1b      	lsrs	r3, r3, #24
 80041ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400

080041f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e19c      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004204:	4b8a      	ldr	r3, [pc, #552]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d910      	bls.n	8004234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b87      	ldr	r3, [pc, #540]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4985      	ldr	r1, [pc, #532]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b83      	ldr	r3, [pc, #524]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e184      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800424c:	429a      	cmp	r2, r3
 800424e:	d908      	bls.n	8004262 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004250:	4b78      	ldr	r3, [pc, #480]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4975      	ldr	r1, [pc, #468]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 800425e:	4313      	orrs	r3, r2
 8004260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800427a:	429a      	cmp	r2, r3
 800427c:	d908      	bls.n	8004290 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800427e:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	496a      	ldr	r1, [pc, #424]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 800428c:	4313      	orrs	r3, r2
 800428e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	4b64      	ldr	r3, [pc, #400]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d908      	bls.n	80042be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042ac:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	495e      	ldr	r1, [pc, #376]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d908      	bls.n	80042ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042da:	4b56      	ldr	r3, [pc, #344]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4953      	ldr	r1, [pc, #332]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	429a      	cmp	r2, r3
 8004306:	d908      	bls.n	800431a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f023 020f 	bic.w	r2, r3, #15
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4947      	ldr	r1, [pc, #284]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004316:	4313      	orrs	r3, r2
 8004318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d055      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004326:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4940      	ldr	r1, [pc, #256]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004334:	4313      	orrs	r3, r2
 8004336:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d107      	bne.n	8004350 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d121      	bne.n	8004390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0f6      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d115      	bne.n	8004390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0ea      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004370:	4b30      	ldr	r3, [pc, #192]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0de      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004380:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0d6      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f023 0207 	bic.w	r2, r3, #7
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4925      	ldr	r1, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fd fd3d 	bl	8001e20 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043aa:	f7fd fd39 	bl	8001e20 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0be      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d1eb      	bne.n	80043aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d208      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f023 020f 	bic.w	r2, r3, #15
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x244>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d214      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 020f 	bic.w	r2, r3, #15
 8004416:	4906      	ldr	r1, [pc, #24]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b04      	ldr	r3, [pc, #16]	; (8004430 <HAL_RCC_ClockConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e086      	b.n	800453e <HAL_RCC_ClockConfig+0x34e>
 8004430:	52002000 	.word	0x52002000
 8004434:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004450:	429a      	cmp	r2, r3
 8004452:	d208      	bcs.n	8004466 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004454:	4b3c      	ldr	r3, [pc, #240]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	4939      	ldr	r1, [pc, #228]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004462:	4313      	orrs	r3, r2
 8004464:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d010      	beq.n	8004494 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	4b34      	ldr	r3, [pc, #208]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800447e:	429a      	cmp	r2, r3
 8004480:	d208      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	492e      	ldr	r1, [pc, #184]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004490:	4313      	orrs	r3, r2
 8004492:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d010      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d208      	bcs.n	80044c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4922      	ldr	r1, [pc, #136]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044da:	429a      	cmp	r2, r3
 80044dc:	d208      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4917      	ldr	r1, [pc, #92]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044f0:	f000 f834 	bl	800455c <HAL_RCC_GetSysClockFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	4912      	ldr	r1, [pc, #72]	; (800454c <HAL_RCC_ClockConfig+0x35c>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCC_ClockConfig+0x358>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <HAL_RCC_ClockConfig+0x35c>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <HAL_RCC_ClockConfig+0x360>)
 8004526:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004528:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <HAL_RCC_ClockConfig+0x364>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_ClockConfig+0x368>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fc2a 	bl	8001d8c <HAL_InitTick>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
 800454c:	0800c520 	.word	0x0800c520
 8004550:	24000078 	.word	0x24000078
 8004554:	24000074 	.word	0x24000074
 8004558:	2400007c 	.word	0x2400007c

0800455c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004562:	4bb3      	ldr	r3, [pc, #716]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456a:	2b18      	cmp	r3, #24
 800456c:	f200 8155 	bhi.w	800481a <HAL_RCC_GetSysClockFreq+0x2be>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	080045dd 	.word	0x080045dd
 800457c:	0800481b 	.word	0x0800481b
 8004580:	0800481b 	.word	0x0800481b
 8004584:	0800481b 	.word	0x0800481b
 8004588:	0800481b 	.word	0x0800481b
 800458c:	0800481b 	.word	0x0800481b
 8004590:	0800481b 	.word	0x0800481b
 8004594:	0800481b 	.word	0x0800481b
 8004598:	08004603 	.word	0x08004603
 800459c:	0800481b 	.word	0x0800481b
 80045a0:	0800481b 	.word	0x0800481b
 80045a4:	0800481b 	.word	0x0800481b
 80045a8:	0800481b 	.word	0x0800481b
 80045ac:	0800481b 	.word	0x0800481b
 80045b0:	0800481b 	.word	0x0800481b
 80045b4:	0800481b 	.word	0x0800481b
 80045b8:	08004609 	.word	0x08004609
 80045bc:	0800481b 	.word	0x0800481b
 80045c0:	0800481b 	.word	0x0800481b
 80045c4:	0800481b 	.word	0x0800481b
 80045c8:	0800481b 	.word	0x0800481b
 80045cc:	0800481b 	.word	0x0800481b
 80045d0:	0800481b 	.word	0x0800481b
 80045d4:	0800481b 	.word	0x0800481b
 80045d8:	0800460f 	.word	0x0800460f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045dc:	4b94      	ldr	r3, [pc, #592]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045e8:	4b91      	ldr	r3, [pc, #580]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	4a90      	ldr	r2, [pc, #576]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80045fa:	e111      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045fc:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045fe:	61bb      	str	r3, [r7, #24]
    break;
 8004600:	e10e      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004602:	4b8d      	ldr	r3, [pc, #564]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004604:	61bb      	str	r3, [r7, #24]
    break;
 8004606:	e10b      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004608:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800460a:	61bb      	str	r3, [r7, #24]
    break;
 800460c:	e108      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004618:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004622:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004624:	4b82      	ldr	r3, [pc, #520]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800462e:	4b80      	ldr	r3, [pc, #512]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	08db      	lsrs	r3, r3, #3
 8004634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80e1 	beq.w	8004814 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b02      	cmp	r3, #2
 8004656:	f000 8083 	beq.w	8004760 <HAL_RCC_GetSysClockFreq+0x204>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b02      	cmp	r3, #2
 800465e:	f200 80a1 	bhi.w	80047a4 <HAL_RCC_GetSysClockFreq+0x248>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x114>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d056      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x1c0>
 800466e:	e099      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02d      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800467c:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	08db      	lsrs	r3, r3, #3
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b62      	ldr	r3, [pc, #392]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046d6:	e087      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004844 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800471a:	e065      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004848 <HAL_RCC_GetSysClockFreq+0x2ec>
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004742:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004840 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475e:	e043      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800484c <HAL_RCC_GetSysClockFreq+0x2f0>
 800476e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004782:	ed97 6a02 	vldr	s12, [r7, #8]
 8004786:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004840 <HAL_RCC_GetSysClockFreq+0x2e4>
 800478a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a2:	e021      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004848 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004840 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f2:	3301      	adds	r3, #1
 80047f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004800:	edd7 6a07 	vldr	s13, [r7, #28]
 8004804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	ee17 3a90 	vmov	r3, s15
 8004810:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004812:	e005      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
    break;
 8004818:	e002      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800481c:	61bb      	str	r3, [r7, #24]
    break;
 800481e:	bf00      	nop
  }

  return sysclockfreq;
 8004820:	69bb      	ldr	r3, [r7, #24]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
 8004834:	03d09000 	.word	0x03d09000
 8004838:	003d0900 	.word	0x003d0900
 800483c:	007a1200 	.word	0x007a1200
 8004840:	46000000 	.word	0x46000000
 8004844:	4c742400 	.word	0x4c742400
 8004848:	4a742400 	.word	0x4a742400
 800484c:	4af42400 	.word	0x4af42400

08004850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004856:	f7ff fe81 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800485a:	4602      	mov	r2, r0
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	490f      	ldr	r1, [pc, #60]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800488c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800488e:	4a07      	ldr	r2, [pc, #28]	; (80048ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58024400 	.word	0x58024400
 80048a4:	0800c520 	.word	0x0800c520
 80048a8:	24000078 	.word	0x24000078
 80048ac:	24000074 	.word	0x24000074

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b8:	2300      	movs	r3, #0
 80048ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048bc:	2300      	movs	r3, #0
 80048be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d03f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d4:	d02a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048da:	d824      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e0:	d018      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e6:	d81e      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f0:	d007      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048f2:	e018      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4ba4      	ldr	r3, [pc, #656]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4aa3      	ldr	r2, [pc, #652]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004900:	e015      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fecb 	bl	80056a4 <RCCEx_PLL2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004912:	e00c      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3324      	adds	r3, #36	; 0x24
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ff74 	bl	8005808 <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004924:	e003      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	75fb      	strb	r3, [r7, #23]
      break;
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800492c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004934:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	4991      	ldr	r1, [pc, #580]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	650b      	str	r3, [r1, #80]	; 0x50
 8004946:	e001      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d03d      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	2b04      	cmp	r3, #4
 800495e:	d826      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800497d 	.word	0x0800497d
 800496c:	0800498b 	.word	0x0800498b
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a81      	ldr	r2, [pc, #516]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fe87 	bl	80056a4 <RCCEx_PLL2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3324      	adds	r3, #36	; 0x24
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 ff30 	bl	8005808 <RCCEx_PLL3_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c0:	f023 0207 	bic.w	r2, r3, #7
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	496f      	ldr	r1, [pc, #444]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	650b      	str	r3, [r1, #80]	; 0x50
 80049ce:	e001      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d051      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80049ea:	d036      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ec:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80049f0:	d830      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80049f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049f6:	d032      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80049f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049fc:	d82a      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80049fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a02:	d02e      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004a04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a08:	d824      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0e:	d018      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d81e      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a1e:	d007      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004a20:	e018      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a22:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a2e:	e019      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe34 	bl	80056a4 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a40:	e010      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3324      	adds	r3, #36	; 0x24
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fedd 	bl	8005808 <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a52:	e007      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a78:	4943      	ldr	r1, [pc, #268]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d051      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a96:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004a9a:	d036      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004a9c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004aa0:	d830      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa6:	d032      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aac:	d82a      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004aae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab2:	d02e      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004ab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab8:	d824      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004abe:	d018      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac4:	d81e      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ace:	d007      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004ad0:	e018      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ade:	e019      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fddc 	bl	80056a4 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004af0:	e010      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3324      	adds	r3, #36	; 0x24
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fe85 	bl	8005808 <RCCEx_PLL3_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b02:	e007      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	e004      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e002      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b28:	4917      	ldr	r1, [pc, #92]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b2e:	e001      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d035      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	2b30      	cmp	r3, #48	; 0x30
 8004b46:	d01c      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d817      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d00c      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d813      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d019      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d10f      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004b68:	e011      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd97 	bl	80056a4 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004b7a:	e008      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	e005      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8004b82:	bf00      	nop
 8004b84:	e003      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
      break;
 8004b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b94:	4ba3      	ldr	r3, [pc, #652]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba0:	49a0      	ldr	r1, [pc, #640]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ba6:	e001      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d047      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc0:	d030      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc6:	d82a      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bcc:	d02c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd2:	d824      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d018      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d81e      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d007      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bea:	e018      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a8c      	ldr	r2, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bf8:	e017      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fd4f 	bl	80056a4 <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c0a:	e00e      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fdf8 	bl	8005808 <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c1c:	e005      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004c24:	bf00      	nop
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c30:	4b7c      	ldr	r3, [pc, #496]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	4979      	ldr	r1, [pc, #484]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	650b      	str	r3, [r1, #80]	; 0x50
 8004c42:	e001      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d049      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5c:	d02e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c62:	d828      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c68:	d02a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c6e:	d822      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c74:	d026      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c7a:	d81c      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c80:	d010      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c86:	d816      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c90:	d111      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2101      	movs	r1, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fd03 	bl	80056a4 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e012      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fdac 	bl	8005808 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e009      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e006      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e004      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004cc0:	bf00      	nop
 8004cc2:	e002      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cd0:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	4951      	ldr	r1, [pc, #324]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d04b      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cfe:	d02e      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d04:	d828      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d02a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d822      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004d12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d16:	d026      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004d18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d1c:	d81c      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d22:	d010      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d28:	d816      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01d      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d32:	d111      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fcb2 	bl	80056a4 <RCCEx_PLL2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d44:	e012      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fd5b 	bl	8005808 <RCCEx_PLL3_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d56:	e009      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5c:	e006      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e004      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d72:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d80:	4928      	ldr	r1, [pc, #160]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	658b      	str	r3, [r1, #88]	; 0x58
 8004d86:	e001      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d02f      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da0:	d00e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da6:	d814      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db0:	d10f      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dbe:	e00c      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fc6c 	bl	80056a4 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dec:	490d      	ldr	r1, [pc, #52]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	650b      	str	r3, [r1, #80]	; 0x50
 8004df2:	e001      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d034      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d81d      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e4f 	.word	0x08004e4f
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e37 	.word	0x08004e37
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e28:	4bb1      	ldr	r3, [pc, #708]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	4ab0      	ldr	r2, [pc, #704]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fc31 	bl	80056a4 <RCCEx_PLL2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8004e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e56:	4ba6      	ldr	r3, [pc, #664]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	49a3      	ldr	r1, [pc, #652]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e68:	e001      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8086 	beq.w	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e7c:	4b9d      	ldr	r3, [pc, #628]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a9c      	ldr	r2, [pc, #624]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e88:	f7fc ffca 	bl	8001e20 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e8e:	e009      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fc ffc6 	bl	8001e20 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
 8004e9c:	d902      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea4:	4b93      	ldr	r3, [pc, #588]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ef      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d166      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eb6:	4b8e      	ldr	r3, [pc, #568]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ec0:	4053      	eors	r3, r2
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d013      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eca:	4b89      	ldr	r3, [pc, #548]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ed4:	4b86      	ldr	r3, [pc, #536]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a85      	ldr	r2, [pc, #532]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee0:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a82      	ldr	r2, [pc, #520]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004eec:	4a80      	ldr	r2, [pc, #512]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d115      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fc ff8f 	bl	8001e20 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f04:	e00b      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc ff8b 	bl	8001e20 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d902      	bls.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f1c:	e005      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1e:	4b74      	ldr	r3, [pc, #464]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ed      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d126      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004f40:	4b6b      	ldr	r3, [pc, #428]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f4e:	0919      	lsrs	r1, r3, #4
 8004f50:	4b69      	ldr	r3, [pc, #420]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004f52:	400b      	ands	r3, r1
 8004f54:	4966      	ldr	r1, [pc, #408]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
 8004f5a:	e005      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f66:	6113      	str	r3, [r2, #16]
 8004f68:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f76:	495e      	ldr	r1, [pc, #376]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	670b      	str	r3, [r1, #112]	; 0x70
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	75bb      	strb	r3, [r7, #22]
 8004f82:	e001      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d07e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f98:	2b28      	cmp	r3, #40	; 0x28
 8004f9a:	d867      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08005073 	.word	0x08005073
 8004fa8:	0800506d 	.word	0x0800506d
 8004fac:	0800506d 	.word	0x0800506d
 8004fb0:	0800506d 	.word	0x0800506d
 8004fb4:	0800506d 	.word	0x0800506d
 8004fb8:	0800506d 	.word	0x0800506d
 8004fbc:	0800506d 	.word	0x0800506d
 8004fc0:	0800506d 	.word	0x0800506d
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	0800506d 	.word	0x0800506d
 8004fcc:	0800506d 	.word	0x0800506d
 8004fd0:	0800506d 	.word	0x0800506d
 8004fd4:	0800506d 	.word	0x0800506d
 8004fd8:	0800506d 	.word	0x0800506d
 8004fdc:	0800506d 	.word	0x0800506d
 8004fe0:	0800506d 	.word	0x0800506d
 8004fe4:	0800505b 	.word	0x0800505b
 8004fe8:	0800506d 	.word	0x0800506d
 8004fec:	0800506d 	.word	0x0800506d
 8004ff0:	0800506d 	.word	0x0800506d
 8004ff4:	0800506d 	.word	0x0800506d
 8004ff8:	0800506d 	.word	0x0800506d
 8004ffc:	0800506d 	.word	0x0800506d
 8005000:	0800506d 	.word	0x0800506d
 8005004:	08005073 	.word	0x08005073
 8005008:	0800506d 	.word	0x0800506d
 800500c:	0800506d 	.word	0x0800506d
 8005010:	0800506d 	.word	0x0800506d
 8005014:	0800506d 	.word	0x0800506d
 8005018:	0800506d 	.word	0x0800506d
 800501c:	0800506d 	.word	0x0800506d
 8005020:	0800506d 	.word	0x0800506d
 8005024:	08005073 	.word	0x08005073
 8005028:	0800506d 	.word	0x0800506d
 800502c:	0800506d 	.word	0x0800506d
 8005030:	0800506d 	.word	0x0800506d
 8005034:	0800506d 	.word	0x0800506d
 8005038:	0800506d 	.word	0x0800506d
 800503c:	0800506d 	.word	0x0800506d
 8005040:	0800506d 	.word	0x0800506d
 8005044:	08005073 	.word	0x08005073
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	2101      	movs	r1, #1
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb28 	bl	80056a4 <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005058:	e00c      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3324      	adds	r3, #36	; 0x24
 800505e:	2101      	movs	r1, #1
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fbd1 	bl	8005808 <RCCEx_PLL3_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
      break;
 8005070:	e000      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005086:	491a      	ldr	r1, [pc, #104]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005088:	4313      	orrs	r3, r2
 800508a:	654b      	str	r3, [r1, #84]	; 0x54
 800508c:	e001      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d03e      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d820      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050c5 	.word	0x080050c5
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	080050fd 	.word	0x080050fd
 80050c0:	080050fd 	.word	0x080050fd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2101      	movs	r1, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 faea 	bl	80056a4 <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050d4:	e013      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fb93 	bl	8005808 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80050e6:	e00a      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e007      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80050ee:	bf00      	nop
 80050f0:	58024400 	.word	0x58024400
 80050f4:	58024800 	.word	0x58024800
 80050f8:	00ffffcf 	.word	0x00ffffcf
      break;
 80050fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005104:	4b9f      	ldr	r3, [pc, #636]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f023 0207 	bic.w	r2, r3, #7
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	499c      	ldr	r1, [pc, #624]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	654b      	str	r3, [r1, #84]	; 0x54
 8005116:	e001      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d039      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512e:	2b05      	cmp	r3, #5
 8005130:	d820      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	0800517b 	.word	0x0800517b
 800513c:	08005151 	.word	0x08005151
 8005140:	08005163 	.word	0x08005163
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	2101      	movs	r1, #1
 8005156:	4618      	mov	r0, r3
 8005158:	f000 faa4 	bl	80056a4 <RCCEx_PLL2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005160:	e00c      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3324      	adds	r3, #36	; 0x24
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fb4d 	bl	8005808 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005172:	e003      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
      break;
 8005178:	e000      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800517a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005182:	4b80      	ldr	r3, [pc, #512]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	f023 0207 	bic.w	r2, r3, #7
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	497c      	ldr	r1, [pc, #496]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005192:	4313      	orrs	r3, r2
 8005194:	658b      	str	r3, [r1, #88]	; 0x58
 8005196:	e001      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d04b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b2:	d02e      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80051b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b8:	d828      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d02a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d822      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051ca:	d026      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80051cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051d0:	d81c      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d6:	d010      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80051d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051dc:	d816      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01d      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80051e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e6:	d111      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fa58 	bl	80056a4 <RCCEx_PLL2_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051f8:	e012      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3324      	adds	r3, #36	; 0x24
 80051fe:	2102      	movs	r1, #2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb01 	bl	8005808 <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800520a:	e009      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
      break;
 8005210:	e006      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005212:	bf00      	nop
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800521e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005226:	4b57      	ldr	r3, [pc, #348]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	4953      	ldr	r1, [pc, #332]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	654b      	str	r3, [r1, #84]	; 0x54
 800523a:	e001      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d04b      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005252:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005256:	d02e      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005258:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800525c:	d828      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d02a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d822      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800526a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800526e:	d026      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005274:	d81c      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527a:	d010      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d816      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01d      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528a:	d111      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa06 	bl	80056a4 <RCCEx_PLL2_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800529c:	e012      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	2102      	movs	r1, #2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 faaf 	bl	8005808 <RCCEx_PLL3_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052ae:	e009      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
      break;
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052b6:	bf00      	nop
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80052c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d8:	492a      	ldr	r1, [pc, #168]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	658b      	str	r3, [r1, #88]	; 0x58
 80052de:	e001      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d04d      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052fa:	d02e      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80052fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005300:	d828      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005306:	d02a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530c:	d822      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800530e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005312:	d026      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005314:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005318:	d81c      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800531a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531e:	d010      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005324:	d816      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532e:	d111      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f9b4 	bl	80056a4 <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005340:	e012      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3324      	adds	r3, #36	; 0x24
 8005346:	2102      	movs	r1, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fa5d 	bl	8005808 <RCCEx_PLL3_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005352:	e009      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
      break;
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800535a:	bf00      	nop
 800535c:	e004      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800537c:	4901      	ldr	r1, [pc, #4]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	658b      	str	r3, [r1, #88]	; 0x58
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d018      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a0:	d10a      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3324      	adds	r3, #36	; 0x24
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fa2d 	bl	8005808 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80053b8:	4b8a      	ldr	r3, [pc, #552]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c4:	4987      	ldr	r1, [pc, #540]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e0:	d10a      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fa0d 	bl	8005808 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053f8:	4b7a      	ldr	r3, [pc, #488]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	4977      	ldr	r1, [pc, #476]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005408:	4313      	orrs	r3, r2
 800540a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d034      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005422:	d01d      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005428:	d817      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d009      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005434:	e011      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f931 	bl	80056a4 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005446:	e00c      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3324      	adds	r3, #36	; 0x24
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f9da 	bl	8005808 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005458:	e003      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
      break;
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005468:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005476:	495b      	ldr	r1, [pc, #364]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005478:	4313      	orrs	r3, r2
 800547a:	658b      	str	r3, [r1, #88]	; 0x58
 800547c:	e001      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d033      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005498:	d01c      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800549a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800549e:	d816      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a4:	d003      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80054a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054aa:	d007      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	4a4c      	ldr	r2, [pc, #304]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3324      	adds	r3, #36	; 0x24
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f9a0 	bl	8005808 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054dc:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	493e      	ldr	r1, [pc, #248]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	654b      	str	r3, [r1, #84]	; 0x54
 80054f0:	e001      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d029      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d007      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005510:	e00f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800551e:	e00b      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2102      	movs	r1, #2
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f8bc 	bl	80056a4 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005530:	e002      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800553e:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	4926      	ldr	r1, [pc, #152]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800554c:	4313      	orrs	r3, r2
 800554e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005550:	e001      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3324      	adds	r3, #36	; 0x24
 8005566:	2102      	movs	r1, #2
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f94d 	bl	8005808 <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d033      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558c:	d017      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800558e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005592:	d811      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005598:	d013      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800559a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559e:	d80b      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d010      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a8:	d106      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80055b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055b6:	e007      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e004      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80055c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055da:	4902      	ldr	r1, [pc, #8]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	654b      	str	r3, [r1, #84]	; 0x54
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f8:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	4926      	ldr	r1, [pc, #152]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005616:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005622:	491f      	ldr	r1, [pc, #124]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005624:	4313      	orrs	r3, r2
 8005626:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00d      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	4a19      	ldr	r2, [pc, #100]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800563a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800563e:	6113      	str	r3, [r2, #16]
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800564a:	4915      	ldr	r1, [pc, #84]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800564c:	4313      	orrs	r3, r2
 800564e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	da08      	bge.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	490e      	ldr	r1, [pc, #56]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005666:	4313      	orrs	r3, r2
 8005668:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005684:	4906      	ldr	r1, [pc, #24]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005686:	4313      	orrs	r3, r2
 8005688:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800568a:	7dbb      	ldrb	r3, [r7, #22]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400

080056a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056b2:	4b53      	ldr	r3, [pc, #332]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d101      	bne.n	80056c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e099      	b.n	80057f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056c2:	4b4f      	ldr	r3, [pc, #316]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a4e      	ldr	r2, [pc, #312]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80056c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ce:	f7fc fba7 	bl	8001e20 <HAL_GetTick>
 80056d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056d6:	f7fc fba3 	bl	8001e20 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e086      	b.n	80057f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	031b      	lsls	r3, r3, #12
 8005702:	493f      	ldr	r1, [pc, #252]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	628b      	str	r3, [r1, #40]	; 0x28
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	3b01      	subs	r3, #1
 800570e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	3b01      	subs	r3, #1
 8005718:	025b      	lsls	r3, r3, #9
 800571a:	b29b      	uxth	r3, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	3b01      	subs	r3, #1
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	3b01      	subs	r3, #1
 8005732:	061b      	lsls	r3, r3, #24
 8005734:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005738:	4931      	ldr	r1, [pc, #196]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800573e:	4b30      	ldr	r3, [pc, #192]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	492d      	ldr	r1, [pc, #180]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005750:	4b2b      	ldr	r3, [pc, #172]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	f023 0220 	bic.w	r2, r3, #32
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4928      	ldr	r1, [pc, #160]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005762:	4b27      	ldr	r3, [pc, #156]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	4a26      	ldr	r2, [pc, #152]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005768:	f023 0310 	bic.w	r3, r3, #16
 800576c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800576e:	4b24      	ldr	r3, [pc, #144]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005772:	4b24      	ldr	r3, [pc, #144]	; (8005804 <RCCEx_PLL2_Config+0x160>)
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	69d2      	ldr	r2, [r2, #28]
 800577a:	00d2      	lsls	r2, r2, #3
 800577c:	4920      	ldr	r1, [pc, #128]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005788:	f043 0310 	orr.w	r3, r3, #16
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 800579a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800579e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057a0:	e00f      	b.n	80057c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d106      	bne.n	80057b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057b4:	e005      	b.n	80057c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	4a11      	ldr	r2, [pc, #68]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a0e      	ldr	r2, [pc, #56]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ce:	f7fc fb27 	bl	8001e20 <HAL_GetTick>
 80057d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057d4:	e008      	b.n	80057e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057d6:	f7fc fb23 	bl	8001e20 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e006      	b.n	80057f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	58024400 	.word	0x58024400
 8005804:	ffff0007 	.word	0xffff0007

08005808 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005816:	4b53      	ldr	r3, [pc, #332]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d101      	bne.n	8005826 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e099      	b.n	800595a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005826:	4b4f      	ldr	r3, [pc, #316]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4e      	ldr	r2, [pc, #312]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005832:	f7fc faf5 	bl	8001e20 <HAL_GetTick>
 8005836:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005838:	e008      	b.n	800584c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800583a:	f7fc faf1 	bl	8001e20 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e086      	b.n	800595a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005858:	4b42      	ldr	r3, [pc, #264]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	051b      	lsls	r3, r3, #20
 8005866:	493f      	ldr	r1, [pc, #252]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	628b      	str	r3, [r1, #40]	; 0x28
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	3b01      	subs	r3, #1
 800587c:	025b      	lsls	r3, r3, #9
 800587e:	b29b      	uxth	r3, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	3b01      	subs	r3, #1
 8005896:	061b      	lsls	r3, r3, #24
 8005898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800589c:	4931      	ldr	r1, [pc, #196]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058a2:	4b30      	ldr	r3, [pc, #192]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	492d      	ldr	r1, [pc, #180]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	4928      	ldr	r1, [pc, #160]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	4a26      	ldr	r2, [pc, #152]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058d2:	4b24      	ldr	r3, [pc, #144]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <RCCEx_PLL3_Config+0x160>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	69d2      	ldr	r2, [r2, #28]
 80058de:	00d2      	lsls	r2, r2, #3
 80058e0:	4920      	ldr	r1, [pc, #128]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058e6:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a19      	ldr	r2, [pc, #100]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 80058fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005904:	e00f      	b.n	8005926 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005918:	e005      	b.n	8005926 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a11      	ldr	r2, [pc, #68]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800592c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fc fa75 	bl	8001e20 <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005938:	e008      	b.n	800594c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800593a:	f7fc fa71 	bl	8001e20 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e006      	b.n	800595a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <RCCEx_PLL3_Config+0x15c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
 8005968:	ffff0007 	.word	0xffff0007

0800596c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e0f1      	b.n	8005b62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a78      	ldr	r2, [pc, #480]	; (8005b6c <HAL_SPI_Init+0x200>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <HAL_SPI_Init+0x42>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a77      	ldr	r2, [pc, #476]	; (8005b70 <HAL_SPI_Init+0x204>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00a      	beq.n	80059ae <HAL_SPI_Init+0x42>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a75      	ldr	r2, [pc, #468]	; (8005b74 <HAL_SPI_Init+0x208>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d005      	beq.n	80059ae <HAL_SPI_Init+0x42>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d901      	bls.n	80059ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0d9      	b.n	8005b62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fba2 	bl	80060f8 <SPI_GetPacketSize>
 80059b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6c      	ldr	r2, [pc, #432]	; (8005b6c <HAL_SPI_Init+0x200>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00c      	beq.n	80059da <HAL_SPI_Init+0x6e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6a      	ldr	r2, [pc, #424]	; (8005b70 <HAL_SPI_Init+0x204>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <HAL_SPI_Init+0x6e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a69      	ldr	r2, [pc, #420]	; (8005b74 <HAL_SPI_Init+0x208>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d002      	beq.n	80059da <HAL_SPI_Init+0x6e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d811      	bhi.n	80059fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059de:	4a63      	ldr	r2, [pc, #396]	; (8005b6c <HAL_SPI_Init+0x200>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a61      	ldr	r2, [pc, #388]	; (8005b70 <HAL_SPI_Init+0x204>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_SPI_Init+0x8c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a60      	ldr	r2, [pc, #384]	; (8005b74 <HAL_SPI_Init+0x208>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d104      	bne.n	8005a02 <HAL_SPI_Init+0x96>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d901      	bls.n	8005a02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0af      	b.n	8005b62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fb ff0a 	bl	8001830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005a3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d119      	bne.n	8005a7e <HAL_SPI_Init+0x112>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10c      	bne.n	8005a7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6c:	d107      	bne.n	8005a7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	ea42 0103 	orr.w	r1, r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d113      	bne.n	8005b1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40013000 	.word	0x40013000
 8005b70:	40003800 	.word	0x40003800
 8005b74:	40003c00 	.word	0x40003c00

08005b78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_SPI_Transmit+0x2a>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e1d7      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005baa:	f7fc f939 	bl	8001e20 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d007      	beq.n	8005bcc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005bc8:	7efb      	ldrb	r3, [r7, #27]
 8005bca:	e1c2      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_Transmit+0x60>
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005be4:	7efb      	ldrb	r3, [r7, #27]
 8005be6:	e1b4      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2203      	movs	r2, #3
 8005bec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005c38:	d107      	bne.n	8005c4a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	4b96      	ldr	r3, [pc, #600]	; (8005eac <HAL_SPI_Transmit+0x334>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	88f9      	ldrh	r1, [r7, #6]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c76:	d107      	bne.n	8005c88 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d947      	bls.n	8005d20 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c90:	e03f      	b.n	8005d12 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d114      	bne.n	8005cca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb0:	1d1a      	adds	r2, r3, #4
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005cc8:	e023      	b.n	8005d12 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cca:	f7fc f8a9 	bl	8001e20 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d803      	bhi.n	8005ce2 <HAL_SPI_Transmit+0x16a>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce0:	d102      	bne.n	8005ce8 <HAL_SPI_Transmit+0x170>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d114      	bne.n	8005d12 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f937 	bl	8005f5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e11f      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1b9      	bne.n	8005c92 <HAL_SPI_Transmit+0x11a>
 8005d1e:	e0f2      	b.n	8005f06 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	f240 80e7 	bls.w	8005ef8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d2a:	e05d      	b.n	8005de8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d132      	bne.n	8005da0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d918      	bls.n	8005d78 <HAL_SPI_Transmit+0x200>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d014      	beq.n	8005d78 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b02      	subs	r3, #2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d76:	e037      	b.n	8005de8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d9e:	e023      	b.n	8005de8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da0:	f7fc f83e 	bl	8001e20 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d803      	bhi.n	8005db8 <HAL_SPI_Transmit+0x240>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db6:	d102      	bne.n	8005dbe <HAL_SPI_Transmit+0x246>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d114      	bne.n	8005de8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f8cc 	bl	8005f5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0b4      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d19b      	bne.n	8005d2c <HAL_SPI_Transmit+0x1b4>
 8005df4:	e087      	b.n	8005f06 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d155      	bne.n	8005eb0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d918      	bls.n	8005e42 <HAL_SPI_Transmit+0x2ca>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d914      	bls.n	8005e42 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b04      	subs	r3, #4
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e40:	e05a      	b.n	8005ef8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d917      	bls.n	8005e7e <HAL_SPI_Transmit+0x306>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d013      	beq.n	8005e7e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b02      	subs	r3, #2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e7c:	e03c      	b.n	8005ef8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3320      	adds	r3, #32
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005ea8:	e026      	b.n	8005ef8 <HAL_SPI_Transmit+0x380>
 8005eaa:	bf00      	nop
 8005eac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb0:	f7fb ffb6 	bl	8001e20 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d803      	bhi.n	8005ec8 <HAL_SPI_Transmit+0x350>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_Transmit+0x356>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d114      	bne.n	8005ef8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f844 	bl	8005f5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e02c      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f af78 	bne.w	8005df6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2108      	movs	r1, #8
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f8c3 	bl	800609c <SPI_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f815 	bl	8005f5c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005f50:	7efb      	ldrb	r3, [r7, #27]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop

08005f5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0208 	orr.w	r2, r2, #8
 8005f7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0210 	orr.w	r2, r2, #16
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6919      	ldr	r1, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b3c      	ldr	r3, [pc, #240]	; (8006098 <SPI_CloseTransfer+0x13c>)
 8005fa8:	400b      	ands	r3, r1
 8005faa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005fba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d014      	beq.n	8005ff2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00f      	beq.n	8005ff2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0220 	orr.w	r2, r2, #32
 8005ff0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d014      	beq.n	8006028 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006026:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006038:	f043 0201 	orr.w	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006050:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006062:	f043 0208 	orr.w	r2, r3, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800607a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	fffffc90 	.word	0xfffffc90

0800609c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80060ac:	e010      	b.n	80060d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ae:	f7fb feb7 	bl	8001e20 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d803      	bhi.n	80060c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c4:	d102      	bne.n	80060cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d0df      	beq.n	80060ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3307      	adds	r3, #7
 8006116:	08db      	lsrs	r3, r3, #3
 8006118:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e049      	b.n	80061d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fb fbf5 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fb29 	bl	80067c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e05e      	b.n	80062b2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2b      	ldr	r2, [pc, #172]	; (80062c0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02c      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d027      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <HAL_TIM_Base_Start_IT+0xec>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a24      	ldr	r2, [pc, #144]	; (80062cc <HAL_TIM_Base_Start_IT+0xf0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <HAL_TIM_Base_Start_IT+0xf4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_TIM_Base_Start_IT+0xf8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <HAL_TIM_Base_Start_IT+0xfc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1e      	ldr	r2, [pc, #120]	; (80062dc <HAL_TIM_Base_Start_IT+0x100>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x94>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <HAL_TIM_Base_Start_IT+0x104>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d115      	bne.n	800629c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <HAL_TIM_Base_Start_IT+0x108>)
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b06      	cmp	r3, #6
 8006280:	d015      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0xd2>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006288:	d011      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0201 	orr.w	r2, r2, #1
 8006298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629a:	e008      	b.n	80062ae <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e000      	b.n	80062b0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40014000 	.word	0x40014000
 80062dc:	4000e000 	.word	0x4000e000
 80062e0:	4000e400 	.word	0x4000e400
 80062e4:	00010007 	.word	0x00010007

080062e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f241 1311 	movw	r3, #4369	; 0x1111
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <HAL_TIM_Base_Stop_IT+0x48>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	f240 4344 	movw	r3, #1092	; 0x444
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <HAL_TIM_Base_Stop_IT+0x48>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b02      	cmp	r3, #2
 800635a:	d122      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d11b      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f06f 0202 	mvn.w	r2, #2
 8006372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f9fd 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 800638e:	e005      	b.n	800639c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9ef 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa00 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d122      	bne.n	80063f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d11b      	bne.n	80063f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f06f 0204 	mvn.w	r2, #4
 80063c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f9d3 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 80063e2:	e005      	b.n	80063f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9c5 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9d6 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b08      	cmp	r3, #8
 8006402:	d122      	bne.n	800644a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d11b      	bne.n	800644a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0208 	mvn.w	r2, #8
 800641a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2204      	movs	r2, #4
 8006420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9a9 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 8006436:	e005      	b.n	8006444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f99b 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9ac 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b10      	cmp	r3, #16
 8006456:	d122      	bne.n	800649e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d11b      	bne.n	800649e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f06f 0210 	mvn.w	r2, #16
 800646e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2208      	movs	r2, #8
 8006474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f97f 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 800648a:	e005      	b.n	8006498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f971 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f982 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10e      	bne.n	80064ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d107      	bne.n	80064ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f06f 0201 	mvn.w	r2, #1
 80064c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fb f81f 	bl	8001508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d10e      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d107      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fb51 	bl	8006b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d10e      	bne.n	8006524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d107      	bne.n	8006524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fb44 	bl	8006bac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d10e      	bne.n	8006550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d107      	bne.n	8006550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f930 	bl	80067b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b20      	cmp	r3, #32
 800655c:	d10e      	bne.n	800657c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b20      	cmp	r3, #32
 800656a:	d107      	bne.n	800657c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0220 	mvn.w	r2, #32
 8006574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb04 	bl	8006b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_ConfigClockSource+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e0dc      	b.n	800675a <HAL_TIM_ConfigClockSource+0x1d6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	4b6a      	ldr	r3, [pc, #424]	; (8006764 <HAL_TIM_ConfigClockSource+0x1e0>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a64      	ldr	r2, [pc, #400]	; (8006768 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	f000 80a9 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 80065dc:	4a62      	ldr	r2, [pc, #392]	; (8006768 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f200 80ae 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 80065e4:	4a61      	ldr	r2, [pc, #388]	; (800676c <HAL_TIM_ConfigClockSource+0x1e8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f000 80a1 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 80065ec:	4a5f      	ldr	r2, [pc, #380]	; (800676c <HAL_TIM_ConfigClockSource+0x1e8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	f200 80a6 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 80065f4:	4a5e      	ldr	r2, [pc, #376]	; (8006770 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	f000 8099 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 80065fc:	4a5c      	ldr	r2, [pc, #368]	; (8006770 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	f200 809e 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006604:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006608:	f000 8091 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 800660c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006610:	f200 8096 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006618:	f000 8089 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 800661c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006620:	f200 808e 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006628:	d03e      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0x124>
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	f200 8087 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	f000 8086 	beq.w	8006746 <HAL_TIM_ConfigClockSource+0x1c2>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d87f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006640:	2b70      	cmp	r3, #112	; 0x70
 8006642:	d01a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0xf6>
 8006644:	2b70      	cmp	r3, #112	; 0x70
 8006646:	d87b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006648:	2b60      	cmp	r3, #96	; 0x60
 800664a:	d050      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x16a>
 800664c:	2b60      	cmp	r3, #96	; 0x60
 800664e:	d877      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006650:	2b50      	cmp	r3, #80	; 0x50
 8006652:	d03c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x14a>
 8006654:	2b50      	cmp	r3, #80	; 0x50
 8006656:	d873      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d058      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x18a>
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d86f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006660:	2b30      	cmp	r3, #48	; 0x30
 8006662:	d064      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d86b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d060      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d867      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 8006674:	2b10      	cmp	r3, #16
 8006676:	d05a      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x1aa>
 8006678:	e062      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f000 f9bf 	bl	8006a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800669c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	609a      	str	r2, [r3, #8]
      break;
 80066a6:	e04f      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6899      	ldr	r1, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f000 f9a8 	bl	8006a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ca:	609a      	str	r2, [r3, #8]
      break;
 80066cc:	e03c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 f918 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2150      	movs	r1, #80	; 0x50
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 f972 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 80066ec:	e02c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 f937 	bl	800696e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2160      	movs	r1, #96	; 0x60
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f962 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 800670c:	e01c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	461a      	mov	r2, r3
 800671c:	f000 f8f8 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2140      	movs	r1, #64	; 0x40
 8006726:	4618      	mov	r0, r3
 8006728:	f000 f952 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 800672c:	e00c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 f949 	bl	80069d0 <TIM_ITRx_SetConfig>
      break;
 800673e:	e003      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	ffceff88 	.word	0xffceff88
 8006768:	00100040 	.word	0x00100040
 800676c:	00100030 	.word	0x00100030
 8006770:	00100020 	.word	0x00100020

08006774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a44      	ldr	r2, [pc, #272]	; (80068e8 <TIM_Base_SetConfig+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a41      	ldr	r2, [pc, #260]	; (80068ec <TIM_Base_SetConfig+0x128>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a40      	ldr	r2, [pc, #256]	; (80068f0 <TIM_Base_SetConfig+0x12c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a3f      	ldr	r2, [pc, #252]	; (80068f4 <TIM_Base_SetConfig+0x130>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0x40>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3e      	ldr	r2, [pc, #248]	; (80068f8 <TIM_Base_SetConfig+0x134>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a33      	ldr	r2, [pc, #204]	; (80068e8 <TIM_Base_SetConfig+0x124>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d027      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d023      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a30      	ldr	r2, [pc, #192]	; (80068ec <TIM_Base_SetConfig+0x128>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2f      	ldr	r2, [pc, #188]	; (80068f0 <TIM_Base_SetConfig+0x12c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2e      	ldr	r2, [pc, #184]	; (80068f4 <TIM_Base_SetConfig+0x130>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d017      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2d      	ldr	r2, [pc, #180]	; (80068f8 <TIM_Base_SetConfig+0x134>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2c      	ldr	r2, [pc, #176]	; (80068fc <TIM_Base_SetConfig+0x138>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2b      	ldr	r2, [pc, #172]	; (8006900 <TIM_Base_SetConfig+0x13c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <TIM_Base_SetConfig+0x140>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a29      	ldr	r2, [pc, #164]	; (8006908 <TIM_Base_SetConfig+0x144>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a28      	ldr	r2, [pc, #160]	; (800690c <TIM_Base_SetConfig+0x148>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x108>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <TIM_Base_SetConfig+0x134>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x108>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a11      	ldr	r2, [pc, #68]	; (80068fc <TIM_Base_SetConfig+0x138>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x108>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <TIM_Base_SetConfig+0x13c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x108>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0f      	ldr	r2, [pc, #60]	; (8006904 <TIM_Base_SetConfig+0x140>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800
 8006908:	4000e000 	.word	0x4000e000
 800690c:	4000e400 	.word	0x4000e400

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0210 	bic.w	r2, r3, #16
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <TIM_ITRx_SetConfig+0x38>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f043 0307 	orr.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	609a      	str	r2, [r3, #8]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	ffcfff8f 	.word	0xffcfff8f

08006a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	609a      	str	r2, [r3, #8]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e077      	b.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a35      	ldr	r2, [pc, #212]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d108      	bne.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d02c      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d027      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d01d      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10c      	bne.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40001800 	.word	0x40001800
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	4000e000 	.word	0x4000e000
 8006b80:	4000e400 	.word	0x4000e400

08006b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	f107 001c 	add.w	r0, r7, #28
 8006bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d120      	bne.n	8006c1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <USB_CoreInit+0xd4>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d105      	bne.n	8006c0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 fc04 	bl	800841c <USB_CoreReset>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e01a      	b.n	8006c50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fbf8 	bl	800841c <USB_CoreReset>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
 8006c42:	e005      	b.n	8006c50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d116      	bne.n	8006c84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <USB_CoreInit+0xd8>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f043 0206 	orr.w	r2, r3, #6
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f043 0220 	orr.w	r2, r3, #32
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
 8006c94:	ffbdffbf 	.word	0xffbdffbf
 8006c98:	03ee0000 	.word	0x03ee0000

08006c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d165      	bne.n	8006d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a41      	ldr	r2, [pc, #260]	; (8006db8 <USB_SetTurnaroundTime+0x11c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d906      	bls.n	8006cc6 <USB_SetTurnaroundTime+0x2a>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a40      	ldr	r2, [pc, #256]	; (8006dbc <USB_SetTurnaroundTime+0x120>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d202      	bcs.n	8006cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cc0:	230f      	movs	r3, #15
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e062      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4a3c      	ldr	r2, [pc, #240]	; (8006dbc <USB_SetTurnaroundTime+0x120>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d306      	bcc.n	8006cdc <USB_SetTurnaroundTime+0x40>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <USB_SetTurnaroundTime+0x124>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d202      	bcs.n	8006cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cd6:	230e      	movs	r3, #14
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e057      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a38      	ldr	r2, [pc, #224]	; (8006dc0 <USB_SetTurnaroundTime+0x124>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d306      	bcc.n	8006cf2 <USB_SetTurnaroundTime+0x56>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <USB_SetTurnaroundTime+0x128>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d202      	bcs.n	8006cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cec:	230d      	movs	r3, #13
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e04c      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4a33      	ldr	r2, [pc, #204]	; (8006dc4 <USB_SetTurnaroundTime+0x128>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d306      	bcc.n	8006d08 <USB_SetTurnaroundTime+0x6c>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4a32      	ldr	r2, [pc, #200]	; (8006dc8 <USB_SetTurnaroundTime+0x12c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d802      	bhi.n	8006d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d02:	230c      	movs	r3, #12
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e041      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <USB_SetTurnaroundTime+0x12c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d906      	bls.n	8006d1e <USB_SetTurnaroundTime+0x82>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <USB_SetTurnaroundTime+0x130>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d802      	bhi.n	8006d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d18:	230b      	movs	r3, #11
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e036      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <USB_SetTurnaroundTime+0x130>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d906      	bls.n	8006d34 <USB_SetTurnaroundTime+0x98>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4a29      	ldr	r2, [pc, #164]	; (8006dd0 <USB_SetTurnaroundTime+0x134>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d802      	bhi.n	8006d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d2e:	230a      	movs	r3, #10
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e02b      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <USB_SetTurnaroundTime+0x134>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d906      	bls.n	8006d4a <USB_SetTurnaroundTime+0xae>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a25      	ldr	r2, [pc, #148]	; (8006dd4 <USB_SetTurnaroundTime+0x138>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d202      	bcs.n	8006d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d44:	2309      	movs	r3, #9
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e020      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <USB_SetTurnaroundTime+0x138>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d306      	bcc.n	8006d60 <USB_SetTurnaroundTime+0xc4>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <USB_SetTurnaroundTime+0x13c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d802      	bhi.n	8006d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e015      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <USB_SetTurnaroundTime+0x13c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d906      	bls.n	8006d76 <USB_SetTurnaroundTime+0xda>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <USB_SetTurnaroundTime+0x140>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d202      	bcs.n	8006d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d70:	2307      	movs	r3, #7
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e00a      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d76:	2306      	movs	r3, #6
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	e007      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d82:	2309      	movs	r3, #9
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e001      	b.n	8006d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d88:	2309      	movs	r3, #9
 8006d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	029b      	lsls	r3, r3, #10
 8006da0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	00d8acbf 	.word	0x00d8acbf
 8006dbc:	00e4e1c0 	.word	0x00e4e1c0
 8006dc0:	00f42400 	.word	0x00f42400
 8006dc4:	01067380 	.word	0x01067380
 8006dc8:	011a499f 	.word	0x011a499f
 8006dcc:	01312cff 	.word	0x01312cff
 8006dd0:	014ca43f 	.word	0x014ca43f
 8006dd4:	016e3600 	.word	0x016e3600
 8006dd8:	01a6ab1f 	.word	0x01a6ab1f
 8006ddc:	01e84800 	.word	0x01e84800

08006de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f043 0201 	orr.w	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d115      	bne.n	8006e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e52:	2001      	movs	r0, #1
 8006e54:	f7fa fff0 	bl	8001e38 <HAL_Delay>
      ms++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fa4b 	bl	80082fa <USB_GetMode>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d01e      	beq.n	8006ea8 <USB_SetCurrentMode+0x84>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b31      	cmp	r3, #49	; 0x31
 8006e6e:	d9f0      	bls.n	8006e52 <USB_SetCurrentMode+0x2e>
 8006e70:	e01a      	b.n	8006ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d115      	bne.n	8006ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fa ffd7 	bl	8001e38 <HAL_Delay>
      ms++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fa32 	bl	80082fa <USB_GetMode>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <USB_SetCurrentMode+0x84>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b31      	cmp	r3, #49	; 0x31
 8006ea0:	d9f0      	bls.n	8006e84 <USB_SetCurrentMode+0x60>
 8006ea2:	e001      	b.n	8006ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e005      	b.n	8006eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b32      	cmp	r3, #50	; 0x32
 8006eac:	d101      	bne.n	8006eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	e009      	b.n	8006ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3340      	adds	r3, #64	; 0x40
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3301      	adds	r3, #1
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2b0e      	cmp	r3, #14
 8006ef4:	d9f2      	bls.n	8006edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11c      	bne.n	8006f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f0a:	f043 0302 	orr.w	r3, r3, #2
 8006f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e005      	b.n	8006f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	4619      	mov	r1, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d10c      	bne.n	8006f82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f965 	bl	8007240 <USB_SetDevSpeed>
 8006f76:	e008      	b.n	8006f8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f78:	2101      	movs	r1, #1
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f960 	bl	8007240 <USB_SetDevSpeed>
 8006f80:	e003      	b.n	8006f8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f82:	2103      	movs	r1, #3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f95b 	bl	8007240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8f3 	bl	8007178 <USB_FlushTxFifo>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f91f 	bl	80071e0 <USB_FlushRxFifo>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	e043      	b.n	800705e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fec:	d118      	bne.n	8007020 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	461a      	mov	r2, r3
 8007002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e013      	b.n	8007032 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	461a      	mov	r2, r3
 8007018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	e008      	b.n	8007032 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	461a      	mov	r2, r3
 800702e:	2300      	movs	r3, #0
 8007030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	461a      	mov	r2, r3
 8007040:	2300      	movs	r3, #0
 8007042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	461a      	mov	r2, r3
 8007052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	3301      	adds	r3, #1
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	429a      	cmp	r2, r3
 8007064:	d3b7      	bcc.n	8006fd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	e043      	b.n	80070f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800707e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007082:	d118      	bne.n	80070b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	461a      	mov	r2, r3
 8007098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e013      	b.n	80070c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e008      	b.n	80070c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	461a      	mov	r2, r3
 80070d6:	2300      	movs	r3, #0
 80070d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	461a      	mov	r2, r3
 80070e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3301      	adds	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3b7      	bcc.n	800706c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800710e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800711c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f043 0210 	orr.w	r2, r3, #16
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <USB_DevInit+0x2b4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800713c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f043 0208 	orr.w	r2, r3, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d105      	bne.n	8007160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <USB_DevInit+0x2b8>)
 800715a:	4313      	orrs	r3, r2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800716c:	b004      	add	sp, #16
 800716e:	4770      	bx	lr
 8007170:	803c3800 	.word	0x803c3800
 8007174:	40000004 	.word	0x40000004

08007178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <USB_FlushTxFifo+0x64>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d901      	bls.n	8007198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e01b      	b.n	80071d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	daf2      	bge.n	8007186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	019b      	lsls	r3, r3, #6
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a08      	ldr	r2, [pc, #32]	; (80071dc <USB_FlushTxFifo+0x64>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e006      	b.n	80071d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d0f0      	beq.n	80071b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	00030d40 	.word	0x00030d40

080071e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <USB_FlushRxFifo+0x5c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e018      	b.n	8007230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	daf2      	bge.n	80071ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2210      	movs	r2, #16
 800720e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a08      	ldr	r2, [pc, #32]	; (800723c <USB_FlushRxFifo+0x5c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d901      	bls.n	8007222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e006      	b.n	8007230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	2b10      	cmp	r3, #16
 800722c:	d0f0      	beq.n	8007210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	00030d40 	.word	0x00030d40

08007240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007260:	4313      	orrs	r3, r2
 8007262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007272:	b480      	push	{r7}
 8007274:	b087      	sub	sp, #28
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0306 	and.w	r3, r3, #6
 800728a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
 8007296:	e00a      	b.n	80072ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d002      	beq.n	80072a4 <USB_GetDevSpeed+0x32>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d102      	bne.n	80072aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072a4:	2302      	movs	r3, #2
 80072a6:	75fb      	strb	r3, [r7, #23]
 80072a8:	e001      	b.n	80072ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072aa:	230f      	movs	r3, #15
 80072ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d139      	bne.n	800734c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f303 	lsl.w	r3, r1, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d153      	bne.n	80073b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800732c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	059b      	lsls	r3, r3, #22
 8007332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007334:	431a      	orrs	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	0159      	lsls	r1, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	440b      	add	r3, r1
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	4619      	mov	r1, r3
 8007344:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <USB_ActivateEndpoint+0x10c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
 800734a:	e035      	b.n	80073b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	2101      	movs	r1, #1
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800736a:	4313      	orrs	r3, r2
 800736c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d119      	bne.n	80073b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	791b      	ldrb	r3, [r3, #4]
 800739e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073a0:	430b      	orrs	r3, r1
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	0159      	lsls	r1, r3, #5
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	440b      	add	r3, r1
 80073ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b0:	4619      	mov	r1, r3
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <USB_ActivateEndpoint+0x10c>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	10008000 	.word	0x10008000

080073cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d161      	bne.n	80074ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073fe:	d11f      	bne.n	8007440 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800741e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800743e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	2101      	movs	r1, #1
 8007452:	fa01 f303 	lsl.w	r3, r1, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	43db      	mvns	r3, r3
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007460:	4013      	ands	r3, r2
 8007462:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4013      	ands	r3, r2
 8007486:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	0159      	lsls	r1, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	440b      	add	r3, r1
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	4619      	mov	r1, r3
 80074a4:	4b35      	ldr	r3, [pc, #212]	; (800757c <USB_DeactivateEndpoint+0x1b0>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]
 80074aa:	e060      	b.n	800756e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c2:	d11f      	bne.n	8007504 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	43db      	mvns	r3, r3
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007524:	4013      	ands	r3, r2
 8007526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	43db      	mvns	r3, r3
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4013      	ands	r3, r2
 800754a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	0159      	lsls	r1, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	440b      	add	r3, r1
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	4619      	mov	r1, r3
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <USB_DeactivateEndpoint+0x1b4>)
 800756a:	4013      	ands	r3, r2
 800756c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	ec337800 	.word	0xec337800
 8007580:	eff37800 	.word	0xeff37800

08007584 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 8163 	bne.w	800786c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d132      	bne.n	8007614 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	0159      	lsls	r1, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	440b      	add	r3, r1
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	4619      	mov	r1, r3
 80075ca:	4ba5      	ldr	r3, [pc, #660]	; (8007860 <USB_EPStartXfer+0x2dc>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	0159      	lsls	r1, r3, #5
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	440b      	add	r3, r1
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	4619      	mov	r1, r3
 800760c:	4b95      	ldr	r3, [pc, #596]	; (8007864 <USB_EPStartXfer+0x2e0>)
 800760e:	4013      	ands	r3, r2
 8007610:	610b      	str	r3, [r1, #16]
 8007612:	e074      	b.n	80076fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	0159      	lsls	r1, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	440b      	add	r3, r1
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	4619      	mov	r1, r3
 8007630:	4b8c      	ldr	r3, [pc, #560]	; (8007864 <USB_EPStartXfer+0x2e0>)
 8007632:	4013      	ands	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	0159      	lsls	r1, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	440b      	add	r3, r1
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	4619      	mov	r1, r3
 8007652:	4b83      	ldr	r3, [pc, #524]	; (8007860 <USB_EPStartXfer+0x2dc>)
 8007654:	4013      	ands	r3, r2
 8007656:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6999      	ldr	r1, [r3, #24]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	440b      	add	r3, r1
 8007670:	1e59      	subs	r1, r3, #1
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	fbb1 f3f3 	udiv	r3, r1, r3
 800767a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800767c:	4b7a      	ldr	r3, [pc, #488]	; (8007868 <USB_EPStartXfer+0x2e4>)
 800767e:	400b      	ands	r3, r1
 8007680:	69b9      	ldr	r1, [r7, #24]
 8007682:	0148      	lsls	r0, r1, #5
 8007684:	69f9      	ldr	r1, [r7, #28]
 8007686:	4401      	add	r1, r0
 8007688:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800768c:	4313      	orrs	r3, r2
 800768e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	0148      	lsls	r0, r1, #5
 80076aa:	69f9      	ldr	r1, [r7, #28]
 80076ac:	4401      	add	r1, r0
 80076ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076b2:	4313      	orrs	r3, r2
 80076b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	791b      	ldrb	r3, [r3, #4]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d11f      	bne.n	80076fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d14b      	bne.n	800779c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	791b      	ldrb	r3, [r3, #4]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d128      	bne.n	800777a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d110      	bne.n	800775a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	440a      	add	r2, r1
 800774e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	e00f      	b.n	800777a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007778:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007794:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e137      	b.n	8007a0c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	791b      	ldrb	r3, [r3, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d015      	beq.n	80077f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 811f 	beq.w	8007a0c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	2101      	movs	r1, #1
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ea:	4313      	orrs	r3, r2
 80077ec:	634b      	str	r3, [r1, #52]	; 0x34
 80077ee:	e10d      	b.n	8007a0c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d110      	bne.n	8007822 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	e00f      	b.n	8007842 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007840:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6919      	ldr	r1, [r3, #16]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	b298      	uxth	r0, r3
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4603      	mov	r3, r0
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 faea 	bl	8007e30 <USB_WritePacket>
 800785c:	e0d6      	b.n	8007a0c <USB_EPStartXfer+0x488>
 800785e:	bf00      	nop
 8007860:	e007ffff 	.word	0xe007ffff
 8007864:	fff80000 	.word	0xfff80000
 8007868:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	0159      	lsls	r1, r3, #5
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	440b      	add	r3, r1
 8007882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007886:	4619      	mov	r1, r3
 8007888:	4b63      	ldr	r3, [pc, #396]	; (8007a18 <USB_EPStartXfer+0x494>)
 800788a:	4013      	ands	r3, r2
 800788c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	0159      	lsls	r1, r3, #5
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	440b      	add	r3, r1
 80078a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a8:	4619      	mov	r1, r3
 80078aa:	4b5c      	ldr	r3, [pc, #368]	; (8007a1c <USB_EPStartXfer+0x498>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d123      	bne.n	8007900 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ce:	69b9      	ldr	r1, [r7, #24]
 80078d0:	0148      	lsls	r0, r1, #5
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	4401      	add	r1, r0
 80078d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078da:	4313      	orrs	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	69fa      	ldr	r2, [r7, #28]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fc:	6113      	str	r3, [r2, #16]
 80078fe:	e037      	b.n	8007970 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4413      	add	r3, r2
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	8afa      	ldrh	r2, [r7, #22]
 800791c:	fb03 f202 	mul.w	r2, r3, r2
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	8afb      	ldrh	r3, [r7, #22]
 8007934:	04d9      	lsls	r1, r3, #19
 8007936:	4b3a      	ldr	r3, [pc, #232]	; (8007a20 <USB_EPStartXfer+0x49c>)
 8007938:	400b      	ands	r3, r1
 800793a:	69b9      	ldr	r1, [r7, #24]
 800793c:	0148      	lsls	r0, r1, #5
 800793e:	69f9      	ldr	r1, [r7, #28]
 8007940:	4401      	add	r1, r0
 8007942:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007960:	69b9      	ldr	r1, [r7, #24]
 8007962:	0148      	lsls	r0, r1, #5
 8007964:	69f9      	ldr	r1, [r7, #28]
 8007966:	4401      	add	r1, r0
 8007968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800796c:	4313      	orrs	r3, r2
 800796e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d10d      	bne.n	8007992 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6919      	ldr	r1, [r3, #16]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	460a      	mov	r2, r1
 8007990:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d128      	bne.n	80079ec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d110      	bne.n	80079cc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e00f      	b.n	80079ec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	fff80000 	.word	0xfff80000
 8007a1c:	e007ffff 	.word	0xe007ffff
 8007a20:	1ff80000 	.word	0x1ff80000

08007a24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 80ce 	bne.w	8007be2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d132      	bne.n	8007ab4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	0159      	lsls	r1, r3, #5
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	440b      	add	r3, r1
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4b9a      	ldr	r3, [pc, #616]	; (8007cd4 <USB_EP0StartXfer+0x2b0>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	0159      	lsls	r1, r3, #5
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	440b      	add	r3, r1
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4b8a      	ldr	r3, [pc, #552]	; (8007cd8 <USB_EP0StartXfer+0x2b4>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	610b      	str	r3, [r1, #16]
 8007ab2:	e04e      	b.n	8007b52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	0159      	lsls	r1, r3, #5
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	440b      	add	r3, r1
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4b81      	ldr	r3, [pc, #516]	; (8007cd8 <USB_EP0StartXfer+0x2b4>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	0159      	lsls	r1, r3, #5
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	440b      	add	r3, r1
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	4619      	mov	r1, r3
 8007af2:	4b78      	ldr	r3, [pc, #480]	; (8007cd4 <USB_EP0StartXfer+0x2b0>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d903      	bls.n	8007b0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	0148      	lsls	r0, r1, #5
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	4401      	add	r1, r0
 8007b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d11e      	bne.n	8007b96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e097      	b.n	8007cc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8083 	beq.w	8007cc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	634b      	str	r3, [r1, #52]	; 0x34
 8007be0:	e071      	b.n	8007cc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	0159      	lsls	r1, r3, #5
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4b36      	ldr	r3, [pc, #216]	; (8007cd8 <USB_EP0StartXfer+0x2b4>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	0159      	lsls	r1, r3, #5
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	440b      	add	r3, r1
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <USB_EP0StartXfer+0x2b0>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c74:	6939      	ldr	r1, [r7, #16]
 8007c76:	0148      	lsls	r0, r1, #5
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c80:	4313      	orrs	r3, r2
 8007c82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d10d      	bne.n	8007ca6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6919      	ldr	r1, [r3, #16]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	e007ffff 	.word	0xe007ffff
 8007cd8:	fff80000 	.word	0xfff80000

08007cdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d14a      	bne.n	8007d90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d12:	f040 8086 	bne.w	8007e22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	7812      	ldrb	r2, [r2, #0]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d902      	bls.n	8007d74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
          break;
 8007d72:	e056      	b.n	8007e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8c:	d0e7      	beq.n	8007d5e <USB_EPStopXfer+0x82>
 8007d8e:	e048      	b.n	8007e22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da8:	d13b      	bne.n	8007e22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d902      	bls.n	8007e08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	e00c      	b.n	8007e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e20:	d0e7      	beq.n	8007df2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b089      	sub	sp, #36	; 0x24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	460b      	mov	r3, r1
 8007e40:	71fb      	strb	r3, [r7, #7]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d123      	bne.n	8007e9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e56:	88bb      	ldrh	r3, [r7, #4]
 8007e58:	3303      	adds	r3, #3
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	e018      	b.n	8007e96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	031a      	lsls	r2, r3, #12
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e70:	461a      	mov	r2, r3
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	3301      	adds	r3, #1
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d3e2      	bcc.n	8007e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3724      	adds	r7, #36	; 0x24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b08b      	sub	sp, #44	; 0x2c
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	089b      	lsrs	r3, r3, #2
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	e014      	b.n	8007f02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	3301      	adds	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	3301      	adds	r3, #1
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	3301      	adds	r3, #1
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d3e6      	bcc.n	8007ed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f0a:	8bfb      	ldrh	r3, [r7, #30]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	701a      	strb	r2, [r3, #0]
      i++;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	3301      	adds	r3, #1
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f42:	8bfb      	ldrh	r3, [r7, #30]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f48:	8bfb      	ldrh	r3, [r7, #30]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1ea      	bne.n	8007f24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	372c      	adds	r7, #44	; 0x2c
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d12c      	bne.n	8007fd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	db12      	blt.n	8007fb0 <USB_EPSetStall+0x54>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e02b      	b.n	800802a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	db12      	blt.n	800800a <USB_EPSetStall+0xae>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	440a      	add	r2, r1
 8008020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d128      	bne.n	80080a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d003      	beq.n	8008084 <USB_EPClearStall+0x4c>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d138      	bne.n	80080f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e027      	b.n	80080f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d003      	beq.n	80080d6 <USB_EPClearStall+0x9e>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d10f      	bne.n	80080f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008122:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813e:	4313      	orrs	r3, r2
 8008140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817e:	f023 0302 	bic.w	r3, r3, #2
 8008182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ac:	f023 0303 	bic.w	r3, r3, #3
 80081b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4013      	ands	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081ec:	68fb      	ldr	r3, [r7, #12]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	0c1b      	lsrs	r3, r3, #16
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	4013      	ands	r3, r2
 8008250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	b29b      	uxth	r3, r3
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4013      	ands	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008290:	68bb      	ldr	r3, [r7, #8]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	01db      	lsls	r3, r3, #7
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4013      	ands	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ec:	68bb      	ldr	r3, [r7, #8]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	f003 0301 	and.w	r3, r3, #1
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	4619      	mov	r1, r3
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <USB_ActivateSetup+0x44>)
 8008336:	4013      	ands	r3, r2
 8008338:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	fffff800 	.word	0xfffff800

08008360 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	460b      	mov	r3, r1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	333c      	adds	r3, #60	; 0x3c
 8008376:	3304      	adds	r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4a26      	ldr	r2, [pc, #152]	; (8008418 <USB_EP0_OutStart+0xb8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d90a      	bls.n	800839a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008394:	d101      	bne.n	800839a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e037      	b.n	800840a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	461a      	mov	r2, r3
 80083a2:	2300      	movs	r3, #0
 80083a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c8:	f043 0318 	orr.w	r3, r3, #24
 80083cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d10f      	bne.n	8008408 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008402:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	4f54300a 	.word	0x4f54300a

0800841c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <USB_CoreReset+0x64>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e01b      	b.n	8008472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	daf2      	bge.n	8008428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f043 0201 	orr.w	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4a09      	ldr	r2, [pc, #36]	; (8008480 <USB_CoreReset+0x64>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d901      	bls.n	8008464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e006      	b.n	8008472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b01      	cmp	r3, #1
 800846e:	d0f0      	beq.n	8008452 <USB_CoreReset+0x36>

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	00030d40 	.word	0x00030d40

08008484 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008490:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008494:	f002 fcd0 	bl	800ae38 <USBD_static_malloc>
 8008498:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d109      	bne.n	80084b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32b0      	adds	r2, #176	; 0xb0
 80084aa:	2100      	movs	r1, #0
 80084ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0d4      	b.n	800865e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f002 fd3c 	bl	800af38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	32b0      	adds	r2, #176	; 0xb0
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	32b0      	adds	r2, #176	; 0xb0
 80084da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d138      	bne.n	800855e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084ec:	4b5e      	ldr	r3, [pc, #376]	; (8008668 <USBD_CDC_Init+0x1e4>)
 80084ee:	7819      	ldrb	r1, [r3, #0]
 80084f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f4:	2202      	movs	r2, #2
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 fb7b 	bl	800abf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80084fc:	4b5a      	ldr	r3, [pc, #360]	; (8008668 <USBD_CDC_Init+0x1e4>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 020f 	and.w	r2, r3, #15
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	3324      	adds	r3, #36	; 0x24
 8008512:	2201      	movs	r2, #1
 8008514:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008516:	4b55      	ldr	r3, [pc, #340]	; (800866c <USBD_CDC_Init+0x1e8>)
 8008518:	7819      	ldrb	r1, [r3, #0]
 800851a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851e:	2202      	movs	r2, #2
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f002 fb66 	bl	800abf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008526:	4b51      	ldr	r3, [pc, #324]	; (800866c <USBD_CDC_Init+0x1e8>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 020f 	and.w	r2, r3, #15
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800853e:	2201      	movs	r2, #1
 8008540:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008542:	4b4b      	ldr	r3, [pc, #300]	; (8008670 <USBD_CDC_Init+0x1ec>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	3326      	adds	r3, #38	; 0x26
 8008558:	2210      	movs	r2, #16
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e035      	b.n	80085ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800855e:	4b42      	ldr	r3, [pc, #264]	; (8008668 <USBD_CDC_Init+0x1e4>)
 8008560:	7819      	ldrb	r1, [r3, #0]
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	2202      	movs	r2, #2
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f002 fb43 	bl	800abf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <USBD_CDC_Init+0x1e4>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	3324      	adds	r3, #36	; 0x24
 8008582:	2201      	movs	r2, #1
 8008584:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008586:	4b39      	ldr	r3, [pc, #228]	; (800866c <USBD_CDC_Init+0x1e8>)
 8008588:	7819      	ldrb	r1, [r3, #0]
 800858a:	2340      	movs	r3, #64	; 0x40
 800858c:	2202      	movs	r2, #2
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f002 fb2f 	bl	800abf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008594:	4b35      	ldr	r3, [pc, #212]	; (800866c <USBD_CDC_Init+0x1e8>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 020f 	and.w	r2, r3, #15
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	440b      	add	r3, r1
 80085a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085ac:	2201      	movs	r2, #1
 80085ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085b0:	4b2f      	ldr	r3, [pc, #188]	; (8008670 <USBD_CDC_Init+0x1ec>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 020f 	and.w	r2, r3, #15
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	3326      	adds	r3, #38	; 0x26
 80085c6:	2210      	movs	r2, #16
 80085c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085ca:	4b29      	ldr	r3, [pc, #164]	; (8008670 <USBD_CDC_Init+0x1ec>)
 80085cc:	7819      	ldrb	r1, [r3, #0]
 80085ce:	2308      	movs	r3, #8
 80085d0:	2203      	movs	r2, #3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f002 fb0d 	bl	800abf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <USBD_CDC_Init+0x1ec>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 020f 	and.w	r2, r3, #15
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	3324      	adds	r3, #36	; 0x24
 80085ee:	2201      	movs	r2, #1
 80085f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	33b0      	adds	r3, #176	; 0xb0
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008628:	2302      	movs	r3, #2
 800862a:	e018      	b.n	800865e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7c1b      	ldrb	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <USBD_CDC_Init+0x1e8>)
 8008636:	7819      	ldrb	r1, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800863e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f002 fbc4 	bl	800add0 <USBD_LL_PrepareReceive>
 8008648:	e008      	b.n	800865c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800864a:	4b08      	ldr	r3, [pc, #32]	; (800866c <USBD_CDC_Init+0x1e8>)
 800864c:	7819      	ldrb	r1, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008654:	2340      	movs	r3, #64	; 0x40
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 fbba 	bl	800add0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2400010b 	.word	0x2400010b
 800866c:	2400010c 	.word	0x2400010c
 8008670:	2400010d 	.word	0x2400010d

08008674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008680:	4b3a      	ldr	r3, [pc, #232]	; (800876c <USBD_CDC_DeInit+0xf8>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f002 fad9 	bl	800ac3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800868c:	4b37      	ldr	r3, [pc, #220]	; (800876c <USBD_CDC_DeInit+0xf8>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	3324      	adds	r3, #36	; 0x24
 80086a2:	2200      	movs	r2, #0
 80086a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086a6:	4b32      	ldr	r3, [pc, #200]	; (8008770 <USBD_CDC_DeInit+0xfc>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 fac6 	bl	800ac3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086b2:	4b2f      	ldr	r3, [pc, #188]	; (8008770 <USBD_CDC_DeInit+0xfc>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 020f 	and.w	r2, r3, #15
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ca:	2200      	movs	r2, #0
 80086cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086ce:	4b29      	ldr	r3, [pc, #164]	; (8008774 <USBD_CDC_DeInit+0x100>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f002 fab2 	bl	800ac3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086da:	4b26      	ldr	r3, [pc, #152]	; (8008774 <USBD_CDC_DeInit+0x100>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 020f 	and.w	r2, r3, #15
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	3324      	adds	r3, #36	; 0x24
 80086f0:	2200      	movs	r2, #0
 80086f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <USBD_CDC_DeInit+0x100>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	3326      	adds	r3, #38	; 0x26
 800870a:	2200      	movs	r2, #0
 800870c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	32b0      	adds	r2, #176	; 0xb0
 8008718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01f      	beq.n	8008760 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	33b0      	adds	r3, #176	; 0xb0
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	32b0      	adds	r2, #176	; 0xb0
 800873e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008742:	4618      	mov	r0, r3
 8008744:	f002 fb86 	bl	800ae54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32b0      	adds	r2, #176	; 0xb0
 8008752:	2100      	movs	r1, #0
 8008754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2400010b 	.word	0x2400010b
 8008770:	2400010c 	.word	0x2400010c
 8008774:	2400010d 	.word	0x2400010d

08008778 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32b0      	adds	r2, #176	; 0xb0
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0bf      	b.n	8008928 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d050      	beq.n	8008856 <USBD_CDC_Setup+0xde>
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	f040 80af 	bne.w	8008918 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	88db      	ldrh	r3, [r3, #6]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d03a      	beq.n	8008838 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b25b      	sxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da1b      	bge.n	8008804 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	33b0      	adds	r3, #176	; 0xb0
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80087e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	88d2      	ldrh	r2, [r2, #6]
 80087e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b07      	cmp	r3, #7
 80087f0:	bf28      	it	cs
 80087f2:	2307      	movcs	r3, #7
 80087f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	89fa      	ldrh	r2, [r7, #14]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 fd89 	bl	800a314 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008802:	e090      	b.n	8008926 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	785a      	ldrb	r2, [r3, #1]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88db      	ldrh	r3, [r3, #6]
 8008812:	2b3f      	cmp	r3, #63	; 0x3f
 8008814:	d803      	bhi.n	800881e <USBD_CDC_Setup+0xa6>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	b2da      	uxtb	r2, r3
 800881c:	e000      	b.n	8008820 <USBD_CDC_Setup+0xa8>
 800881e:	2240      	movs	r2, #64	; 0x40
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008826:	6939      	ldr	r1, [r7, #16]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800882e:	461a      	mov	r2, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 fd9b 	bl	800a36c <USBD_CtlPrepareRx>
      break;
 8008836:	e076      	b.n	8008926 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	33b0      	adds	r3, #176	; 0xb0
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	7850      	ldrb	r0, [r2, #1]
 800884e:	2200      	movs	r2, #0
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	4798      	blx	r3
      break;
 8008854:	e067      	b.n	8008926 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b0b      	cmp	r3, #11
 800885c:	d851      	bhi.n	8008902 <USBD_CDC_Setup+0x18a>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USBD_CDC_Setup+0xec>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	08008895 	.word	0x08008895
 8008868:	08008911 	.word	0x08008911
 800886c:	08008903 	.word	0x08008903
 8008870:	08008903 	.word	0x08008903
 8008874:	08008903 	.word	0x08008903
 8008878:	08008903 	.word	0x08008903
 800887c:	08008903 	.word	0x08008903
 8008880:	08008903 	.word	0x08008903
 8008884:	08008903 	.word	0x08008903
 8008888:	08008903 	.word	0x08008903
 800888c:	080088bf 	.word	0x080088bf
 8008890:	080088e9 	.word	0x080088e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b03      	cmp	r3, #3
 800889e:	d107      	bne.n	80088b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088a0:	f107 030a 	add.w	r3, r7, #10
 80088a4:	2202      	movs	r2, #2
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fd33 	bl	800a314 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088ae:	e032      	b.n	8008916 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fcbd 	bl	800a232 <USBD_CtlError>
            ret = USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	75fb      	strb	r3, [r7, #23]
          break;
 80088bc:	e02b      	b.n	8008916 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d107      	bne.n	80088da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088ca:	f107 030d 	add.w	r3, r7, #13
 80088ce:	2201      	movs	r2, #1
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fd1e 	bl	800a314 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088d8:	e01d      	b.n	8008916 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fca8 	bl	800a232 <USBD_CtlError>
            ret = USBD_FAIL;
 80088e2:	2303      	movs	r3, #3
 80088e4:	75fb      	strb	r3, [r7, #23]
          break;
 80088e6:	e016      	b.n	8008916 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d00f      	beq.n	8008914 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fc9b 	bl	800a232 <USBD_CtlError>
            ret = USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008900:	e008      	b.n	8008914 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fc94 	bl	800a232 <USBD_CtlError>
          ret = USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	75fb      	strb	r3, [r7, #23]
          break;
 800890e:	e002      	b.n	8008916 <USBD_CDC_Setup+0x19e>
          break;
 8008910:	bf00      	nop
 8008912:	e008      	b.n	8008926 <USBD_CDC_Setup+0x1ae>
          break;
 8008914:	bf00      	nop
      }
      break;
 8008916:	e006      	b.n	8008926 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 fc89 	bl	800a232 <USBD_CtlError>
      ret = USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	75fb      	strb	r3, [r7, #23]
      break;
 8008924:	bf00      	nop
  }

  return (uint8_t)ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008942:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32b0      	adds	r2, #176	; 0xb0
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008956:	2303      	movs	r3, #3
 8008958:	e065      	b.n	8008a26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	32b0      	adds	r2, #176	; 0xb0
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	f003 020f 	and.w	r2, r3, #15
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	3318      	adds	r3, #24
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d02f      	beq.n	80089e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 020f 	and.w	r2, r3, #15
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	3318      	adds	r3, #24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	f003 010f 	and.w	r1, r3, #15
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	460b      	mov	r3, r1
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	440b      	add	r3, r1
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4403      	add	r3, r0
 80089ac:	3348      	adds	r3, #72	; 0x48
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80089b4:	fb01 f303 	mul.w	r3, r1, r3
 80089b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d112      	bne.n	80089e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	3318      	adds	r3, #24
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	2300      	movs	r3, #0
 80089da:	2200      	movs	r2, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f002 f9d6 	bl	800ad8e <USBD_LL_Transmit>
 80089e2:	e01f      	b.n	8008a24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	33b0      	adds	r3, #176	; 0xb0
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d010      	beq.n	8008a24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	33b0      	adds	r3, #176	; 0xb0
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	32b0      	adds	r2, #176	; 0xb0
 8008a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	32b0      	adds	r2, #176	; 0xb0
 8008a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e01a      	b.n	8008a96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f002 f9d4 	bl	800ae12 <USBD_LL_GetRxDataSize>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	33b0      	adds	r3, #176	; 0xb0
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a90:	4611      	mov	r1, r2
 8008a92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	32b0      	adds	r2, #176	; 0xb0
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e025      	b.n	8008b0c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	33b0      	adds	r3, #176	; 0xb0
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01a      	beq.n	8008b0a <USBD_CDC_EP0_RxReady+0x6c>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ada:	2bff      	cmp	r3, #255	; 0xff
 8008adc:	d015      	beq.n	8008b0a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	33b0      	adds	r3, #176	; 0xb0
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008af6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008afe:	b292      	uxth	r2, r2
 8008b00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	22ff      	movs	r2, #255	; 0xff
 8008b06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b1c:	2182      	movs	r1, #130	; 0x82
 8008b1e:	4818      	ldr	r0, [pc, #96]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b20:	f000 fd4f 	bl	80095c2 <USBD_GetEpDesc>
 8008b24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b26:	2101      	movs	r1, #1
 8008b28:	4815      	ldr	r0, [pc, #84]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b2a:	f000 fd4a 	bl	80095c2 <USBD_GetEpDesc>
 8008b2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b30:	2181      	movs	r1, #129	; 0x81
 8008b32:	4813      	ldr	r0, [pc, #76]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b34:	f000 fd45 	bl	80095c2 <USBD_GetEpDesc>
 8008b38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2210      	movs	r2, #16
 8008b44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b54:	711a      	strb	r2, [r3, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b68:	711a      	strb	r2, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2243      	movs	r2, #67	; 0x43
 8008b72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b74:	4b02      	ldr	r3, [pc, #8]	; (8008b80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	240000c8 	.word	0x240000c8

08008b84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b8c:	2182      	movs	r1, #130	; 0x82
 8008b8e:	4818      	ldr	r0, [pc, #96]	; (8008bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b90:	f000 fd17 	bl	80095c2 <USBD_GetEpDesc>
 8008b94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b96:	2101      	movs	r1, #1
 8008b98:	4815      	ldr	r0, [pc, #84]	; (8008bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b9a:	f000 fd12 	bl	80095c2 <USBD_GetEpDesc>
 8008b9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ba0:	2181      	movs	r1, #129	; 0x81
 8008ba2:	4813      	ldr	r0, [pc, #76]	; (8008bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ba4:	f000 fd0d 	bl	80095c2 <USBD_GetEpDesc>
 8008ba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d006      	beq.n	8008bca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	711a      	strb	r2, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f042 0202 	orr.w	r2, r2, #2
 8008bc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	711a      	strb	r2, [r3, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f042 0202 	orr.w	r2, r2, #2
 8008bdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2243      	movs	r2, #67	; 0x43
 8008be2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008be4:	4b02      	ldr	r3, [pc, #8]	; (8008bf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	240000c8 	.word	0x240000c8

08008bf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bfc:	2182      	movs	r1, #130	; 0x82
 8008bfe:	4818      	ldr	r0, [pc, #96]	; (8008c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c00:	f000 fcdf 	bl	80095c2 <USBD_GetEpDesc>
 8008c04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c06:	2101      	movs	r1, #1
 8008c08:	4815      	ldr	r0, [pc, #84]	; (8008c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c0a:	f000 fcda 	bl	80095c2 <USBD_GetEpDesc>
 8008c0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c10:	2181      	movs	r1, #129	; 0x81
 8008c12:	4813      	ldr	r0, [pc, #76]	; (8008c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c14:	f000 fcd5 	bl	80095c2 <USBD_GetEpDesc>
 8008c18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2210      	movs	r2, #16
 8008c24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c34:	711a      	strb	r2, [r3, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c48:	711a      	strb	r2, [r3, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2243      	movs	r2, #67	; 0x43
 8008c52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	240000c8 	.word	0x240000c8

08008c64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	220a      	movs	r2, #10
 8008c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c72:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	24000084 	.word	0x24000084

08008c84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e009      	b.n	8008cac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	33b0      	adds	r3, #176	; 0xb0
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	32b0      	adds	r2, #176	; 0xb0
 8008cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e008      	b.n	8008cf0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32b0      	adds	r2, #176	; 0xb0
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e004      	b.n	8008d2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
	...

08008d38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32b0      	adds	r2, #176	; 0xb0
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32b0      	adds	r2, #176	; 0xb0
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e025      	b.n	8008db6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11f      	bne.n	8008db4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d7c:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <USBD_CDC_TransmitPacket+0x88>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 020f 	and.w	r2, r3, #15
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4403      	add	r3, r0
 8008d96:	3318      	adds	r3, #24
 8008d98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <USBD_CDC_TransmitPacket+0x88>)
 8008d9c:	7819      	ldrb	r1, [r3, #0]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 ffef 	bl	800ad8e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	2400010b 	.word	0x2400010b

08008dc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	32b0      	adds	r2, #176	; 0xb0
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	; 0xb0
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e018      	b.n	8008e24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	7c1b      	ldrb	r3, [r3, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <USBD_CDC_ReceivePacket+0x68>)
 8008dfc:	7819      	ldrb	r1, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 ffe1 	bl	800add0 <USBD_LL_PrepareReceive>
 8008e0e:	e008      	b.n	8008e22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e10:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <USBD_CDC_ReceivePacket+0x68>)
 8008e12:	7819      	ldrb	r1, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 ffd7 	bl	800add0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	2400010c 	.word	0x2400010c

08008e30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01f      	b.n	8008e88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fe4b 	bl	800ab18 <USBD_LL_Init>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e025      	b.n	8008ef4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32ae      	adds	r2, #174	; 0xae
 8008eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00f      	beq.n	8008ee4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32ae      	adds	r2, #174	; 0xae
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	f107 020e 	add.w	r2, r7, #14
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fe59 	bl	800abbc <USBD_LL_Start>
 8008f0a:	4603      	mov	r3, r0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d009      	beq.n	8008f58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f908 	bl	800a1be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fca:	f003 031f 	and.w	r3, r3, #31
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d01a      	beq.n	8009008 <USBD_LL_SetupStage+0x72>
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d822      	bhi.n	800901c <USBD_LL_SetupStage+0x86>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <USBD_LL_SetupStage+0x4a>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d00a      	beq.n	8008ff4 <USBD_LL_SetupStage+0x5e>
 8008fde:	e01d      	b.n	800901c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb5f 	bl	80096ac <USBD_StdDevReq>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff2:	e020      	b.n	8009036 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fbc7 	bl	8009790 <USBD_StdItfReq>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
      break;
 8009006:	e016      	b.n	8009036 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc29 	bl	8009868 <USBD_StdEPReq>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	e00c      	b.n	8009036 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fe26 	bl	800ac7c <USBD_LL_StallEP>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
      break;
 8009034:	bf00      	nop
  }

  return ret;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	460b      	mov	r3, r1
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d16e      	bne.n	8009136 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800905e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009066:	2b03      	cmp	r3, #3
 8009068:	f040 8098 	bne.w	800919c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	429a      	cmp	r2, r3
 8009076:	d913      	bls.n	80090a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	1ad2      	subs	r2, r2, r3
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	4293      	cmp	r3, r2
 8009090:	bf28      	it	cs
 8009092:	4613      	movcs	r3, r2
 8009094:	461a      	mov	r2, r3
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f001 f984 	bl	800a3a6 <USBD_CtlContinueRx>
 800909e:	e07d      	b.n	800919c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d014      	beq.n	80090d8 <USBD_LL_DataOutStage+0x98>
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d81d      	bhi.n	80090ee <USBD_LL_DataOutStage+0xae>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <USBD_LL_DataOutStage+0x7c>
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d003      	beq.n	80090c2 <USBD_LL_DataOutStage+0x82>
 80090ba:	e018      	b.n	80090ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	75bb      	strb	r3, [r7, #22]
            break;
 80090c0:	e018      	b.n	80090f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	4619      	mov	r1, r3
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fa5e 	bl	800958e <USBD_CoreFindIF>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75bb      	strb	r3, [r7, #22]
            break;
 80090d6:	e00d      	b.n	80090f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	4619      	mov	r1, r3
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fa60 	bl	80095a8 <USBD_CoreFindEP>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75bb      	strb	r3, [r7, #22]
            break;
 80090ec:	e002      	b.n	80090f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75bb      	strb	r3, [r7, #22]
            break;
 80090f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090f4:	7dbb      	ldrb	r3, [r7, #22]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d119      	bne.n	800912e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b03      	cmp	r3, #3
 8009104:	d113      	bne.n	800912e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009106:	7dba      	ldrb	r2, [r7, #22]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	32ae      	adds	r2, #174	; 0xae
 800910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009116:	7dba      	ldrb	r2, [r7, #22]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800911e:	7dba      	ldrb	r2, [r7, #22]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	32ae      	adds	r2, #174	; 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f001 f94a 	bl	800a3c8 <USBD_CtlSendStatus>
 8009134:	e032      	b.n	800919c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913c:	b2db      	uxtb	r3, r3
 800913e:	4619      	mov	r1, r3
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fa31 	bl	80095a8 <USBD_CoreFindEP>
 8009146:	4603      	mov	r3, r0
 8009148:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800914a:	7dbb      	ldrb	r3, [r7, #22]
 800914c:	2bff      	cmp	r3, #255	; 0xff
 800914e:	d025      	beq.n	800919c <USBD_LL_DataOutStage+0x15c>
 8009150:	7dbb      	ldrb	r3, [r7, #22]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d122      	bne.n	800919c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d117      	bne.n	8009192 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009162:	7dba      	ldrb	r2, [r7, #22]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	32ae      	adds	r2, #174	; 0xae
 8009168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009172:	7dba      	ldrb	r2, [r7, #22]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800917a:	7dba      	ldrb	r2, [r7, #22]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	32ae      	adds	r2, #174	; 0xae
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	7afa      	ldrb	r2, [r7, #11]
 8009188:	4611      	mov	r1, r2
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	4798      	blx	r3
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	e000      	b.n	800919e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b086      	sub	sp, #24
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	460b      	mov	r3, r1
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d16f      	bne.n	800929a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3314      	adds	r3, #20
 80091be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d15a      	bne.n	8009280 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d914      	bls.n	8009200 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	1ad2      	subs	r2, r2, r3
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f001 f8ac 	bl	800a34a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f2:	2300      	movs	r3, #0
 80091f4:	2200      	movs	r2, #0
 80091f6:	2100      	movs	r1, #0
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f001 fde9 	bl	800add0 <USBD_LL_PrepareReceive>
 80091fe:	e03f      	b.n	8009280 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	429a      	cmp	r2, r3
 800920a:	d11c      	bne.n	8009246 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009214:	429a      	cmp	r2, r3
 8009216:	d316      	bcc.n	8009246 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009222:	429a      	cmp	r2, r3
 8009224:	d20f      	bcs.n	8009246 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009226:	2200      	movs	r2, #0
 8009228:	2100      	movs	r1, #0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f001 f88d 	bl	800a34a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009238:	2300      	movs	r3, #0
 800923a:	2200      	movs	r2, #0
 800923c:	2100      	movs	r1, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f001 fdc6 	bl	800add0 <USBD_LL_PrepareReceive>
 8009244:	e01c      	b.n	8009280 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d10f      	bne.n	8009272 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009272:	2180      	movs	r1, #128	; 0x80
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f001 fd01 	bl	800ac7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f001 f8b7 	bl	800a3ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d03a      	beq.n	8009300 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f7ff fe42 	bl	8008f14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009298:	e032      	b.n	8009300 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f97f 	bl	80095a8 <USBD_CoreFindEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	2bff      	cmp	r3, #255	; 0xff
 80092b2:	d025      	beq.n	8009300 <USBD_LL_DataInStage+0x15a>
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d122      	bne.n	8009300 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d11c      	bne.n	8009300 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092c6:	7dfa      	ldrb	r2, [r7, #23]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	32ae      	adds	r2, #174	; 0xae
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d014      	beq.n	8009300 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092d6:	7dfa      	ldrb	r2, [r7, #23]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092de:	7dfa      	ldrb	r2, [r7, #23]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	32ae      	adds	r2, #174	; 0xae
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	7afa      	ldrb	r2, [r7, #11]
 80092ec:	4611      	mov	r1, r2
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	4798      	blx	r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092f6:	7dbb      	ldrb	r3, [r7, #22]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
 80092fe:	e000      	b.n	8009302 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d014      	beq.n	8009370 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6852      	ldr	r2, [r2, #4]
 800935e:	b2d2      	uxtb	r2, r2
 8009360:	4611      	mov	r1, r2
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800936c:	2303      	movs	r3, #3
 800936e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	2200      	movs	r2, #0
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fc3b 	bl	800abf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2240      	movs	r2, #64	; 0x40
 8009388:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	2200      	movs	r2, #0
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fc2d 	bl	800abf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2240      	movs	r2, #64	; 0x40
 80093a2:	621a      	str	r2, [r3, #32]

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	78fa      	ldrb	r2, [r7, #3]
 80093be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2204      	movs	r2, #4
 80093e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b04      	cmp	r3, #4
 800940c:	d106      	bne.n	800941c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009414:	b2da      	uxtb	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d110      	bne.n	8009460 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	32ae      	adds	r2, #174	; 0xae
 8009480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009488:	2303      	movs	r3, #3
 800948a:	e01c      	b.n	80094c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b03      	cmp	r3, #3
 8009496:	d115      	bne.n	80094c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32ae      	adds	r2, #174	; 0xae
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	32ae      	adds	r2, #174	; 0xae
 80094b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	4611      	mov	r1, r2
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	32ae      	adds	r2, #174	; 0xae
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e01c      	b.n	800952a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d115      	bne.n	8009528 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32ae      	adds	r2, #174	; 0xae
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32ae      	adds	r2, #174	; 0xae
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00e      	beq.n	8009584 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6852      	ldr	r2, [r2, #4]
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	4611      	mov	r1, r2
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800959a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b086      	sub	sp, #24
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d920      	bls.n	800962c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095f2:	e013      	b.n	800961c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095f4:	f107 030a 	add.w	r3, r7, #10
 80095f8:	4619      	mov	r1, r3
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f000 f81b 	bl	8009636 <USBD_GetNextDesc>
 8009600:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b05      	cmp	r3, #5
 8009608:	d108      	bne.n	800961c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	789b      	ldrb	r3, [r3, #2]
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	429a      	cmp	r2, r3
 8009616:	d008      	beq.n	800962a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	b29a      	uxth	r2, r3
 8009622:	897b      	ldrh	r3, [r7, #10]
 8009624:	429a      	cmp	r2, r3
 8009626:	d8e5      	bhi.n	80095f4 <USBD_GetEpDesc+0x32>
 8009628:	e000      	b.n	800962c <USBD_GetEpDesc+0x6a>
          break;
 800962a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800962c:	693b      	ldr	r3, [r7, #16]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	881a      	ldrh	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	4413      	add	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4413      	add	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	3301      	adds	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800968e:	8a3b      	ldrh	r3, [r7, #16]
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	b21a      	sxth	r2, r3
 8009694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009698:	4313      	orrs	r3, r2
 800969a:	b21b      	sxth	r3, r3
 800969c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800969e:	89fb      	ldrh	r3, [r7, #14]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	371c      	adds	r7, #28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d005      	beq.n	80096d2 <USBD_StdDevReq+0x26>
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d857      	bhi.n	800977a <USBD_StdDevReq+0xce>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00f      	beq.n	80096ee <USBD_StdDevReq+0x42>
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d153      	bne.n	800977a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	32ae      	adds	r2, #174	; 0xae
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	4798      	blx	r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
      break;
 80096ec:	e04a      	b.n	8009784 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d83b      	bhi.n	800976e <USBD_StdDevReq+0xc2>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <USBD_StdDevReq+0x50>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009751 	.word	0x08009751
 8009700:	08009765 	.word	0x08009765
 8009704:	0800976f 	.word	0x0800976f
 8009708:	0800975b 	.word	0x0800975b
 800970c:	0800976f 	.word	0x0800976f
 8009710:	0800972f 	.word	0x0800972f
 8009714:	08009725 	.word	0x08009725
 8009718:	0800976f 	.word	0x0800976f
 800971c:	08009747 	.word	0x08009747
 8009720:	08009739 	.word	0x08009739
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa3c 	bl	8009ba4 <USBD_GetDescriptor>
          break;
 800972c:	e024      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fba1 	bl	8009e78 <USBD_SetAddress>
          break;
 8009736:	e01f      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fbe0 	bl	8009f00 <USBD_SetConfig>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
          break;
 8009744:	e018      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fc83 	bl	800a054 <USBD_GetConfig>
          break;
 800974e:	e013      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fcb4 	bl	800a0c0 <USBD_GetStatus>
          break;
 8009758:	e00e      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fce3 	bl	800a128 <USBD_SetFeature>
          break;
 8009762:	e009      	b.n	8009778 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fd07 	bl	800a17a <USBD_ClrFeature>
          break;
 800976c:	e004      	b.n	8009778 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fd5e 	bl	800a232 <USBD_CtlError>
          break;
 8009776:	bf00      	nop
      }
      break;
 8009778:	e004      	b.n	8009784 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fd58 	bl	800a232 <USBD_CtlError>
      break;
 8009782:	bf00      	nop
  }

  return ret;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop

08009790 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d005      	beq.n	80097b6 <USBD_StdItfReq+0x26>
 80097aa:	2b40      	cmp	r3, #64	; 0x40
 80097ac:	d852      	bhi.n	8009854 <USBD_StdItfReq+0xc4>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <USBD_StdItfReq+0x26>
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d14e      	bne.n	8009854 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d840      	bhi.n	8009846 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	889b      	ldrh	r3, [r3, #4]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d836      	bhi.n	800983c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	889b      	ldrh	r3, [r3, #4]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fed9 	bl	800958e <USBD_CoreFindIF>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	2bff      	cmp	r3, #255	; 0xff
 80097e4:	d01d      	beq.n	8009822 <USBD_StdItfReq+0x92>
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11a      	bne.n	8009822 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097ec:	7bba      	ldrb	r2, [r7, #14]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	32ae      	adds	r2, #174	; 0xae
 80097f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00f      	beq.n	800981c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097fc:	7bba      	ldrb	r2, [r7, #14]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009804:	7bba      	ldrb	r2, [r7, #14]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	32ae      	adds	r2, #174	; 0xae
 800980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800981a:	e004      	b.n	8009826 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009820:	e001      	b.n	8009826 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d110      	bne.n	8009850 <USBD_StdItfReq+0xc0>
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10d      	bne.n	8009850 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fdc7 	bl	800a3c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800983a:	e009      	b.n	8009850 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fcf7 	bl	800a232 <USBD_CtlError>
          break;
 8009844:	e004      	b.n	8009850 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fcf2 	bl	800a232 <USBD_CtlError>
          break;
 800984e:	e000      	b.n	8009852 <USBD_StdItfReq+0xc2>
          break;
 8009850:	bf00      	nop
      }
      break;
 8009852:	e004      	b.n	800985e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fceb 	bl	800a232 <USBD_CtlError>
      break;
 800985c:	bf00      	nop
  }

  return ret;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009884:	2b40      	cmp	r3, #64	; 0x40
 8009886:	d007      	beq.n	8009898 <USBD_StdEPReq+0x30>
 8009888:	2b40      	cmp	r3, #64	; 0x40
 800988a:	f200 817f 	bhi.w	8009b8c <USBD_StdEPReq+0x324>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d02a      	beq.n	80098e8 <USBD_StdEPReq+0x80>
 8009892:	2b20      	cmp	r3, #32
 8009894:	f040 817a 	bne.w	8009b8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff fe83 	bl	80095a8 <USBD_CoreFindEP>
 80098a2:	4603      	mov	r3, r0
 80098a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098a6:	7b7b      	ldrb	r3, [r7, #13]
 80098a8:	2bff      	cmp	r3, #255	; 0xff
 80098aa:	f000 8174 	beq.w	8009b96 <USBD_StdEPReq+0x32e>
 80098ae:	7b7b      	ldrb	r3, [r7, #13]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 8170 	bne.w	8009b96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098b6:	7b7a      	ldrb	r2, [r7, #13]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098be:	7b7a      	ldrb	r2, [r7, #13]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	32ae      	adds	r2, #174	; 0xae
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 8163 	beq.w	8009b96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098d0:	7b7a      	ldrb	r2, [r7, #13]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32ae      	adds	r2, #174	; 0xae
 80098d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098e6:	e156      	b.n	8009b96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d008      	beq.n	8009902 <USBD_StdEPReq+0x9a>
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	f300 8145 	bgt.w	8009b80 <USBD_StdEPReq+0x318>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 809b 	beq.w	8009a32 <USBD_StdEPReq+0x1ca>
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d03c      	beq.n	800997a <USBD_StdEPReq+0x112>
 8009900:	e13e      	b.n	8009b80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d002      	beq.n	8009914 <USBD_StdEPReq+0xac>
 800990e:	2b03      	cmp	r3, #3
 8009910:	d016      	beq.n	8009940 <USBD_StdEPReq+0xd8>
 8009912:	e02c      	b.n	800996e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00d      	beq.n	8009936 <USBD_StdEPReq+0xce>
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b80      	cmp	r3, #128	; 0x80
 800991e:	d00a      	beq.n	8009936 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 f9a9 	bl	800ac7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800992a:	2180      	movs	r1, #128	; 0x80
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 f9a5 	bl	800ac7c <USBD_LL_StallEP>
 8009932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009934:	e020      	b.n	8009978 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc7a 	bl	800a232 <USBD_CtlError>
              break;
 800993e:	e01b      	b.n	8009978 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	885b      	ldrh	r3, [r3, #2]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10e      	bne.n	8009966 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <USBD_StdEPReq+0xfe>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b80      	cmp	r3, #128	; 0x80
 8009952:	d008      	beq.n	8009966 <USBD_StdEPReq+0xfe>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	88db      	ldrh	r3, [r3, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 f98b 	bl	800ac7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fd2e 	bl	800a3c8 <USBD_CtlSendStatus>

              break;
 800996c:	e004      	b.n	8009978 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fc5e 	bl	800a232 <USBD_CtlError>
              break;
 8009976:	bf00      	nop
          }
          break;
 8009978:	e107      	b.n	8009b8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b02      	cmp	r3, #2
 8009984:	d002      	beq.n	800998c <USBD_StdEPReq+0x124>
 8009986:	2b03      	cmp	r3, #3
 8009988:	d016      	beq.n	80099b8 <USBD_StdEPReq+0x150>
 800998a:	e04b      	b.n	8009a24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00d      	beq.n	80099ae <USBD_StdEPReq+0x146>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d00a      	beq.n	80099ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f96d 	bl	800ac7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f969 	bl	800ac7c <USBD_LL_StallEP>
 80099aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099ac:	e040      	b.n	8009a30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fc3e 	bl	800a232 <USBD_CtlError>
              break;
 80099b6:	e03b      	b.n	8009a30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	885b      	ldrh	r3, [r3, #2]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d136      	bne.n	8009a2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 f973 	bl	800acba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fcf7 	bl	800a3c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fde2 	bl	80095a8 <USBD_CoreFindEP>
 80099e4:	4603      	mov	r3, r0
 80099e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099e8:	7b7b      	ldrb	r3, [r7, #13]
 80099ea:	2bff      	cmp	r3, #255	; 0xff
 80099ec:	d01f      	beq.n	8009a2e <USBD_StdEPReq+0x1c6>
 80099ee:	7b7b      	ldrb	r3, [r7, #13]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d11c      	bne.n	8009a2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099f4:	7b7a      	ldrb	r2, [r7, #13]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099fc:	7b7a      	ldrb	r2, [r7, #13]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	32ae      	adds	r2, #174	; 0xae
 8009a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d010      	beq.n	8009a2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a0c:	7b7a      	ldrb	r2, [r7, #13]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32ae      	adds	r2, #174	; 0xae
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	4798      	blx	r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a22:	e004      	b.n	8009a2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fc03 	bl	800a232 <USBD_CtlError>
              break;
 8009a2c:	e000      	b.n	8009a30 <USBD_StdEPReq+0x1c8>
              break;
 8009a2e:	bf00      	nop
          }
          break;
 8009a30:	e0ab      	b.n	8009b8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d002      	beq.n	8009a44 <USBD_StdEPReq+0x1dc>
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d032      	beq.n	8009aa8 <USBD_StdEPReq+0x240>
 8009a42:	e097      	b.n	8009b74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <USBD_StdEPReq+0x1f2>
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b80      	cmp	r3, #128	; 0x80
 8009a4e:	d004      	beq.n	8009a5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fbed 	bl	800a232 <USBD_CtlError>
                break;
 8009a58:	e091      	b.n	8009b7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da0b      	bge.n	8009a7a <USBD_StdEPReq+0x212>
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	3310      	adds	r3, #16
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	4413      	add	r3, r2
 8009a76:	3304      	adds	r3, #4
 8009a78:	e00b      	b.n	8009a92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3304      	adds	r3, #4
 8009a92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fc37 	bl	800a314 <USBD_CtlSendData>
              break;
 8009aa6:	e06a      	b.n	8009b7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	da11      	bge.n	8009ad4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	f003 020f 	and.w	r2, r3, #15
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d117      	bne.n	8009afa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fbb0 	bl	800a232 <USBD_CtlError>
                  break;
 8009ad2:	e054      	b.n	8009b7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	f003 020f 	and.w	r2, r3, #15
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fb9d 	bl	800a232 <USBD_CtlError>
                  break;
 8009af8:	e041      	b.n	8009b7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	da0b      	bge.n	8009b1a <USBD_StdEPReq+0x2b2>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	3310      	adds	r3, #16
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	3304      	adds	r3, #4
 8009b18:	e00b      	b.n	8009b32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	3304      	adds	r3, #4
 8009b32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <USBD_StdEPReq+0x2d8>
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b80      	cmp	r3, #128	; 0x80
 8009b3e:	d103      	bne.n	8009b48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e00e      	b.n	8009b66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 f8d3 	bl	800acf8 <USBD_LL_IsStallEP>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e002      	b.n	8009b66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fbd1 	bl	800a314 <USBD_CtlSendData>
              break;
 8009b72:	e004      	b.n	8009b7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb5b 	bl	800a232 <USBD_CtlError>
              break;
 8009b7c:	bf00      	nop
          }
          break;
 8009b7e:	e004      	b.n	8009b8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fb55 	bl	800a232 <USBD_CtlError>
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e005      	b.n	8009b98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fb4f 	bl	800a232 <USBD_CtlError>
      break;
 8009b94:	e000      	b.n	8009b98 <USBD_StdEPReq+0x330>
      break;
 8009b96:	bf00      	nop
  }

  return ret;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	885b      	ldrh	r3, [r3, #2]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	2b06      	cmp	r3, #6
 8009bc6:	f200 8128 	bhi.w	8009e1a <USBD_GetDescriptor+0x276>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <USBD_GetDescriptor+0x2c>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009c05 	.word	0x08009c05
 8009bd8:	08009c45 	.word	0x08009c45
 8009bdc:	08009e1b 	.word	0x08009e1b
 8009be0:	08009e1b 	.word	0x08009e1b
 8009be4:	08009dbb 	.word	0x08009dbb
 8009be8:	08009de7 	.word	0x08009de7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	7c12      	ldrb	r2, [r2, #16]
 8009bf8:	f107 0108 	add.w	r1, r7, #8
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
      break;
 8009c02:	e112      	b.n	8009e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7c1b      	ldrb	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10d      	bne.n	8009c28 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	f107 0208 	add.w	r2, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	2202      	movs	r2, #2
 8009c24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c26:	e100      	b.n	8009e2a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	f107 0208 	add.w	r2, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	2202      	movs	r2, #2
 8009c40:	701a      	strb	r2, [r3, #0]
      break;
 8009c42:	e0f2      	b.n	8009e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	885b      	ldrh	r3, [r3, #2]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	f200 80ac 	bhi.w	8009da8 <USBD_GetDescriptor+0x204>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <USBD_GetDescriptor+0xb4>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c71 	.word	0x08009c71
 8009c5c:	08009ca5 	.word	0x08009ca5
 8009c60:	08009cd9 	.word	0x08009cd9
 8009c64:	08009d0d 	.word	0x08009d0d
 8009c68:	08009d41 	.word	0x08009d41
 8009c6c:	08009d75 	.word	0x08009d75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	7c12      	ldrb	r2, [r2, #16]
 8009c88:	f107 0108 	add.w	r1, r7, #8
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c92:	e091      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 facb 	bl	800a232 <USBD_CtlError>
            err++;
 8009c9c:	7afb      	ldrb	r3, [r7, #11]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ca2:	e089      	b.n	8009db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	7c12      	ldrb	r2, [r2, #16]
 8009cbc:	f107 0108 	add.w	r1, r7, #8
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4798      	blx	r3
 8009cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cc6:	e077      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fab1 	bl	800a232 <USBD_CtlError>
            err++;
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cd6:	e06f      	b.n	8009db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	7c12      	ldrb	r2, [r2, #16]
 8009cf0:	f107 0108 	add.w	r1, r7, #8
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4798      	blx	r3
 8009cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cfa:	e05d      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fa97 	bl	800a232 <USBD_CtlError>
            err++;
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	3301      	adds	r3, #1
 8009d08:	72fb      	strb	r3, [r7, #11]
          break;
 8009d0a:	e055      	b.n	8009db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00b      	beq.n	8009d30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	7c12      	ldrb	r2, [r2, #16]
 8009d24:	f107 0108 	add.w	r1, r7, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2e:	e043      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa7d 	bl	800a232 <USBD_CtlError>
            err++;
 8009d38:	7afb      	ldrb	r3, [r7, #11]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3e:	e03b      	b.n	8009db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	7c12      	ldrb	r2, [r2, #16]
 8009d58:	f107 0108 	add.w	r1, r7, #8
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
 8009d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d62:	e029      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa63 	bl	800a232 <USBD_CtlError>
            err++;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	72fb      	strb	r3, [r7, #11]
          break;
 8009d72:	e021      	b.n	8009db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d96:	e00f      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fa49 	bl	800a232 <USBD_CtlError>
            err++;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	3301      	adds	r3, #1
 8009da4:	72fb      	strb	r3, [r7, #11]
          break;
 8009da6:	e007      	b.n	8009db8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa41 	bl	800a232 <USBD_CtlError>
          err++;
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	3301      	adds	r3, #1
 8009db4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009db6:	bf00      	nop
      }
      break;
 8009db8:	e037      	b.n	8009e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7c1b      	ldrb	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d109      	bne.n	8009dd6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dca:	f107 0208 	add.w	r2, r7, #8
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4798      	blx	r3
 8009dd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd4:	e029      	b.n	8009e2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa2a 	bl	800a232 <USBD_CtlError>
        err++;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	3301      	adds	r3, #1
 8009de2:	72fb      	strb	r3, [r7, #11]
      break;
 8009de4:	e021      	b.n	8009e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7c1b      	ldrb	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10d      	bne.n	8009e0a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	4798      	blx	r3
 8009dfe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	2207      	movs	r2, #7
 8009e06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e08:	e00f      	b.n	8009e2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fa10 	bl	800a232 <USBD_CtlError>
        err++;
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	3301      	adds	r3, #1
 8009e16:	72fb      	strb	r3, [r7, #11]
      break;
 8009e18:	e007      	b.n	8009e2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fa08 	bl	800a232 <USBD_CtlError>
      err++;
 8009e22:	7afb      	ldrb	r3, [r7, #11]
 8009e24:	3301      	adds	r3, #1
 8009e26:	72fb      	strb	r3, [r7, #11]
      break;
 8009e28:	bf00      	nop
  }

  if (err != 0U)
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d11e      	bne.n	8009e6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	88db      	ldrh	r3, [r3, #6]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d016      	beq.n	8009e66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e38:	893b      	ldrh	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00e      	beq.n	8009e5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88da      	ldrh	r2, [r3, #6]
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	bf28      	it	cs
 8009e48:	4613      	movcs	r3, r2
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e4e:	893b      	ldrh	r3, [r7, #8]
 8009e50:	461a      	mov	r2, r3
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa5d 	bl	800a314 <USBD_CtlSendData>
 8009e5a:	e009      	b.n	8009e70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9e7 	bl	800a232 <USBD_CtlError>
 8009e64:	e004      	b.n	8009e70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 faae 	bl	800a3c8 <USBD_CtlSendStatus>
 8009e6c:	e000      	b.n	8009e70 <USBD_GetDescriptor+0x2cc>
    return;
 8009e6e:	bf00      	nop
  }
}
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop

08009e78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	889b      	ldrh	r3, [r3, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d131      	bne.n	8009eee <USBD_SetAddress+0x76>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	88db      	ldrh	r3, [r3, #6]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d12d      	bne.n	8009eee <USBD_SetAddress+0x76>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	2b7f      	cmp	r3, #127	; 0x7f
 8009e98:	d829      	bhi.n	8009eee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	885b      	ldrh	r3, [r3, #2]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d104      	bne.n	8009ebc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f9bc 	bl	800a232 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eba:	e01d      	b.n	8009ef8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	7bfa      	ldrb	r2, [r7, #15]
 8009ec0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 ff41 	bl	800ad50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fa7a 	bl	800a3c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee2:	e009      	b.n	8009ef8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eec:	e004      	b.n	8009ef8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f99e 	bl	800a232 <USBD_CtlError>
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	4b4e      	ldr	r3, [pc, #312]	; (800a050 <USBD_SetConfig+0x150>)
 8009f16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f18:	4b4d      	ldr	r3, [pc, #308]	; (800a050 <USBD_SetConfig+0x150>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d905      	bls.n	8009f2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f985 	bl	800a232 <USBD_CtlError>
    return USBD_FAIL;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e08c      	b.n	800a046 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d002      	beq.n	8009f3e <USBD_SetConfig+0x3e>
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d029      	beq.n	8009f90 <USBD_SetConfig+0x90>
 8009f3c:	e075      	b.n	800a02a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f3e:	4b44      	ldr	r3, [pc, #272]	; (800a050 <USBD_SetConfig+0x150>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d020      	beq.n	8009f88 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f46:	4b42      	ldr	r3, [pc, #264]	; (800a050 <USBD_SetConfig+0x150>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f50:	4b3f      	ldr	r3, [pc, #252]	; (800a050 <USBD_SetConfig+0x150>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fe ffe7 	bl	8008f2a <USBD_SetClassConfig>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d008      	beq.n	8009f78 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f962 	bl	800a232 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2202      	movs	r2, #2
 8009f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f76:	e065      	b.n	800a044 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fa25 	bl	800a3c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2203      	movs	r2, #3
 8009f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f86:	e05d      	b.n	800a044 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fa1d 	bl	800a3c8 <USBD_CtlSendStatus>
      break;
 8009f8e:	e059      	b.n	800a044 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f90:	4b2f      	ldr	r3, [pc, #188]	; (800a050 <USBD_SetConfig+0x150>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d112      	bne.n	8009fbe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fa0:	4b2b      	ldr	r3, [pc, #172]	; (800a050 <USBD_SetConfig+0x150>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009faa:	4b29      	ldr	r3, [pc, #164]	; (800a050 <USBD_SetConfig+0x150>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7fe ffd6 	bl	8008f62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa06 	bl	800a3c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fbc:	e042      	b.n	800a044 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fbe:	4b24      	ldr	r3, [pc, #144]	; (800a050 <USBD_SetConfig+0x150>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d02a      	beq.n	800a022 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7fe ffc4 	bl	8008f62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fda:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <USBD_SetConfig+0x150>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fe4:	4b1a      	ldr	r3, [pc, #104]	; (800a050 <USBD_SetConfig+0x150>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fe ff9d 	bl	8008f2a <USBD_SetClassConfig>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00f      	beq.n	800a01a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f918 	bl	800a232 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b2db      	uxtb	r3, r3
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7fe ffa9 	bl	8008f62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a018:	e014      	b.n	800a044 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f9d4 	bl	800a3c8 <USBD_CtlSendStatus>
      break;
 800a020:	e010      	b.n	800a044 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f9d0 	bl	800a3c8 <USBD_CtlSendStatus>
      break;
 800a028:	e00c      	b.n	800a044 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f900 	bl	800a232 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <USBD_SetConfig+0x150>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fe ff92 	bl	8008f62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a03e:	2303      	movs	r3, #3
 800a040:	73fb      	strb	r3, [r7, #15]
      break;
 800a042:	bf00      	nop
  }

  return ret;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	2403b290 	.word	0x2403b290

0800a054 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	88db      	ldrh	r3, [r3, #6]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d004      	beq.n	800a070 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f8e2 	bl	800a232 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a06e:	e023      	b.n	800a0b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b02      	cmp	r3, #2
 800a07a:	dc02      	bgt.n	800a082 <USBD_GetConfig+0x2e>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	dc03      	bgt.n	800a088 <USBD_GetConfig+0x34>
 800a080:	e015      	b.n	800a0ae <USBD_GetConfig+0x5a>
 800a082:	2b03      	cmp	r3, #3
 800a084:	d00b      	beq.n	800a09e <USBD_GetConfig+0x4a>
 800a086:	e012      	b.n	800a0ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3308      	adds	r3, #8
 800a092:	2201      	movs	r2, #1
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f93c 	bl	800a314 <USBD_CtlSendData>
        break;
 800a09c:	e00c      	b.n	800a0b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f934 	bl	800a314 <USBD_CtlSendData>
        break;
 800a0ac:	e004      	b.n	800a0b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8be 	bl	800a232 <USBD_CtlError>
        break;
 800a0b6:	bf00      	nop
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d81e      	bhi.n	800a116 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	88db      	ldrh	r3, [r3, #6]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d004      	beq.n	800a0ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f8a5 	bl	800a232 <USBD_CtlError>
        break;
 800a0e8:	e01a      	b.n	800a120 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f043 0202 	orr.w	r2, r3, #2
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	330c      	adds	r3, #12
 800a10a:	2202      	movs	r2, #2
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f900 	bl	800a314 <USBD_CtlSendData>
      break;
 800a114:	e004      	b.n	800a120 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f88a 	bl	800a232 <USBD_CtlError>
      break;
 800a11e:	bf00      	nop
  }
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d107      	bne.n	800a14a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f940 	bl	800a3c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a148:	e013      	b.n	800a172 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	885b      	ldrh	r3, [r3, #2]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d10b      	bne.n	800a16a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	889b      	ldrh	r3, [r3, #4]
 800a156:	0a1b      	lsrs	r3, r3, #8
 800a158:	b29b      	uxth	r3, r3
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f930 	bl	800a3c8 <USBD_CtlSendStatus>
}
 800a168:	e003      	b.n	800a172 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f860 	bl	800a232 <USBD_CtlError>
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	3b01      	subs	r3, #1
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d80b      	bhi.n	800a1aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	885b      	ldrh	r3, [r3, #2]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d10c      	bne.n	800a1b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f910 	bl	800a3c8 <USBD_CtlSendStatus>
      }
      break;
 800a1a8:	e004      	b.n	800a1b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f840 	bl	800a232 <USBD_CtlError>
      break;
 800a1b2:	e000      	b.n	800a1b6 <USBD_ClrFeature+0x3c>
      break;
 800a1b4:	bf00      	nop
  }
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fa41 	bl	8009670 <SWAPBYTE>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fa34 	bl	8009670 <SWAPBYTE>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3301      	adds	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3301      	adds	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff fa27 	bl	8009670 <SWAPBYTE>
 800a222:	4603      	mov	r3, r0
 800a224:	461a      	mov	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	80da      	strh	r2, [r3, #6]
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a23c:	2180      	movs	r1, #128	; 0x80
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fd1c 	bl	800ac7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a244:	2100      	movs	r1, #0
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fd18 	bl	800ac7c <USBD_LL_StallEP>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d036      	beq.n	800a2d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a26e:	6938      	ldr	r0, [r7, #16]
 800a270:	f000 f836 	bl	800a2e0 <USBD_GetLen>
 800a274:	4603      	mov	r3, r0
 800a276:	3301      	adds	r3, #1
 800a278:	b29b      	uxth	r3, r3
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	4413      	add	r3, r2
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7812      	ldrb	r2, [r2, #0]
 800a28c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	3301      	adds	r3, #1
 800a292:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	4413      	add	r3, r2
 800a29a:	2203      	movs	r2, #3
 800a29c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2a4:	e013      	b.n	800a2ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	7812      	ldrb	r2, [r2, #0]
 800a2b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	613b      	str	r3, [r7, #16]
    idx++;
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e7      	bne.n	800a2a6 <USBD_GetString+0x52>
 800a2d6:	e000      	b.n	800a2da <USBD_GetString+0x86>
    return;
 800a2d8:	bf00      	nop
  }
}
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2f0:	e005      	b.n	800a2fe <USBD_GetLen+0x1e>
  {
    len++;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1f5      	bne.n	800a2f2 <USBD_GetLen+0x12>
  }

  return len;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2202      	movs	r2, #2
 800a324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	2100      	movs	r1, #0
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 fd27 	bl	800ad8e <USBD_LL_Transmit>

  return USBD_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	2100      	movs	r1, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fd16 	bl	800ad8e <USBD_LL_Transmit>

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2203      	movs	r2, #3
 800a37c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	2100      	movs	r1, #0
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fd1a 	bl	800add0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fd09 	bl	800add0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fcd5 	bl	800ad8e <USBD_LL_Transmit>

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2205      	movs	r2, #5
 800a3fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3fe:	2300      	movs	r3, #0
 800a400:	2200      	movs	r2, #0
 800a402:	2100      	movs	r1, #0
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fce3 	bl	800add0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a418:	2201      	movs	r2, #1
 800a41a:	4913      	ldr	r1, [pc, #76]	; (800a468 <MX_USB_DEVICE_Init+0x54>)
 800a41c:	4813      	ldr	r0, [pc, #76]	; (800a46c <MX_USB_DEVICE_Init+0x58>)
 800a41e:	f7fe fd07 	bl	8008e30 <USBD_Init>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a428:	f7f7 f9e2 	bl	80017f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a42c:	4910      	ldr	r1, [pc, #64]	; (800a470 <MX_USB_DEVICE_Init+0x5c>)
 800a42e:	480f      	ldr	r0, [pc, #60]	; (800a46c <MX_USB_DEVICE_Init+0x58>)
 800a430:	f7fe fd2e 	bl	8008e90 <USBD_RegisterClass>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a43a:	f7f7 f9d9 	bl	80017f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a43e:	490d      	ldr	r1, [pc, #52]	; (800a474 <MX_USB_DEVICE_Init+0x60>)
 800a440:	480a      	ldr	r0, [pc, #40]	; (800a46c <MX_USB_DEVICE_Init+0x58>)
 800a442:	f7fe fc1f 	bl	8008c84 <USBD_CDC_RegisterInterface>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a44c:	f7f7 f9d0 	bl	80017f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a450:	4806      	ldr	r0, [pc, #24]	; (800a46c <MX_USB_DEVICE_Init+0x58>)
 800a452:	f7fe fd53 	bl	8008efc <USBD_Start>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a45c:	f7f7 f9c8 	bl	80017f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a460:	f7f9 fb08 	bl	8003a74 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a464:	bf00      	nop
 800a466:	bd80      	pop	{r7, pc}
 800a468:	24000124 	.word	0x24000124
 800a46c:	2403b294 	.word	0x2403b294
 800a470:	24000090 	.word	0x24000090
 800a474:	24000110 	.word	0x24000110

0800a478 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a47c:	2200      	movs	r2, #0
 800a47e:	4905      	ldr	r1, [pc, #20]	; (800a494 <CDC_Init_HS+0x1c>)
 800a480:	4805      	ldr	r0, [pc, #20]	; (800a498 <CDC_Init_HS+0x20>)
 800a482:	f7fe fc19 	bl	8008cb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a486:	4905      	ldr	r1, [pc, #20]	; (800a49c <CDC_Init_HS+0x24>)
 800a488:	4803      	ldr	r0, [pc, #12]	; (800a498 <CDC_Init_HS+0x20>)
 800a48a:	f7fe fc37 	bl	8008cfc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a48e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a490:	4618      	mov	r0, r3
 800a492:	bd80      	pop	{r7, pc}
 800a494:	2403bd70 	.word	0x2403bd70
 800a498:	2403b294 	.word	0x2403b294
 800a49c:	2403b570 	.word	0x2403b570

0800a4a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a4a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b23      	cmp	r3, #35	; 0x23
 800a4c4:	d84a      	bhi.n	800a55c <CDC_Control_HS+0xac>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <CDC_Control_HS+0x1c>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a55d 	.word	0x0800a55d
 800a4d0:	0800a55d 	.word	0x0800a55d
 800a4d4:	0800a55d 	.word	0x0800a55d
 800a4d8:	0800a55d 	.word	0x0800a55d
 800a4dc:	0800a55d 	.word	0x0800a55d
 800a4e0:	0800a55d 	.word	0x0800a55d
 800a4e4:	0800a55d 	.word	0x0800a55d
 800a4e8:	0800a55d 	.word	0x0800a55d
 800a4ec:	0800a55d 	.word	0x0800a55d
 800a4f0:	0800a55d 	.word	0x0800a55d
 800a4f4:	0800a55d 	.word	0x0800a55d
 800a4f8:	0800a55d 	.word	0x0800a55d
 800a4fc:	0800a55d 	.word	0x0800a55d
 800a500:	0800a55d 	.word	0x0800a55d
 800a504:	0800a55d 	.word	0x0800a55d
 800a508:	0800a55d 	.word	0x0800a55d
 800a50c:	0800a55d 	.word	0x0800a55d
 800a510:	0800a55d 	.word	0x0800a55d
 800a514:	0800a55d 	.word	0x0800a55d
 800a518:	0800a55d 	.word	0x0800a55d
 800a51c:	0800a55d 	.word	0x0800a55d
 800a520:	0800a55d 	.word	0x0800a55d
 800a524:	0800a55d 	.word	0x0800a55d
 800a528:	0800a55d 	.word	0x0800a55d
 800a52c:	0800a55d 	.word	0x0800a55d
 800a530:	0800a55d 	.word	0x0800a55d
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a55d 	.word	0x0800a55d
 800a54c:	0800a55d 	.word	0x0800a55d
 800a550:	0800a55d 	.word	0x0800a55d
 800a554:	0800a55d 	.word	0x0800a55d
 800a558:	0800a55d 	.word	0x0800a55d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a55c:	bf00      	nop
  }

  return (USBD_OK);
 800a55e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	480f      	ldr	r0, [pc, #60]	; (800a5b8 <CDC_Receive_HS+0x4c>)
 800a57a:	f7fe fbbf 	bl	8008cfc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a57e:	480e      	ldr	r0, [pc, #56]	; (800a5b8 <CDC_Receive_HS+0x4c>)
 800a580:	f7fe fc20 	bl	8008dc4 <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 800a584:	2240      	movs	r2, #64	; 0x40
 800a586:	2100      	movs	r1, #0
 800a588:	480c      	ldr	r0, [pc, #48]	; (800a5bc <CDC_Receive_HS+0x50>)
 800a58a:	f000 fcd5 	bl	800af38 <memset>
  uint8_t len = (uint8_t)*Len;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	461a      	mov	r2, r3
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	4808      	ldr	r0, [pc, #32]	; (800a5bc <CDC_Receive_HS+0x50>)
 800a59c:	f000 fcbe 	bl	800af1c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fcc6 	bl	800af38 <memset>

  return (USBD_OK);
 800a5ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2403b294 	.word	0x2403b294
 800a5bc:	240002c8 	.word	0x240002c8

0800a5c0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a5d0:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <CDC_Transmit_HS+0x48>)
 800a5d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e00b      	b.n	800a5fe <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a5e6:	887b      	ldrh	r3, [r7, #2]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	4806      	ldr	r0, [pc, #24]	; (800a608 <CDC_Transmit_HS+0x48>)
 800a5ee:	f7fe fb63 	bl	8008cb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a5f2:	4805      	ldr	r0, [pc, #20]	; (800a608 <CDC_Transmit_HS+0x48>)
 800a5f4:	f7fe fba0 	bl	8008d38 <USBD_CDC_TransmitPacket>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	2403b294 	.word	0x2403b294

0800a60c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a61e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a622:	4618      	mov	r0, r3
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2212      	movs	r2, #18
 800a640:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a642:	4b03      	ldr	r3, [pc, #12]	; (800a650 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	24000140 	.word	0x24000140

0800a654 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2204      	movs	r2, #4
 800a664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a666:	4b03      	ldr	r3, [pc, #12]	; (800a674 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	24000154 	.word	0x24000154

0800a678 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4907      	ldr	r1, [pc, #28]	; (800a6ac <USBD_HS_ProductStrDescriptor+0x34>)
 800a68e:	4808      	ldr	r0, [pc, #32]	; (800a6b0 <USBD_HS_ProductStrDescriptor+0x38>)
 800a690:	f7ff fde0 	bl	800a254 <USBD_GetString>
 800a694:	e004      	b.n	800a6a0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	4904      	ldr	r1, [pc, #16]	; (800a6ac <USBD_HS_ProductStrDescriptor+0x34>)
 800a69a:	4805      	ldr	r0, [pc, #20]	; (800a6b0 <USBD_HS_ProductStrDescriptor+0x38>)
 800a69c:	f7ff fdda 	bl	800a254 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a0:	4b02      	ldr	r3, [pc, #8]	; (800a6ac <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	2403c570 	.word	0x2403c570
 800a6b0:	0800c4d0 	.word	0x0800c4d0

0800a6b4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	6039      	str	r1, [r7, #0]
 800a6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	4904      	ldr	r1, [pc, #16]	; (800a6d4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a6c4:	4804      	ldr	r0, [pc, #16]	; (800a6d8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a6c6:	f7ff fdc5 	bl	800a254 <USBD_GetString>
  return USBD_StrDesc;
 800a6ca:	4b02      	ldr	r3, [pc, #8]	; (800a6d4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	2403c570 	.word	0x2403c570
 800a6d8:	0800c4e8 	.word	0x0800c4e8

0800a6dc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	221a      	movs	r2, #26
 800a6ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6ee:	f000 f843 	bl	800a778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a6f2:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	24000158 	.word	0x24000158

0800a700 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	6039      	str	r1, [r7, #0]
 800a70a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a70c:	79fb      	ldrb	r3, [r7, #7]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d105      	bne.n	800a71e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	4907      	ldr	r1, [pc, #28]	; (800a734 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a716:	4808      	ldr	r0, [pc, #32]	; (800a738 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a718:	f7ff fd9c 	bl	800a254 <USBD_GetString>
 800a71c:	e004      	b.n	800a728 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	4904      	ldr	r1, [pc, #16]	; (800a734 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a722:	4805      	ldr	r0, [pc, #20]	; (800a738 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a724:	f7ff fd96 	bl	800a254 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	2403c570 	.word	0x2403c570
 800a738:	0800c4fc 	.word	0x0800c4fc

0800a73c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	6039      	str	r1, [r7, #0]
 800a746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	4907      	ldr	r1, [pc, #28]	; (800a770 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a752:	4808      	ldr	r0, [pc, #32]	; (800a774 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a754:	f7ff fd7e 	bl	800a254 <USBD_GetString>
 800a758:	e004      	b.n	800a764 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	4904      	ldr	r1, [pc, #16]	; (800a770 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a75e:	4805      	ldr	r0, [pc, #20]	; (800a774 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a760:	f7ff fd78 	bl	800a254 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a764:	4b02      	ldr	r3, [pc, #8]	; (800a770 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2403c570 	.word	0x2403c570
 800a774:	0800c508 	.word	0x0800c508

0800a778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a77e:	4b0f      	ldr	r3, [pc, #60]	; (800a7bc <Get_SerialNum+0x44>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a784:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <Get_SerialNum+0x48>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a78a:	4b0e      	ldr	r3, [pc, #56]	; (800a7c4 <Get_SerialNum+0x4c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d009      	beq.n	800a7b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a79e:	2208      	movs	r2, #8
 800a7a0:	4909      	ldr	r1, [pc, #36]	; (800a7c8 <Get_SerialNum+0x50>)
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f814 	bl	800a7d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	4908      	ldr	r1, [pc, #32]	; (800a7cc <Get_SerialNum+0x54>)
 800a7ac:	68b8      	ldr	r0, [r7, #8]
 800a7ae:	f000 f80f 	bl	800a7d0 <IntToUnicode>
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	1ff1e800 	.word	0x1ff1e800
 800a7c0:	1ff1e804 	.word	0x1ff1e804
 800a7c4:	1ff1e808 	.word	0x1ff1e808
 800a7c8:	2400015a 	.word	0x2400015a
 800a7cc:	2400016a 	.word	0x2400016a

0800a7d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
 800a7e6:	e027      	b.n	800a838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	0f1b      	lsrs	r3, r3, #28
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	d80b      	bhi.n	800a808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	0f1b      	lsrs	r3, r3, #28
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	440b      	add	r3, r1
 800a800:	3230      	adds	r2, #48	; 0x30
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	e00a      	b.n	800a81e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	0f1b      	lsrs	r3, r3, #28
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	4619      	mov	r1, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	440b      	add	r3, r1
 800a818:	3237      	adds	r2, #55	; 0x37
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	3301      	adds	r3, #1
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	3301      	adds	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	7dfa      	ldrb	r2, [r7, #23]
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d3d3      	bcc.n	800a7e8 <IntToUnicode+0x18>
  }
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
	...

0800a850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b0b6      	sub	sp, #216	; 0xd8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	609a      	str	r2, [r3, #8]
 800a864:	60da      	str	r2, [r3, #12]
 800a866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a868:	f107 0310 	add.w	r3, r7, #16
 800a86c:	22b4      	movs	r2, #180	; 0xb4
 800a86e:	2100      	movs	r1, #0
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fb61 	bl	800af38 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a2b      	ldr	r2, [pc, #172]	; (800a928 <HAL_PCD_MspInit+0xd8>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d14e      	bne.n	800a91e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a884:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a886:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a88a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a88e:	f107 0310 	add.w	r3, r7, #16
 800a892:	4618      	mov	r0, r3
 800a894:	f7fa f80c 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800a89e:	f7f6 ffa7 	bl	80017f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a8a2:	f7f9 f8e7 	bl	8003a74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8a6:	4b21      	ldr	r3, [pc, #132]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a8ae:	f043 0301 	orr.w	r3, r3, #1
 800a8b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8b6:	4b1d      	ldr	r3, [pc, #116]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a8b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800a8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a8de:	230a      	movs	r3, #10
 800a8e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800a8e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4811      	ldr	r0, [pc, #68]	; (800a930 <HAL_PCD_MspInit+0xe0>)
 800a8ec:	f7f7 fbd8 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a8f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a8f6:	4a0d      	ldr	r2, [pc, #52]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a8f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a8fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a900:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <HAL_PCD_MspInit+0xdc>)
 800a902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90a:	60bb      	str	r3, [r7, #8]
 800a90c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	204d      	movs	r0, #77	; 0x4d
 800a914:	f7f7 fb8f 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a918:	204d      	movs	r0, #77	; 0x4d
 800a91a:	f7f7 fba6 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a91e:	bf00      	nop
 800a920:	37d8      	adds	r7, #216	; 0xd8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	40040000 	.word	0x40040000
 800a92c:	58024400 	.word	0x58024400
 800a930:	58020000 	.word	0x58020000

0800a934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7fe fb23 	bl	8008f96 <USBD_LL_SetupStage>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	4619      	mov	r1, r3
 800a982:	f7fe fb5d 	bl	8009040 <USBD_LL_DataOutStage>
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	440b      	add	r3, r1
 800a9ae:	334c      	adds	r3, #76	; 0x4c
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	78fb      	ldrb	r3, [r7, #3]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f7fe fbf6 	bl	80091a6 <USBD_LL_DataInStage>
}
 800a9ba:	bf00      	nop
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fd2a 	bl	800942a <USBD_LL_SOF>
}
 800a9d6:	bf00      	nop
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
 800a9f6:	e008      	b.n	800aa0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d102      	bne.n	800aa06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
 800aa04:	e001      	b.n	800aa0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa06:	f7f6 fef3 	bl	80017f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa10:	7bfa      	ldrb	r2, [r7, #15]
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fcca 	bl	80093ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fc72 	bl	800930a <USBD_LL_Reset>
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fcc5 	bl	80093ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <HAL_PCD_SuspendCallback+0x48>)
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	4a03      	ldr	r2, [pc, #12]	; (800aa78 <HAL_PCD_SuspendCallback+0x48>)
 800aa6a:	f043 0306 	orr.w	r3, r3, #6
 800aa6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed00 	.word	0xe000ed00

0800aa7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fcb5 	bl	80093fa <USBD_LL_Resume>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fd0d 	bl	80094ce <USBD_LL_IsoOUTIncomplete>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fcc9 	bl	800946a <USBD_LL_IsoINIncomplete>
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fd1f 	bl	8009532 <USBD_LL_DevConnected>
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fd1c 	bl	8009548 <USBD_LL_DevDisconnected>
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d140      	bne.n	800abaa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ab28:	4a22      	ldr	r2, [pc, #136]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a20      	ldr	r2, [pc, #128]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab3a:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <USBD_LL_Init+0xa0>)
 800ab3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ab3e:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab40:	2209      	movs	r2, #9
 800ab42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ab44:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab46:	2202      	movs	r2, #2
 800ab48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ab50:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab52:	2202      	movs	r2, #2
 800ab54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ab5c:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ab62:	4b14      	ldr	r3, [pc, #80]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ab68:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ab6e:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ab7a:	480e      	ldr	r0, [pc, #56]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab7c:	f7f7 fc6b 	bl	8002456 <HAL_PCD_Init>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ab86:	f7f6 fe33 	bl	80017f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ab8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab8e:	4809      	ldr	r0, [pc, #36]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab90:	f7f8 fef5 	bl	800397e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ab94:	2280      	movs	r2, #128	; 0x80
 800ab96:	2100      	movs	r1, #0
 800ab98:	4806      	ldr	r0, [pc, #24]	; (800abb4 <USBD_LL_Init+0x9c>)
 800ab9a:	f7f8 fea9 	bl	80038f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ab9e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800aba2:	2101      	movs	r1, #1
 800aba4:	4803      	ldr	r0, [pc, #12]	; (800abb4 <USBD_LL_Init+0x9c>)
 800aba6:	f7f8 fea3 	bl	80038f0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	2403c770 	.word	0x2403c770
 800abb8:	40040000 	.word	0x40040000

0800abbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f7 fd63 	bl	800269e <HAL_PCD_Start>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 f942 	bl	800ae68 <USBD_Get_USB_Status>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	461a      	mov	r2, r3
 800ac00:	4603      	mov	r3, r0
 800ac02:	70fb      	strb	r3, [r7, #3]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70bb      	strb	r3, [r7, #2]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac1a:	78bb      	ldrb	r3, [r7, #2]
 800ac1c:	883a      	ldrh	r2, [r7, #0]
 800ac1e:	78f9      	ldrb	r1, [r7, #3]
 800ac20:	f7f8 fa61 	bl	80030e6 <HAL_PCD_EP_Open>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f91c 	bl	800ae68 <USBD_Get_USB_Status>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7f8 faaa 	bl	80031b6 <HAL_PCD_EP_Close>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f8fd 	bl	800ae68 <USBD_Get_USB_Status>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f8 fb82 	bl	80033a4 <HAL_PCD_EP_SetStall>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f8de 	bl	800ae68 <USBD_Get_USB_Status>
 800acac:	4603      	mov	r3, r0
 800acae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acd4:	78fa      	ldrb	r2, [r7, #3]
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f8 fbc7 	bl	800346c <HAL_PCD_EP_ClrStall>
 800acde:	4603      	mov	r3, r0
 800ace0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f8bf 	bl	800ae68 <USBD_Get_USB_Status>
 800acea:	4603      	mov	r3, r0
 800acec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acee:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da0b      	bge.n	800ad2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad1a:	68f9      	ldr	r1, [r7, #12]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	333e      	adds	r3, #62	; 0x3e
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	e00b      	b.n	800ad44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	4613      	mov	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f8 f994 	bl	800309c <HAL_PCD_SetAddress>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f874 	bl	800ae68 <USBD_Get_USB_Status>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b086      	sub	sp, #24
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adac:	7af9      	ldrb	r1, [r7, #11]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	f7f8 faad 	bl	8003310 <HAL_PCD_EP_Transmit>
 800adb6:	4603      	mov	r3, r0
 800adb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 f853 	bl	800ae68 <USBD_Get_USB_Status>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	460b      	mov	r3, r1
 800adde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adee:	7af9      	ldrb	r1, [r7, #11]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	f7f8 fa29 	bl	800324a <HAL_PCD_EP_Receive>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f832 	bl	800ae68 <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f8 fa59 	bl	80032e0 <HAL_PCD_EP_GetRxCount>
 800ae2e:	4603      	mov	r3, r0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae40:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <USBD_static_malloc+0x18>)
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	2403cc7c 	.word	0x2403cc7c

0800ae54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]

}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d817      	bhi.n	800aeac <USBD_Get_USB_Status+0x44>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <USBD_Get_USB_Status+0x1c>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800ae95 	.word	0x0800ae95
 800ae88:	0800ae9b 	.word	0x0800ae9b
 800ae8c:	0800aea1 	.word	0x0800aea1
 800ae90:	0800aea7 	.word	0x0800aea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
    break;
 800ae98:	e00b      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9e:	e008      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aea0:	2301      	movs	r3, #1
 800aea2:	73fb      	strb	r3, [r7, #15]
    break;
 800aea4:	e005      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aea6:	2303      	movs	r3, #3
 800aea8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeaa:	e002      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aeac:	2303      	movs	r3, #3
 800aeae:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb0:	bf00      	nop
  }
  return usb_status;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <atoi>:
 800aec0:	220a      	movs	r2, #10
 800aec2:	2100      	movs	r1, #0
 800aec4:	f000 b93e 	b.w	800b144 <strtol>

0800aec8 <__errno>:
 800aec8:	4b01      	ldr	r3, [pc, #4]	; (800aed0 <__errno+0x8>)
 800aeca:	6818      	ldr	r0, [r3, #0]
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	24000174 	.word	0x24000174

0800aed4 <__libc_init_array>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	4d0d      	ldr	r5, [pc, #52]	; (800af0c <__libc_init_array+0x38>)
 800aed8:	4c0d      	ldr	r4, [pc, #52]	; (800af10 <__libc_init_array+0x3c>)
 800aeda:	1b64      	subs	r4, r4, r5
 800aedc:	10a4      	asrs	r4, r4, #2
 800aede:	2600      	movs	r6, #0
 800aee0:	42a6      	cmp	r6, r4
 800aee2:	d109      	bne.n	800aef8 <__libc_init_array+0x24>
 800aee4:	4d0b      	ldr	r5, [pc, #44]	; (800af14 <__libc_init_array+0x40>)
 800aee6:	4c0c      	ldr	r4, [pc, #48]	; (800af18 <__libc_init_array+0x44>)
 800aee8:	f001 fade 	bl	800c4a8 <_init>
 800aeec:	1b64      	subs	r4, r4, r5
 800aeee:	10a4      	asrs	r4, r4, #2
 800aef0:	2600      	movs	r6, #0
 800aef2:	42a6      	cmp	r6, r4
 800aef4:	d105      	bne.n	800af02 <__libc_init_array+0x2e>
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aefc:	4798      	blx	r3
 800aefe:	3601      	adds	r6, #1
 800af00:	e7ee      	b.n	800aee0 <__libc_init_array+0xc>
 800af02:	f855 3b04 	ldr.w	r3, [r5], #4
 800af06:	4798      	blx	r3
 800af08:	3601      	adds	r6, #1
 800af0a:	e7f2      	b.n	800aef2 <__libc_init_array+0x1e>
 800af0c:	0800c778 	.word	0x0800c778
 800af10:	0800c778 	.word	0x0800c778
 800af14:	0800c778 	.word	0x0800c778
 800af18:	0800c77c 	.word	0x0800c77c

0800af1c <memcpy>:
 800af1c:	440a      	add	r2, r1
 800af1e:	4291      	cmp	r1, r2
 800af20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800af24:	d100      	bne.n	800af28 <memcpy+0xc>
 800af26:	4770      	bx	lr
 800af28:	b510      	push	{r4, lr}
 800af2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af32:	4291      	cmp	r1, r2
 800af34:	d1f9      	bne.n	800af2a <memcpy+0xe>
 800af36:	bd10      	pop	{r4, pc}

0800af38 <memset>:
 800af38:	4402      	add	r2, r0
 800af3a:	4603      	mov	r3, r0
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d100      	bne.n	800af42 <memset+0xa>
 800af40:	4770      	bx	lr
 800af42:	f803 1b01 	strb.w	r1, [r3], #1
 800af46:	e7f9      	b.n	800af3c <memset+0x4>

0800af48 <siprintf>:
 800af48:	b40e      	push	{r1, r2, r3}
 800af4a:	b500      	push	{lr}
 800af4c:	b09c      	sub	sp, #112	; 0x70
 800af4e:	ab1d      	add	r3, sp, #116	; 0x74
 800af50:	9002      	str	r0, [sp, #8]
 800af52:	9006      	str	r0, [sp, #24]
 800af54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af58:	4809      	ldr	r0, [pc, #36]	; (800af80 <siprintf+0x38>)
 800af5a:	9107      	str	r1, [sp, #28]
 800af5c:	9104      	str	r1, [sp, #16]
 800af5e:	4909      	ldr	r1, [pc, #36]	; (800af84 <siprintf+0x3c>)
 800af60:	f853 2b04 	ldr.w	r2, [r3], #4
 800af64:	9105      	str	r1, [sp, #20]
 800af66:	6800      	ldr	r0, [r0, #0]
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	a902      	add	r1, sp, #8
 800af6c:	f000 fa68 	bl	800b440 <_svfiprintf_r>
 800af70:	9b02      	ldr	r3, [sp, #8]
 800af72:	2200      	movs	r2, #0
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	b01c      	add	sp, #112	; 0x70
 800af78:	f85d eb04 	ldr.w	lr, [sp], #4
 800af7c:	b003      	add	sp, #12
 800af7e:	4770      	bx	lr
 800af80:	24000174 	.word	0x24000174
 800af84:	ffff0208 	.word	0xffff0208

0800af88 <strtok>:
 800af88:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <strtok+0x5c>)
 800af8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af8c:	681e      	ldr	r6, [r3, #0]
 800af8e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800af90:	4605      	mov	r5, r0
 800af92:	b9fc      	cbnz	r4, 800afd4 <strtok+0x4c>
 800af94:	2050      	movs	r0, #80	; 0x50
 800af96:	9101      	str	r1, [sp, #4]
 800af98:	f000 f90e 	bl	800b1b8 <malloc>
 800af9c:	9901      	ldr	r1, [sp, #4]
 800af9e:	65b0      	str	r0, [r6, #88]	; 0x58
 800afa0:	4602      	mov	r2, r0
 800afa2:	b920      	cbnz	r0, 800afae <strtok+0x26>
 800afa4:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <strtok+0x60>)
 800afa6:	4811      	ldr	r0, [pc, #68]	; (800afec <strtok+0x64>)
 800afa8:	2157      	movs	r1, #87	; 0x57
 800afaa:	f000 f8d5 	bl	800b158 <__assert_func>
 800afae:	e9c0 4400 	strd	r4, r4, [r0]
 800afb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800afb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800afba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800afbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800afc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800afc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800afca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800afce:	6184      	str	r4, [r0, #24]
 800afd0:	7704      	strb	r4, [r0, #28]
 800afd2:	6244      	str	r4, [r0, #36]	; 0x24
 800afd4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800afd6:	2301      	movs	r3, #1
 800afd8:	4628      	mov	r0, r5
 800afda:	b002      	add	sp, #8
 800afdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afe0:	f000 b806 	b.w	800aff0 <__strtok_r>
 800afe4:	24000174 	.word	0x24000174
 800afe8:	0800c534 	.word	0x0800c534
 800afec:	0800c54b 	.word	0x0800c54b

0800aff0 <__strtok_r>:
 800aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff2:	b908      	cbnz	r0, 800aff8 <__strtok_r+0x8>
 800aff4:	6810      	ldr	r0, [r2, #0]
 800aff6:	b188      	cbz	r0, 800b01c <__strtok_r+0x2c>
 800aff8:	4604      	mov	r4, r0
 800affa:	4620      	mov	r0, r4
 800affc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b000:	460f      	mov	r7, r1
 800b002:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b006:	b91e      	cbnz	r6, 800b010 <__strtok_r+0x20>
 800b008:	b965      	cbnz	r5, 800b024 <__strtok_r+0x34>
 800b00a:	6015      	str	r5, [r2, #0]
 800b00c:	4628      	mov	r0, r5
 800b00e:	e005      	b.n	800b01c <__strtok_r+0x2c>
 800b010:	42b5      	cmp	r5, r6
 800b012:	d1f6      	bne.n	800b002 <__strtok_r+0x12>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f0      	bne.n	800affa <__strtok_r+0xa>
 800b018:	6014      	str	r4, [r2, #0]
 800b01a:	7003      	strb	r3, [r0, #0]
 800b01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b01e:	461c      	mov	r4, r3
 800b020:	e00c      	b.n	800b03c <__strtok_r+0x4c>
 800b022:	b915      	cbnz	r5, 800b02a <__strtok_r+0x3a>
 800b024:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b028:	460e      	mov	r6, r1
 800b02a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b02e:	42ab      	cmp	r3, r5
 800b030:	d1f7      	bne.n	800b022 <__strtok_r+0x32>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0f3      	beq.n	800b01e <__strtok_r+0x2e>
 800b036:	2300      	movs	r3, #0
 800b038:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b03c:	6014      	str	r4, [r2, #0]
 800b03e:	e7ed      	b.n	800b01c <__strtok_r+0x2c>

0800b040 <_strtol_l.constprop.0>:
 800b040:	2b01      	cmp	r3, #1
 800b042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b046:	d001      	beq.n	800b04c <_strtol_l.constprop.0+0xc>
 800b048:	2b24      	cmp	r3, #36	; 0x24
 800b04a:	d906      	bls.n	800b05a <_strtol_l.constprop.0+0x1a>
 800b04c:	f7ff ff3c 	bl	800aec8 <__errno>
 800b050:	2316      	movs	r3, #22
 800b052:	6003      	str	r3, [r0, #0]
 800b054:	2000      	movs	r0, #0
 800b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b140 <_strtol_l.constprop.0+0x100>
 800b05e:	460d      	mov	r5, r1
 800b060:	462e      	mov	r6, r5
 800b062:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b066:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b06a:	f017 0708 	ands.w	r7, r7, #8
 800b06e:	d1f7      	bne.n	800b060 <_strtol_l.constprop.0+0x20>
 800b070:	2c2d      	cmp	r4, #45	; 0x2d
 800b072:	d132      	bne.n	800b0da <_strtol_l.constprop.0+0x9a>
 800b074:	782c      	ldrb	r4, [r5, #0]
 800b076:	2701      	movs	r7, #1
 800b078:	1cb5      	adds	r5, r6, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d05b      	beq.n	800b136 <_strtol_l.constprop.0+0xf6>
 800b07e:	2b10      	cmp	r3, #16
 800b080:	d109      	bne.n	800b096 <_strtol_l.constprop.0+0x56>
 800b082:	2c30      	cmp	r4, #48	; 0x30
 800b084:	d107      	bne.n	800b096 <_strtol_l.constprop.0+0x56>
 800b086:	782c      	ldrb	r4, [r5, #0]
 800b088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b08c:	2c58      	cmp	r4, #88	; 0x58
 800b08e:	d14d      	bne.n	800b12c <_strtol_l.constprop.0+0xec>
 800b090:	786c      	ldrb	r4, [r5, #1]
 800b092:	2310      	movs	r3, #16
 800b094:	3502      	adds	r5, #2
 800b096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b09a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b09e:	f04f 0c00 	mov.w	ip, #0
 800b0a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b0a6:	4666      	mov	r6, ip
 800b0a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b0ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b0b0:	f1be 0f09 	cmp.w	lr, #9
 800b0b4:	d816      	bhi.n	800b0e4 <_strtol_l.constprop.0+0xa4>
 800b0b6:	4674      	mov	r4, lr
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	dd24      	ble.n	800b106 <_strtol_l.constprop.0+0xc6>
 800b0bc:	f1bc 0f00 	cmp.w	ip, #0
 800b0c0:	db1e      	blt.n	800b100 <_strtol_l.constprop.0+0xc0>
 800b0c2:	45b1      	cmp	r9, r6
 800b0c4:	d31c      	bcc.n	800b100 <_strtol_l.constprop.0+0xc0>
 800b0c6:	d101      	bne.n	800b0cc <_strtol_l.constprop.0+0x8c>
 800b0c8:	45a2      	cmp	sl, r4
 800b0ca:	db19      	blt.n	800b100 <_strtol_l.constprop.0+0xc0>
 800b0cc:	fb06 4603 	mla	r6, r6, r3, r4
 800b0d0:	f04f 0c01 	mov.w	ip, #1
 800b0d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0d8:	e7e8      	b.n	800b0ac <_strtol_l.constprop.0+0x6c>
 800b0da:	2c2b      	cmp	r4, #43	; 0x2b
 800b0dc:	bf04      	itt	eq
 800b0de:	782c      	ldrbeq	r4, [r5, #0]
 800b0e0:	1cb5      	addeq	r5, r6, #2
 800b0e2:	e7ca      	b.n	800b07a <_strtol_l.constprop.0+0x3a>
 800b0e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b0e8:	f1be 0f19 	cmp.w	lr, #25
 800b0ec:	d801      	bhi.n	800b0f2 <_strtol_l.constprop.0+0xb2>
 800b0ee:	3c37      	subs	r4, #55	; 0x37
 800b0f0:	e7e2      	b.n	800b0b8 <_strtol_l.constprop.0+0x78>
 800b0f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b0f6:	f1be 0f19 	cmp.w	lr, #25
 800b0fa:	d804      	bhi.n	800b106 <_strtol_l.constprop.0+0xc6>
 800b0fc:	3c57      	subs	r4, #87	; 0x57
 800b0fe:	e7db      	b.n	800b0b8 <_strtol_l.constprop.0+0x78>
 800b100:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b104:	e7e6      	b.n	800b0d4 <_strtol_l.constprop.0+0x94>
 800b106:	f1bc 0f00 	cmp.w	ip, #0
 800b10a:	da05      	bge.n	800b118 <_strtol_l.constprop.0+0xd8>
 800b10c:	2322      	movs	r3, #34	; 0x22
 800b10e:	6003      	str	r3, [r0, #0]
 800b110:	4646      	mov	r6, r8
 800b112:	b942      	cbnz	r2, 800b126 <_strtol_l.constprop.0+0xe6>
 800b114:	4630      	mov	r0, r6
 800b116:	e79e      	b.n	800b056 <_strtol_l.constprop.0+0x16>
 800b118:	b107      	cbz	r7, 800b11c <_strtol_l.constprop.0+0xdc>
 800b11a:	4276      	negs	r6, r6
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	d0f9      	beq.n	800b114 <_strtol_l.constprop.0+0xd4>
 800b120:	f1bc 0f00 	cmp.w	ip, #0
 800b124:	d000      	beq.n	800b128 <_strtol_l.constprop.0+0xe8>
 800b126:	1e69      	subs	r1, r5, #1
 800b128:	6011      	str	r1, [r2, #0]
 800b12a:	e7f3      	b.n	800b114 <_strtol_l.constprop.0+0xd4>
 800b12c:	2430      	movs	r4, #48	; 0x30
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1b1      	bne.n	800b096 <_strtol_l.constprop.0+0x56>
 800b132:	2308      	movs	r3, #8
 800b134:	e7af      	b.n	800b096 <_strtol_l.constprop.0+0x56>
 800b136:	2c30      	cmp	r4, #48	; 0x30
 800b138:	d0a5      	beq.n	800b086 <_strtol_l.constprop.0+0x46>
 800b13a:	230a      	movs	r3, #10
 800b13c:	e7ab      	b.n	800b096 <_strtol_l.constprop.0+0x56>
 800b13e:	bf00      	nop
 800b140:	0800c5e5 	.word	0x0800c5e5

0800b144 <strtol>:
 800b144:	4613      	mov	r3, r2
 800b146:	460a      	mov	r2, r1
 800b148:	4601      	mov	r1, r0
 800b14a:	4802      	ldr	r0, [pc, #8]	; (800b154 <strtol+0x10>)
 800b14c:	6800      	ldr	r0, [r0, #0]
 800b14e:	f7ff bf77 	b.w	800b040 <_strtol_l.constprop.0>
 800b152:	bf00      	nop
 800b154:	24000174 	.word	0x24000174

0800b158 <__assert_func>:
 800b158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b15a:	4614      	mov	r4, r2
 800b15c:	461a      	mov	r2, r3
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <__assert_func+0x2c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4605      	mov	r5, r0
 800b164:	68d8      	ldr	r0, [r3, #12]
 800b166:	b14c      	cbz	r4, 800b17c <__assert_func+0x24>
 800b168:	4b07      	ldr	r3, [pc, #28]	; (800b188 <__assert_func+0x30>)
 800b16a:	9100      	str	r1, [sp, #0]
 800b16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b170:	4906      	ldr	r1, [pc, #24]	; (800b18c <__assert_func+0x34>)
 800b172:	462b      	mov	r3, r5
 800b174:	f000 f80e 	bl	800b194 <fiprintf>
 800b178:	f000 fe20 	bl	800bdbc <abort>
 800b17c:	4b04      	ldr	r3, [pc, #16]	; (800b190 <__assert_func+0x38>)
 800b17e:	461c      	mov	r4, r3
 800b180:	e7f3      	b.n	800b16a <__assert_func+0x12>
 800b182:	bf00      	nop
 800b184:	24000174 	.word	0x24000174
 800b188:	0800c5a8 	.word	0x0800c5a8
 800b18c:	0800c5b5 	.word	0x0800c5b5
 800b190:	0800c5e3 	.word	0x0800c5e3

0800b194 <fiprintf>:
 800b194:	b40e      	push	{r1, r2, r3}
 800b196:	b503      	push	{r0, r1, lr}
 800b198:	4601      	mov	r1, r0
 800b19a:	ab03      	add	r3, sp, #12
 800b19c:	4805      	ldr	r0, [pc, #20]	; (800b1b4 <fiprintf+0x20>)
 800b19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a2:	6800      	ldr	r0, [r0, #0]
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	f000 fa75 	bl	800b694 <_vfiprintf_r>
 800b1aa:	b002      	add	sp, #8
 800b1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b0:	b003      	add	sp, #12
 800b1b2:	4770      	bx	lr
 800b1b4:	24000174 	.word	0x24000174

0800b1b8 <malloc>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <malloc+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f000 b86f 	b.w	800b2a0 <_malloc_r>
 800b1c2:	bf00      	nop
 800b1c4:	24000174 	.word	0x24000174

0800b1c8 <_free_r>:
 800b1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d044      	beq.n	800b258 <_free_r+0x90>
 800b1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d2:	9001      	str	r0, [sp, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1da:	bfb8      	it	lt
 800b1dc:	18e4      	addlt	r4, r4, r3
 800b1de:	f001 f82f 	bl	800c240 <__malloc_lock>
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	; (800b25c <_free_r+0x94>)
 800b1e4:	9801      	ldr	r0, [sp, #4]
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	b933      	cbnz	r3, 800b1f8 <_free_r+0x30>
 800b1ea:	6063      	str	r3, [r4, #4]
 800b1ec:	6014      	str	r4, [r2, #0]
 800b1ee:	b003      	add	sp, #12
 800b1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f4:	f001 b82a 	b.w	800c24c <__malloc_unlock>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d908      	bls.n	800b20e <_free_r+0x46>
 800b1fc:	6825      	ldr	r5, [r4, #0]
 800b1fe:	1961      	adds	r1, r4, r5
 800b200:	428b      	cmp	r3, r1
 800b202:	bf01      	itttt	eq
 800b204:	6819      	ldreq	r1, [r3, #0]
 800b206:	685b      	ldreq	r3, [r3, #4]
 800b208:	1949      	addeq	r1, r1, r5
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	e7ed      	b.n	800b1ea <_free_r+0x22>
 800b20e:	461a      	mov	r2, r3
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	b10b      	cbz	r3, 800b218 <_free_r+0x50>
 800b214:	42a3      	cmp	r3, r4
 800b216:	d9fa      	bls.n	800b20e <_free_r+0x46>
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	1855      	adds	r5, r2, r1
 800b21c:	42a5      	cmp	r5, r4
 800b21e:	d10b      	bne.n	800b238 <_free_r+0x70>
 800b220:	6824      	ldr	r4, [r4, #0]
 800b222:	4421      	add	r1, r4
 800b224:	1854      	adds	r4, r2, r1
 800b226:	42a3      	cmp	r3, r4
 800b228:	6011      	str	r1, [r2, #0]
 800b22a:	d1e0      	bne.n	800b1ee <_free_r+0x26>
 800b22c:	681c      	ldr	r4, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	6053      	str	r3, [r2, #4]
 800b232:	4421      	add	r1, r4
 800b234:	6011      	str	r1, [r2, #0]
 800b236:	e7da      	b.n	800b1ee <_free_r+0x26>
 800b238:	d902      	bls.n	800b240 <_free_r+0x78>
 800b23a:	230c      	movs	r3, #12
 800b23c:	6003      	str	r3, [r0, #0]
 800b23e:	e7d6      	b.n	800b1ee <_free_r+0x26>
 800b240:	6825      	ldr	r5, [r4, #0]
 800b242:	1961      	adds	r1, r4, r5
 800b244:	428b      	cmp	r3, r1
 800b246:	bf04      	itt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	6063      	str	r3, [r4, #4]
 800b24e:	bf04      	itt	eq
 800b250:	1949      	addeq	r1, r1, r5
 800b252:	6021      	streq	r1, [r4, #0]
 800b254:	6054      	str	r4, [r2, #4]
 800b256:	e7ca      	b.n	800b1ee <_free_r+0x26>
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	2403ce9c 	.word	0x2403ce9c

0800b260 <sbrk_aligned>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4e0e      	ldr	r6, [pc, #56]	; (800b29c <sbrk_aligned+0x3c>)
 800b264:	460c      	mov	r4, r1
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	4605      	mov	r5, r0
 800b26a:	b911      	cbnz	r1, 800b272 <sbrk_aligned+0x12>
 800b26c:	f000 fcd6 	bl	800bc1c <_sbrk_r>
 800b270:	6030      	str	r0, [r6, #0]
 800b272:	4621      	mov	r1, r4
 800b274:	4628      	mov	r0, r5
 800b276:	f000 fcd1 	bl	800bc1c <_sbrk_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d00a      	beq.n	800b294 <sbrk_aligned+0x34>
 800b27e:	1cc4      	adds	r4, r0, #3
 800b280:	f024 0403 	bic.w	r4, r4, #3
 800b284:	42a0      	cmp	r0, r4
 800b286:	d007      	beq.n	800b298 <sbrk_aligned+0x38>
 800b288:	1a21      	subs	r1, r4, r0
 800b28a:	4628      	mov	r0, r5
 800b28c:	f000 fcc6 	bl	800bc1c <_sbrk_r>
 800b290:	3001      	adds	r0, #1
 800b292:	d101      	bne.n	800b298 <sbrk_aligned+0x38>
 800b294:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b298:	4620      	mov	r0, r4
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	2403cea0 	.word	0x2403cea0

0800b2a0 <_malloc_r>:
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a4:	1ccd      	adds	r5, r1, #3
 800b2a6:	f025 0503 	bic.w	r5, r5, #3
 800b2aa:	3508      	adds	r5, #8
 800b2ac:	2d0c      	cmp	r5, #12
 800b2ae:	bf38      	it	cc
 800b2b0:	250c      	movcc	r5, #12
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	db01      	blt.n	800b2bc <_malloc_r+0x1c>
 800b2b8:	42a9      	cmp	r1, r5
 800b2ba:	d905      	bls.n	800b2c8 <_malloc_r+0x28>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	4e2e      	ldr	r6, [pc, #184]	; (800b384 <_malloc_r+0xe4>)
 800b2ca:	f000 ffb9 	bl	800c240 <__malloc_lock>
 800b2ce:	6833      	ldr	r3, [r6, #0]
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	bb34      	cbnz	r4, 800b322 <_malloc_r+0x82>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ffc2 	bl	800b260 <sbrk_aligned>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	d14d      	bne.n	800b37e <_malloc_r+0xde>
 800b2e2:	6834      	ldr	r4, [r6, #0]
 800b2e4:	4626      	mov	r6, r4
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d140      	bne.n	800b36c <_malloc_r+0xcc>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	eb04 0803 	add.w	r8, r4, r3
 800b2f4:	f000 fc92 	bl	800bc1c <_sbrk_r>
 800b2f8:	4580      	cmp	r8, r0
 800b2fa:	d13a      	bne.n	800b372 <_malloc_r+0xd2>
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	3503      	adds	r5, #3
 800b300:	1a6d      	subs	r5, r5, r1
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	4629      	mov	r1, r5
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff ffa5 	bl	800b260 <sbrk_aligned>
 800b316:	3001      	adds	r0, #1
 800b318:	d02b      	beq.n	800b372 <_malloc_r+0xd2>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	442b      	add	r3, r5
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	e00e      	b.n	800b340 <_malloc_r+0xa0>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	1b52      	subs	r2, r2, r5
 800b326:	d41e      	bmi.n	800b366 <_malloc_r+0xc6>
 800b328:	2a0b      	cmp	r2, #11
 800b32a:	d916      	bls.n	800b35a <_malloc_r+0xba>
 800b32c:	1961      	adds	r1, r4, r5
 800b32e:	42a3      	cmp	r3, r4
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	bf18      	it	ne
 800b334:	6059      	strne	r1, [r3, #4]
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	bf08      	it	eq
 800b33a:	6031      	streq	r1, [r6, #0]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4638      	mov	r0, r7
 800b342:	f104 060b 	add.w	r6, r4, #11
 800b346:	f000 ff81 	bl	800c24c <__malloc_unlock>
 800b34a:	f026 0607 	bic.w	r6, r6, #7
 800b34e:	1d23      	adds	r3, r4, #4
 800b350:	1af2      	subs	r2, r6, r3
 800b352:	d0b6      	beq.n	800b2c2 <_malloc_r+0x22>
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	50a3      	str	r3, [r4, r2]
 800b358:	e7b3      	b.n	800b2c2 <_malloc_r+0x22>
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	bf0c      	ite	eq
 800b360:	6032      	streq	r2, [r6, #0]
 800b362:	605a      	strne	r2, [r3, #4]
 800b364:	e7ec      	b.n	800b340 <_malloc_r+0xa0>
 800b366:	4623      	mov	r3, r4
 800b368:	6864      	ldr	r4, [r4, #4]
 800b36a:	e7b2      	b.n	800b2d2 <_malloc_r+0x32>
 800b36c:	4634      	mov	r4, r6
 800b36e:	6876      	ldr	r6, [r6, #4]
 800b370:	e7b9      	b.n	800b2e6 <_malloc_r+0x46>
 800b372:	230c      	movs	r3, #12
 800b374:	603b      	str	r3, [r7, #0]
 800b376:	4638      	mov	r0, r7
 800b378:	f000 ff68 	bl	800c24c <__malloc_unlock>
 800b37c:	e7a1      	b.n	800b2c2 <_malloc_r+0x22>
 800b37e:	6025      	str	r5, [r4, #0]
 800b380:	e7de      	b.n	800b340 <_malloc_r+0xa0>
 800b382:	bf00      	nop
 800b384:	2403ce9c 	.word	0x2403ce9c

0800b388 <__ssputs_r>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	688e      	ldr	r6, [r1, #8]
 800b38e:	429e      	cmp	r6, r3
 800b390:	4682      	mov	sl, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4690      	mov	r8, r2
 800b396:	461f      	mov	r7, r3
 800b398:	d838      	bhi.n	800b40c <__ssputs_r+0x84>
 800b39a:	898a      	ldrh	r2, [r1, #12]
 800b39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a0:	d032      	beq.n	800b408 <__ssputs_r+0x80>
 800b3a2:	6825      	ldr	r5, [r4, #0]
 800b3a4:	6909      	ldr	r1, [r1, #16]
 800b3a6:	eba5 0901 	sub.w	r9, r5, r1
 800b3aa:	6965      	ldr	r5, [r4, #20]
 800b3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	444b      	add	r3, r9
 800b3b8:	106d      	asrs	r5, r5, #1
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	bf38      	it	cc
 800b3be:	461d      	movcc	r5, r3
 800b3c0:	0553      	lsls	r3, r2, #21
 800b3c2:	d531      	bpl.n	800b428 <__ssputs_r+0xa0>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7ff ff6b 	bl	800b2a0 <_malloc_r>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	b950      	cbnz	r0, 800b3e4 <__ssputs_r+0x5c>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	f8ca 3000 	str.w	r3, [sl]
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	f7ff fd98 	bl	800af1c <memcpy>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	6126      	str	r6, [r4, #16]
 800b3fa:	6165      	str	r5, [r4, #20]
 800b3fc:	444e      	add	r6, r9
 800b3fe:	eba5 0509 	sub.w	r5, r5, r9
 800b402:	6026      	str	r6, [r4, #0]
 800b404:	60a5      	str	r5, [r4, #8]
 800b406:	463e      	mov	r6, r7
 800b408:	42be      	cmp	r6, r7
 800b40a:	d900      	bls.n	800b40e <__ssputs_r+0x86>
 800b40c:	463e      	mov	r6, r7
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	4632      	mov	r2, r6
 800b412:	4641      	mov	r1, r8
 800b414:	f000 fefa 	bl	800c20c <memmove>
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	1b9b      	subs	r3, r3, r6
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	4433      	add	r3, r6
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	2000      	movs	r0, #0
 800b426:	e7db      	b.n	800b3e0 <__ssputs_r+0x58>
 800b428:	462a      	mov	r2, r5
 800b42a:	f000 ff15 	bl	800c258 <_realloc_r>
 800b42e:	4606      	mov	r6, r0
 800b430:	2800      	cmp	r0, #0
 800b432:	d1e1      	bne.n	800b3f8 <__ssputs_r+0x70>
 800b434:	6921      	ldr	r1, [r4, #16]
 800b436:	4650      	mov	r0, sl
 800b438:	f7ff fec6 	bl	800b1c8 <_free_r>
 800b43c:	e7c7      	b.n	800b3ce <__ssputs_r+0x46>
	...

0800b440 <_svfiprintf_r>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	4698      	mov	r8, r3
 800b446:	898b      	ldrh	r3, [r1, #12]
 800b448:	061b      	lsls	r3, r3, #24
 800b44a:	b09d      	sub	sp, #116	; 0x74
 800b44c:	4607      	mov	r7, r0
 800b44e:	460d      	mov	r5, r1
 800b450:	4614      	mov	r4, r2
 800b452:	d50e      	bpl.n	800b472 <_svfiprintf_r+0x32>
 800b454:	690b      	ldr	r3, [r1, #16]
 800b456:	b963      	cbnz	r3, 800b472 <_svfiprintf_r+0x32>
 800b458:	2140      	movs	r1, #64	; 0x40
 800b45a:	f7ff ff21 	bl	800b2a0 <_malloc_r>
 800b45e:	6028      	str	r0, [r5, #0]
 800b460:	6128      	str	r0, [r5, #16]
 800b462:	b920      	cbnz	r0, 800b46e <_svfiprintf_r+0x2e>
 800b464:	230c      	movs	r3, #12
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b46c:	e0d1      	b.n	800b612 <_svfiprintf_r+0x1d2>
 800b46e:	2340      	movs	r3, #64	; 0x40
 800b470:	616b      	str	r3, [r5, #20]
 800b472:	2300      	movs	r3, #0
 800b474:	9309      	str	r3, [sp, #36]	; 0x24
 800b476:	2320      	movs	r3, #32
 800b478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b480:	2330      	movs	r3, #48	; 0x30
 800b482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b62c <_svfiprintf_r+0x1ec>
 800b486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48a:	f04f 0901 	mov.w	r9, #1
 800b48e:	4623      	mov	r3, r4
 800b490:	469a      	mov	sl, r3
 800b492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b496:	b10a      	cbz	r2, 800b49c <_svfiprintf_r+0x5c>
 800b498:	2a25      	cmp	r2, #37	; 0x25
 800b49a:	d1f9      	bne.n	800b490 <_svfiprintf_r+0x50>
 800b49c:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a0:	d00b      	beq.n	800b4ba <_svfiprintf_r+0x7a>
 800b4a2:	465b      	mov	r3, fp
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ff6d 	bl	800b388 <__ssputs_r>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	f000 80aa 	beq.w	800b608 <_svfiprintf_r+0x1c8>
 800b4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b6:	445a      	add	r2, fp
 800b4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 80a2 	beq.w	800b608 <_svfiprintf_r+0x1c8>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ce:	f10a 0a01 	add.w	sl, sl, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	9307      	str	r3, [sp, #28]
 800b4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4da:	931a      	str	r3, [sp, #104]	; 0x68
 800b4dc:	4654      	mov	r4, sl
 800b4de:	2205      	movs	r2, #5
 800b4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e4:	4851      	ldr	r0, [pc, #324]	; (800b62c <_svfiprintf_r+0x1ec>)
 800b4e6:	f7f4 ff23 	bl	8000330 <memchr>
 800b4ea:	9a04      	ldr	r2, [sp, #16]
 800b4ec:	b9d8      	cbnz	r0, 800b526 <_svfiprintf_r+0xe6>
 800b4ee:	06d0      	lsls	r0, r2, #27
 800b4f0:	bf44      	itt	mi
 800b4f2:	2320      	movmi	r3, #32
 800b4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f8:	0711      	lsls	r1, r2, #28
 800b4fa:	bf44      	itt	mi
 800b4fc:	232b      	movmi	r3, #43	; 0x2b
 800b4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b502:	f89a 3000 	ldrb.w	r3, [sl]
 800b506:	2b2a      	cmp	r3, #42	; 0x2a
 800b508:	d015      	beq.n	800b536 <_svfiprintf_r+0xf6>
 800b50a:	9a07      	ldr	r2, [sp, #28]
 800b50c:	4654      	mov	r4, sl
 800b50e:	2000      	movs	r0, #0
 800b510:	f04f 0c0a 	mov.w	ip, #10
 800b514:	4621      	mov	r1, r4
 800b516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51a:	3b30      	subs	r3, #48	; 0x30
 800b51c:	2b09      	cmp	r3, #9
 800b51e:	d94e      	bls.n	800b5be <_svfiprintf_r+0x17e>
 800b520:	b1b0      	cbz	r0, 800b550 <_svfiprintf_r+0x110>
 800b522:	9207      	str	r2, [sp, #28]
 800b524:	e014      	b.n	800b550 <_svfiprintf_r+0x110>
 800b526:	eba0 0308 	sub.w	r3, r0, r8
 800b52a:	fa09 f303 	lsl.w	r3, r9, r3
 800b52e:	4313      	orrs	r3, r2
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	46a2      	mov	sl, r4
 800b534:	e7d2      	b.n	800b4dc <_svfiprintf_r+0x9c>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	1d19      	adds	r1, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9103      	str	r1, [sp, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfbb      	ittet	lt
 800b542:	425b      	neglt	r3, r3
 800b544:	f042 0202 	orrlt.w	r2, r2, #2
 800b548:	9307      	strge	r3, [sp, #28]
 800b54a:	9307      	strlt	r3, [sp, #28]
 800b54c:	bfb8      	it	lt
 800b54e:	9204      	strlt	r2, [sp, #16]
 800b550:	7823      	ldrb	r3, [r4, #0]
 800b552:	2b2e      	cmp	r3, #46	; 0x2e
 800b554:	d10c      	bne.n	800b570 <_svfiprintf_r+0x130>
 800b556:	7863      	ldrb	r3, [r4, #1]
 800b558:	2b2a      	cmp	r3, #42	; 0x2a
 800b55a:	d135      	bne.n	800b5c8 <_svfiprintf_r+0x188>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	1d1a      	adds	r2, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	9203      	str	r2, [sp, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	bfb8      	it	lt
 800b568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b56c:	3402      	adds	r4, #2
 800b56e:	9305      	str	r3, [sp, #20]
 800b570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b63c <_svfiprintf_r+0x1fc>
 800b574:	7821      	ldrb	r1, [r4, #0]
 800b576:	2203      	movs	r2, #3
 800b578:	4650      	mov	r0, sl
 800b57a:	f7f4 fed9 	bl	8000330 <memchr>
 800b57e:	b140      	cbz	r0, 800b592 <_svfiprintf_r+0x152>
 800b580:	2340      	movs	r3, #64	; 0x40
 800b582:	eba0 000a 	sub.w	r0, r0, sl
 800b586:	fa03 f000 	lsl.w	r0, r3, r0
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	4303      	orrs	r3, r0
 800b58e:	3401      	adds	r4, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b596:	4826      	ldr	r0, [pc, #152]	; (800b630 <_svfiprintf_r+0x1f0>)
 800b598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59c:	2206      	movs	r2, #6
 800b59e:	f7f4 fec7 	bl	8000330 <memchr>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d038      	beq.n	800b618 <_svfiprintf_r+0x1d8>
 800b5a6:	4b23      	ldr	r3, [pc, #140]	; (800b634 <_svfiprintf_r+0x1f4>)
 800b5a8:	bb1b      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x1b2>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	4433      	add	r3, r6
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	e767      	b.n	800b48e <_svfiprintf_r+0x4e>
 800b5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	e7a5      	b.n	800b514 <_svfiprintf_r+0xd4>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5da:	3a30      	subs	r2, #48	; 0x30
 800b5dc:	2a09      	cmp	r2, #9
 800b5de:	d903      	bls.n	800b5e8 <_svfiprintf_r+0x1a8>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0c5      	beq.n	800b570 <_svfiprintf_r+0x130>
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	e7c3      	b.n	800b570 <_svfiprintf_r+0x130>
 800b5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e7f0      	b.n	800b5d4 <_svfiprintf_r+0x194>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <_svfiprintf_r+0x1f8>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f3af 8000 	nop.w
 800b602:	1c42      	adds	r2, r0, #1
 800b604:	4606      	mov	r6, r0
 800b606:	d1d6      	bne.n	800b5b6 <_svfiprintf_r+0x176>
 800b608:	89ab      	ldrh	r3, [r5, #12]
 800b60a:	065b      	lsls	r3, r3, #25
 800b60c:	f53f af2c 	bmi.w	800b468 <_svfiprintf_r+0x28>
 800b610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b612:	b01d      	add	sp, #116	; 0x74
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	ab03      	add	r3, sp, #12
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	462a      	mov	r2, r5
 800b61e:	4b06      	ldr	r3, [pc, #24]	; (800b638 <_svfiprintf_r+0x1f8>)
 800b620:	a904      	add	r1, sp, #16
 800b622:	4638      	mov	r0, r7
 800b624:	f000 f9d4 	bl	800b9d0 <_printf_i>
 800b628:	e7eb      	b.n	800b602 <_svfiprintf_r+0x1c2>
 800b62a:	bf00      	nop
 800b62c:	0800c6e5 	.word	0x0800c6e5
 800b630:	0800c6ef 	.word	0x0800c6ef
 800b634:	00000000 	.word	0x00000000
 800b638:	0800b389 	.word	0x0800b389
 800b63c:	0800c6eb 	.word	0x0800c6eb

0800b640 <__sfputc_r>:
 800b640:	6893      	ldr	r3, [r2, #8]
 800b642:	3b01      	subs	r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	b410      	push	{r4}
 800b648:	6093      	str	r3, [r2, #8]
 800b64a:	da08      	bge.n	800b65e <__sfputc_r+0x1e>
 800b64c:	6994      	ldr	r4, [r2, #24]
 800b64e:	42a3      	cmp	r3, r4
 800b650:	db01      	blt.n	800b656 <__sfputc_r+0x16>
 800b652:	290a      	cmp	r1, #10
 800b654:	d103      	bne.n	800b65e <__sfputc_r+0x1e>
 800b656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b65a:	f000 baef 	b.w	800bc3c <__swbuf_r>
 800b65e:	6813      	ldr	r3, [r2, #0]
 800b660:	1c58      	adds	r0, r3, #1
 800b662:	6010      	str	r0, [r2, #0]
 800b664:	7019      	strb	r1, [r3, #0]
 800b666:	4608      	mov	r0, r1
 800b668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <__sfputs_r>:
 800b66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	4614      	mov	r4, r2
 800b676:	18d5      	adds	r5, r2, r3
 800b678:	42ac      	cmp	r4, r5
 800b67a:	d101      	bne.n	800b680 <__sfputs_r+0x12>
 800b67c:	2000      	movs	r0, #0
 800b67e:	e007      	b.n	800b690 <__sfputs_r+0x22>
 800b680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b684:	463a      	mov	r2, r7
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ffda 	bl	800b640 <__sfputc_r>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d1f3      	bne.n	800b678 <__sfputs_r+0xa>
 800b690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b694 <_vfiprintf_r>:
 800b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	460d      	mov	r5, r1
 800b69a:	b09d      	sub	sp, #116	; 0x74
 800b69c:	4614      	mov	r4, r2
 800b69e:	4698      	mov	r8, r3
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	b118      	cbz	r0, 800b6ac <_vfiprintf_r+0x18>
 800b6a4:	6983      	ldr	r3, [r0, #24]
 800b6a6:	b90b      	cbnz	r3, 800b6ac <_vfiprintf_r+0x18>
 800b6a8:	f000 fcaa 	bl	800c000 <__sinit>
 800b6ac:	4b89      	ldr	r3, [pc, #548]	; (800b8d4 <_vfiprintf_r+0x240>)
 800b6ae:	429d      	cmp	r5, r3
 800b6b0:	d11b      	bne.n	800b6ea <_vfiprintf_r+0x56>
 800b6b2:	6875      	ldr	r5, [r6, #4]
 800b6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6b6:	07d9      	lsls	r1, r3, #31
 800b6b8:	d405      	bmi.n	800b6c6 <_vfiprintf_r+0x32>
 800b6ba:	89ab      	ldrh	r3, [r5, #12]
 800b6bc:	059a      	lsls	r2, r3, #22
 800b6be:	d402      	bmi.n	800b6c6 <_vfiprintf_r+0x32>
 800b6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6c2:	f000 fd3b 	bl	800c13c <__retarget_lock_acquire_recursive>
 800b6c6:	89ab      	ldrh	r3, [r5, #12]
 800b6c8:	071b      	lsls	r3, r3, #28
 800b6ca:	d501      	bpl.n	800b6d0 <_vfiprintf_r+0x3c>
 800b6cc:	692b      	ldr	r3, [r5, #16]
 800b6ce:	b9eb      	cbnz	r3, 800b70c <_vfiprintf_r+0x78>
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 fb04 	bl	800bce0 <__swsetup_r>
 800b6d8:	b1c0      	cbz	r0, 800b70c <_vfiprintf_r+0x78>
 800b6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6dc:	07dc      	lsls	r4, r3, #31
 800b6de:	d50e      	bpl.n	800b6fe <_vfiprintf_r+0x6a>
 800b6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6e4:	b01d      	add	sp, #116	; 0x74
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	4b7b      	ldr	r3, [pc, #492]	; (800b8d8 <_vfiprintf_r+0x244>)
 800b6ec:	429d      	cmp	r5, r3
 800b6ee:	d101      	bne.n	800b6f4 <_vfiprintf_r+0x60>
 800b6f0:	68b5      	ldr	r5, [r6, #8]
 800b6f2:	e7df      	b.n	800b6b4 <_vfiprintf_r+0x20>
 800b6f4:	4b79      	ldr	r3, [pc, #484]	; (800b8dc <_vfiprintf_r+0x248>)
 800b6f6:	429d      	cmp	r5, r3
 800b6f8:	bf08      	it	eq
 800b6fa:	68f5      	ldreq	r5, [r6, #12]
 800b6fc:	e7da      	b.n	800b6b4 <_vfiprintf_r+0x20>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	0598      	lsls	r0, r3, #22
 800b702:	d4ed      	bmi.n	800b6e0 <_vfiprintf_r+0x4c>
 800b704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b706:	f000 fd1a 	bl	800c13e <__retarget_lock_release_recursive>
 800b70a:	e7e9      	b.n	800b6e0 <_vfiprintf_r+0x4c>
 800b70c:	2300      	movs	r3, #0
 800b70e:	9309      	str	r3, [sp, #36]	; 0x24
 800b710:	2320      	movs	r3, #32
 800b712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b716:	f8cd 800c 	str.w	r8, [sp, #12]
 800b71a:	2330      	movs	r3, #48	; 0x30
 800b71c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8e0 <_vfiprintf_r+0x24c>
 800b720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b724:	f04f 0901 	mov.w	r9, #1
 800b728:	4623      	mov	r3, r4
 800b72a:	469a      	mov	sl, r3
 800b72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b730:	b10a      	cbz	r2, 800b736 <_vfiprintf_r+0xa2>
 800b732:	2a25      	cmp	r2, #37	; 0x25
 800b734:	d1f9      	bne.n	800b72a <_vfiprintf_r+0x96>
 800b736:	ebba 0b04 	subs.w	fp, sl, r4
 800b73a:	d00b      	beq.n	800b754 <_vfiprintf_r+0xc0>
 800b73c:	465b      	mov	r3, fp
 800b73e:	4622      	mov	r2, r4
 800b740:	4629      	mov	r1, r5
 800b742:	4630      	mov	r0, r6
 800b744:	f7ff ff93 	bl	800b66e <__sfputs_r>
 800b748:	3001      	adds	r0, #1
 800b74a:	f000 80aa 	beq.w	800b8a2 <_vfiprintf_r+0x20e>
 800b74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b750:	445a      	add	r2, fp
 800b752:	9209      	str	r2, [sp, #36]	; 0x24
 800b754:	f89a 3000 	ldrb.w	r3, [sl]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 80a2 	beq.w	800b8a2 <_vfiprintf_r+0x20e>
 800b75e:	2300      	movs	r3, #0
 800b760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b768:	f10a 0a01 	add.w	sl, sl, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9307      	str	r3, [sp, #28]
 800b770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b774:	931a      	str	r3, [sp, #104]	; 0x68
 800b776:	4654      	mov	r4, sl
 800b778:	2205      	movs	r2, #5
 800b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77e:	4858      	ldr	r0, [pc, #352]	; (800b8e0 <_vfiprintf_r+0x24c>)
 800b780:	f7f4 fdd6 	bl	8000330 <memchr>
 800b784:	9a04      	ldr	r2, [sp, #16]
 800b786:	b9d8      	cbnz	r0, 800b7c0 <_vfiprintf_r+0x12c>
 800b788:	06d1      	lsls	r1, r2, #27
 800b78a:	bf44      	itt	mi
 800b78c:	2320      	movmi	r3, #32
 800b78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b792:	0713      	lsls	r3, r2, #28
 800b794:	bf44      	itt	mi
 800b796:	232b      	movmi	r3, #43	; 0x2b
 800b798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b79c:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a2:	d015      	beq.n	800b7d0 <_vfiprintf_r+0x13c>
 800b7a4:	9a07      	ldr	r2, [sp, #28]
 800b7a6:	4654      	mov	r4, sl
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	f04f 0c0a 	mov.w	ip, #10
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b4:	3b30      	subs	r3, #48	; 0x30
 800b7b6:	2b09      	cmp	r3, #9
 800b7b8:	d94e      	bls.n	800b858 <_vfiprintf_r+0x1c4>
 800b7ba:	b1b0      	cbz	r0, 800b7ea <_vfiprintf_r+0x156>
 800b7bc:	9207      	str	r2, [sp, #28]
 800b7be:	e014      	b.n	800b7ea <_vfiprintf_r+0x156>
 800b7c0:	eba0 0308 	sub.w	r3, r0, r8
 800b7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	46a2      	mov	sl, r4
 800b7ce:	e7d2      	b.n	800b776 <_vfiprintf_r+0xe2>
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	1d19      	adds	r1, r3, #4
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	9103      	str	r1, [sp, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	bfbb      	ittet	lt
 800b7dc:	425b      	neglt	r3, r3
 800b7de:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e2:	9307      	strge	r3, [sp, #28]
 800b7e4:	9307      	strlt	r3, [sp, #28]
 800b7e6:	bfb8      	it	lt
 800b7e8:	9204      	strlt	r2, [sp, #16]
 800b7ea:	7823      	ldrb	r3, [r4, #0]
 800b7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ee:	d10c      	bne.n	800b80a <_vfiprintf_r+0x176>
 800b7f0:	7863      	ldrb	r3, [r4, #1]
 800b7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f4:	d135      	bne.n	800b862 <_vfiprintf_r+0x1ce>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	9203      	str	r2, [sp, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfb8      	it	lt
 800b802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b806:	3402      	adds	r4, #2
 800b808:	9305      	str	r3, [sp, #20]
 800b80a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8f0 <_vfiprintf_r+0x25c>
 800b80e:	7821      	ldrb	r1, [r4, #0]
 800b810:	2203      	movs	r2, #3
 800b812:	4650      	mov	r0, sl
 800b814:	f7f4 fd8c 	bl	8000330 <memchr>
 800b818:	b140      	cbz	r0, 800b82c <_vfiprintf_r+0x198>
 800b81a:	2340      	movs	r3, #64	; 0x40
 800b81c:	eba0 000a 	sub.w	r0, r0, sl
 800b820:	fa03 f000 	lsl.w	r0, r3, r0
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	4303      	orrs	r3, r0
 800b828:	3401      	adds	r4, #1
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b830:	482c      	ldr	r0, [pc, #176]	; (800b8e4 <_vfiprintf_r+0x250>)
 800b832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b836:	2206      	movs	r2, #6
 800b838:	f7f4 fd7a 	bl	8000330 <memchr>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d03f      	beq.n	800b8c0 <_vfiprintf_r+0x22c>
 800b840:	4b29      	ldr	r3, [pc, #164]	; (800b8e8 <_vfiprintf_r+0x254>)
 800b842:	bb1b      	cbnz	r3, 800b88c <_vfiprintf_r+0x1f8>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	3307      	adds	r3, #7
 800b848:	f023 0307 	bic.w	r3, r3, #7
 800b84c:	3308      	adds	r3, #8
 800b84e:	9303      	str	r3, [sp, #12]
 800b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b852:	443b      	add	r3, r7
 800b854:	9309      	str	r3, [sp, #36]	; 0x24
 800b856:	e767      	b.n	800b728 <_vfiprintf_r+0x94>
 800b858:	fb0c 3202 	mla	r2, ip, r2, r3
 800b85c:	460c      	mov	r4, r1
 800b85e:	2001      	movs	r0, #1
 800b860:	e7a5      	b.n	800b7ae <_vfiprintf_r+0x11a>
 800b862:	2300      	movs	r3, #0
 800b864:	3401      	adds	r4, #1
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	4619      	mov	r1, r3
 800b86a:	f04f 0c0a 	mov.w	ip, #10
 800b86e:	4620      	mov	r0, r4
 800b870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b874:	3a30      	subs	r2, #48	; 0x30
 800b876:	2a09      	cmp	r2, #9
 800b878:	d903      	bls.n	800b882 <_vfiprintf_r+0x1ee>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0c5      	beq.n	800b80a <_vfiprintf_r+0x176>
 800b87e:	9105      	str	r1, [sp, #20]
 800b880:	e7c3      	b.n	800b80a <_vfiprintf_r+0x176>
 800b882:	fb0c 2101 	mla	r1, ip, r1, r2
 800b886:	4604      	mov	r4, r0
 800b888:	2301      	movs	r3, #1
 800b88a:	e7f0      	b.n	800b86e <_vfiprintf_r+0x1da>
 800b88c:	ab03      	add	r3, sp, #12
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	462a      	mov	r2, r5
 800b892:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <_vfiprintf_r+0x258>)
 800b894:	a904      	add	r1, sp, #16
 800b896:	4630      	mov	r0, r6
 800b898:	f3af 8000 	nop.w
 800b89c:	4607      	mov	r7, r0
 800b89e:	1c78      	adds	r0, r7, #1
 800b8a0:	d1d6      	bne.n	800b850 <_vfiprintf_r+0x1bc>
 800b8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a4:	07d9      	lsls	r1, r3, #31
 800b8a6:	d405      	bmi.n	800b8b4 <_vfiprintf_r+0x220>
 800b8a8:	89ab      	ldrh	r3, [r5, #12]
 800b8aa:	059a      	lsls	r2, r3, #22
 800b8ac:	d402      	bmi.n	800b8b4 <_vfiprintf_r+0x220>
 800b8ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b0:	f000 fc45 	bl	800c13e <__retarget_lock_release_recursive>
 800b8b4:	89ab      	ldrh	r3, [r5, #12]
 800b8b6:	065b      	lsls	r3, r3, #25
 800b8b8:	f53f af12 	bmi.w	800b6e0 <_vfiprintf_r+0x4c>
 800b8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8be:	e711      	b.n	800b6e4 <_vfiprintf_r+0x50>
 800b8c0:	ab03      	add	r3, sp, #12
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	462a      	mov	r2, r5
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <_vfiprintf_r+0x258>)
 800b8c8:	a904      	add	r1, sp, #16
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 f880 	bl	800b9d0 <_printf_i>
 800b8d0:	e7e4      	b.n	800b89c <_vfiprintf_r+0x208>
 800b8d2:	bf00      	nop
 800b8d4:	0800c738 	.word	0x0800c738
 800b8d8:	0800c758 	.word	0x0800c758
 800b8dc:	0800c718 	.word	0x0800c718
 800b8e0:	0800c6e5 	.word	0x0800c6e5
 800b8e4:	0800c6ef 	.word	0x0800c6ef
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	0800b66f 	.word	0x0800b66f
 800b8f0:	0800c6eb 	.word	0x0800c6eb

0800b8f4 <_printf_common>:
 800b8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	4699      	mov	r9, r3
 800b8fc:	688a      	ldr	r2, [r1, #8]
 800b8fe:	690b      	ldr	r3, [r1, #16]
 800b900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b904:	4293      	cmp	r3, r2
 800b906:	bfb8      	it	lt
 800b908:	4613      	movlt	r3, r2
 800b90a:	6033      	str	r3, [r6, #0]
 800b90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b910:	4607      	mov	r7, r0
 800b912:	460c      	mov	r4, r1
 800b914:	b10a      	cbz	r2, 800b91a <_printf_common+0x26>
 800b916:	3301      	adds	r3, #1
 800b918:	6033      	str	r3, [r6, #0]
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	0699      	lsls	r1, r3, #26
 800b91e:	bf42      	ittt	mi
 800b920:	6833      	ldrmi	r3, [r6, #0]
 800b922:	3302      	addmi	r3, #2
 800b924:	6033      	strmi	r3, [r6, #0]
 800b926:	6825      	ldr	r5, [r4, #0]
 800b928:	f015 0506 	ands.w	r5, r5, #6
 800b92c:	d106      	bne.n	800b93c <_printf_common+0x48>
 800b92e:	f104 0a19 	add.w	sl, r4, #25
 800b932:	68e3      	ldr	r3, [r4, #12]
 800b934:	6832      	ldr	r2, [r6, #0]
 800b936:	1a9b      	subs	r3, r3, r2
 800b938:	42ab      	cmp	r3, r5
 800b93a:	dc26      	bgt.n	800b98a <_printf_common+0x96>
 800b93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b940:	1e13      	subs	r3, r2, #0
 800b942:	6822      	ldr	r2, [r4, #0]
 800b944:	bf18      	it	ne
 800b946:	2301      	movne	r3, #1
 800b948:	0692      	lsls	r2, r2, #26
 800b94a:	d42b      	bmi.n	800b9a4 <_printf_common+0xb0>
 800b94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b950:	4649      	mov	r1, r9
 800b952:	4638      	mov	r0, r7
 800b954:	47c0      	blx	r8
 800b956:	3001      	adds	r0, #1
 800b958:	d01e      	beq.n	800b998 <_printf_common+0xa4>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	68e5      	ldr	r5, [r4, #12]
 800b95e:	6832      	ldr	r2, [r6, #0]
 800b960:	f003 0306 	and.w	r3, r3, #6
 800b964:	2b04      	cmp	r3, #4
 800b966:	bf08      	it	eq
 800b968:	1aad      	subeq	r5, r5, r2
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	6922      	ldr	r2, [r4, #16]
 800b96e:	bf0c      	ite	eq
 800b970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b974:	2500      	movne	r5, #0
 800b976:	4293      	cmp	r3, r2
 800b978:	bfc4      	itt	gt
 800b97a:	1a9b      	subgt	r3, r3, r2
 800b97c:	18ed      	addgt	r5, r5, r3
 800b97e:	2600      	movs	r6, #0
 800b980:	341a      	adds	r4, #26
 800b982:	42b5      	cmp	r5, r6
 800b984:	d11a      	bne.n	800b9bc <_printf_common+0xc8>
 800b986:	2000      	movs	r0, #0
 800b988:	e008      	b.n	800b99c <_printf_common+0xa8>
 800b98a:	2301      	movs	r3, #1
 800b98c:	4652      	mov	r2, sl
 800b98e:	4649      	mov	r1, r9
 800b990:	4638      	mov	r0, r7
 800b992:	47c0      	blx	r8
 800b994:	3001      	adds	r0, #1
 800b996:	d103      	bne.n	800b9a0 <_printf_common+0xac>
 800b998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	e7c6      	b.n	800b932 <_printf_common+0x3e>
 800b9a4:	18e1      	adds	r1, r4, r3
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	2030      	movs	r0, #48	; 0x30
 800b9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9ae:	4422      	add	r2, r4
 800b9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9b8:	3302      	adds	r3, #2
 800b9ba:	e7c7      	b.n	800b94c <_printf_common+0x58>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	4622      	mov	r2, r4
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	47c0      	blx	r8
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	d0e6      	beq.n	800b998 <_printf_common+0xa4>
 800b9ca:	3601      	adds	r6, #1
 800b9cc:	e7d9      	b.n	800b982 <_printf_common+0x8e>
	...

0800b9d0 <_printf_i>:
 800b9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d4:	7e0f      	ldrb	r7, [r1, #24]
 800b9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9d8:	2f78      	cmp	r7, #120	; 0x78
 800b9da:	4691      	mov	r9, r2
 800b9dc:	4680      	mov	r8, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	469a      	mov	sl, r3
 800b9e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9e6:	d807      	bhi.n	800b9f8 <_printf_i+0x28>
 800b9e8:	2f62      	cmp	r7, #98	; 0x62
 800b9ea:	d80a      	bhi.n	800ba02 <_printf_i+0x32>
 800b9ec:	2f00      	cmp	r7, #0
 800b9ee:	f000 80d8 	beq.w	800bba2 <_printf_i+0x1d2>
 800b9f2:	2f58      	cmp	r7, #88	; 0x58
 800b9f4:	f000 80a3 	beq.w	800bb3e <_printf_i+0x16e>
 800b9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba00:	e03a      	b.n	800ba78 <_printf_i+0xa8>
 800ba02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba06:	2b15      	cmp	r3, #21
 800ba08:	d8f6      	bhi.n	800b9f8 <_printf_i+0x28>
 800ba0a:	a101      	add	r1, pc, #4	; (adr r1, 800ba10 <_printf_i+0x40>)
 800ba0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba10:	0800ba69 	.word	0x0800ba69
 800ba14:	0800ba7d 	.word	0x0800ba7d
 800ba18:	0800b9f9 	.word	0x0800b9f9
 800ba1c:	0800b9f9 	.word	0x0800b9f9
 800ba20:	0800b9f9 	.word	0x0800b9f9
 800ba24:	0800b9f9 	.word	0x0800b9f9
 800ba28:	0800ba7d 	.word	0x0800ba7d
 800ba2c:	0800b9f9 	.word	0x0800b9f9
 800ba30:	0800b9f9 	.word	0x0800b9f9
 800ba34:	0800b9f9 	.word	0x0800b9f9
 800ba38:	0800b9f9 	.word	0x0800b9f9
 800ba3c:	0800bb89 	.word	0x0800bb89
 800ba40:	0800baad 	.word	0x0800baad
 800ba44:	0800bb6b 	.word	0x0800bb6b
 800ba48:	0800b9f9 	.word	0x0800b9f9
 800ba4c:	0800b9f9 	.word	0x0800b9f9
 800ba50:	0800bbab 	.word	0x0800bbab
 800ba54:	0800b9f9 	.word	0x0800b9f9
 800ba58:	0800baad 	.word	0x0800baad
 800ba5c:	0800b9f9 	.word	0x0800b9f9
 800ba60:	0800b9f9 	.word	0x0800b9f9
 800ba64:	0800bb73 	.word	0x0800bb73
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	1d1a      	adds	r2, r3, #4
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	602a      	str	r2, [r5, #0]
 800ba70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e0a3      	b.n	800bbc4 <_printf_i+0x1f4>
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	6829      	ldr	r1, [r5, #0]
 800ba80:	0606      	lsls	r6, r0, #24
 800ba82:	f101 0304 	add.w	r3, r1, #4
 800ba86:	d50a      	bpl.n	800ba9e <_printf_i+0xce>
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	da03      	bge.n	800ba98 <_printf_i+0xc8>
 800ba90:	232d      	movs	r3, #45	; 0x2d
 800ba92:	4276      	negs	r6, r6
 800ba94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba98:	485e      	ldr	r0, [pc, #376]	; (800bc14 <_printf_i+0x244>)
 800ba9a:	230a      	movs	r3, #10
 800ba9c:	e019      	b.n	800bad2 <_printf_i+0x102>
 800ba9e:	680e      	ldr	r6, [r1, #0]
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800baa6:	bf18      	it	ne
 800baa8:	b236      	sxthne	r6, r6
 800baaa:	e7ef      	b.n	800ba8c <_printf_i+0xbc>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	6820      	ldr	r0, [r4, #0]
 800bab0:	1d19      	adds	r1, r3, #4
 800bab2:	6029      	str	r1, [r5, #0]
 800bab4:	0601      	lsls	r1, r0, #24
 800bab6:	d501      	bpl.n	800babc <_printf_i+0xec>
 800bab8:	681e      	ldr	r6, [r3, #0]
 800baba:	e002      	b.n	800bac2 <_printf_i+0xf2>
 800babc:	0646      	lsls	r6, r0, #25
 800babe:	d5fb      	bpl.n	800bab8 <_printf_i+0xe8>
 800bac0:	881e      	ldrh	r6, [r3, #0]
 800bac2:	4854      	ldr	r0, [pc, #336]	; (800bc14 <_printf_i+0x244>)
 800bac4:	2f6f      	cmp	r7, #111	; 0x6f
 800bac6:	bf0c      	ite	eq
 800bac8:	2308      	moveq	r3, #8
 800baca:	230a      	movne	r3, #10
 800bacc:	2100      	movs	r1, #0
 800bace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bad2:	6865      	ldr	r5, [r4, #4]
 800bad4:	60a5      	str	r5, [r4, #8]
 800bad6:	2d00      	cmp	r5, #0
 800bad8:	bfa2      	ittt	ge
 800bada:	6821      	ldrge	r1, [r4, #0]
 800badc:	f021 0104 	bicge.w	r1, r1, #4
 800bae0:	6021      	strge	r1, [r4, #0]
 800bae2:	b90e      	cbnz	r6, 800bae8 <_printf_i+0x118>
 800bae4:	2d00      	cmp	r5, #0
 800bae6:	d04d      	beq.n	800bb84 <_printf_i+0x1b4>
 800bae8:	4615      	mov	r5, r2
 800baea:	fbb6 f1f3 	udiv	r1, r6, r3
 800baee:	fb03 6711 	mls	r7, r3, r1, r6
 800baf2:	5dc7      	ldrb	r7, [r0, r7]
 800baf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800baf8:	4637      	mov	r7, r6
 800bafa:	42bb      	cmp	r3, r7
 800bafc:	460e      	mov	r6, r1
 800bafe:	d9f4      	bls.n	800baea <_printf_i+0x11a>
 800bb00:	2b08      	cmp	r3, #8
 800bb02:	d10b      	bne.n	800bb1c <_printf_i+0x14c>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	07de      	lsls	r6, r3, #31
 800bb08:	d508      	bpl.n	800bb1c <_printf_i+0x14c>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4299      	cmp	r1, r3
 800bb10:	bfde      	ittt	le
 800bb12:	2330      	movle	r3, #48	; 0x30
 800bb14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb1c:	1b52      	subs	r2, r2, r5
 800bb1e:	6122      	str	r2, [r4, #16]
 800bb20:	f8cd a000 	str.w	sl, [sp]
 800bb24:	464b      	mov	r3, r9
 800bb26:	aa03      	add	r2, sp, #12
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f7ff fee2 	bl	800b8f4 <_printf_common>
 800bb30:	3001      	adds	r0, #1
 800bb32:	d14c      	bne.n	800bbce <_printf_i+0x1fe>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb38:	b004      	add	sp, #16
 800bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3e:	4835      	ldr	r0, [pc, #212]	; (800bc14 <_printf_i+0x244>)
 800bb40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb44:	6829      	ldr	r1, [r5, #0]
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb4c:	6029      	str	r1, [r5, #0]
 800bb4e:	061d      	lsls	r5, r3, #24
 800bb50:	d514      	bpl.n	800bb7c <_printf_i+0x1ac>
 800bb52:	07df      	lsls	r7, r3, #31
 800bb54:	bf44      	itt	mi
 800bb56:	f043 0320 	orrmi.w	r3, r3, #32
 800bb5a:	6023      	strmi	r3, [r4, #0]
 800bb5c:	b91e      	cbnz	r6, 800bb66 <_printf_i+0x196>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	f023 0320 	bic.w	r3, r3, #32
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	2310      	movs	r3, #16
 800bb68:	e7b0      	b.n	800bacc <_printf_i+0xfc>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	f043 0320 	orr.w	r3, r3, #32
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	2378      	movs	r3, #120	; 0x78
 800bb74:	4828      	ldr	r0, [pc, #160]	; (800bc18 <_printf_i+0x248>)
 800bb76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb7a:	e7e3      	b.n	800bb44 <_printf_i+0x174>
 800bb7c:	0659      	lsls	r1, r3, #25
 800bb7e:	bf48      	it	mi
 800bb80:	b2b6      	uxthmi	r6, r6
 800bb82:	e7e6      	b.n	800bb52 <_printf_i+0x182>
 800bb84:	4615      	mov	r5, r2
 800bb86:	e7bb      	b.n	800bb00 <_printf_i+0x130>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	6826      	ldr	r6, [r4, #0]
 800bb8c:	6961      	ldr	r1, [r4, #20]
 800bb8e:	1d18      	adds	r0, r3, #4
 800bb90:	6028      	str	r0, [r5, #0]
 800bb92:	0635      	lsls	r5, r6, #24
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	d501      	bpl.n	800bb9c <_printf_i+0x1cc>
 800bb98:	6019      	str	r1, [r3, #0]
 800bb9a:	e002      	b.n	800bba2 <_printf_i+0x1d2>
 800bb9c:	0670      	lsls	r0, r6, #25
 800bb9e:	d5fb      	bpl.n	800bb98 <_printf_i+0x1c8>
 800bba0:	8019      	strh	r1, [r3, #0]
 800bba2:	2300      	movs	r3, #0
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	4615      	mov	r5, r2
 800bba8:	e7ba      	b.n	800bb20 <_printf_i+0x150>
 800bbaa:	682b      	ldr	r3, [r5, #0]
 800bbac:	1d1a      	adds	r2, r3, #4
 800bbae:	602a      	str	r2, [r5, #0]
 800bbb0:	681d      	ldr	r5, [r3, #0]
 800bbb2:	6862      	ldr	r2, [r4, #4]
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7f4 fbba 	bl	8000330 <memchr>
 800bbbc:	b108      	cbz	r0, 800bbc2 <_printf_i+0x1f2>
 800bbbe:	1b40      	subs	r0, r0, r5
 800bbc0:	6060      	str	r0, [r4, #4]
 800bbc2:	6863      	ldr	r3, [r4, #4]
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbcc:	e7a8      	b.n	800bb20 <_printf_i+0x150>
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	4640      	mov	r0, r8
 800bbd6:	47d0      	blx	sl
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d0ab      	beq.n	800bb34 <_printf_i+0x164>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	079b      	lsls	r3, r3, #30
 800bbe0:	d413      	bmi.n	800bc0a <_printf_i+0x23a>
 800bbe2:	68e0      	ldr	r0, [r4, #12]
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	4298      	cmp	r0, r3
 800bbe8:	bfb8      	it	lt
 800bbea:	4618      	movlt	r0, r3
 800bbec:	e7a4      	b.n	800bb38 <_printf_i+0x168>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	47d0      	blx	sl
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d09b      	beq.n	800bb34 <_printf_i+0x164>
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	68e3      	ldr	r3, [r4, #12]
 800bc00:	9903      	ldr	r1, [sp, #12]
 800bc02:	1a5b      	subs	r3, r3, r1
 800bc04:	42ab      	cmp	r3, r5
 800bc06:	dcf2      	bgt.n	800bbee <_printf_i+0x21e>
 800bc08:	e7eb      	b.n	800bbe2 <_printf_i+0x212>
 800bc0a:	2500      	movs	r5, #0
 800bc0c:	f104 0619 	add.w	r6, r4, #25
 800bc10:	e7f5      	b.n	800bbfe <_printf_i+0x22e>
 800bc12:	bf00      	nop
 800bc14:	0800c6f6 	.word	0x0800c6f6
 800bc18:	0800c707 	.word	0x0800c707

0800bc1c <_sbrk_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d06      	ldr	r5, [pc, #24]	; (800bc38 <_sbrk_r+0x1c>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	f7f5 ff8c 	bl	8001b44 <_sbrk>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_sbrk_r+0x1a>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_sbrk_r+0x1a>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	2403cea8 	.word	0x2403cea8

0800bc3c <__swbuf_r>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	460e      	mov	r6, r1
 800bc40:	4614      	mov	r4, r2
 800bc42:	4605      	mov	r5, r0
 800bc44:	b118      	cbz	r0, 800bc4e <__swbuf_r+0x12>
 800bc46:	6983      	ldr	r3, [r0, #24]
 800bc48:	b90b      	cbnz	r3, 800bc4e <__swbuf_r+0x12>
 800bc4a:	f000 f9d9 	bl	800c000 <__sinit>
 800bc4e:	4b21      	ldr	r3, [pc, #132]	; (800bcd4 <__swbuf_r+0x98>)
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d12b      	bne.n	800bcac <__swbuf_r+0x70>
 800bc54:	686c      	ldr	r4, [r5, #4]
 800bc56:	69a3      	ldr	r3, [r4, #24]
 800bc58:	60a3      	str	r3, [r4, #8]
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	071a      	lsls	r2, r3, #28
 800bc5e:	d52f      	bpl.n	800bcc0 <__swbuf_r+0x84>
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	b36b      	cbz	r3, 800bcc0 <__swbuf_r+0x84>
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	6820      	ldr	r0, [r4, #0]
 800bc68:	1ac0      	subs	r0, r0, r3
 800bc6a:	6963      	ldr	r3, [r4, #20]
 800bc6c:	b2f6      	uxtb	r6, r6
 800bc6e:	4283      	cmp	r3, r0
 800bc70:	4637      	mov	r7, r6
 800bc72:	dc04      	bgt.n	800bc7e <__swbuf_r+0x42>
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f92e 	bl	800bed8 <_fflush_r>
 800bc7c:	bb30      	cbnz	r0, 800bccc <__swbuf_r+0x90>
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	60a3      	str	r3, [r4, #8]
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	6022      	str	r2, [r4, #0]
 800bc8a:	701e      	strb	r6, [r3, #0]
 800bc8c:	6963      	ldr	r3, [r4, #20]
 800bc8e:	3001      	adds	r0, #1
 800bc90:	4283      	cmp	r3, r0
 800bc92:	d004      	beq.n	800bc9e <__swbuf_r+0x62>
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	07db      	lsls	r3, r3, #31
 800bc98:	d506      	bpl.n	800bca8 <__swbuf_r+0x6c>
 800bc9a:	2e0a      	cmp	r6, #10
 800bc9c:	d104      	bne.n	800bca8 <__swbuf_r+0x6c>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4628      	mov	r0, r5
 800bca2:	f000 f919 	bl	800bed8 <_fflush_r>
 800bca6:	b988      	cbnz	r0, 800bccc <__swbuf_r+0x90>
 800bca8:	4638      	mov	r0, r7
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcac:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <__swbuf_r+0x9c>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d101      	bne.n	800bcb6 <__swbuf_r+0x7a>
 800bcb2:	68ac      	ldr	r4, [r5, #8]
 800bcb4:	e7cf      	b.n	800bc56 <__swbuf_r+0x1a>
 800bcb6:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <__swbuf_r+0xa0>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	bf08      	it	eq
 800bcbc:	68ec      	ldreq	r4, [r5, #12]
 800bcbe:	e7ca      	b.n	800bc56 <__swbuf_r+0x1a>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f000 f80c 	bl	800bce0 <__swsetup_r>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d0cb      	beq.n	800bc64 <__swbuf_r+0x28>
 800bccc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcd0:	e7ea      	b.n	800bca8 <__swbuf_r+0x6c>
 800bcd2:	bf00      	nop
 800bcd4:	0800c738 	.word	0x0800c738
 800bcd8:	0800c758 	.word	0x0800c758
 800bcdc:	0800c718 	.word	0x0800c718

0800bce0 <__swsetup_r>:
 800bce0:	4b32      	ldr	r3, [pc, #200]	; (800bdac <__swsetup_r+0xcc>)
 800bce2:	b570      	push	{r4, r5, r6, lr}
 800bce4:	681d      	ldr	r5, [r3, #0]
 800bce6:	4606      	mov	r6, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	b125      	cbz	r5, 800bcf6 <__swsetup_r+0x16>
 800bcec:	69ab      	ldr	r3, [r5, #24]
 800bcee:	b913      	cbnz	r3, 800bcf6 <__swsetup_r+0x16>
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f000 f985 	bl	800c000 <__sinit>
 800bcf6:	4b2e      	ldr	r3, [pc, #184]	; (800bdb0 <__swsetup_r+0xd0>)
 800bcf8:	429c      	cmp	r4, r3
 800bcfa:	d10f      	bne.n	800bd1c <__swsetup_r+0x3c>
 800bcfc:	686c      	ldr	r4, [r5, #4]
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd04:	0719      	lsls	r1, r3, #28
 800bd06:	d42c      	bmi.n	800bd62 <__swsetup_r+0x82>
 800bd08:	06dd      	lsls	r5, r3, #27
 800bd0a:	d411      	bmi.n	800bd30 <__swsetup_r+0x50>
 800bd0c:	2309      	movs	r3, #9
 800bd0e:	6033      	str	r3, [r6, #0]
 800bd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd1a:	e03e      	b.n	800bd9a <__swsetup_r+0xba>
 800bd1c:	4b25      	ldr	r3, [pc, #148]	; (800bdb4 <__swsetup_r+0xd4>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <__swsetup_r+0x46>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7eb      	b.n	800bcfe <__swsetup_r+0x1e>
 800bd26:	4b24      	ldr	r3, [pc, #144]	; (800bdb8 <__swsetup_r+0xd8>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7e6      	b.n	800bcfe <__swsetup_r+0x1e>
 800bd30:	0758      	lsls	r0, r3, #29
 800bd32:	d512      	bpl.n	800bd5a <__swsetup_r+0x7a>
 800bd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd36:	b141      	cbz	r1, 800bd4a <__swsetup_r+0x6a>
 800bd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d002      	beq.n	800bd46 <__swsetup_r+0x66>
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff fa41 	bl	800b1c8 <_free_r>
 800bd46:	2300      	movs	r3, #0
 800bd48:	6363      	str	r3, [r4, #52]	; 0x34
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	2300      	movs	r3, #0
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0308 	orr.w	r3, r3, #8
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	b94b      	cbnz	r3, 800bd7a <__swsetup_r+0x9a>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd70:	d003      	beq.n	800bd7a <__swsetup_r+0x9a>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4630      	mov	r0, r6
 800bd76:	f000 fa09 	bl	800c18c <__smakebuf_r>
 800bd7a:	89a0      	ldrh	r0, [r4, #12]
 800bd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd80:	f010 0301 	ands.w	r3, r0, #1
 800bd84:	d00a      	beq.n	800bd9c <__swsetup_r+0xbc>
 800bd86:	2300      	movs	r3, #0
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6963      	ldr	r3, [r4, #20]
 800bd8c:	425b      	negs	r3, r3
 800bd8e:	61a3      	str	r3, [r4, #24]
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	b943      	cbnz	r3, 800bda6 <__swsetup_r+0xc6>
 800bd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd98:	d1ba      	bne.n	800bd10 <__swsetup_r+0x30>
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	0781      	lsls	r1, r0, #30
 800bd9e:	bf58      	it	pl
 800bda0:	6963      	ldrpl	r3, [r4, #20]
 800bda2:	60a3      	str	r3, [r4, #8]
 800bda4:	e7f4      	b.n	800bd90 <__swsetup_r+0xb0>
 800bda6:	2000      	movs	r0, #0
 800bda8:	e7f7      	b.n	800bd9a <__swsetup_r+0xba>
 800bdaa:	bf00      	nop
 800bdac:	24000174 	.word	0x24000174
 800bdb0:	0800c738 	.word	0x0800c738
 800bdb4:	0800c758 	.word	0x0800c758
 800bdb8:	0800c718 	.word	0x0800c718

0800bdbc <abort>:
 800bdbc:	b508      	push	{r3, lr}
 800bdbe:	2006      	movs	r0, #6
 800bdc0:	f000 faa2 	bl	800c308 <raise>
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	f7f5 fe45 	bl	8001a54 <_exit>
	...

0800bdcc <__sflush_r>:
 800bdcc:	898a      	ldrh	r2, [r1, #12]
 800bdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	0710      	lsls	r0, r2, #28
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	d458      	bmi.n	800be8c <__sflush_r+0xc0>
 800bdda:	684b      	ldr	r3, [r1, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dc05      	bgt.n	800bdec <__sflush_r+0x20>
 800bde0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dc02      	bgt.n	800bdec <__sflush_r+0x20>
 800bde6:	2000      	movs	r0, #0
 800bde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	d0f9      	beq.n	800bde6 <__sflush_r+0x1a>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdf8:	682f      	ldr	r7, [r5, #0]
 800bdfa:	602b      	str	r3, [r5, #0]
 800bdfc:	d032      	beq.n	800be64 <__sflush_r+0x98>
 800bdfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	075a      	lsls	r2, r3, #29
 800be04:	d505      	bpl.n	800be12 <__sflush_r+0x46>
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	1ac0      	subs	r0, r0, r3
 800be0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be0c:	b10b      	cbz	r3, 800be12 <__sflush_r+0x46>
 800be0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	2300      	movs	r3, #0
 800be14:	4602      	mov	r2, r0
 800be16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be18:	6a21      	ldr	r1, [r4, #32]
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b0      	blx	r6
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	d106      	bne.n	800be32 <__sflush_r+0x66>
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	291d      	cmp	r1, #29
 800be28:	d82c      	bhi.n	800be84 <__sflush_r+0xb8>
 800be2a:	4a2a      	ldr	r2, [pc, #168]	; (800bed4 <__sflush_r+0x108>)
 800be2c:	40ca      	lsrs	r2, r1
 800be2e:	07d6      	lsls	r6, r2, #31
 800be30:	d528      	bpl.n	800be84 <__sflush_r+0xb8>
 800be32:	2200      	movs	r2, #0
 800be34:	6062      	str	r2, [r4, #4]
 800be36:	04d9      	lsls	r1, r3, #19
 800be38:	6922      	ldr	r2, [r4, #16]
 800be3a:	6022      	str	r2, [r4, #0]
 800be3c:	d504      	bpl.n	800be48 <__sflush_r+0x7c>
 800be3e:	1c42      	adds	r2, r0, #1
 800be40:	d101      	bne.n	800be46 <__sflush_r+0x7a>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b903      	cbnz	r3, 800be48 <__sflush_r+0x7c>
 800be46:	6560      	str	r0, [r4, #84]	; 0x54
 800be48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be4a:	602f      	str	r7, [r5, #0]
 800be4c:	2900      	cmp	r1, #0
 800be4e:	d0ca      	beq.n	800bde6 <__sflush_r+0x1a>
 800be50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be54:	4299      	cmp	r1, r3
 800be56:	d002      	beq.n	800be5e <__sflush_r+0x92>
 800be58:	4628      	mov	r0, r5
 800be5a:	f7ff f9b5 	bl	800b1c8 <_free_r>
 800be5e:	2000      	movs	r0, #0
 800be60:	6360      	str	r0, [r4, #52]	; 0x34
 800be62:	e7c1      	b.n	800bde8 <__sflush_r+0x1c>
 800be64:	6a21      	ldr	r1, [r4, #32]
 800be66:	2301      	movs	r3, #1
 800be68:	4628      	mov	r0, r5
 800be6a:	47b0      	blx	r6
 800be6c:	1c41      	adds	r1, r0, #1
 800be6e:	d1c7      	bne.n	800be00 <__sflush_r+0x34>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0c4      	beq.n	800be00 <__sflush_r+0x34>
 800be76:	2b1d      	cmp	r3, #29
 800be78:	d001      	beq.n	800be7e <__sflush_r+0xb2>
 800be7a:	2b16      	cmp	r3, #22
 800be7c:	d101      	bne.n	800be82 <__sflush_r+0xb6>
 800be7e:	602f      	str	r7, [r5, #0]
 800be80:	e7b1      	b.n	800bde6 <__sflush_r+0x1a>
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	e7ad      	b.n	800bde8 <__sflush_r+0x1c>
 800be8c:	690f      	ldr	r7, [r1, #16]
 800be8e:	2f00      	cmp	r7, #0
 800be90:	d0a9      	beq.n	800bde6 <__sflush_r+0x1a>
 800be92:	0793      	lsls	r3, r2, #30
 800be94:	680e      	ldr	r6, [r1, #0]
 800be96:	bf08      	it	eq
 800be98:	694b      	ldreq	r3, [r1, #20]
 800be9a:	600f      	str	r7, [r1, #0]
 800be9c:	bf18      	it	ne
 800be9e:	2300      	movne	r3, #0
 800bea0:	eba6 0807 	sub.w	r8, r6, r7
 800bea4:	608b      	str	r3, [r1, #8]
 800bea6:	f1b8 0f00 	cmp.w	r8, #0
 800beaa:	dd9c      	ble.n	800bde6 <__sflush_r+0x1a>
 800beac:	6a21      	ldr	r1, [r4, #32]
 800beae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beb0:	4643      	mov	r3, r8
 800beb2:	463a      	mov	r2, r7
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b0      	blx	r6
 800beb8:	2800      	cmp	r0, #0
 800beba:	dc06      	bgt.n	800beca <__sflush_r+0xfe>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bec8:	e78e      	b.n	800bde8 <__sflush_r+0x1c>
 800beca:	4407      	add	r7, r0
 800becc:	eba8 0800 	sub.w	r8, r8, r0
 800bed0:	e7e9      	b.n	800bea6 <__sflush_r+0xda>
 800bed2:	bf00      	nop
 800bed4:	20400001 	.word	0x20400001

0800bed8 <_fflush_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	b913      	cbnz	r3, 800bee8 <_fflush_r+0x10>
 800bee2:	2500      	movs	r5, #0
 800bee4:	4628      	mov	r0, r5
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	b118      	cbz	r0, 800bef2 <_fflush_r+0x1a>
 800beea:	6983      	ldr	r3, [r0, #24]
 800beec:	b90b      	cbnz	r3, 800bef2 <_fflush_r+0x1a>
 800beee:	f000 f887 	bl	800c000 <__sinit>
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <_fflush_r+0x6c>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d11b      	bne.n	800bf30 <_fflush_r+0x58>
 800bef8:	686c      	ldr	r4, [r5, #4]
 800befa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0ef      	beq.n	800bee2 <_fflush_r+0xa>
 800bf02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf04:	07d0      	lsls	r0, r2, #31
 800bf06:	d404      	bmi.n	800bf12 <_fflush_r+0x3a>
 800bf08:	0599      	lsls	r1, r3, #22
 800bf0a:	d402      	bmi.n	800bf12 <_fflush_r+0x3a>
 800bf0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf0e:	f000 f915 	bl	800c13c <__retarget_lock_acquire_recursive>
 800bf12:	4628      	mov	r0, r5
 800bf14:	4621      	mov	r1, r4
 800bf16:	f7ff ff59 	bl	800bdcc <__sflush_r>
 800bf1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf1c:	07da      	lsls	r2, r3, #31
 800bf1e:	4605      	mov	r5, r0
 800bf20:	d4e0      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	059b      	lsls	r3, r3, #22
 800bf26:	d4dd      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf2a:	f000 f908 	bl	800c13e <__retarget_lock_release_recursive>
 800bf2e:	e7d9      	b.n	800bee4 <_fflush_r+0xc>
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <_fflush_r+0x70>)
 800bf32:	429c      	cmp	r4, r3
 800bf34:	d101      	bne.n	800bf3a <_fflush_r+0x62>
 800bf36:	68ac      	ldr	r4, [r5, #8]
 800bf38:	e7df      	b.n	800befa <_fflush_r+0x22>
 800bf3a:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <_fflush_r+0x74>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	bf08      	it	eq
 800bf40:	68ec      	ldreq	r4, [r5, #12]
 800bf42:	e7da      	b.n	800befa <_fflush_r+0x22>
 800bf44:	0800c738 	.word	0x0800c738
 800bf48:	0800c758 	.word	0x0800c758
 800bf4c:	0800c718 	.word	0x0800c718

0800bf50 <std>:
 800bf50:	2300      	movs	r3, #0
 800bf52:	b510      	push	{r4, lr}
 800bf54:	4604      	mov	r4, r0
 800bf56:	e9c0 3300 	strd	r3, r3, [r0]
 800bf5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5e:	6083      	str	r3, [r0, #8]
 800bf60:	8181      	strh	r1, [r0, #12]
 800bf62:	6643      	str	r3, [r0, #100]	; 0x64
 800bf64:	81c2      	strh	r2, [r0, #14]
 800bf66:	6183      	str	r3, [r0, #24]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	305c      	adds	r0, #92	; 0x5c
 800bf6e:	f7fe ffe3 	bl	800af38 <memset>
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <std+0x38>)
 800bf74:	6263      	str	r3, [r4, #36]	; 0x24
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <std+0x3c>)
 800bf78:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x40>)
 800bf7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <std+0x44>)
 800bf80:	6224      	str	r4, [r4, #32]
 800bf82:	6323      	str	r3, [r4, #48]	; 0x30
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	0800c341 	.word	0x0800c341
 800bf8c:	0800c363 	.word	0x0800c363
 800bf90:	0800c39b 	.word	0x0800c39b
 800bf94:	0800c3bf 	.word	0x0800c3bf

0800bf98 <_cleanup_r>:
 800bf98:	4901      	ldr	r1, [pc, #4]	; (800bfa0 <_cleanup_r+0x8>)
 800bf9a:	f000 b8af 	b.w	800c0fc <_fwalk_reent>
 800bf9e:	bf00      	nop
 800bfa0:	0800bed9 	.word	0x0800bed9

0800bfa4 <__sfmoreglue>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	2268      	movs	r2, #104	; 0x68
 800bfa8:	1e4d      	subs	r5, r1, #1
 800bfaa:	4355      	muls	r5, r2
 800bfac:	460e      	mov	r6, r1
 800bfae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfb2:	f7ff f975 	bl	800b2a0 <_malloc_r>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	b140      	cbz	r0, 800bfcc <__sfmoreglue+0x28>
 800bfba:	2100      	movs	r1, #0
 800bfbc:	e9c0 1600 	strd	r1, r6, [r0]
 800bfc0:	300c      	adds	r0, #12
 800bfc2:	60a0      	str	r0, [r4, #8]
 800bfc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfc8:	f7fe ffb6 	bl	800af38 <memset>
 800bfcc:	4620      	mov	r0, r4
 800bfce:	bd70      	pop	{r4, r5, r6, pc}

0800bfd0 <__sfp_lock_acquire>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	; (800bfd8 <__sfp_lock_acquire+0x8>)
 800bfd2:	f000 b8b3 	b.w	800c13c <__retarget_lock_acquire_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	2403cea5 	.word	0x2403cea5

0800bfdc <__sfp_lock_release>:
 800bfdc:	4801      	ldr	r0, [pc, #4]	; (800bfe4 <__sfp_lock_release+0x8>)
 800bfde:	f000 b8ae 	b.w	800c13e <__retarget_lock_release_recursive>
 800bfe2:	bf00      	nop
 800bfe4:	2403cea5 	.word	0x2403cea5

0800bfe8 <__sinit_lock_acquire>:
 800bfe8:	4801      	ldr	r0, [pc, #4]	; (800bff0 <__sinit_lock_acquire+0x8>)
 800bfea:	f000 b8a7 	b.w	800c13c <__retarget_lock_acquire_recursive>
 800bfee:	bf00      	nop
 800bff0:	2403cea6 	.word	0x2403cea6

0800bff4 <__sinit_lock_release>:
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <__sinit_lock_release+0x8>)
 800bff6:	f000 b8a2 	b.w	800c13e <__retarget_lock_release_recursive>
 800bffa:	bf00      	nop
 800bffc:	2403cea6 	.word	0x2403cea6

0800c000 <__sinit>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4604      	mov	r4, r0
 800c004:	f7ff fff0 	bl	800bfe8 <__sinit_lock_acquire>
 800c008:	69a3      	ldr	r3, [r4, #24]
 800c00a:	b11b      	cbz	r3, 800c014 <__sinit+0x14>
 800c00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c010:	f7ff bff0 	b.w	800bff4 <__sinit_lock_release>
 800c014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c018:	6523      	str	r3, [r4, #80]	; 0x50
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <__sinit+0x68>)
 800c01c:	4a13      	ldr	r2, [pc, #76]	; (800c06c <__sinit+0x6c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	62a2      	str	r2, [r4, #40]	; 0x28
 800c022:	42a3      	cmp	r3, r4
 800c024:	bf04      	itt	eq
 800c026:	2301      	moveq	r3, #1
 800c028:	61a3      	streq	r3, [r4, #24]
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 f820 	bl	800c070 <__sfp>
 800c030:	6060      	str	r0, [r4, #4]
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f81c 	bl	800c070 <__sfp>
 800c038:	60a0      	str	r0, [r4, #8]
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 f818 	bl	800c070 <__sfp>
 800c040:	2200      	movs	r2, #0
 800c042:	60e0      	str	r0, [r4, #12]
 800c044:	2104      	movs	r1, #4
 800c046:	6860      	ldr	r0, [r4, #4]
 800c048:	f7ff ff82 	bl	800bf50 <std>
 800c04c:	68a0      	ldr	r0, [r4, #8]
 800c04e:	2201      	movs	r2, #1
 800c050:	2109      	movs	r1, #9
 800c052:	f7ff ff7d 	bl	800bf50 <std>
 800c056:	68e0      	ldr	r0, [r4, #12]
 800c058:	2202      	movs	r2, #2
 800c05a:	2112      	movs	r1, #18
 800c05c:	f7ff ff78 	bl	800bf50 <std>
 800c060:	2301      	movs	r3, #1
 800c062:	61a3      	str	r3, [r4, #24]
 800c064:	e7d2      	b.n	800c00c <__sinit+0xc>
 800c066:	bf00      	nop
 800c068:	0800c530 	.word	0x0800c530
 800c06c:	0800bf99 	.word	0x0800bf99

0800c070 <__sfp>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	4607      	mov	r7, r0
 800c074:	f7ff ffac 	bl	800bfd0 <__sfp_lock_acquire>
 800c078:	4b1e      	ldr	r3, [pc, #120]	; (800c0f4 <__sfp+0x84>)
 800c07a:	681e      	ldr	r6, [r3, #0]
 800c07c:	69b3      	ldr	r3, [r6, #24]
 800c07e:	b913      	cbnz	r3, 800c086 <__sfp+0x16>
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff ffbd 	bl	800c000 <__sinit>
 800c086:	3648      	adds	r6, #72	; 0x48
 800c088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	d503      	bpl.n	800c098 <__sfp+0x28>
 800c090:	6833      	ldr	r3, [r6, #0]
 800c092:	b30b      	cbz	r3, 800c0d8 <__sfp+0x68>
 800c094:	6836      	ldr	r6, [r6, #0]
 800c096:	e7f7      	b.n	800c088 <__sfp+0x18>
 800c098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c09c:	b9d5      	cbnz	r5, 800c0d4 <__sfp+0x64>
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <__sfp+0x88>)
 800c0a0:	60e3      	str	r3, [r4, #12]
 800c0a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c0a8:	f000 f847 	bl	800c13a <__retarget_lock_init_recursive>
 800c0ac:	f7ff ff96 	bl	800bfdc <__sfp_lock_release>
 800c0b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0b8:	6025      	str	r5, [r4, #0]
 800c0ba:	61a5      	str	r5, [r4, #24]
 800c0bc:	2208      	movs	r2, #8
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0c4:	f7fe ff38 	bl	800af38 <memset>
 800c0c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d4:	3468      	adds	r4, #104	; 0x68
 800c0d6:	e7d9      	b.n	800c08c <__sfp+0x1c>
 800c0d8:	2104      	movs	r1, #4
 800c0da:	4638      	mov	r0, r7
 800c0dc:	f7ff ff62 	bl	800bfa4 <__sfmoreglue>
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	6030      	str	r0, [r6, #0]
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1d5      	bne.n	800c094 <__sfp+0x24>
 800c0e8:	f7ff ff78 	bl	800bfdc <__sfp_lock_release>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	e7ee      	b.n	800c0d0 <__sfp+0x60>
 800c0f2:	bf00      	nop
 800c0f4:	0800c530 	.word	0x0800c530
 800c0f8:	ffff0001 	.word	0xffff0001

0800c0fc <_fwalk_reent>:
 800c0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c100:	4606      	mov	r6, r0
 800c102:	4688      	mov	r8, r1
 800c104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c108:	2700      	movs	r7, #0
 800c10a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c10e:	f1b9 0901 	subs.w	r9, r9, #1
 800c112:	d505      	bpl.n	800c120 <_fwalk_reent+0x24>
 800c114:	6824      	ldr	r4, [r4, #0]
 800c116:	2c00      	cmp	r4, #0
 800c118:	d1f7      	bne.n	800c10a <_fwalk_reent+0xe>
 800c11a:	4638      	mov	r0, r7
 800c11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c120:	89ab      	ldrh	r3, [r5, #12]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d907      	bls.n	800c136 <_fwalk_reent+0x3a>
 800c126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c12a:	3301      	adds	r3, #1
 800c12c:	d003      	beq.n	800c136 <_fwalk_reent+0x3a>
 800c12e:	4629      	mov	r1, r5
 800c130:	4630      	mov	r0, r6
 800c132:	47c0      	blx	r8
 800c134:	4307      	orrs	r7, r0
 800c136:	3568      	adds	r5, #104	; 0x68
 800c138:	e7e9      	b.n	800c10e <_fwalk_reent+0x12>

0800c13a <__retarget_lock_init_recursive>:
 800c13a:	4770      	bx	lr

0800c13c <__retarget_lock_acquire_recursive>:
 800c13c:	4770      	bx	lr

0800c13e <__retarget_lock_release_recursive>:
 800c13e:	4770      	bx	lr

0800c140 <__swhatbuf_r>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	460e      	mov	r6, r1
 800c144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c148:	2900      	cmp	r1, #0
 800c14a:	b096      	sub	sp, #88	; 0x58
 800c14c:	4614      	mov	r4, r2
 800c14e:	461d      	mov	r5, r3
 800c150:	da08      	bge.n	800c164 <__swhatbuf_r+0x24>
 800c152:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	061a      	lsls	r2, r3, #24
 800c15c:	d410      	bmi.n	800c180 <__swhatbuf_r+0x40>
 800c15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c162:	e00e      	b.n	800c182 <__swhatbuf_r+0x42>
 800c164:	466a      	mov	r2, sp
 800c166:	f000 f951 	bl	800c40c <_fstat_r>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	dbf1      	blt.n	800c152 <__swhatbuf_r+0x12>
 800c16e:	9a01      	ldr	r2, [sp, #4]
 800c170:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c174:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c178:	425a      	negs	r2, r3
 800c17a:	415a      	adcs	r2, r3
 800c17c:	602a      	str	r2, [r5, #0]
 800c17e:	e7ee      	b.n	800c15e <__swhatbuf_r+0x1e>
 800c180:	2340      	movs	r3, #64	; 0x40
 800c182:	2000      	movs	r0, #0
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	b016      	add	sp, #88	; 0x58
 800c188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c18c <__smakebuf_r>:
 800c18c:	898b      	ldrh	r3, [r1, #12]
 800c18e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c190:	079d      	lsls	r5, r3, #30
 800c192:	4606      	mov	r6, r0
 800c194:	460c      	mov	r4, r1
 800c196:	d507      	bpl.n	800c1a8 <__smakebuf_r+0x1c>
 800c198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	6123      	str	r3, [r4, #16]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	6163      	str	r3, [r4, #20]
 800c1a4:	b002      	add	sp, #8
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}
 800c1a8:	ab01      	add	r3, sp, #4
 800c1aa:	466a      	mov	r2, sp
 800c1ac:	f7ff ffc8 	bl	800c140 <__swhatbuf_r>
 800c1b0:	9900      	ldr	r1, [sp, #0]
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7ff f873 	bl	800b2a0 <_malloc_r>
 800c1ba:	b948      	cbnz	r0, 800c1d0 <__smakebuf_r+0x44>
 800c1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c0:	059a      	lsls	r2, r3, #22
 800c1c2:	d4ef      	bmi.n	800c1a4 <__smakebuf_r+0x18>
 800c1c4:	f023 0303 	bic.w	r3, r3, #3
 800c1c8:	f043 0302 	orr.w	r3, r3, #2
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	e7e3      	b.n	800c198 <__smakebuf_r+0xc>
 800c1d0:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <__smakebuf_r+0x7c>)
 800c1d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	6020      	str	r0, [r4, #0]
 800c1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	6163      	str	r3, [r4, #20]
 800c1e2:	9b01      	ldr	r3, [sp, #4]
 800c1e4:	6120      	str	r0, [r4, #16]
 800c1e6:	b15b      	cbz	r3, 800c200 <__smakebuf_r+0x74>
 800c1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f000 f91f 	bl	800c430 <_isatty_r>
 800c1f2:	b128      	cbz	r0, 800c200 <__smakebuf_r+0x74>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	f043 0301 	orr.w	r3, r3, #1
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	89a0      	ldrh	r0, [r4, #12]
 800c202:	4305      	orrs	r5, r0
 800c204:	81a5      	strh	r5, [r4, #12]
 800c206:	e7cd      	b.n	800c1a4 <__smakebuf_r+0x18>
 800c208:	0800bf99 	.word	0x0800bf99

0800c20c <memmove>:
 800c20c:	4288      	cmp	r0, r1
 800c20e:	b510      	push	{r4, lr}
 800c210:	eb01 0402 	add.w	r4, r1, r2
 800c214:	d902      	bls.n	800c21c <memmove+0x10>
 800c216:	4284      	cmp	r4, r0
 800c218:	4623      	mov	r3, r4
 800c21a:	d807      	bhi.n	800c22c <memmove+0x20>
 800c21c:	1e43      	subs	r3, r0, #1
 800c21e:	42a1      	cmp	r1, r4
 800c220:	d008      	beq.n	800c234 <memmove+0x28>
 800c222:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c22a:	e7f8      	b.n	800c21e <memmove+0x12>
 800c22c:	4402      	add	r2, r0
 800c22e:	4601      	mov	r1, r0
 800c230:	428a      	cmp	r2, r1
 800c232:	d100      	bne.n	800c236 <memmove+0x2a>
 800c234:	bd10      	pop	{r4, pc}
 800c236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c23e:	e7f7      	b.n	800c230 <memmove+0x24>

0800c240 <__malloc_lock>:
 800c240:	4801      	ldr	r0, [pc, #4]	; (800c248 <__malloc_lock+0x8>)
 800c242:	f7ff bf7b 	b.w	800c13c <__retarget_lock_acquire_recursive>
 800c246:	bf00      	nop
 800c248:	2403cea4 	.word	0x2403cea4

0800c24c <__malloc_unlock>:
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__malloc_unlock+0x8>)
 800c24e:	f7ff bf76 	b.w	800c13e <__retarget_lock_release_recursive>
 800c252:	bf00      	nop
 800c254:	2403cea4 	.word	0x2403cea4

0800c258 <_realloc_r>:
 800c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25c:	4680      	mov	r8, r0
 800c25e:	4614      	mov	r4, r2
 800c260:	460e      	mov	r6, r1
 800c262:	b921      	cbnz	r1, 800c26e <_realloc_r+0x16>
 800c264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c268:	4611      	mov	r1, r2
 800c26a:	f7ff b819 	b.w	800b2a0 <_malloc_r>
 800c26e:	b92a      	cbnz	r2, 800c27c <_realloc_r+0x24>
 800c270:	f7fe ffaa 	bl	800b1c8 <_free_r>
 800c274:	4625      	mov	r5, r4
 800c276:	4628      	mov	r0, r5
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	f000 f8fa 	bl	800c474 <_malloc_usable_size_r>
 800c280:	4284      	cmp	r4, r0
 800c282:	4607      	mov	r7, r0
 800c284:	d802      	bhi.n	800c28c <_realloc_r+0x34>
 800c286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c28a:	d812      	bhi.n	800c2b2 <_realloc_r+0x5a>
 800c28c:	4621      	mov	r1, r4
 800c28e:	4640      	mov	r0, r8
 800c290:	f7ff f806 	bl	800b2a0 <_malloc_r>
 800c294:	4605      	mov	r5, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	d0ed      	beq.n	800c276 <_realloc_r+0x1e>
 800c29a:	42bc      	cmp	r4, r7
 800c29c:	4622      	mov	r2, r4
 800c29e:	4631      	mov	r1, r6
 800c2a0:	bf28      	it	cs
 800c2a2:	463a      	movcs	r2, r7
 800c2a4:	f7fe fe3a 	bl	800af1c <memcpy>
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	f7fe ff8c 	bl	800b1c8 <_free_r>
 800c2b0:	e7e1      	b.n	800c276 <_realloc_r+0x1e>
 800c2b2:	4635      	mov	r5, r6
 800c2b4:	e7df      	b.n	800c276 <_realloc_r+0x1e>

0800c2b6 <_raise_r>:
 800c2b6:	291f      	cmp	r1, #31
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	460d      	mov	r5, r1
 800c2be:	d904      	bls.n	800c2ca <_raise_r+0x14>
 800c2c0:	2316      	movs	r3, #22
 800c2c2:	6003      	str	r3, [r0, #0]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2c8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2cc:	b112      	cbz	r2, 800c2d4 <_raise_r+0x1e>
 800c2ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2d2:	b94b      	cbnz	r3, 800c2e8 <_raise_r+0x32>
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 f831 	bl	800c33c <_getpid_r>
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4601      	mov	r1, r0
 800c2de:	4620      	mov	r0, r4
 800c2e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e4:	f000 b818 	b.w	800c318 <_kill_r>
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d00a      	beq.n	800c302 <_raise_r+0x4c>
 800c2ec:	1c59      	adds	r1, r3, #1
 800c2ee:	d103      	bne.n	800c2f8 <_raise_r+0x42>
 800c2f0:	2316      	movs	r3, #22
 800c2f2:	6003      	str	r3, [r0, #0]
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	e7e7      	b.n	800c2c8 <_raise_r+0x12>
 800c2f8:	2400      	movs	r4, #0
 800c2fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2fe:	4628      	mov	r0, r5
 800c300:	4798      	blx	r3
 800c302:	2000      	movs	r0, #0
 800c304:	e7e0      	b.n	800c2c8 <_raise_r+0x12>
	...

0800c308 <raise>:
 800c308:	4b02      	ldr	r3, [pc, #8]	; (800c314 <raise+0xc>)
 800c30a:	4601      	mov	r1, r0
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	f7ff bfd2 	b.w	800c2b6 <_raise_r>
 800c312:	bf00      	nop
 800c314:	24000174 	.word	0x24000174

0800c318 <_kill_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d07      	ldr	r5, [pc, #28]	; (800c338 <_kill_r+0x20>)
 800c31c:	2300      	movs	r3, #0
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	4611      	mov	r1, r2
 800c324:	602b      	str	r3, [r5, #0]
 800c326:	f7f5 fb85 	bl	8001a34 <_kill>
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	d102      	bne.n	800c334 <_kill_r+0x1c>
 800c32e:	682b      	ldr	r3, [r5, #0]
 800c330:	b103      	cbz	r3, 800c334 <_kill_r+0x1c>
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	bd38      	pop	{r3, r4, r5, pc}
 800c336:	bf00      	nop
 800c338:	2403cea8 	.word	0x2403cea8

0800c33c <_getpid_r>:
 800c33c:	f7f5 bb72 	b.w	8001a24 <_getpid>

0800c340 <__sread>:
 800c340:	b510      	push	{r4, lr}
 800c342:	460c      	mov	r4, r1
 800c344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c348:	f000 f89c 	bl	800c484 <_read_r>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	bfab      	itete	ge
 800c350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c352:	89a3      	ldrhlt	r3, [r4, #12]
 800c354:	181b      	addge	r3, r3, r0
 800c356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c35a:	bfac      	ite	ge
 800c35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c35e:	81a3      	strhlt	r3, [r4, #12]
 800c360:	bd10      	pop	{r4, pc}

0800c362 <__swrite>:
 800c362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c366:	461f      	mov	r7, r3
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	05db      	lsls	r3, r3, #23
 800c36c:	4605      	mov	r5, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	4616      	mov	r6, r2
 800c372:	d505      	bpl.n	800c380 <__swrite+0x1e>
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	2302      	movs	r3, #2
 800c37a:	2200      	movs	r2, #0
 800c37c:	f000 f868 	bl	800c450 <_lseek_r>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	4632      	mov	r2, r6
 800c38e:	463b      	mov	r3, r7
 800c390:	4628      	mov	r0, r5
 800c392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c396:	f000 b817 	b.w	800c3c8 <_write_r>

0800c39a <__sseek>:
 800c39a:	b510      	push	{r4, lr}
 800c39c:	460c      	mov	r4, r1
 800c39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a2:	f000 f855 	bl	800c450 <_lseek_r>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	bf15      	itete	ne
 800c3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3b6:	81a3      	strheq	r3, [r4, #12]
 800c3b8:	bf18      	it	ne
 800c3ba:	81a3      	strhne	r3, [r4, #12]
 800c3bc:	bd10      	pop	{r4, pc}

0800c3be <__sclose>:
 800c3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c2:	f000 b813 	b.w	800c3ec <_close_r>
	...

0800c3c8 <_write_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d07      	ldr	r5, [pc, #28]	; (800c3e8 <_write_r+0x20>)
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	4608      	mov	r0, r1
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f5 fb63 	bl	8001aa2 <_write>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_write_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_write_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	2403cea8 	.word	0x2403cea8

0800c3ec <_close_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4d06      	ldr	r5, [pc, #24]	; (800c408 <_close_r+0x1c>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	602b      	str	r3, [r5, #0]
 800c3f8:	f7f5 fb6f 	bl	8001ada <_close>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_close_r+0x1a>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_close_r+0x1a>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	2403cea8 	.word	0x2403cea8

0800c40c <_fstat_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	; (800c42c <_fstat_r+0x20>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f5 fb6a 	bl	8001af2 <_fstat>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_fstat_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_fstat_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	2403cea8 	.word	0x2403cea8

0800c430 <_isatty_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d06      	ldr	r5, [pc, #24]	; (800c44c <_isatty_r+0x1c>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f5 fb69 	bl	8001b12 <_isatty>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_isatty_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_isatty_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	2403cea8 	.word	0x2403cea8

0800c450 <_lseek_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d07      	ldr	r5, [pc, #28]	; (800c470 <_lseek_r+0x20>)
 800c454:	4604      	mov	r4, r0
 800c456:	4608      	mov	r0, r1
 800c458:	4611      	mov	r1, r2
 800c45a:	2200      	movs	r2, #0
 800c45c:	602a      	str	r2, [r5, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	f7f5 fb62 	bl	8001b28 <_lseek>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_lseek_r+0x1e>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_lseek_r+0x1e>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	2403cea8 	.word	0x2403cea8

0800c474 <_malloc_usable_size_r>:
 800c474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c478:	1f18      	subs	r0, r3, #4
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bfbc      	itt	lt
 800c47e:	580b      	ldrlt	r3, [r1, r0]
 800c480:	18c0      	addlt	r0, r0, r3
 800c482:	4770      	bx	lr

0800c484 <_read_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	; (800c4a4 <_read_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f5 fae8 	bl	8001a68 <_read>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_read_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_read_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	2403cea8 	.word	0x2403cea8

0800c4a8 <_init>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr

0800c4b4 <_fini>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	bf00      	nop
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr
