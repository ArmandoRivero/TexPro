
contact_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800bddc  0800bddc  0001bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  24000000  0800c088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0002462c  24000184  0800c20c  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240247b0  0800c20c  000247b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cadd  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b9f  00000000  00000000  0003cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016a8  00000000  00000000  00040830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001500  00000000  00000000  00041ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036cfa  00000000  00000000  000433d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cebe  00000000  00000000  0007a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e7b1  00000000  00000000  00096f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e5741  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000069b0  00000000  00000000  001e5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000184 	.word	0x24000184
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bdc4 	.word	0x0800bdc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000188 	.word	0x24000188
 800030c:	0800bdc4 	.word	0x0800bdc4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	f5ad 3dd7 	sub.w	sp, sp, #110080	; 0x1ae00
 80003d6:	b0da      	sub	sp, #360	; 0x168
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  expDuration_10us = 6*(int)(exposureVal/60);
 80003da:	4bbf      	ldr	r3, [pc, #764]	; (80006d8 <main+0x308>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4abf      	ldr	r2, [pc, #764]	; (80006dc <main+0x30c>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	441a      	add	r2, r3
 80003e6:	1152      	asrs	r2, r2, #5
 80003e8:	17db      	asrs	r3, r3, #31
 80003ea:	1ad2      	subs	r2, r2, r3
 80003ec:	4613      	mov	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4413      	add	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	461a      	mov	r2, r3
 80003f6:	4bba      	ldr	r3, [pc, #744]	; (80006e0 <main+0x310>)
 80003f8:	601a      	str	r2, [r3, #0]

  unsigned int exposure_time;

  // AD9826 instructions - Serial communication (SPI)
  const unsigned int config_reg =  0b0000000011101000;
 80003fa:	23e8      	movs	r3, #232	; 0xe8
 80003fc:	4ab9      	ldr	r2, [pc, #740]	; (80006e4 <main+0x314>)
 80003fe:	443a      	add	r2, r7
 8000400:	6013      	str	r3, [r2, #0]
  //const unsigned int MUX_config_reg = 0b000100001110000;
  const unsigned int MUX_config_reg = 0b0001000011110000;
 8000402:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000406:	4ab8      	ldr	r2, [pc, #736]	; (80006e8 <main+0x318>)
 8000408:	443a      	add	r2, r7
 800040a:	6013      	str	r3, [r2, #0]
  unsigned int red_PGA_reg, green_PGA_reg, blue_PGA_reg, red_offset_reg, green_offset_reg, blue_offset_reg;
  unsigned int offset_red, offset_green, offset_blue;
  unsigned char gain_red, gain_green, gain_blue;

  uint8_t singlePx_value[TOTAL_PIXELS*2]; //*2 since the USB 8 bit at a time
  unsigned int dataToSend = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	4ab7      	ldr	r2, [pc, #732]	; (80006ec <main+0x31c>)
 8000410:	443a      	add	r2, r7
 8000412:	6013      	str	r3, [r2, #0]
  int idxUSB,idx;
  /* Data settings */
  /***********************************************************************************************************/

  encoder_resolution = 0.1;   // in [um]
 8000414:	4bb6      	ldr	r3, [pc, #728]	; (80006f0 <main+0x320>)
 8000416:	4ab7      	ldr	r2, [pc, #732]	; (80006f4 <main+0x324>)
 8000418:	601a      	str	r2, [r3, #0]
  encoder_distance = 0.5; // in [um] -> (0.5 [um] = 5 tick)
 800041a:	4bb7      	ldr	r3, [pc, #732]	; (80006f8 <main+0x328>)
 800041c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000420:	601a      	str	r2, [r3, #0]

  // Timing - Integration time of the CIS
  // (1) Resolution of 10 [us] [it depends on the timer frequency (1/timer_freq)]
  // (2) Maximum error of 50 [us] [it depends on the time difference respect to the rising edge of the CDSCLK2 (CP) signal]
  exposure_time = 1000;   // in [us]
 8000422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000426:	4ab5      	ldr	r2, [pc, #724]	; (80006fc <main+0x32c>)
 8000428:	443a      	add	r2, r7
 800042a:	6013      	str	r3, [r2, #0]

  // Timing - LED duration
  // (1) Resolution of 10 [us] [it depends on the timer frequency (1/timer_freq)]
  LEDR_time = 0;  // in [us]
 800042c:	4bb4      	ldr	r3, [pc, #720]	; (8000700 <main+0x330>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  LEDG_time = 0;  // in [us]
 8000432:	4bb4      	ldr	r3, [pc, #720]	; (8000704 <main+0x334>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
  LEDB_time = 0;  // in [us]
 8000438:	4bb3      	ldr	r3, [pc, #716]	; (8000708 <main+0x338>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]

  // Input gain - From 0 (gain = 1) to 63 (gain = 6)
  gain_red = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	4ab2      	ldr	r2, [pc, #712]	; (800070c <main+0x33c>)
 8000442:	443a      	add	r2, r7
 8000444:	7013      	strb	r3, [r2, #0]
  gain_green = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	4ab1      	ldr	r2, [pc, #708]	; (8000710 <main+0x340>)
 800044a:	443a      	add	r2, r7
 800044c:	7013      	strb	r3, [r2, #0]
  gain_blue = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	4ab0      	ldr	r2, [pc, #704]	; (8000714 <main+0x344>)
 8000452:	443a      	add	r2, r7
 8000454:	7013      	strb	r3, [r2, #0]

  // Input offset - From 0 (0 [mV]) to 255 (+300 [mV]) or from 256 (0 [mV]) to 511 (-300 [mV])
  offset_red = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	4aaf      	ldr	r2, [pc, #700]	; (8000718 <main+0x348>)
 800045a:	443a      	add	r2, r7
 800045c:	6013      	str	r3, [r2, #0]
  offset_green = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	4aae      	ldr	r2, [pc, #696]	; (800071c <main+0x34c>)
 8000462:	443a      	add	r2, r7
 8000464:	6013      	str	r3, [r2, #0]
  offset_blue = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	4aad      	ldr	r2, [pc, #692]	; (8000720 <main+0x350>)
 800046a:	443a      	add	r2, r7
 800046c:	6013      	str	r3, [r2, #0]

  /***********************************************************************************************************/

  // ADC gain
  red_PGA_reg = 0b0010000000000000 | gain_red;
 800046e:	4ba7      	ldr	r3, [pc, #668]	; (800070c <main+0x33c>)
 8000470:	443b      	add	r3, r7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	4aaa      	ldr	r2, [pc, #680]	; (8000724 <main+0x354>)
 800047a:	443a      	add	r2, r7
 800047c:	6013      	str	r3, [r2, #0]
  green_PGA_reg = 0b0011000000000000 | gain_green;
 800047e:	4ba4      	ldr	r3, [pc, #656]	; (8000710 <main+0x340>)
 8000480:	443b      	add	r3, r7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000488:	4aa7      	ldr	r2, [pc, #668]	; (8000728 <main+0x358>)
 800048a:	443a      	add	r2, r7
 800048c:	6013      	str	r3, [r2, #0]
  blue_PGA_reg = 0b0100000000000000 | gain_blue;
 800048e:	4ba1      	ldr	r3, [pc, #644]	; (8000714 <main+0x344>)
 8000490:	443b      	add	r3, r7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000498:	4aa4      	ldr	r2, [pc, #656]	; (800072c <main+0x35c>)
 800049a:	443a      	add	r2, r7
 800049c:	6013      	str	r3, [r2, #0]

  // ADC offset
  red_offset_reg = 0b0101000000000000 | offset_red;
 800049e:	4b9e      	ldr	r3, [pc, #632]	; (8000718 <main+0x348>)
 80004a0:	443b      	add	r3, r7
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80004a8:	4aa1      	ldr	r2, [pc, #644]	; (8000730 <main+0x360>)
 80004aa:	443a      	add	r2, r7
 80004ac:	6013      	str	r3, [r2, #0]
  green_offset_reg = 0b0110000000000000 | offset_green;
 80004ae:	4b9b      	ldr	r3, [pc, #620]	; (800071c <main+0x34c>)
 80004b0:	443b      	add	r3, r7
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80004b8:	4a9e      	ldr	r2, [pc, #632]	; (8000734 <main+0x364>)
 80004ba:	443a      	add	r2, r7
 80004bc:	6013      	str	r3, [r2, #0]
  blue_offset_reg = 0b0111000000000000 | offset_blue;
 80004be:	4b98      	ldr	r3, [pc, #608]	; (8000720 <main+0x350>)
 80004c0:	443b      	add	r3, r7
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004c8:	4a9b      	ldr	r2, [pc, #620]	; (8000738 <main+0x368>)
 80004ca:	443a      	add	r2, r7
 80004cc:	6013      	str	r3, [r2, #0]

  // Number of multiplexing phases
  exposureTime_phase = (unsigned int)(((exposure_time / 1000000.0) * timer_freq) / 6.0);
 80004ce:	4b8b      	ldr	r3, [pc, #556]	; (80006fc <main+0x32c>)
 80004d0:	443b      	add	r3, r7
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	ee07 3a90 	vmov	s15, r3
 80004d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80004dc:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 80006c8 <main+0x2f8>
 80004e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004e4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80006d0 <main+0x300>
 80004e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80004ec:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80004f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80004f8:	ee17 2a90 	vmov	r2, s15
 80004fc:	4b8f      	ldr	r3, [pc, #572]	; (800073c <main+0x36c>)
 80004fe:	601a      	str	r2, [r3, #0]
  LEDR_phase = (unsigned int)(((LEDR_time / 1000000.0) * timer_freq) / 6.0);
 8000500:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <main+0x330>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	ee07 3a90 	vmov	s15, r3
 8000508:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800050c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80006c8 <main+0x2f8>
 8000510:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000514:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80006d0 <main+0x300>
 8000518:	ee27 6b06 	vmul.f64	d6, d7, d6
 800051c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000520:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000524:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000528:	ee17 2a90 	vmov	r2, s15
 800052c:	4b84      	ldr	r3, [pc, #528]	; (8000740 <main+0x370>)
 800052e:	601a      	str	r2, [r3, #0]
  LEDG_phase = (unsigned int)(((LEDG_time / 1000000.0) * timer_freq) / 6.0);
 8000530:	4b74      	ldr	r3, [pc, #464]	; (8000704 <main+0x334>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	ee07 3a90 	vmov	s15, r3
 8000538:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800053c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 80006c8 <main+0x2f8>
 8000540:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000544:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80006d0 <main+0x300>
 8000548:	ee27 6b06 	vmul.f64	d6, d7, d6
 800054c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000550:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000554:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000558:	ee17 2a90 	vmov	r2, s15
 800055c:	4b79      	ldr	r3, [pc, #484]	; (8000744 <main+0x374>)
 800055e:	601a      	str	r2, [r3, #0]
  LEDB_phase = (unsigned int)(((LEDB_time / 1000000.0) * timer_freq) / 6.0);
 8000560:	4b69      	ldr	r3, [pc, #420]	; (8000708 <main+0x338>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800056c:	ed9f 5b56 	vldr	d5, [pc, #344]	; 80006c8 <main+0x2f8>
 8000570:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000574:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80006d0 <main+0x300>
 8000578:	ee27 6b06 	vmul.f64	d6, d7, d6
 800057c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000580:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000584:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000588:	ee17 2a90 	vmov	r2, s15
 800058c:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <main+0x378>)
 800058e:	601a      	str	r2, [r3, #0]

  // Number of residual ticks
  LEDR_residual = (unsigned int)((LEDR_time / 1000000.0) * timer_freq) % 6 + 1;
 8000590:	4b5b      	ldr	r3, [pc, #364]	; (8000700 <main+0x330>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800059c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 80006c8 <main+0x2f8>
 80005a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005a4:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80006d0 <main+0x300>
 80005a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005b0:	ee17 1a90 	vmov	r1, s15
 80005b4:	4b65      	ldr	r3, [pc, #404]	; (800074c <main+0x37c>)
 80005b6:	fba3 2301 	umull	r2, r3, r3, r1
 80005ba:	089a      	lsrs	r2, r3, #2
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	1aca      	subs	r2, r1, r3
 80005c6:	1c53      	adds	r3, r2, #1
 80005c8:	4a61      	ldr	r2, [pc, #388]	; (8000750 <main+0x380>)
 80005ca:	6013      	str	r3, [r2, #0]
  LEDG_residual = (unsigned int)((LEDG_time / 1000000.0) * timer_freq) % 6 + 1;
 80005cc:	4b4d      	ldr	r3, [pc, #308]	; (8000704 <main+0x334>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80005d8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 80006c8 <main+0x2f8>
 80005dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005e0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80006d0 <main+0x300>
 80005e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005ec:	ee17 1a90 	vmov	r1, s15
 80005f0:	4b56      	ldr	r3, [pc, #344]	; (800074c <main+0x37c>)
 80005f2:	fba3 2301 	umull	r2, r3, r3, r1
 80005f6:	089a      	lsrs	r2, r3, #2
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1aca      	subs	r2, r1, r3
 8000602:	1c53      	adds	r3, r2, #1
 8000604:	4a53      	ldr	r2, [pc, #332]	; (8000754 <main+0x384>)
 8000606:	6013      	str	r3, [r2, #0]
  LEDB_residual = (unsigned int)((LEDB_time / 1000000.0) * timer_freq) % 6 + 1;
 8000608:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <main+0x338>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000614:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80006c8 <main+0x2f8>
 8000618:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800061c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80006d0 <main+0x300>
 8000620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000624:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000628:	ee17 1a90 	vmov	r1, s15
 800062c:	4b47      	ldr	r3, [pc, #284]	; (800074c <main+0x37c>)
 800062e:	fba3 2301 	umull	r2, r3, r3, r1
 8000632:	089a      	lsrs	r2, r3, #2
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	1aca      	subs	r2, r1, r3
 800063e:	1c53      	adds	r3, r2, #1
 8000640:	4a45      	ldr	r2, [pc, #276]	; (8000758 <main+0x388>)
 8000642:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f001 f9c2 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 fa52 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fb66 	bl	8000d1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000650:	f000 fabe 	bl	8000bd0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000654:	f000 fb14 	bl	8000c80 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000658:	f009 fd38 	bl	800a0cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Setting transmission to AD9826 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	483e      	ldr	r0, [pc, #248]	; (800075c <main+0x38c>)
 8000664:	f001 fd20 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,(uint8_t *)&config_reg, 1, HAL_MAX_DELAY);
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <main+0x314>)
 800066a:	4439      	add	r1, r7
 800066c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000670:	2201      	movs	r2, #1
 8000672:	483b      	ldr	r0, [pc, #236]	; (8000760 <main+0x390>)
 8000674:	f005 f8dc 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4837      	ldr	r0, [pc, #220]	; (800075c <main+0x38c>)
 8000680:	f001 fd12 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068a:	4834      	ldr	r0, [pc, #208]	; (800075c <main+0x38c>)
 800068c:	f001 fd0c 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&MUX_config_reg, 1, HAL_MAX_DELAY);
 8000690:	4915      	ldr	r1, [pc, #84]	; (80006e8 <main+0x318>)
 8000692:	4439      	add	r1, r7
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000698:	2201      	movs	r2, #1
 800069a:	4831      	ldr	r0, [pc, #196]	; (8000760 <main+0x390>)
 800069c:	f005 f8c8 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	482d      	ldr	r0, [pc, #180]	; (800075c <main+0x38c>)
 80006a8:	f001 fcfe 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <main+0x38c>)
 80006b4:	f001 fcf8 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&red_PGA_reg, 1, HAL_MAX_DELAY);
 80006b8:	491a      	ldr	r1, [pc, #104]	; (8000724 <main+0x354>)
 80006ba:	4439      	add	r1, r7
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c0:	2201      	movs	r2, #1
 80006c2:	e04f      	b.n	8000764 <main+0x394>
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	412e8480 	.word	0x412e8480
 80006d0:	00000000 	.word	0x00000000
 80006d4:	40f86a00 	.word	0x40f86a00
 80006d8:	2400001c 	.word	0x2400001c
 80006dc:	88888889 	.word	0x88888889
 80006e0:	24018960 	.word	0x24018960
 80006e4:	0001af40 	.word	0x0001af40
 80006e8:	0001af3c 	.word	0x0001af3c
 80006ec:	0001af64 	.word	0x0001af64
 80006f0:	2401894c 	.word	0x2401894c
 80006f4:	3dcccccd 	.word	0x3dcccccd
 80006f8:	24018950 	.word	0x24018950
 80006fc:	0001af58 	.word	0x0001af58
 8000700:	24018920 	.word	0x24018920
 8000704:	24018924 	.word	0x24018924
 8000708:	24018928 	.word	0x24018928
 800070c:	0001af57 	.word	0x0001af57
 8000710:	0001af56 	.word	0x0001af56
 8000714:	0001af55 	.word	0x0001af55
 8000718:	0001af50 	.word	0x0001af50
 800071c:	0001af4c 	.word	0x0001af4c
 8000720:	0001af48 	.word	0x0001af48
 8000724:	0001af38 	.word	0x0001af38
 8000728:	0001af34 	.word	0x0001af34
 800072c:	0001af30 	.word	0x0001af30
 8000730:	0001af2c 	.word	0x0001af2c
 8000734:	0001af28 	.word	0x0001af28
 8000738:	0001af24 	.word	0x0001af24
 800073c:	2401892c 	.word	0x2401892c
 8000740:	24018930 	.word	0x24018930
 8000744:	24018934 	.word	0x24018934
 8000748:	24018938 	.word	0x24018938
 800074c:	aaaaaaab 	.word	0xaaaaaaab
 8000750:	2401893c 	.word	0x2401893c
 8000754:	24018940 	.word	0x24018940
 8000758:	24018944 	.word	0x24018944
 800075c:	58020c00 	.word	0x58020c00
 8000760:	240001a0 	.word	0x240001a0
 8000764:	4876      	ldr	r0, [pc, #472]	; (8000940 <main+0x570>)
 8000766:	f005 f863 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <main+0x574>)
 8000772:	f001 fc99 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	4871      	ldr	r0, [pc, #452]	; (8000944 <main+0x574>)
 800077e:	f001 fc93 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&green_PGA_reg, 1, HAL_MAX_DELAY);
 8000782:	4971      	ldr	r1, [pc, #452]	; (8000948 <main+0x578>)
 8000784:	4439      	add	r1, r7
 8000786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800078a:	2201      	movs	r2, #1
 800078c:	486c      	ldr	r0, [pc, #432]	; (8000940 <main+0x570>)
 800078e:	f005 f84f 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	486a      	ldr	r0, [pc, #424]	; (8000944 <main+0x574>)
 800079a:	f001 fc85 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	4867      	ldr	r0, [pc, #412]	; (8000944 <main+0x574>)
 80007a6:	f001 fc7f 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&blue_PGA_reg, 1, HAL_MAX_DELAY);
 80007aa:	4968      	ldr	r1, [pc, #416]	; (800094c <main+0x57c>)
 80007ac:	4439      	add	r1, r7
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b2:	2201      	movs	r2, #1
 80007b4:	4862      	ldr	r0, [pc, #392]	; (8000940 <main+0x570>)
 80007b6:	f005 f83b 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4860      	ldr	r0, [pc, #384]	; (8000944 <main+0x574>)
 80007c2:	f001 fc71 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	485d      	ldr	r0, [pc, #372]	; (8000944 <main+0x574>)
 80007ce:	f001 fc6b 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&red_offset_reg, 1, HAL_MAX_DELAY);
 80007d2:	495f      	ldr	r1, [pc, #380]	; (8000950 <main+0x580>)
 80007d4:	4439      	add	r1, r7
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007da:	2201      	movs	r2, #1
 80007dc:	4858      	ldr	r0, [pc, #352]	; (8000940 <main+0x570>)
 80007de:	f005 f827 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	4856      	ldr	r0, [pc, #344]	; (8000944 <main+0x574>)
 80007ea:	f001 fc5d 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4853      	ldr	r0, [pc, #332]	; (8000944 <main+0x574>)
 80007f6:	f001 fc57 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&green_offset_reg, 1, HAL_MAX_DELAY);
 80007fa:	4956      	ldr	r1, [pc, #344]	; (8000954 <main+0x584>)
 80007fc:	4439      	add	r1, r7
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000802:	2201      	movs	r2, #1
 8000804:	484e      	ldr	r0, [pc, #312]	; (8000940 <main+0x570>)
 8000806:	f005 f813 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	484c      	ldr	r0, [pc, #304]	; (8000944 <main+0x574>)
 8000812:	f001 fc49 	bl	80020a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081c:	4849      	ldr	r0, [pc, #292]	; (8000944 <main+0x574>)
 800081e:	f001 fc43 	bl	80020a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&blue_offset_reg, 1, HAL_MAX_DELAY);
 8000822:	494d      	ldr	r1, [pc, #308]	; (8000958 <main+0x588>)
 8000824:	4439      	add	r1, r7
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082a:	2201      	movs	r2, #1
 800082c:	4844      	ldr	r0, [pc, #272]	; (8000940 <main+0x570>)
 800082e:	f004 ffff 	bl	8005830 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000838:	4842      	ldr	r0, [pc, #264]	; (8000944 <main+0x574>)
 800083a:	f001 fc35 	bl	80020a8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int msgVCP_len = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	4a46      	ldr	r2, [pc, #280]	; (800095c <main+0x58c>)
 8000842:	443a      	add	r2, r7
 8000844:	6013      	str	r3, [r2, #0]
  char msgVCP[VCP_BUFF_SIZE];
  while (1)
  {
    // tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
        token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <main+0x590>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	4845      	ldr	r0, [pc, #276]	; (8000964 <main+0x594>)
 800084e:	f00a f9d7 	bl	800ac00 <strtok>
 8000852:	4603      	mov	r3, r0
 8000854:	4a44      	ldr	r2, [pc, #272]	; (8000968 <main+0x598>)
 8000856:	6013      	str	r3, [r2, #0]
        if (token != NULL)
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <main+0x598>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d057      	beq.n	8000910 <main+0x540>
        {
          if(strcmp(token,strCMD_1) == 0)
 8000860:	4b41      	ldr	r3, [pc, #260]	; (8000968 <main+0x598>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4941      	ldr	r1, [pc, #260]	; (800096c <main+0x59c>)
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fd52 	bl	8000310 <strcmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10d      	bne.n	800088e <main+0x4be>
          {
            memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always after receiving
 8000872:	2240      	movs	r2, #64	; 0x40
 8000874:	2100      	movs	r1, #0
 8000876:	483b      	ldr	r0, [pc, #236]	; (8000964 <main+0x594>)
 8000878:	f00a f9ba 	bl	800abf0 <memset>

            enableSampleTimerFlag = 1;
 800087c:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <main+0x5a0>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <main+0x5a4>)
 8000884:	f005 fb06 	bl	8005e94 <HAL_TIM_Base_Start_IT>


            GPIOE->BSRR = GPIO_PIN_1;  // On-board Yellow LED Set to "1"
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <main+0x5a8>)
 800088a:	2202      	movs	r2, #2
 800088c:	619a      	str	r2, [r3, #24]

            // Toggle on board Yellow LED
    //        odr = GPIOE->ODR;
    //        GPIOE->BSRR = ((odr & GPIO_PIN_1) << 16U) | (~odr & GPIO_PIN_1);
          }
          if(strcmp(token,strCMD_2) == 0)
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <main+0x598>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	493a      	ldr	r1, [pc, #232]	; (800097c <main+0x5ac>)
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fd3b 	bl	8000310 <strcmp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d137      	bne.n	8000910 <main+0x540>
          {
            token = strtok(NULL,tokenSeparator);
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <main+0x590>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f00a f9aa 	bl	800ac00 <strtok>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <main+0x598>)
 80008b0:	6013      	str	r3, [r2, #0]
            if(strcmp(token,strCMD_2_1) == 0)
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <main+0x598>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4932      	ldr	r1, [pc, #200]	; (8000980 <main+0x5b0>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fd29 	bl	8000310 <strcmp>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d120      	bne.n	8000906 <main+0x536>
            {
              token = strtok(NULL,tokenSeparator);
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <main+0x590>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	2000      	movs	r0, #0
 80008cc:	f00a f998 	bl	800ac00 <strtok>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <main+0x598>)
 80008d4:	6013      	str	r3, [r2, #0]
//              msgVCP_len = sprintf(msgVCP, "exposure time is %s\n",token);
//              CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
              exposureVal = atoi(token);
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <main+0x598>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a f94c 	bl	800ab78 <atoi>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <main+0x5b4>)
 80008e4:	6013      	str	r3, [r2, #0]
              expDuration_10us = 6*(int)(exposureVal/15);
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <main+0x5b4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a27      	ldr	r2, [pc, #156]	; (8000988 <main+0x5b8>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	441a      	add	r2, r3
 80008f2:	10d2      	asrs	r2, r2, #3
 80008f4:	17db      	asrs	r3, r3, #31
 80008f6:	1ad2      	subs	r2, r2, r3
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	461a      	mov	r2, r3
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <main+0x5bc>)
 8000904:	601a      	str	r2, [r3, #0]
            }
            memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	2100      	movs	r1, #0
 800090a:	4816      	ldr	r0, [pc, #88]	; (8000964 <main+0x594>)
 800090c:	f00a f970 	bl	800abf0 <memset>
          }
        }



        if(send_data_main)
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <main+0x5c0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d096      	beq.n	8000846 <main+0x476>
        {
          GPIOE->BSRR = (uint32_t)GPIO_PIN_1 << 16U; // On-board Yellow LED Set to "0"
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x5a8>)
 800091a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800091e:	619a      	str	r2, [r3, #24]

          HAL_TIM_Base_Stop_IT(&htim2);
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <main+0x5a4>)
 8000922:	f005 fb3d 	bl	8005fa0 <HAL_TIM_Base_Stop_IT>
          dataToSend = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <main+0x5c4>)
 800092a:	443a      	add	r2, r7
 800092c:	6013      	str	r3, [r2, #0]
          idxUSB = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <main+0x5c8>)
 8000932:	443a      	add	r2, r7
 8000934:	6013      	str	r3, [r2, #0]
          idx = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <main+0x5cc>)
 800093a:	443a      	add	r2, r7
 800093c:	6013      	str	r3, [r2, #0]


          while(dataToSend == 0)
 800093e:	e0ac      	b.n	8000a9a <main+0x6ca>
 8000940:	240001a0 	.word	0x240001a0
 8000944:	58020c00 	.word	0x58020c00
 8000948:	0001af34 	.word	0x0001af34
 800094c:	0001af30 	.word	0x0001af30
 8000950:	0001af2c 	.word	0x0001af2c
 8000954:	0001af28 	.word	0x0001af28
 8000958:	0001af24 	.word	0x0001af24
 800095c:	0001af44 	.word	0x0001af44
 8000960:	24000000 	.word	0x24000000
 8000964:	24000274 	.word	0x24000274
 8000968:	24018914 	.word	0x24018914
 800096c:	24000004 	.word	0x24000004
 8000970:	24018918 	.word	0x24018918
 8000974:	24000228 	.word	0x24000228
 8000978:	58021000 	.word	0x58021000
 800097c:	24000014 	.word	0x24000014
 8000980:	24000018 	.word	0x24000018
 8000984:	2400001c 	.word	0x2400001c
 8000988:	88888889 	.word	0x88888889
 800098c:	24018960 	.word	0x24018960
 8000990:	24018949 	.word	0x24018949
 8000994:	0001af64 	.word	0x0001af64
 8000998:	0001af60 	.word	0x0001af60
 800099c:	0001af5c 	.word	0x0001af5c
          {
            //-CH1 (red)
            singlePx_value[idxUSB]   = reg_High[idx];
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <main+0x6fc>)
 80009a2:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <main+0x700>)
 80009a4:	443b      	add	r3, r7
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <main+0x704>)
 80009b0:	443b      	add	r3, r7
 80009b2:	f6a3 02c4 	subw	r2, r3, #2244	; 0x8c4
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <main+0x708>)
 80009b8:	443b      	add	r3, r7
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	460a      	mov	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
            singlePx_value[idxUSB+1] = reg_Low[idx];
 80009c2:	4a46      	ldr	r2, [pc, #280]	; (8000adc <main+0x70c>)
 80009c4:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <main+0x700>)
 80009c6:	443b      	add	r3, r7
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <main+0x708>)
 80009d0:	443b      	add	r3, r7
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	b2d1      	uxtb	r1, r2
 80009d8:	4a3e      	ldr	r2, [pc, #248]	; (8000ad4 <main+0x704>)
 80009da:	443a      	add	r2, r7
 80009dc:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 80009e0:	54d1      	strb	r1, [r2, r3]
            //-CH2 (Green)
            singlePx_value[idxUSB+2] = reg_High[idx+1];
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <main+0x700>)
 80009e4:	443b      	add	r3, r7
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a38      	ldr	r2, [pc, #224]	; (8000acc <main+0x6fc>)
 80009ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <main+0x708>)
 80009f2:	443b      	add	r3, r7
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3302      	adds	r3, #2
 80009f8:	b2d1      	uxtb	r1, r2
 80009fa:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <main+0x704>)
 80009fc:	443a      	add	r2, r7
 80009fe:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8000a02:	54d1      	strb	r1, [r2, r3]
            singlePx_value[idxUSB+3] = reg_Low[idx+1];
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <main+0x700>)
 8000a06:	443b      	add	r3, r7
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a33      	ldr	r2, [pc, #204]	; (8000adc <main+0x70c>)
 8000a0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <main+0x708>)
 8000a14:	443b      	add	r3, r7
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	b2d1      	uxtb	r1, r2
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <main+0x704>)
 8000a1e:	443a      	add	r2, r7
 8000a20:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8000a24:	54d1      	strb	r1, [r2, r3]
            //-CH3 (Blue)
            singlePx_value[idxUSB+4] = reg_High[idx+2];
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <main+0x700>)
 8000a28:	443b      	add	r3, r7
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	4a27      	ldr	r2, [pc, #156]	; (8000acc <main+0x6fc>)
 8000a30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <main+0x708>)
 8000a36:	443b      	add	r3, r7
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	b2d1      	uxtb	r1, r2
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <main+0x704>)
 8000a40:	443a      	add	r2, r7
 8000a42:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8000a46:	54d1      	strb	r1, [r2, r3]
            singlePx_value[idxUSB+5] = reg_Low[idx+2];
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <main+0x700>)
 8000a4a:	443b      	add	r3, r7
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <main+0x70c>)
 8000a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <main+0x708>)
 8000a58:	443b      	add	r3, r7
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3305      	adds	r3, #5
 8000a5e:	b2d1      	uxtb	r1, r2
 8000a60:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <main+0x704>)
 8000a62:	443a      	add	r2, r7
 8000a64:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8000a68:	54d1      	strb	r1, [r2, r3]

            idxUSB = idxUSB + 6;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <main+0x708>)
 8000a6c:	443b      	add	r3, r7
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3306      	adds	r3, #6
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <main+0x708>)
 8000a74:	443a      	add	r2, r7
 8000a76:	6013      	str	r3, [r2, #0]
            idx    = idx + 3;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <main+0x700>)
 8000a7a:	443b      	add	r3, r7
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3303      	adds	r3, #3
 8000a80:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <main+0x700>)
 8000a82:	443a      	add	r2, r7
 8000a84:	6013      	str	r3, [r2, #0]

            if(idx >= TOTAL_PIXELS)
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <main+0x700>)
 8000a88:	443b      	add	r3, r7
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 8000a90:	db03      	blt.n	8000a9a <main+0x6ca>
            {
              dataToSend = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <main+0x710>)
 8000a96:	443a      	add	r2, r7
 8000a98:	6013      	str	r3, [r2, #0]
          while(dataToSend == 0)
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <main+0x710>)
 8000a9c:	443b      	add	r3, r7
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f43f af7d 	beq.w	80009a0 <main+0x5d0>
            }

          }
          //singlePx_value[TOTAL_PIXELS - 2] = (uint8_t) "\r";
          //singlePx_value[TOTAL_PIXELS - 1] = (uint8_t) "\n";
          __NOP();
 8000aa6:	bf00      	nop
          CDC_Transmit_HS(singlePx_value, TOTAL_PIXELS * 2);
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <main+0x714>)
 8000aaa:	f503 33d7 	add.w	r3, r3, #110080	; 0x1ae00
 8000aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f009 fbdd 	bl	800a278 <CDC_Transmit_HS>
          //memset(singlePx_value,0,TOTAL_PIXELS * 2);
          //CDC_Transmit_HS((uint8_t *)"\n", 1);


          //CDC_Transmit_HS((uint8_t *) "\r\n", 1);
          HAL_TIM_Base_Start_IT(&htim2);
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <main+0x718>)
 8000ac0:	f005 f9e8 	bl	8005e94 <HAL_TIM_Base_Start_IT>
              while((CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len)) == USBD_BUSY); // Data transmission
              msgVCP_len = 0;

              HAL_TIM_Base_Start_IT(&htim2);    // Start interrupt of TIM2
           */
          send_data_main = 0;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <main+0x71c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
        token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000aca:	e6bc      	b.n	8000846 <main+0x476>
 8000acc:	2401896c 	.word	0x2401896c
 8000ad0:	0001af5c 	.word	0x0001af5c
 8000ad4:	00018f68 	.word	0x00018f68
 8000ad8:	0001af60 	.word	0x0001af60
 8000adc:	2401da6c 	.word	0x2401da6c
 8000ae0:	0001af64 	.word	0x0001af64
 8000ae4:	ffffd73c 	.word	0xffffd73c
 8000ae8:	24000228 	.word	0x24000228
 8000aec:	24018949 	.word	0x24018949

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09c      	sub	sp, #112	; 0x70
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	224c      	movs	r2, #76	; 0x4c
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00a f876 	bl	800abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2220      	movs	r2, #32
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00a f870 	bl	800abf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f002 fdd1 	bl	80036b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <SystemClock_Config+0xdc>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <SystemClock_Config+0xdc>)
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemClock_Config+0xdc>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b32:	bf00      	nop
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <SystemClock_Config+0xdc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b40:	d1f8      	bne.n	8000b34 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b42:	2321      	movs	r3, #33	; 0x21
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b50:	2302      	movs	r3, #2
 8000b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000b5c:	2344      	movs	r3, #68	; 0x44
 8000b5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b64:	2303      	movs	r3, #3
 8000b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000b74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fde4 	bl	800374c <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b8a:	f000 fc8d 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	233f      	movs	r3, #63	; 0x3f
 8000b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b9e:	2340      	movs	r3, #64	; 0x40
 8000ba0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bac:	2340      	movs	r3, #64	; 0x40
 8000bae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 f977 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bc0:	f000 fc72 	bl	80014a8 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3770      	adds	r7, #112	; 0x70
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024800 	.word	0x58024800

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <MX_SPI1_Init+0xac>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bec:	220f      	movs	r2, #15
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000bfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_SPI1_Init+0xa8>)
 8000c64:	f004 fcde 	bl	8005624 <HAL_SPI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c6e:	f000 fc1b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	240001a0 	.word	0x240001a0
 8000c7c:	40013000 	.word	0x40013000

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 343;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000ca8:	f240 1257 	movw	r2, #343	; 0x157
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000cc8:	f005 f88d 	bl	8005de6 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cd2:	f000 fbe9 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000ce4:	f005 faaa 	bl	800623c <HAL_TIM_ConfigClockSource>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cee:	f000 fbdb 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_TIM2_Init+0x98>)
 8000d00:	f005 fd00 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d0a:	f000 fbcd 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000228 	.word	0x24000228

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	4bc1      	ldr	r3, [pc, #772]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4abf      	ldr	r2, [pc, #764]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4bbd      	ldr	r3, [pc, #756]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d50:	4bb9      	ldr	r3, [pc, #740]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4ab8      	ldr	r2, [pc, #736]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4bb5      	ldr	r3, [pc, #724]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	4bb2      	ldr	r3, [pc, #712]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4ab0      	ldr	r2, [pc, #704]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4bae      	ldr	r3, [pc, #696]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8c:	4baa      	ldr	r3, [pc, #680]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4aa9      	ldr	r2, [pc, #676]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4ba6      	ldr	r3, [pc, #664]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4ba3      	ldr	r3, [pc, #652]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4aa1      	ldr	r2, [pc, #644]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b9f      	ldr	r3, [pc, #636]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b9b      	ldr	r3, [pc, #620]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a9a      	ldr	r2, [pc, #616]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b97      	ldr	r3, [pc, #604]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4b94      	ldr	r3, [pc, #592]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a92      	ldr	r2, [pc, #584]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b90      	ldr	r3, [pc, #576]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b8c      	ldr	r3, [pc, #560]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a8b      	ldr	r2, [pc, #556]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b88      	ldr	r3, [pc, #544]	; (8001038 <MX_GPIO_Init+0x31c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_GREEN_Pin|DRV_RED_Pin|DRV_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2136      	movs	r1, #54	; 0x36
 8000e26:	4885      	ldr	r0, [pc, #532]	; (800103c <MX_GPIO_Init+0x320>)
 8000e28:	f001 f93e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEST_PIN_Pin|PIN_TEST1_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000e32:	4883      	ldr	r0, [pc, #524]	; (8001040 <MX_GPIO_Init+0x324>)
 8000e34:	f001 f938 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e3e:	4881      	ldr	r0, [pc, #516]	; (8001044 <MX_GPIO_Init+0x328>)
 8000e40:	f001 f932 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	487f      	ldr	r0, [pc, #508]	; (8001048 <MX_GPIO_Init+0x32c>)
 8000e4a:	f001 f92d 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000e54:	487d      	ldr	r0, [pc, #500]	; (800104c <MX_GPIO_Init+0x330>)
 8000e56:	f001 f927 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e60:	487a      	ldr	r0, [pc, #488]	; (800104c <MX_GPIO_Init+0x330>)
 8000e62:	f001 f921 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV_GREEN_Pin DRV_RED_Pin DRV_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DRV_GREEN_Pin|DRV_RED_Pin|DRV_BLUE_Pin|LED_YELLOW_Pin;
 8000e66:	2336      	movs	r3, #54	; 0x36
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	486f      	ldr	r0, [pc, #444]	; (800103c <MX_GPIO_Init+0x320>)
 8000e7e:	f000 ff6b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE6 PE7 PE8
                           PE10 PE12 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000e82:	f249 53c9 	movw	r3, #38345	; 0x95c9
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4869      	ldr	r0, [pc, #420]	; (800103c <MX_GPIO_Init+0x320>)
 8000e98:	f000 ff5e 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin ENCODER_B_Pin ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ENCODER_B_Pin|ENCODER_Z_Pin;
 8000e9c:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4867      	ldr	r0, [pc, #412]	; (8001050 <MX_GPIO_Init+0x334>)
 8000eb2:	f000 ff51 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF8
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb6:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	485d      	ldr	r0, [pc, #372]	; (8001040 <MX_GPIO_Init+0x324>)
 8000ecc:	f000 ff44 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_PIN_Pin PIN_TEST1_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin|PIN_TEST1_Pin;
 8000ed0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4855      	ldr	r0, [pc, #340]	; (8001040 <MX_GPIO_Init+0x324>)
 8000eea:	f000 ff35 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000eee:	f641 03cd 	movw	r3, #6349	; 0x18cd
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4853      	ldr	r0, [pc, #332]	; (8001050 <MX_GPIO_Init+0x334>)
 8000f04:	f000 ff28 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	484b      	ldr	r0, [pc, #300]	; (8001050 <MX_GPIO_Init+0x334>)
 8000f24:	f000 ff18 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000f28:	f248 13d9 	movw	r3, #33241	; 0x81d9
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4845      	ldr	r0, [pc, #276]	; (8001054 <MX_GPIO_Init+0x338>)
 8000f3e:	f000 ff0b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000f42:	2306      	movs	r3, #6
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	483d      	ldr	r0, [pc, #244]	; (8001054 <MX_GPIO_Init+0x338>)
 8000f5e:	f000 fefb 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f62:	2330      	movs	r3, #48	; 0x30
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f72:	230b      	movs	r3, #11
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <MX_GPIO_Init+0x334>)
 8000f7e:	f000 feeb 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f82:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <MX_GPIO_Init+0x328>)
 8000f9c:	f000 fedc 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB15 PB4 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000fa0:	f649 7316 	movw	r3, #40726	; 0x9f16
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4823      	ldr	r0, [pc, #140]	; (8001044 <MX_GPIO_Init+0x328>)
 8000fb6:	f000 fecf 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 PG4
                           PG5 PG6 PG8 PG9
                           PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000fba:	f248 737d 	movw	r3, #34685	; 0x877d
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_GPIO_Init+0x32c>)
 8000fd0:	f000 fec2 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_TEST2_Pin */
  GPIO_InitStruct.Pin = PIN_TEST2_Pin;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PIN_TEST2_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4817      	ldr	r0, [pc, #92]	; (8001048 <MX_GPIO_Init+0x32c>)
 8000fec:	f000 feb4 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D4_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D4_Pin|D3_Pin;
 8000ff0:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_GPIO_Init+0x320>)
 8001006:	f000 fea7 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101c:	230b      	movs	r3, #11
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_GPIO_Init+0x328>)
 8001028:	f000 fe96 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800102c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	e010      	b.n	8001058 <MX_GPIO_Init+0x33c>
 8001036:	bf00      	nop
 8001038:	58024400 	.word	0x58024400
 800103c:	58021000 	.word	0x58021000
 8001040:	58021400 	.word	0x58021400
 8001044:	58020400 	.word	0x58020400
 8001048:	58021800 	.word	0x58021800
 800104c:	58020c00 	.word	0x58020c00
 8001050:	58020800 	.word	0x58020800
 8001054:	58020000 	.word	0x58020000
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001062:	2307      	movs	r3, #7
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4837      	ldr	r0, [pc, #220]	; (800114c <MX_GPIO_Init+0x430>)
 800106e:	f000 fe73 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin SP_Pin CDSCLK2_Pin ADCCLK_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin
 8001072:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4830      	ldr	r0, [pc, #192]	; (800114c <MX_GPIO_Init+0x430>)
 800108c:	f000 fe64 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001090:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <MX_GPIO_Init+0x430>)
 80010a6:	f000 fe57 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <MX_GPIO_Init+0x434>)
 80010c0:	f000 fe4a 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80010c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <MX_GPIO_Init+0x438>)
 80010dc:	f000 fe3c 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f2:	230b      	movs	r3, #11
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4814      	ldr	r0, [pc, #80]	; (8001150 <MX_GPIO_Init+0x434>)
 80010fe:	f000 fe2b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D5_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D5_Pin;
 8001102:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_GPIO_Init+0x434>)
 8001118:	f000 fe1e 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin;
 800111c:	23c0      	movs	r3, #192	; 0xc0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <MX_GPIO_Init+0x43c>)
 8001130:	f000 fe12 	bl	8001d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2017      	movs	r0, #23
 800113a:	f000 fdd8 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800113e:	2017      	movs	r0, #23
 8001140:	f000 fdef 	bl	8001d22 <HAL_NVIC_EnableIRQ>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58020c00 	.word	0x58020c00
 8001150:	58021800 	.word	0x58021800
 8001154:	58020800 	.word	0x58020800
 8001158:	58020400 	.word	0x58020400

0800115c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (pin PC8)
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800116c:	d11a      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x48>
  {
    encoder_tick++;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001176:	6013      	str	r3, [r2, #0]
    if(encoder_tick == (unsigned int)(encoder_distance/encoder_resolution))
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x58>)
 800117a:	edd3 6a00 	vldr	s13, [r3]
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118c:	ee17 2a90 	vmov	r2, s15
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d105      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      encoder_tick= 0;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
      get_image = 1;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_GPIO_EXTI_Callback+0x60>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
      // Test pin (PF7)
      // odr = GPIOF->ODR;
      // GPIOF->BSRR = ((odr & GPIO_PIN_7) << 16U) | (~odr & GPIO_PIN_7);
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	2401891c 	.word	0x2401891c
 80011b4:	24018950 	.word	0x24018950
 80011b8:	2401894c 	.word	0x2401894c
 80011bc:	24018948 	.word	0x24018948

080011c0 <HAL_TIM_PeriodElapsedCallback>:

//-Tick every 10[uS]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(enableSampleTimerFlag==1)
 80011c8:	4b9e      	ldr	r3, [pc, #632]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	f040 8135 	bne.w	800143c <HAL_TIM_PeriodElapsedCallback+0x27c>
  {
    //---ADC_Clk: To generate a 50KHz frequency (ADCCLK - pin PD13)
    odr = GPIOD->ODR;
 80011d2:	4b9d      	ldr	r3, [pc, #628]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a9d      	ldr	r2, [pc, #628]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011d8:	6013      	str	r3, [r2, #0]
    GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 80011da:	4b9c      	ldr	r3, [pc, #624]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ee:	4996      	ldr	r1, [pc, #600]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	618b      	str	r3, [r1, #24]
//    odr = GPIOD->ODR;
//    GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);


    //---Toggle CDSCLK2 and CP_Clk: To generate the frequency for the ADC Sampling  and the readout (CDSCLK2 and CP_Clk - pin PD12)
    if(Tim2_tick == 0)
 80011f4:	4b96      	ldr	r3, [pc, #600]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x46>
    {
      GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
 80011fe:	4b92      	ldr	r3, [pc, #584]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001204:	619a      	str	r2, [r3, #24]
    }

    // The CP clock is always 6 ticks (4 at low level, 2 at high level) non symetrical clock
    // since this signal is used for the AFE as CDSCLK2
    if (Tim2_tick == 5)
 8001206:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d110      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x72>
    {
      GPIOD->BSRR = GPIO_PIN_12;                  // CP_Clk set to 1
 8001210:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	619a      	str	r2, [r3, #24]
      Tim2_tick = 0;
 8001218:	4b8d      	ldr	r3, [pc, #564]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
      CP_cnt++;
 800121e:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001224:	b29b      	uxth	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e008      	b.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x84>
    }
    else
    {
      Tim2_tick++;
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	b29b      	uxth	r3, r3
 800123a:	3301      	adds	r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001242:	801a      	strh	r2, [r3, #0]
    }



    ADC_cnt++;
 8001244:	4b84      	ldr	r3, [pc, #528]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b81      	ldr	r3, [pc, #516]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001254:	801a      	strh	r2, [r3, #0]

    //---CIS SP signal to set exposure duration (SP_CIS - pin PD11)
    // sensor starts acquiring immediately at the tick=2 of the timer counter
    // The Integration time is defined by the 'expDuration_10us' variable
    // there is no reading of the data from the sensor between these two pulses
    if(tick_SP == 2 || tick_SP == (expDuration_10us+2) )
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d008      	beq.n	8001272 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	461a      	mov	r2, r3
 8001268:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3302      	adds	r3, #2
 800126e:	429a      	cmp	r2, r3
 8001270:	d104      	bne.n	800127c <HAL_TIM_PeriodElapsedCallback+0xbc>
    {
      GPIOD->BSRR = GPIO_PIN_11;              //-Set GPIO to 1
 8001272:	4b75      	ldr	r3, [pc, #468]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001278:	619a      	str	r2, [r3, #24]
 800127a:	e011      	b.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0xe0>
    }
    else if(tick_SP == 7 || tick_SP == (expDuration_10us+7) )
 800127c:	4b77      	ldr	r3, [pc, #476]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d008      	beq.n	8001298 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8001286:	4b75      	ldr	r3, [pc, #468]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128c:	461a      	mov	r2, r3
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3307      	adds	r3, #7
 8001294:	429a      	cmp	r2, r3
 8001296:	d103      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0xe0>
    {
      GPIOD->BSRR = (uint32_t)GPIO_PIN_11 << 16U; //-Set GPIO to 0
 8001298:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800129a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129e:	619a      	str	r2, [r3, #24]
    }

    if(tick_SP == (expDuration_10us+2) )
 80012a0:	4b6e      	ldr	r3, [pc, #440]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3302      	adds	r3, #2
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0xf8>
    {
      CP_cnt=0;
 80012b2:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
    }

    tick_SP++;
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3301      	adds	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012c8:	801a      	strh	r2, [r3, #0]




    // read all ports
    if ( (CP_cnt > INATIVE_PIXELS) && (CP_cnt <= INATIVE_PIXELS + EFFECTIVE_PIXELS + 100) ) // 100 is an exageration value of
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	f340 8098 	ble.w	8001406 <HAL_TIM_PeriodElapsedCallback+0x246>
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80012d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012dc:	f240 724c 	movw	r2, #1868	; 0x74c
 80012e0:	4293      	cmp	r3, r2
 80012e2:	f300 8090 	bgt.w	8001406 <HAL_TIM_PeriodElapsedCallback+0x246>
                                                                                            // oversampling never reach due to next loop control
    {
      // D0: pin PG12
      ADC_B0 = (GPIOG->IDR >> 12) & 0x01;
 80012e6:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	0b1b      	lsrs	r3, r3, #12
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80012f2:	6013      	str	r3, [r2, #0]
      // D1: pin PE9
      ADC_B1 = (GPIOE->IDR >> 9) & 0x01;
 80012f4:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	0a5b      	lsrs	r3, r3, #9
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	4a5c      	ldr	r2, [pc, #368]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001300:	6013      	str	r3, [r2, #0]
      // D2: pin PE11
      ADC_B2 = (GPIOE->IDR >> 11) & 0x01;
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	0adb      	lsrs	r3, r3, #11
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800130e:	6013      	str	r3, [r2, #0]
      // D3: pin PE14
      ADC_B3 = (GPIOE->IDR >> 14) & 0x01;
 8001310:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	0b9b      	lsrs	r3, r3, #14
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	4a57      	ldr	r2, [pc, #348]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800131c:	6013      	str	r3, [r2, #0]
      // D4: pin PE13
      ADC_B4 = (GPIOE->IDR >> 13) & 0x01;
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	0b5b      	lsrs	r3, r3, #13
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	4a54      	ldr	r2, [pc, #336]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800132a:	6013      	str	r3, [r2, #0]
      // D5: pin PG14
      ADC_B5 = (GPIOG->IDR >> 14) & 0x01;
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	0b9b      	lsrs	r3, r3, #14
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001338:	6013      	str	r3, [r2, #0]
      // D6: pin PB6
      ADC_B6 = (GPIOB->IDR >> 6) & 0x01;
 800133a:	4b52      	ldr	r3, [pc, #328]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001346:	6013      	str	r3, [r2, #0]
      // D7: pin PB7
      ADC_B7 = (GPIOB->IDR >> 7) & 0x01;
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	09db      	lsrs	r3, r3, #7
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001354:	6013      	str	r3, [r2, #0]

      if(alternateByte == 1)
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d12c      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
      {
        reg_Low[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	005a      	lsls	r2, r3, #1
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	431a      	orrs	r2, r3
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	431a      	orrs	r2, r3
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	431a      	orrs	r2, r3
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	431a      	orrs	r2, r3
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	431a      	orrs	r2, r3
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	ea42 0103 	orr.w	r1, r2, r3
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	01da      	lsls	r2, r3, #7
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	493d      	ldr	r1, [pc, #244]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        i++;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a39      	ldr	r2, [pc, #228]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013ae:	6013      	str	r3, [r2, #0]
        alternateByte = 0;
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e026      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x246>
      }
      else
      {
        reg_High[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	005a      	lsls	r2, r3, #1
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	431a      	orrs	r2, r3
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	431a      	orrs	r2, r3
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	431a      	orrs	r2, r3
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	431a      	orrs	r2, r3
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	ea42 0103 	orr.w	r1, r2, r3
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	01da      	lsls	r2, r3, #7
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        alternateByte = 1;
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
      }
    }

    if (i == TOTAL_PIXELS)//CP_cnt == (INATIVE_PIXELS + EFFECTIVE_PIXELS+1+1) ) // one oversample cycle added
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 800140e:	d115      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x27c>
    {
      HAL_TIM_Base_Stop_IT(&htim2);
 8001410:	4823      	ldr	r0, [pc, #140]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001412:	f004 fdc5 	bl	8005fa0 <HAL_TIM_Base_Stop_IT>

      GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800141c:	619a      	str	r2, [r3, #24]
      send_data_main = 1;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
      enableSampleTimerFlag = 0;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
      CP_cnt = 0;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800142c:	2200      	movs	r2, #0
 800142e:	801a      	strh	r2, [r3, #0]
      tick_SP = 0;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
      i = 0;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    {
        odr = GPIOD->ODR;
        GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);
    }
   */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24018918 	.word	0x24018918
 8001448:	58020c00 	.word	0x58020c00
 800144c:	24018954 	.word	0x24018954
 8001450:	2401895a 	.word	0x2401895a
 8001454:	24018958 	.word	0x24018958
 8001458:	2401895e 	.word	0x2401895e
 800145c:	2401895c 	.word	0x2401895c
 8001460:	24018960 	.word	0x24018960
 8001464:	58021800 	.word	0x58021800
 8001468:	24022b6c 	.word	0x24022b6c
 800146c:	58021000 	.word	0x58021000
 8001470:	24022b70 	.word	0x24022b70
 8001474:	24022b74 	.word	0x24022b74
 8001478:	24022b78 	.word	0x24022b78
 800147c:	24022b7c 	.word	0x24022b7c
 8001480:	24022b80 	.word	0x24022b80
 8001484:	58020400 	.word	0x58020400
 8001488:	24022b84 	.word	0x24022b84
 800148c:	24022b88 	.word	0x24022b88
 8001490:	24018968 	.word	0x24018968
 8001494:	24018964 	.word	0x24018964
 8001498:	2401da6c 	.word	0x2401da6c
 800149c:	2401896c 	.word	0x2401896c
 80014a0:	24000228 	.word	0x24000228
 80014a4:	24018949 	.word	0x24018949

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_MspInit+0x30>)
 80014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x30>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x30>)
 80014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58024400 	.word	0x58024400

080014e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0b8      	sub	sp, #224	; 0xe0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	22b4      	movs	r2, #180	; 0xb4
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f009 fb71 	bl	800abf0 <memset>
  if(hspi->Instance==SPI1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <HAL_SPI_MspInit+0x104>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d165      	bne.n	80015e4 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800151e:	2300      	movs	r3, #0
 8001520:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f81e 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001532:	f7ff ffb9 	bl	80014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800153c:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800154c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_SPI_MspInit+0x108>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001590:	2320      	movs	r3, #32
 8001592:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a8:	2305      	movs	r3, #5
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015b2:	4619      	mov	r1, r3
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <HAL_SPI_MspInit+0x10c>)
 80015b6:	f000 fbcf 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ba:	2320      	movs	r3, #32
 80015bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d2:	2305      	movs	r3, #5
 80015d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <HAL_SPI_MspInit+0x110>)
 80015e0:	f000 fbba 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	37e0      	adds	r7, #224	; 0xe0
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013000 	.word	0x40013000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020000 	.word	0x58020000
 80015f8:	58020400 	.word	0x58020400

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d116      	bne.n	800163c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x48>)
 8001620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201c      	movs	r0, #28
 8001632:	f000 fb5c 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001636:	201c      	movs	r0, #28
 8001638:	f000 fb73 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 fa0c 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 80016a0:	2080      	movs	r0, #128	; 0x80
 80016a2:	f000 fd1a 	bl	80020da <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 80016a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016aa:	f000 fd16 	bl	80020da <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM2_IRQHandler+0x10>)
 80016ba:	f004 fca0 	bl	8005ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000228 	.word	0x24000228

080016c8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <OTG_HS_IRQHandler+0x10>)
 80016ce:	f000 fe75 	bl	80023bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24024074 	.word	0x24024074

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f6:	f009 fa43 	bl	800ab80 <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
	}

return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
	}
	return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f009 f9a8 	bl	800ab80 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24050000 	.word	0x24050000
 800185c:	00000400 	.word	0x00000400
 8001860:	24022b8c 	.word	0x24022b8c
 8001864:	240247b0 	.word	0x240247b0

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <SystemInit+0xf0>)
 8001870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001874:	4a38      	ldr	r2, [pc, #224]	; (8001958 <SystemInit+0xf0>)
 8001876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <SystemInit+0xf4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	2b06      	cmp	r3, #6
 8001888:	d807      	bhi.n	800189a <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <SystemInit+0xf4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 030f 	bic.w	r3, r3, #15
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <SystemInit+0xf4>)
 8001894:	f043 0307 	orr.w	r3, r3, #7
 8001898:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <SystemInit+0xf8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a30      	ldr	r2, [pc, #192]	; (8001960 <SystemInit+0xf8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <SystemInit+0xf8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <SystemInit+0xf8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	492b      	ldr	r1, [pc, #172]	; (8001960 <SystemInit+0xf8>)
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <SystemInit+0xfc>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <SystemInit+0xf4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <SystemInit+0xf4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 030f 	bic.w	r3, r3, #15
 80018cc:	4a23      	ldr	r2, [pc, #140]	; (800195c <SystemInit+0xf4>)
 80018ce:	f043 0307 	orr.w	r3, r3, #7
 80018d2:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <SystemInit+0xf8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <SystemInit+0xf8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <SystemInit+0xf8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <SystemInit+0xf8>)
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <SystemInit+0x100>)
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <SystemInit+0xf8>)
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <SystemInit+0x104>)
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <SystemInit+0xf8>)
 80018f4:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <SystemInit+0x108>)
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <SystemInit+0xf8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <SystemInit+0xf8>)
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <SystemInit+0x108>)
 8001902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <SystemInit+0xf8>)
 8001906:	2200      	movs	r2, #0
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <SystemInit+0xf8>)
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <SystemInit+0x108>)
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <SystemInit+0xf8>)
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <SystemInit+0xf8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <SystemInit+0xf8>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <SystemInit+0xf8>)
 8001924:	2200      	movs	r2, #0
 8001926:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <SystemInit+0xf8>)
 800192a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <SystemInit+0xf8>)
 8001930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001934:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <SystemInit+0xf8>)
 800193a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800193e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001940:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SystemInit+0x10c>)
 8001944:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001948:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00
 800195c:	52002000 	.word	0x52002000
 8001960:	58024400 	.word	0x58024400
 8001964:	eaf6ed7f 	.word	0xeaf6ed7f
 8001968:	02020200 	.word	0x02020200
 800196c:	01ff0000 	.word	0x01ff0000
 8001970:	01010280 	.word	0x01010280
 8001974:	52004000 	.word	0x52004000

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800197c:	f7ff ff74 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a6:	f009 f8f1 	bl	800ab8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7fe fd11 	bl	80003d0 <main>
  bx  lr
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019b8:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 80019bc:	0800c088 	.word	0x0800c088
  ldr r2, =_sbss
 80019c0:	24000184 	.word	0x24000184
  ldr r4, =_ebss
 80019c4:	240247b0 	.word	0x240247b0

080019c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC3_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 f980 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019d8:	f002 fc1c 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_Init+0x68>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	4913      	ldr	r1, [pc, #76]	; (8001a38 <HAL_Init+0x6c>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_Init+0x68>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_Init+0x6c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_Init+0x70>)
 8001a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a10:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <HAL_Init+0x74>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f814 	bl	8001a44 <HAL_InitTick>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e002      	b.n	8001a2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a26:	f7ff fd45 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	58024400 	.word	0x58024400
 8001a38:	0800be28 	.word	0x0800be28
 8001a3c:	24000024 	.word	0x24000024
 8001a40:	24000020 	.word	0x24000020

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_InitTick+0x60>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e021      	b.n	8001a9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_InitTick+0x64>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_InitTick+0x60>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f965 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8c:	f000 f92f 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x68>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2400002c 	.word	0x2400002c
 8001aa8:	24000020 	.word	0x24000020
 8001aac:	24000028 	.word	0x24000028

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2400002c 	.word	0x2400002c
 8001ad4:	24022b90 	.word	0x24022b90

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	24022b90 	.word	0x24022b90

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2400002c 	.word	0x2400002c

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	05fa0000 	.word	0x05fa0000

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff40 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff90 	bl	8001c2c <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5f 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff33 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa4 	bl	8001c94 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d66:	4b86      	ldr	r3, [pc, #536]	; (8001f80 <HAL_GPIO_Init+0x228>)
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6a:	e18c      	b.n	8002086 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 817e 	beq.w	8002080 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_GPIO_Init+0x44>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 0201 	and.w	r2, r3, #1
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d017      	beq.n	8001e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80d8 	beq.w	8002080 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x230>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_GPIO_Init+0x234>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04a      	beq.n	8001fb0 <HAL_GPIO_Init+0x258>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_GPIO_Init+0x238>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_GPIO_Init+0x23c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x240>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_GPIO_Init+0x244>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_GPIO_Init+0x248>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_GPIO_Init+0x24c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <HAL_GPIO_Init+0x250>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_GPIO_Init+0x254>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x206>
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	e029      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f5e:	230a      	movs	r3, #10
 8001f60:	e027      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e025      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e023      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e01f      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e01d      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e01b      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e019      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f7e:	bf00      	nop
 8001f80:	58000080 	.word	0x58000080
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58000400 	.word	0x58000400
 8001f8c:	58020000 	.word	0x58020000
 8001f90:	58020400 	.word	0x58020400
 8001f94:	58020800 	.word	0x58020800
 8001f98:	58020c00 	.word	0x58020c00
 8001f9c:	58021000 	.word	0x58021000
 8001fa0:	58021400 	.word	0x58021400
 8001fa4:	58021800 	.word	0x58021800
 8001fa8:	58021c00 	.word	0x58021c00
 8001fac:	58022400 	.word	0x58022400
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4938      	ldr	r1, [pc, #224]	; (80020a4 <HAL_GPIO_Init+0x34c>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae6b 	bne.w	8001d6c <HAL_GPIO_Init+0x14>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	; 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000400 	.word	0x58000400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f82b 	bl	800115c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800210e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002110:	b08f      	sub	sp, #60	; 0x3c
 8002112:	af0a      	add	r7, sp, #40	; 0x28
 8002114:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e116      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f008 f9e4 	bl	800a508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f004 fcab 	bl	8006aba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	687e      	ldr	r6, [r7, #4]
 800216c:	466d      	mov	r5, sp
 800216e:	f106 0410 	add.w	r4, r6, #16
 8002172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800217e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002182:	1d33      	adds	r3, r6, #4
 8002184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	f004 fb76 	bl	8006878 <USB_CoreInit>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0d7      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fc99 	bl	8006adc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e04a      	b.n	8002246 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	333d      	adds	r3, #61	; 0x3d
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	333c      	adds	r3, #60	; 0x3c
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	b298      	uxth	r0, r3
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3344      	adds	r3, #68	; 0x44
 80021ec:	4602      	mov	r2, r0
 80021ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3340      	adds	r3, #64	; 0x40
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3348      	adds	r3, #72	; 0x48
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	334c      	adds	r3, #76	; 0x4c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3354      	adds	r3, #84	; 0x54
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	3301      	adds	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3af      	bcc.n	80021b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e044      	b.n	80022e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3301      	adds	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3b5      	bcc.n	8002256 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	687e      	ldr	r6, [r7, #4]
 80022f2:	466d      	mov	r5, sp
 80022f4:	f106 0410 	add.w	r4, r6, #16
 80022f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002304:	e885 0003 	stmia.w	r5, {r0, r1}
 8002308:	1d33      	adds	r3, r6, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f004 fc31 	bl	8006b74 <USB_DevInit>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e014      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f001 f98b 	bl	8003658 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f005 fd7f 	bl	8007e4a <USB_DevDisconnect>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_Start+0x1c>
 800236e:	2302      	movs	r3, #2
 8002370:	e020      	b.n	80023b4 <HAL_PCD_Start+0x5e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d109      	bne.n	8002396 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fb7c 	bl	8006a98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f005 fd2f 	bl	8007e08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b08d      	sub	sp, #52	; 0x34
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 fded 	bl	8007fb2 <USB_GetMode>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 84b7 	bne.w	8002d4e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fd51 	bl	8007e8c <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 84ad 	beq.w	8002d4c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fd3e 	bl	8007e8c <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f002 0202 	and.w	r2, r2, #2
 8002428:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fd2c 	bl	8007e8c <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b10      	cmp	r3, #16
 800243c:	d161      	bne.n	8002502 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f003 020f 	and.w	r2, r3, #15
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	0c5b      	lsrs	r3, r3, #17
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	2b02      	cmp	r3, #2
 8002478:	d124      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d035      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	6a38      	ldr	r0, [r7, #32]
 800249a:	f005 fb63 	bl	8007b64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024aa:	441a      	add	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024bc:	441a      	add	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
 80024c2:	e016      	b.n	80024f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	0c5b      	lsrs	r3, r3, #17
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d110      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024d6:	2208      	movs	r2, #8
 80024d8:	4619      	mov	r1, r3
 80024da:	6a38      	ldr	r0, [r7, #32]
 80024dc:	f005 fb42 	bl	8007b64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ec:	441a      	add	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fcc0 	bl	8007e8c <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002516:	f040 80a7 	bne.w	8002668 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f005 fcc5 	bl	8007eb2 <USB_ReadDevAllOutEpInterrupt>
 8002528:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800252a:	e099      	b.n	8002660 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 808e 	beq.w	8002654 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f005 fce9 	bl	8007f1a <USB_ReadDevOutEPInterrupt>
 8002548:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00c      	beq.n	800256e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	2301      	movs	r3, #1
 8002564:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 feef 	bl	800334c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002584:	461a      	mov	r2, r3
 8002586:	2308      	movs	r3, #8
 8002588:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 ffc5 	bl	800351c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a8:	461a      	mov	r2, r3
 80025aa:	2310      	movs	r3, #16
 80025ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d030      	beq.n	800261a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d109      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f008 f8a4 	bl	800a750 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	2302      	movs	r3, #2
 8002618:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2320      	movs	r3, #32
 8002634:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	461a      	mov	r2, r3
 800264e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002652:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f af62 	bne.w	800252c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f005 fc0d 	bl	8007e8c <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267c:	f040 80db 	bne.w	8002836 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f005 fc2e 	bl	8007ee6 <USB_ReadDevAllInEpInterrupt>
 800268a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002690:	e0cd      	b.n	800282e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80c2 	beq.w	8002822 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fc54 	bl	8007f56 <USB_ReadDevInEPInterrupt>
 80026ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d057      	beq.n	800276a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	2201      	movs	r2, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69f9      	ldr	r1, [r7, #28]
 80026d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026da:	4013      	ands	r3, r2
 80026dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ea:	461a      	mov	r2, r3
 80026ec:	2301      	movs	r3, #1
 80026ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d132      	bne.n	800275e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	; 0x4c
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4403      	add	r3, r0
 8002718:	3348      	adds	r3, #72	; 0x48
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4419      	add	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4403      	add	r3, r0
 800272c:	334c      	adds	r3, #76	; 0x4c
 800272e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d113      	bne.n	800275e <HAL_PCD_IRQHandler+0x3a2>
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3354      	adds	r3, #84	; 0x54
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002756:	461a      	mov	r2, r3
 8002758:	2101      	movs	r1, #1
 800275a:	f005 fc5d 	bl	8008018 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f007 ff6e 	bl	800a646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002780:	461a      	mov	r2, r3
 8002782:	2308      	movs	r3, #8
 8002784:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279c:	461a      	mov	r2, r3
 800279e:	2310      	movs	r3, #16
 80027a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b8:	461a      	mov	r2, r3
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ca:	6a38      	ldr	r0, [r7, #32]
 80027cc:	f004 fb30 	bl	8006e30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	3338      	adds	r3, #56	; 0x38
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	78db      	ldrb	r3, [r3, #3]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2200      	movs	r2, #0
 80027f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f007 ffbb 	bl	800a774 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280a:	461a      	mov	r2, r3
 800280c:	2302      	movs	r3, #2
 800280e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fd08 	bl	8003232 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af2e 	bne.w	8002692 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f005 fb26 	bl	8007e8c <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284a:	d122      	bne.n	8002892 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002872:	2100      	movs	r1, #0
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 ff13 	bl	80036a0 <HAL_PCDEx_LPM_Callback>
 800287a:	e002      	b.n	8002882 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f007 ff59 	bl	800a734 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f005 faf8 	bl	8007e8c <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a6:	d112      	bne.n	80028ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f007 ff15 	bl	800a6e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 fada 	bl	8007e8c <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d121      	bne.n	8002928 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80028f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d111      	bne.n	8002922 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002918:	2101      	movs	r1, #1
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fec0 	bl	80036a0 <HAL_PCDEx_LPM_Callback>
 8002920:	e002      	b.n	8002928 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f007 fee0 	bl	800a6e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 faad 	bl	8007e8c <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293c:	f040 80b7 	bne.w	8002aae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2110      	movs	r1, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fa68 	bl	8006e30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	e046      	b.n	80029f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002972:	461a      	mov	r2, r3
 8002974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002978:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	440a      	add	r2, r1
 8002990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002998:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	3301      	adds	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3b3      	bcc.n	8002966 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2a:	f043 030b 	orr.w	r3, r3, #11
 8002a2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f043 030b 	orr.w	r3, r3, #11
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	e015      	b.n	8002a74 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	4619      	mov	r1, r3
 8002a58:	f242 032b 	movw	r3, #8235	; 0x202b
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6e:	f043 030b 	orr.w	r3, r3, #11
 8002a72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f005 fabd 	bl	8008018 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 f9ea 	bl	8007e8c <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	d124      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f005 fa81 	bl	8007fd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fa29 	bl	8006f2a <USB_GetDevSpeed>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	f001 fd10 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f003 ff2e 	bl	8006954 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f007 fdcc 	bl	800a696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 f9ba 	bl	8007e8c <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d10a      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f007 fda9 	bl	800a67a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 0208 	and.w	r2, r2, #8
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f005 f9a5 	bl	8007e8c <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d122      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b58:	2301      	movs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e014      	b.n	8002b88 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fb27 	bl	80031d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3e5      	bcc.n	8002b5e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 f978 	bl	8007e8c <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba6:	d13b      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e02b      	b.n	8002c06 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3340      	adds	r3, #64	; 0x40
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d115      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da12      	bge.n	8002c00 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	333f      	adds	r3, #63	; 0x3f
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fae8 	bl	80031d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	3301      	adds	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3ce      	bcc.n	8002bae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 f931 	bl	8007e8c <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c34:	d155      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e045      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d12e      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da2b      	bge.n	8002cc2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d121      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbe:	6053      	str	r3, [r2, #4]
            break;
 8002cc0:	e007      	b.n	8002cd2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3b4      	bcc.n	8002c3c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 f8d0 	bl	8007e8c <USB_ReadInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d10a      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f007 fd4d 	bl	800a798 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 f8ba 	bl	8007e8c <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d115      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f007 fd3d 	bl	800a7b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e000      	b.n	8002d4e <HAL_PCD_IRQHandler+0x992>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3734      	adds	r7, #52	; 0x34
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}

08002d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_SetAddress+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e013      	b.n	8002d96 <HAL_PCD_SetAddress+0x42>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 f818 	bl	8007dbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	70fb      	strb	r3, [r7, #3]
 8002db0:	460b      	mov	r3, r1
 8002db2:	803b      	strh	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da0f      	bge.n	8002de4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3338      	adds	r3, #56	; 0x38
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	705a      	strb	r2, [r3, #1]
 8002de2:	e00f      	b.n	8002e04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e10:	883a      	ldrh	r2, [r7, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	78ba      	ldrb	r2, [r7, #2]
 8002e1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e2e:	78bb      	ldrb	r3, [r7, #2]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d102      	bne.n	8002e3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_EP_Open+0xaa>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e00e      	b.n	8002e66 <HAL_PCD_EP_Open+0xc8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f88c 	bl	8006f74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e64:	7afb      	ldrb	r3, [r7, #11]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da0f      	bge.n	8002ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3338      	adds	r3, #56	; 0x38
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
 8002ea0:	e00f      	b.n	8002ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Close+0x6e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Close+0x8c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 f8ca 	bl	8007084 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	f004 fbb1 	bl	80076dc <USB_EP0StartXfer>
 8002f7a:	e008      	b.n	8002f8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	f004 f957 	bl	800723c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3338      	adds	r3, #56	; 0x38
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2201      	movs	r2, #1
 8003006:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003008:	7afb      	ldrb	r3, [r7, #11]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	b2da      	uxtb	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	f004 fb4f 	bl	80076dc <USB_EP0StartXfer>
 800303e:	e008      	b.n	8003052 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	f004 f8f5 	bl	800723c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d901      	bls.n	800307a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e050      	b.n	800311c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800307a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0f      	bge.n	80030a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3338      	adds	r3, #56	; 0x38
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	705a      	strb	r2, [r3, #1]
 80030a0:	e00d      	b.n	80030be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_PCD_EP_SetStall+0x82>
 80030da:	2302      	movs	r3, #2
 80030dc:	e01e      	b.n	800311c <HAL_PCD_EP_SetStall+0xc0>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fd91 	bl	8007c14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800310c:	461a      	mov	r2, r3
 800310e:	f004 ff83 	bl	8008018 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d901      	bls.n	8003142 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0f      	bge.n	800316a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3338      	adds	r3, #56	; 0x38
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	705a      	strb	r2, [r3, #1]
 8003168:	e00f      	b.n	800318a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_PCD_EP_ClrStall+0x86>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e00e      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fd99 	bl	8007cf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0c      	bge.n	80031fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e00c      	b.n	8003218 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 fbb8 	bl	8007994 <USB_EPStopXfer>
 8003224:	4603      	mov	r3, r0
 8003226:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003228:	7afb      	ldrb	r3, [r7, #11]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af02      	add	r7, sp, #8
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	429a      	cmp	r2, r3
 8003264:	d901      	bls.n	800326a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06c      	b.n	8003344 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	429a      	cmp	r2, r3
 800327e:	d902      	bls.n	8003286 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3303      	adds	r3, #3
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800328e:	e02b      	b.n	80032e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d902      	bls.n	80032ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3303      	adds	r3, #3
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4603      	mov	r3, r0
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f004 fc0c 	bl	8007ae8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d809      	bhi.n	8003312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003306:	429a      	cmp	r2, r3
 8003308:	d203      	bcs.n	8003312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1be      	bne.n	8003290 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	429a      	cmp	r2, r3
 800331c:	d811      	bhi.n	8003342 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	2201      	movs	r2, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	43db      	mvns	r3, r3
 8003338:	6939      	ldr	r1, [r7, #16]
 800333a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800333e:	4013      	ands	r3, r2
 8003340:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	333c      	adds	r3, #60	; 0x3c
 8003364:	3304      	adds	r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d17b      	bne.n	800347a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4a61      	ldr	r2, [pc, #388]	; (8003514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	f240 80b9 	bls.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b3 	beq.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b4:	6093      	str	r3, [r2, #8]
 80033b6:	e0a7      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	2320      	movs	r3, #32
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e098      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8093 	bne.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d90f      	bls.n	800340a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e07e      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	440b      	add	r3, r1
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	1ad2      	subs	r2, r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d114      	bne.n	800346c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003454:	461a      	mov	r2, r3
 8003456:	2101      	movs	r1, #1
 8003458:	f004 fdde 	bl	8008018 <USB_EP0_OutStart>
 800345c:	e006      	b.n	800346c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f007 f8cc 	bl	800a610 <HAL_PCD_DataOutStageCallback>
 8003478:	e046      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d124      	bne.n	80034cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	461a      	mov	r2, r3
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	e032      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	461a      	mov	r2, r3
 80034ba:	2320      	movs	r3, #32
 80034bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f007 f8a3 	bl	800a610 <HAL_PCD_DataOutStageCallback>
 80034ca:	e01d      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d114      	bne.n	80034fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f4:	461a      	mov	r2, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	f004 fd8e 	bl	8008018 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f007 f884 	bl	800a610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	4f54300a 	.word	0x4f54300a
 8003518:	4f54310a 	.word	0x4f54310a

0800351c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	333c      	adds	r3, #60	; 0x3c
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d90e      	bls.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f007 f83b 	bl	800a5ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d90c      	bls.n	8003598 <PCD_EP_OutSetupPacket_int+0x7c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003590:	461a      	mov	r2, r3
 8003592:	2101      	movs	r1, #1
 8003594:	f004 fd40 	bl	8008018 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	4f54300a 	.word	0x4f54300a

080035a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
 80035b4:	4613      	mov	r3, r2
 80035b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035c6:	883b      	ldrh	r3, [r7, #0]
 80035c8:	0419      	lsls	r1, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
 80035d4:	e028      	b.n	8003628 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e00d      	b.n	8003606 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	3340      	adds	r3, #64	; 0x40
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	3301      	adds	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	3b01      	subs	r3, #1
 800360c:	429a      	cmp	r2, r3
 800360e:	d3ec      	bcc.n	80035ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003610:	883b      	ldrh	r3, [r7, #0]
 8003612:	0418      	lsls	r0, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	3b01      	subs	r3, #1
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4302      	orrs	r2, r0
 8003620:	3340      	adds	r3, #64	; 0x40
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_PCDEx_ActivateLPM+0x44>)
 8003688:	4313      	orrs	r3, r2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	10000003 	.word	0x10000003

080036a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_PWREx_ConfigSupply+0x70>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d00a      	beq.n	80036e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_PWREx_ConfigSupply+0x70>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01f      	b.n	800371e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e01d      	b.n	800371e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_PWREx_ConfigSupply+0x70>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	490f      	ldr	r1, [pc, #60]	; (8003728 <HAL_PWREx_ConfigSupply+0x70>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036f2:	f7fe f9f1 	bl	8001ad8 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036f8:	e009      	b.n	800370e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036fa:	f7fe f9ed 	bl	8001ad8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003708:	d901      	bls.n	800370e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e007      	b.n	800371e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_PWREx_ConfigSupply+0x70>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d1ee      	bne.n	80036fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	58024800 	.word	0x58024800

0800372c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	60d3      	str	r3, [r2, #12]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	58024800 	.word	0x58024800

0800374c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e39d      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8087 	beq.w	800387a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376c:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003776:	4b86      	ldr	r3, [pc, #536]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b10      	cmp	r3, #16
 8003780:	d007      	beq.n	8003792 <HAL_RCC_OscConfig+0x46>
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	2b18      	cmp	r3, #24
 8003786:	d110      	bne.n	80037aa <HAL_RCC_OscConfig+0x5e>
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d10b      	bne.n	80037aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003792:	4b7f      	ldr	r3, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d06c      	beq.n	8003878 <HAL_RCC_OscConfig+0x12c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d168      	bne.n	8003878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e377      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x76>
 80037b4:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a75      	ldr	r2, [pc, #468]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e02e      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b71      	ldr	r3, [pc, #452]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a70      	ldr	r2, [pc, #448]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6d      	ldr	r2, [pc, #436]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0xbc>
 80037ee:	4b68      	ldr	r3, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a64      	ldr	r2, [pc, #400]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xd4>
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a60      	ldr	r2, [pc, #384]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5d      	ldr	r2, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f956 	bl	8001ad8 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe f952 	bl	8001ad8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e32b      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xe4>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f942 	bl	8001ad8 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe f93e 	bl	8001ad8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e317      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x10c>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 808c 	beq.w	80039a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003890:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_RCC_OscConfig+0x162>
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2b18      	cmp	r3, #24
 80038a2:	d137      	bne.n	8003914 <HAL_RCC_OscConfig+0x1c8>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d132      	bne.n	8003914 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x17a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e2e9      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038c6:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0219 	bic.w	r2, r3, #25
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	492f      	ldr	r1, [pc, #188]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038d8:	f7fe f8fe 	bl	8001ad8 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe f8fa 	bl	8001ad8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e2d3      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	4920      	ldr	r1, [pc, #128]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003912:	e045      	b.n	80039a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d026      	beq.n	800396a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 0219 	bic.w	r2, r3, #25
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4919      	ldr	r1, [pc, #100]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe f8d3 	bl	8001ad8 <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe f8cf 	bl	8001ad8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e2a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	490b      	ldr	r1, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
 8003968:	e01a      	b.n	80039a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCC_OscConfig+0x244>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe f8af 	bl	8001ad8 <HAL_GetTick>
 800397a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe f8ab 	bl	8001ad8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d903      	bls.n	8003994 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e284      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
 8003990:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003994:	4b96      	ldr	r3, [pc, #600]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d06a      	beq.n	8003a82 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ac:	4b90      	ldr	r3, [pc, #576]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039b6:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d007      	beq.n	80039d2 <HAL_RCC_OscConfig+0x286>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b18      	cmp	r3, #24
 80039c6:	d11b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2b4>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d2:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x29e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b80      	cmp	r3, #128	; 0x80
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e257      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ea:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	497d      	ldr	r1, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fe:	e040      	b.n	8003a82 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f860 	bl	8001ad8 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a1c:	f7fe f85c 	bl	8001ad8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e235      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a2e:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	4969      	ldr	r1, [pc, #420]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
 8003a4e:	e018      	b.n	8003a82 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a50:	4b67      	ldr	r3, [pc, #412]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a66      	ldr	r2, [pc, #408]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f83c 	bl	8001ad8 <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a64:	f7fe f838 	bl	8001ad8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e211      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a76:	4b5e      	ldr	r3, [pc, #376]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d036      	beq.n	8003afc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d019      	beq.n	8003aca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9a:	4a55      	ldr	r2, [pc, #340]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe f819 	bl	8001ad8 <HAL_GetTick>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe f815 	bl	8001ad8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1ee      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x35e>
 8003ac8:	e018      	b.n	8003afc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ace:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd ffff 	bl	8001ad8 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fd fffb 	bl	8001ad8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1d4      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d036      	beq.n	8003b76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d019      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b1c:	f7fd ffdc 	bl	8001ad8 <HAL_GetTick>
 8003b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b24:	f7fd ffd8 	bl	8001ad8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1b1      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x3d8>
 8003b42:	e018      	b.n	8003b76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b50:	f7fd ffc2 	bl	8001ad8 <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b58:	f7fd ffbe 	bl	8001ad8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e197      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8086 	beq.w	8003c90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4a8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x4a8>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b90:	f7fd ffa2 	bl	8001ad8 <HAL_GetTick>
 8003b94:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fd ff9e 	bl	8001ad8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e177      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCC_OscConfig+0x4a8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x480>
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	e032      	b.n	8003c32 <HAL_RCC_OscConfig+0x4e6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4ac>
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a02      	ldr	r2, [pc, #8]	; (8003bf0 <HAL_RCC_OscConfig+0x4a4>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	e021      	b.n	8003c32 <HAL_RCC_OscConfig+0x4e6>
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	58024800 	.word	0x58024800
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x4ce>
 8003c00:	4b83      	ldr	r3, [pc, #524]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a82      	ldr	r2, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a7f      	ldr	r2, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	e00b      	b.n	8003c32 <HAL_RCC_OscConfig+0x4e6>
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a79      	ldr	r2, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d015      	beq.n	8003c66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fd ff4d 	bl	8001ad8 <HAL_GetTick>
 8003c3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fd ff49 	bl	8001ad8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e120      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c58:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ee      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4f6>
 8003c64:	e014      	b.n	8003c90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fd ff37 	bl	8001ad8 <HAL_GetTick>
 8003c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fd ff33 	bl	8001ad8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e10a      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80ff 	beq.w	8003e98 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca2:	2b18      	cmp	r3, #24
 8003ca4:	f000 80ba 	beq.w	8003e1c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	f040 8095 	bne.w	8003ddc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fd ff0b 	bl	8001ad8 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fd ff07 	bl	8001ad8 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0e0      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce4:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce8:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_RCC_OscConfig+0x6c8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	4945      	ldr	r1, [pc, #276]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	628b      	str	r3, [r1, #40]	; 0x28
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	025b      	lsls	r3, r3, #9
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	3b01      	subs	r3, #1
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d2e:	4938      	ldr	r1, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d40:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCC_OscConfig+0x6cc>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d4c:	00d2      	lsls	r2, r2, #3
 8003d4e:	4930      	ldr	r1, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f023 020c 	bic.w	r2, r3, #12
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	492b      	ldr	r1, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f023 0202 	bic.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4927      	ldr	r1, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fe90 	bl	8001ad8 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fd fe8c 	bl	8001ad8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e065      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x670>
 8003dda:	e05d      	b.n	8003e98 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd fe76 	bl	8001ad8 <HAL_GetTick>
 8003dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fe72 	bl	8001ad8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e04b      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e02:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x6c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x6a4>
 8003e0e:	e043      	b.n	8003e98 <HAL_RCC_OscConfig+0x74c>
 8003e10:	58024400 	.word	0x58024400
 8003e14:	fffffc0c 	.word	0xfffffc0c
 8003e18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_RCC_OscConfig+0x758>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_OscConfig+0x758>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d031      	beq.n	8003e94 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d12a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d122      	bne.n	8003e94 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	0e1b      	lsrs	r3, r3, #24
 8003e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	; 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400

08003ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e19c      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b87      	ldr	r3, [pc, #540]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4985      	ldr	r1, [pc, #532]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b83      	ldr	r3, [pc, #524]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e184      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d908      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4975      	ldr	r1, [pc, #468]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b70      	ldr	r3, [pc, #448]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d908      	bls.n	8003f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f36:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	496a      	ldr	r1, [pc, #424]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	495e      	ldr	r1, [pc, #376]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d908      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f92:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4953      	ldr	r1, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 020f 	bic.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4947      	ldr	r1, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d055      	beq.n	800408a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4940      	ldr	r1, [pc, #256]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0f6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0ea      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0de      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d6      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4925      	ldr	r1, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd fd3d 	bl	8001ad8 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	e00a      	b.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004062:	f7fd fd39 	bl	8001ad8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0be      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	429a      	cmp	r2, r3
 8004088:	d1eb      	bne.n	8004062 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d208      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x244>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d214      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	4906      	ldr	r1, [pc, #24]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_ClockConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e086      	b.n	80041f6 <HAL_RCC_ClockConfig+0x34e>
 80040e8:	52002000 	.word	0x52002000
 80040ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800410c:	4b3c      	ldr	r3, [pc, #240]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	4939      	ldr	r1, [pc, #228]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	429a      	cmp	r2, r3
 8004138:	d208      	bcs.n	800414c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	492e      	ldr	r1, [pc, #184]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004148:	4313      	orrs	r3, r2
 800414a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004164:	429a      	cmp	r2, r3
 8004166:	d208      	bcs.n	800417a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004176:	4313      	orrs	r3, r2
 8004178:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004192:	429a      	cmp	r2, r3
 8004194:	d208      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4917      	ldr	r1, [pc, #92]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041a8:	f000 f834 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	4912      	ldr	r1, [pc, #72]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x35c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x360>)
 80041de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x364>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x368>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd fc2a 	bl	8001a44 <HAL_InitTick>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	0800be28 	.word	0x0800be28
 8004208:	24000024 	.word	0x24000024
 800420c:	24000020 	.word	0x24000020
 8004210:	24000028 	.word	0x24000028

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421a:	4bb3      	ldr	r3, [pc, #716]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	2b18      	cmp	r3, #24
 8004224:	f200 8155 	bhi.w	80044d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004295 	.word	0x08004295
 8004234:	080044d3 	.word	0x080044d3
 8004238:	080044d3 	.word	0x080044d3
 800423c:	080044d3 	.word	0x080044d3
 8004240:	080044d3 	.word	0x080044d3
 8004244:	080044d3 	.word	0x080044d3
 8004248:	080044d3 	.word	0x080044d3
 800424c:	080044d3 	.word	0x080044d3
 8004250:	080042bb 	.word	0x080042bb
 8004254:	080044d3 	.word	0x080044d3
 8004258:	080044d3 	.word	0x080044d3
 800425c:	080044d3 	.word	0x080044d3
 8004260:	080044d3 	.word	0x080044d3
 8004264:	080044d3 	.word	0x080044d3
 8004268:	080044d3 	.word	0x080044d3
 800426c:	080044d3 	.word	0x080044d3
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080044d3 	.word	0x080044d3
 8004278:	080044d3 	.word	0x080044d3
 800427c:	080044d3 	.word	0x080044d3
 8004280:	080044d3 	.word	0x080044d3
 8004284:	080044d3 	.word	0x080044d3
 8004288:	080044d3 	.word	0x080044d3
 800428c:	080044d3 	.word	0x080044d3
 8004290:	080042c7 	.word	0x080042c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004294:	4b94      	ldr	r3, [pc, #592]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042a0:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a90      	ldr	r2, [pc, #576]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042b2:	e111      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042b4:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b6:	61bb      	str	r3, [r7, #24]
    break;
 80042b8:	e10e      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042ba:	4b8d      	ldr	r3, [pc, #564]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042bc:	61bb      	str	r3, [r7, #24]
    break;
 80042be:	e10b      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042c0:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042c2:	61bb      	str	r3, [r7, #24]
    break;
 80042c4:	e108      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042d0:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042dc:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042e6:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	08db      	lsrs	r3, r3, #3
 80042ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80e1 	beq.w	80044cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f000 8083 	beq.w	8004418 <HAL_RCC_GetSysClockFreq+0x204>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f200 80a1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x248>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x114>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d056      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004326:	e099      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800438e:	e087      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d2:	e065      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b40      	ldr	r3, [pc, #256]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004416:	e043      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800445a:	e021      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800449e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	3301      	adds	r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c4:	ee17 3a90 	vmov	r3, s15
 80044c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044d4:	61bb      	str	r3, [r7, #24]
    break;
 80044d6:	bf00      	nop
  }

  return sysclockfreq;
 80044d8:	69bb      	ldr	r3, [r7, #24]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	03d09000 	.word	0x03d09000
 80044f0:	003d0900 	.word	0x003d0900
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	46000000 	.word	0x46000000
 80044fc:	4c742400 	.word	0x4c742400
 8004500:	4a742400 	.word	0x4a742400
 8004504:	4af42400 	.word	0x4af42400

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800450e:	f7ff fe81 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RCC_GetHCLKFreq+0x50>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490f      	ldr	r1, [pc, #60]	; (800455c <HAL_RCC_GetHCLKFreq+0x54>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_GetHCLKFreq+0x50>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_GetHCLKFreq+0x54>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_GetHCLKFreq+0x58>)
 8004544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_GetHCLKFreq+0x58>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400
 800455c:	0800be28 	.word	0x0800be28
 8004560:	24000024 	.word	0x24000024
 8004564:	24000020 	.word	0x24000020

08004568 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004570:	2300      	movs	r3, #0
 8004572:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004574:	2300      	movs	r3, #0
 8004576:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03f      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800458c:	d02a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800458e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004592:	d824      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004598:	d018      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800459a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800459e:	d81e      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a8:	d007      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045aa:	e018      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ac:	4ba4      	ldr	r3, [pc, #656]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4aa3      	ldr	r2, [pc, #652]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045b8:	e015      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2102      	movs	r1, #2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fecb 	bl	800535c <RCCEx_PLL2_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045ca:	e00c      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3324      	adds	r3, #36	; 0x24
 80045d0:	2102      	movs	r1, #2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff74 	bl	80054c0 <RCCEx_PLL3_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
      break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045ec:	4b94      	ldr	r3, [pc, #592]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f8:	4991      	ldr	r1, [pc, #580]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	650b      	str	r3, [r1, #80]	; 0x50
 80045fe:	e001      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d03d      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	2b04      	cmp	r3, #4
 8004616:	d826      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004635 	.word	0x08004635
 8004624:	08004643 	.word	0x08004643
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4b82      	ldr	r3, [pc, #520]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a81      	ldr	r2, [pc, #516]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004640:	e015      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fe87 	bl	800535c <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004652:	e00c      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3324      	adds	r3, #36	; 0x24
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff30 	bl	80054c0 <RCCEx_PLL3_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
      break;
 800466a:	e000      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800466c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	f023 0207 	bic.w	r2, r3, #7
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	496f      	ldr	r1, [pc, #444]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	650b      	str	r3, [r1, #80]	; 0x50
 8004686:	e001      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d051      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800469e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046a2:	d036      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046a8:	d830      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80046aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ae:	d032      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80046b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b4:	d82a      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80046b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046ba:	d02e      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80046bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046c0:	d824      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80046c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c6:	d018      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046cc:	d81e      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x172>
 80046d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d6:	d007      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80046d8:	e018      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046da:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046e6:	e019      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe34 	bl	800535c <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80046f8:	e010      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fedd 	bl	80054c0 <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800470a:	e007      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
      break;
 8004710:	e004      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800471a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004730:	4943      	ldr	r1, [pc, #268]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	658b      	str	r3, [r1, #88]	; 0x58
 8004736:	e001      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004744:	2b00      	cmp	r3, #0
 8004746:	d051      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800474e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004752:	d036      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004754:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004758:	d830      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800475a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800475e:	d032      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004764:	d82a      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800476a:	d02e      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x262>
 800476c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004770:	d824      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004776:	d018      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800477c:	d81e      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004786:	d007      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004788:	e018      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004796:	e019      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fddc 	bl	800535c <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047a8:	e010      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3324      	adds	r3, #36	; 0x24
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fe85 	bl	80054c0 <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047ba:	e007      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	e004      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80047ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047e0:	4917      	ldr	r1, [pc, #92]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	658b      	str	r3, [r1, #88]	; 0x58
 80047e6:	e001      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d035      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d01c      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d817      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d00c      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d813      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d019      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d10f      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fd97 	bl	800535c <RCCEx_PLL2_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004832:	e008      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
      break;
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800483a:	bf00      	nop
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
      break;
 8004844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800484c:	4ba3      	ldr	r3, [pc, #652]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	49a0      	ldr	r1, [pc, #640]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800485a:	4313      	orrs	r3, r2
 800485c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800485e:	e001      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d047      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004878:	d030      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800487a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487e:	d82a      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004884:	d02c      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004886:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800488a:	d824      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d018      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	d81e      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d007      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048a2:	e018      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b8d      	ldr	r3, [pc, #564]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a8c      	ldr	r2, [pc, #560]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048b0:	e017      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fd4f 	bl	800535c <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048c2:	e00e      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fdf8 	bl	80054c0 <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048d4:	e005      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048e8:	4b7c      	ldr	r3, [pc, #496]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4979      	ldr	r1, [pc, #484]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	650b      	str	r3, [r1, #80]	; 0x50
 80048fa:	e001      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d049      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d02e      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800491a:	d828      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800491c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004920:	d02a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004926:	d822      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800492c:	d026      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800492e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004932:	d81c      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004938:	d010      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800493a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493e:	d816      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d111      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2101      	movs	r1, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd03 	bl	800535c <RCCEx_PLL2_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800495a:	e012      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	2101      	movs	r1, #1
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fdac 	bl	80054c0 <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800496c:	e009      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
      break;
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004974:	bf00      	nop
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004988:	4b54      	ldr	r3, [pc, #336]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004994:	4951      	ldr	r1, [pc, #324]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004996:	4313      	orrs	r3, r2
 8004998:	650b      	str	r3, [r1, #80]	; 0x50
 800499a:	e001      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d04b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b6:	d02e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049bc:	d828      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c2:	d02a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d822      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ce:	d026      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049d4:	d81c      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049da:	d010      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x496>
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d816      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01d      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ea:	d111      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fcb2 	bl	800535c <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80049fc:	e012      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3324      	adds	r3, #36	; 0x24
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fd5b 	bl	80054c0 <RCCEx_PLL3_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	75fb      	strb	r3, [r7, #23]
      break;
 8004a14:	e006      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004a16:	bf00      	nop
 8004a18:	e004      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a38:	4928      	ldr	r1, [pc, #160]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a58:	d00e      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5e:	d814      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d015      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a68:	d10f      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a76:	e00c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fc6c 	bl	800535c <RCCEx_PLL2_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa4:	490d      	ldr	r1, [pc, #52]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d034      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d81d      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b07 	.word	0x08004b07
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004aef 	.word	0x08004aef
 8004ad8:	08004b07 	.word	0x08004b07
 8004adc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4bb1      	ldr	r3, [pc, #708]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4ab0      	ldr	r2, [pc, #704]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2102      	movs	r1, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fc31 	bl	800535c <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8004b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b0e:	4ba6      	ldr	r3, [pc, #664]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	49a3      	ldr	r1, [pc, #652]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b20:	e001      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8086 	beq.w	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b34:	4b9d      	ldr	r3, [pc, #628]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a9c      	ldr	r2, [pc, #624]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b40:	f7fc ffca 	bl	8001ad8 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b46:	e009      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b48:	f7fc ffc6 	bl	8001ad8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d902      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	75fb      	strb	r3, [r7, #23]
        break;
 8004b5a:	e005      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b5c:	4b93      	ldr	r3, [pc, #588]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ef      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d166      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b6e:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b78:	4053      	eors	r3, r2
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b8c:	4b86      	ldr	r3, [pc, #536]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a85      	ldr	r2, [pc, #532]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b98:	4b83      	ldr	r3, [pc, #524]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a82      	ldr	r2, [pc, #520]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ba4:	4a80      	ldr	r2, [pc, #512]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb4:	d115      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fc ff8f 	bl	8001ad8 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bbc:	e00b      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fc ff8b 	bl	8001ad8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d902      	bls.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	75fb      	strb	r3, [r7, #23]
            break;
 8004bd4:	e005      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ed      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d126      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf6:	d10d      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004bf8:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c06:	0919      	lsrs	r1, r3, #4
 8004c08:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	4966      	ldr	r1, [pc, #408]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]
 8004c12:	e005      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004c14:	4b64      	ldr	r3, [pc, #400]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c1e:	6113      	str	r3, [r2, #16]
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2e:	495e      	ldr	r1, [pc, #376]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	670b      	str	r3, [r1, #112]	; 0x70
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	75bb      	strb	r3, [r7, #22]
 8004c3a:	e001      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d07e      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	2b28      	cmp	r3, #40	; 0x28
 8004c52:	d867      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004d2b 	.word	0x08004d2b
 8004c60:	08004d25 	.word	0x08004d25
 8004c64:	08004d25 	.word	0x08004d25
 8004c68:	08004d25 	.word	0x08004d25
 8004c6c:	08004d25 	.word	0x08004d25
 8004c70:	08004d25 	.word	0x08004d25
 8004c74:	08004d25 	.word	0x08004d25
 8004c78:	08004d25 	.word	0x08004d25
 8004c7c:	08004d01 	.word	0x08004d01
 8004c80:	08004d25 	.word	0x08004d25
 8004c84:	08004d25 	.word	0x08004d25
 8004c88:	08004d25 	.word	0x08004d25
 8004c8c:	08004d25 	.word	0x08004d25
 8004c90:	08004d25 	.word	0x08004d25
 8004c94:	08004d25 	.word	0x08004d25
 8004c98:	08004d25 	.word	0x08004d25
 8004c9c:	08004d13 	.word	0x08004d13
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004d25 	.word	0x08004d25
 8004ca8:	08004d25 	.word	0x08004d25
 8004cac:	08004d25 	.word	0x08004d25
 8004cb0:	08004d25 	.word	0x08004d25
 8004cb4:	08004d25 	.word	0x08004d25
 8004cb8:	08004d25 	.word	0x08004d25
 8004cbc:	08004d2b 	.word	0x08004d2b
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d25 	.word	0x08004d25
 8004cc8:	08004d25 	.word	0x08004d25
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004d25 	.word	0x08004d25
 8004cd8:	08004d25 	.word	0x08004d25
 8004cdc:	08004d2b 	.word	0x08004d2b
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d25 	.word	0x08004d25
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d2b 	.word	0x08004d2b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fb28 	bl	800535c <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3324      	adds	r3, #36	; 0x24
 8004d16:	2101      	movs	r1, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fbd1 	bl	80054c0 <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d32:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	491a      	ldr	r1, [pc, #104]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	654b      	str	r3, [r1, #84]	; 0x54
 8004d44:	e001      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	2b05      	cmp	r3, #5
 8004d5c:	d820      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004db5 	.word	0x08004db5
 8004d68:	08004d7d 	.word	0x08004d7d
 8004d6c:	08004d8f 	.word	0x08004d8f
 8004d70:	08004db5 	.word	0x08004db5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004db5 	.word	0x08004db5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	2101      	movs	r1, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 faea 	bl	800535c <RCCEx_PLL2_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d8c:	e013      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3324      	adds	r3, #36	; 0x24
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fb93 	bl	80054c0 <RCCEx_PLL3_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	e007      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
 8004dac:	58024800 	.word	0x58024800
 8004db0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004dbc:	4b9f      	ldr	r3, [pc, #636]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	f023 0207 	bic.w	r2, r3, #7
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	499c      	ldr	r1, [pc, #624]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	654b      	str	r3, [r1, #84]	; 0x54
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d039      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d820      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e33 	.word	0x08004e33
 8004df4:	08004e09 	.word	0x08004e09
 8004df8:	08004e1b 	.word	0x08004e1b
 8004dfc:	08004e33 	.word	0x08004e33
 8004e00:	08004e33 	.word	0x08004e33
 8004e04:	08004e33 	.word	0x08004e33
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 faa4 	bl	800535c <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fb4d 	bl	80054c0 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e2a:	e003      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b80      	ldr	r3, [pc, #512]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f023 0207 	bic.w	r2, r3, #7
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	497c      	ldr	r1, [pc, #496]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d04b      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e6a:	d02e      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e70:	d828      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d02a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d822      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e82:	d026      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e88:	d81c      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8e:	d010      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e94:	d816      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01d      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fa58 	bl	800535c <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004eb0:	e012      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3324      	adds	r3, #36	; 0x24
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fb01 	bl	80054c0 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ec2:	e009      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec8:	e006      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ede:	4b57      	ldr	r3, [pc, #348]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	4953      	ldr	r1, [pc, #332]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef2:	e001      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d04b      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f0e:	d02e      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004f10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f14:	d828      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d02a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d822      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f26:	d026      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2c:	d81c      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d010      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d816      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01d      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f42:	d111      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa06 	bl	800535c <RCCEx_PLL2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f54:	e012      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3324      	adds	r3, #36	; 0x24
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 faaf 	bl	80054c0 <RCCEx_PLL3_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f66:	e009      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	e006      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e004      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004f72:	bf00      	nop
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f90:	492a      	ldr	r1, [pc, #168]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	658b      	str	r3, [r1, #88]	; 0x58
 8004f96:	e001      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d04d      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fb2:	d02e      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004fb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fb8:	d828      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbe:	d02a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	d822      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004fc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fca:	d026      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004fcc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fd0:	d81c      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd6:	d010      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fdc:	d816      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01d      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe6:	d111      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f9b4 	bl	800535c <RCCEx_PLL2_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ff8:	e012      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3324      	adds	r3, #36	; 0x24
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fa5d 	bl	80054c0 <RCCEx_PLL3_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800500a:	e009      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
      break;
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005012:	bf00      	nop
 8005014:	e004      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800501e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10c      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005034:	4901      	ldr	r1, [pc, #4]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	658b      	str	r3, [r1, #88]	; 0x58
 800503a:	e003      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800503c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d018      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d10a      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3324      	adds	r3, #36	; 0x24
 800505e:	2102      	movs	r1, #2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fa2d 	bl	80054c0 <RCCEx_PLL3_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005070:	4b8a      	ldr	r3, [pc, #552]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507c:	4987      	ldr	r1, [pc, #540]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800507e:	4313      	orrs	r3, r2
 8005080:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d10a      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3324      	adds	r3, #36	; 0x24
 800509e:	2102      	movs	r1, #2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fa0d 	bl	80054c0 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050b0:	4b7a      	ldr	r3, [pc, #488]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	4977      	ldr	r1, [pc, #476]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d034      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050da:	d01d      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80050dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e0:	d817      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d009      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80050ec:	e011      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f931 	bl	800535c <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050fe:	e00c      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f9da 	bl	80054c0 <RCCEx_PLL3_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005110:	e003      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005120:	4b5e      	ldr	r3, [pc, #376]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512e:	495b      	ldr	r1, [pc, #364]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005130:	4313      	orrs	r3, r2
 8005132:	658b      	str	r3, [r1, #88]	; 0x58
 8005134:	e001      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d033      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005150:	d01c      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005156:	d816      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515c:	d003      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800515e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005162:	d007      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005164:	e00f      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005166:	4b4d      	ldr	r3, [pc, #308]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a4c      	ldr	r2, [pc, #304]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800516c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005172:	e00c      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3324      	adds	r3, #36	; 0x24
 8005178:	2101      	movs	r1, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9a0 	bl	80054c0 <RCCEx_PLL3_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	75fb      	strb	r3, [r7, #23]
      break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800518c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005194:	4b41      	ldr	r3, [pc, #260]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a2:	493e      	ldr	r1, [pc, #248]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	654b      	str	r3, [r1, #84]	; 0x54
 80051a8:	e001      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d029      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d007      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80051c8:	e00f      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ca:	4b34      	ldr	r3, [pc, #208]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	4a33      	ldr	r2, [pc, #204]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051d6:	e00b      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2102      	movs	r1, #2
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f8bc 	bl	800535c <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
      break;
 80051ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	4926      	ldr	r1, [pc, #152]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005204:	4313      	orrs	r3, r2
 8005206:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005208:	e001      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f94d 	bl	80054c0 <RCCEx_PLL3_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d033      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005244:	d017      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524a:	d811      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d013      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005256:	d80b      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800525c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005260:	d106      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	4a0d      	ldr	r2, [pc, #52]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800526e:	e007      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
      break;
 8005274:	e004      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800527e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10c      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005292:	4902      	ldr	r1, [pc, #8]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005294:	4313      	orrs	r3, r2
 8005296:	654b      	str	r3, [r1, #84]	; 0x54
 8005298:	e004      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052bc:	4926      	ldr	r1, [pc, #152]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ce:	4b22      	ldr	r3, [pc, #136]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052da:	491f      	ldr	r1, [pc, #124]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052f6:	6113      	str	r3, [r2, #16]
 80052f8:	4b17      	ldr	r3, [pc, #92]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005302:	4915      	ldr	r1, [pc, #84]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005304:	4313      	orrs	r3, r2
 8005306:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	da08      	bge.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005314:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	490e      	ldr	r1, [pc, #56]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800531e:	4313      	orrs	r3, r2
 8005320:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	4906      	ldr	r1, [pc, #24]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800533e:	4313      	orrs	r3, r2
 8005340:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005342:	7dbb      	ldrb	r3, [r7, #22]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400

0800535c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800536a:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d101      	bne.n	800537a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e099      	b.n	80054ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800537a:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4e      	ldr	r2, [pc, #312]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005386:	f7fc fba7 	bl	8001ad8 <HAL_GetTick>
 800538a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800538c:	e008      	b.n	80053a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800538e:	f7fc fba3 	bl	8001ad8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e086      	b.n	80054ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a0:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053ac:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	493f      	ldr	r1, [pc, #252]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	628b      	str	r3, [r1, #40]	; 0x28
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	025b      	lsls	r3, r3, #9
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053f0:	4931      	ldr	r1, [pc, #196]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	492d      	ldr	r1, [pc, #180]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	f023 0220 	bic.w	r2, r3, #32
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4928      	ldr	r1, [pc, #160]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800541a:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <RCCEx_PLL2_Config+0x160>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	69d2      	ldr	r2, [r2, #28]
 8005432:	00d2      	lsls	r2, r2, #3
 8005434:	4920      	ldr	r1, [pc, #128]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800543a:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005458:	e00f      	b.n	800547a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d106      	bne.n	800546e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005460:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800546a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800546c:	e005      	b.n	800547a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005478:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800547a:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a0e      	ldr	r2, [pc, #56]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005486:	f7fc fb27 	bl	8001ad8 <HAL_GetTick>
 800548a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800548c:	e008      	b.n	80054a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800548e:	f7fc fb23 	bl	8001ad8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e006      	b.n	80054ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	ffff0007 	.word	0xffff0007

080054c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ce:	4b53      	ldr	r3, [pc, #332]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d101      	bne.n	80054de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e099      	b.n	8005612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054de:	4b4f      	ldr	r3, [pc, #316]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4e      	ldr	r2, [pc, #312]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ea:	f7fc faf5 	bl	8001ad8 <HAL_GetTick>
 80054ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054f0:	e008      	b.n	8005504 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054f2:	f7fc faf1 	bl	8001ad8 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e086      	b.n	8005612 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	051b      	lsls	r3, r3, #20
 800551e:	493f      	ldr	r1, [pc, #252]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	628b      	str	r3, [r1, #40]	; 0x28
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	3b01      	subs	r3, #1
 800552a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	025b      	lsls	r3, r3, #9
 8005536:	b29b      	uxth	r3, r3
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	3b01      	subs	r3, #1
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005554:	4931      	ldr	r1, [pc, #196]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4928      	ldr	r1, [pc, #160]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800557e:	4b27      	ldr	r3, [pc, #156]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	4a26      	ldr	r2, [pc, #152]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <RCCEx_PLL3_Config+0x160>)
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	69d2      	ldr	r2, [r2, #28]
 8005596:	00d2      	lsls	r2, r2, #3
 8005598:	4920      	ldr	r1, [pc, #128]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800559e:	4b1f      	ldr	r3, [pc, #124]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	4a1e      	ldr	r2, [pc, #120]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055bc:	e00f      	b.n	80055de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d106      	bne.n	80055d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055d0:	e005      	b.n	80055de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4a11      	ldr	r2, [pc, #68]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ea:	f7fc fa75 	bl	8001ad8 <HAL_GetTick>
 80055ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055f0:	e008      	b.n	8005604 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055f2:	f7fc fa71 	bl	8001ad8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <RCCEx_PLL3_Config+0x15c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	58024400 	.word	0x58024400
 8005620:	ffff0007 	.word	0xffff0007

08005624 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0f1      	b.n	800581a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a78      	ldr	r2, [pc, #480]	; (8005824 <HAL_SPI_Init+0x200>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <HAL_SPI_Init+0x42>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a77      	ldr	r2, [pc, #476]	; (8005828 <HAL_SPI_Init+0x204>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00a      	beq.n	8005666 <HAL_SPI_Init+0x42>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a75      	ldr	r2, [pc, #468]	; (800582c <HAL_SPI_Init+0x208>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d005      	beq.n	8005666 <HAL_SPI_Init+0x42>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d901      	bls.n	8005666 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0d9      	b.n	800581a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fba2 	bl	8005db0 <SPI_GetPacketSize>
 800566c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6c      	ldr	r2, [pc, #432]	; (8005824 <HAL_SPI_Init+0x200>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00c      	beq.n	8005692 <HAL_SPI_Init+0x6e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6a      	ldr	r2, [pc, #424]	; (8005828 <HAL_SPI_Init+0x204>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <HAL_SPI_Init+0x6e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a69      	ldr	r2, [pc, #420]	; (800582c <HAL_SPI_Init+0x208>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Init+0x6e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d811      	bhi.n	80056b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005696:	4a63      	ldr	r2, [pc, #396]	; (8005824 <HAL_SPI_Init+0x200>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a61      	ldr	r2, [pc, #388]	; (8005828 <HAL_SPI_Init+0x204>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_SPI_Init+0x8c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a60      	ldr	r2, [pc, #384]	; (800582c <HAL_SPI_Init+0x208>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d104      	bne.n	80056ba <HAL_SPI_Init+0x96>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d901      	bls.n	80056ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0af      	b.n	800581a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fb ff0a 	bl	80014e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80056f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005700:	d119      	bne.n	8005736 <HAL_SPI_Init+0x112>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800570a:	d103      	bne.n	8005714 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10c      	bne.n	8005736 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005724:	d107      	bne.n	8005736 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005734:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	431a      	orrs	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	ea42 0103 	orr.w	r1, r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	ea42 0103 	orr.w	r1, r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40013000 	.word	0x40013000
 8005828:	40003800 	.word	0x40003800
 800582c:	40003c00 	.word	0x40003c00

08005830 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	; 0x28
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3320      	adds	r3, #32
 8005846:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_SPI_Transmit+0x2a>
 8005856:	2302      	movs	r3, #2
 8005858:	e1d7      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005862:	f7fc f939 	bl	8001ad8 <HAL_GetTick>
 8005866:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d007      	beq.n	8005884 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005874:	2302      	movs	r3, #2
 8005876:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005880:	7efb      	ldrb	r3, [r7, #27]
 8005882:	e1c2      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_SPI_Transmit+0x60>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800589c:	7efb      	ldrb	r3, [r7, #27]
 800589e:	e1b4      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2203      	movs	r2, #3
 80058a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80058f0:	d107      	bne.n	8005902 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	4b96      	ldr	r3, [pc, #600]	; (8005b64 <HAL_SPI_Transmit+0x334>)
 800590a:	4013      	ands	r3, r2
 800590c:	88f9      	ldrh	r1, [r7, #6]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	430b      	orrs	r3, r1
 8005914:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592e:	d107      	bne.n	8005940 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b0f      	cmp	r3, #15
 8005946:	d947      	bls.n	80059d8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005948:	e03f      	b.n	80059ca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d114      	bne.n	8005982 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005980:	e023      	b.n	80059ca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005982:	f7fc f8a9 	bl	8001ad8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d803      	bhi.n	800599a <HAL_SPI_Transmit+0x16a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005998:	d102      	bne.n	80059a0 <HAL_SPI_Transmit+0x170>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d114      	bne.n	80059ca <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f937 	bl	8005c14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e11f      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1b9      	bne.n	800594a <HAL_SPI_Transmit+0x11a>
 80059d6:	e0f2      	b.n	8005bbe <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b07      	cmp	r3, #7
 80059de:	f240 80e7 	bls.w	8005bb0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80059e2:	e05d      	b.n	8005aa0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d132      	bne.n	8005a58 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d918      	bls.n	8005a30 <HAL_SPI_Transmit+0x200>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d014      	beq.n	8005a30 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b02      	subs	r3, #2
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a2e:	e037      	b.n	8005aa0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a56:	e023      	b.n	8005aa0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a58:	f7fc f83e 	bl	8001ad8 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d803      	bhi.n	8005a70 <HAL_SPI_Transmit+0x240>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Transmit+0x246>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d114      	bne.n	8005aa0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8cc 	bl	8005c14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e0b4      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d19b      	bne.n	80059e4 <HAL_SPI_Transmit+0x1b4>
 8005aac:	e087      	b.n	8005bbe <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d155      	bne.n	8005b68 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d918      	bls.n	8005afa <HAL_SPI_Transmit+0x2ca>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d914      	bls.n	8005afa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b04      	subs	r3, #4
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005af8:	e05a      	b.n	8005bb0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d917      	bls.n	8005b36 <HAL_SPI_Transmit+0x306>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d013      	beq.n	8005b36 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	881a      	ldrh	r2, [r3, #0]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b02      	subs	r3, #2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b34:	e03c      	b.n	8005bb0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3320      	adds	r3, #32
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b60:	e026      	b.n	8005bb0 <HAL_SPI_Transmit+0x380>
 8005b62:	bf00      	nop
 8005b64:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b68:	f7fb ffb6 	bl	8001ad8 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d803      	bhi.n	8005b80 <HAL_SPI_Transmit+0x350>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7e:	d102      	bne.n	8005b86 <HAL_SPI_Transmit+0x356>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d114      	bne.n	8005bb0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f844 	bl	8005c14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e02c      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f af78 	bne.w	8005aae <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2108      	movs	r1, #8
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f8c3 	bl	8005d54 <SPI_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bda:	f043 0220 	orr.w	r2, r3, #32
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f815 	bl	8005c14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005c08:	7efb      	ldrb	r3, [r7, #27]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0210 	orr.w	r2, r2, #16
 8005c42:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <SPI_CloseTransfer+0x13c>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005c72:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d014      	beq.n	8005caa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00f      	beq.n	8005caa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0220 	orr.w	r2, r2, #32
 8005ca8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d014      	beq.n	8005ce0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00f      	beq.n	8005ce0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc6:	f043 0204 	orr.w	r2, r3, #4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cde:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00f      	beq.n	8005d0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00f      	beq.n	8005d34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1a:	f043 0208 	orr.w	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	fffffc90 	.word	0xfffffc90

08005d54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005d64:	e010      	b.n	8005d88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d66:	f7fb feb7 	bl	8001ad8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d803      	bhi.n	8005d7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d7c:	d102      	bne.n	8005d84 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e00f      	b.n	8005da8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d0df      	beq.n	8005d66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3307      	adds	r3, #7
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e049      	b.n	8005e8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fb fbf5 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 fb29 	bl	800647c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e05e      	b.n	8005f6a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_TIM_Base_Start_IT+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02c      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d027      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d022      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a26      	ldr	r2, [pc, #152]	; (8005f80 <HAL_TIM_Base_Start_IT+0xec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d01d      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a24      	ldr	r2, [pc, #144]	; (8005f84 <HAL_TIM_Base_Start_IT+0xf0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d018      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a23      	ldr	r2, [pc, #140]	; (8005f88 <HAL_TIM_Base_Start_IT+0xf4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <HAL_TIM_Base_Start_IT+0xf8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00e      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <HAL_TIM_Base_Start_IT+0xfc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d009      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <HAL_TIM_Base_Start_IT+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d004      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x94>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <HAL_TIM_Base_Start_IT+0x104>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d115      	bne.n	8005f54 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_TIM_Base_Start_IT+0x108>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b06      	cmp	r3, #6
 8005f38:	d015      	beq.n	8005f66 <HAL_TIM_Base_Start_IT+0xd2>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d011      	beq.n	8005f66 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	e008      	b.n	8005f66 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40001800 	.word	0x40001800
 8005f90:	40014000 	.word	0x40014000
 8005f94:	4000e000 	.word	0x4000e000
 8005f98:	4000e400 	.word	0x4000e400
 8005f9c:	00010007 	.word	0x00010007

08005fa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	f240 4344 	movw	r3, #1092	; 0x444
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d122      	bne.n	800605a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d11b      	bne.n	800605a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0202 	mvn.w	r2, #2
 800602a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f9fd 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9ef 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa00 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d122      	bne.n	80060ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d11b      	bne.n	80060ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0204 	mvn.w	r2, #4
 800607e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9d3 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 800609a:	e005      	b.n	80060a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9c5 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9d6 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d122      	bne.n	8006102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d11b      	bne.n	8006102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0208 	mvn.w	r2, #8
 80060d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f9a9 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 80060ee:	e005      	b.n	80060fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f99b 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9ac 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d122      	bne.n	8006156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b10      	cmp	r3, #16
 800611c:	d11b      	bne.n	8006156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0210 	mvn.w	r2, #16
 8006126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2208      	movs	r2, #8
 800612c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f97f 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006142:	e005      	b.n	8006150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f971 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f982 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10e      	bne.n	8006182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b01      	cmp	r3, #1
 8006170:	d107      	bne.n	8006182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0201 	mvn.w	r2, #1
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fb f81f 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d10e      	bne.n	80061ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b80      	cmp	r3, #128	; 0x80
 800619c:	d107      	bne.n	80061ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb51 	bl	8006850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb44 	bl	8006864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d10e      	bne.n	8006208 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d107      	bne.n	8006208 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f930 	bl	8006468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d10e      	bne.n	8006234 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b20      	cmp	r3, #32
 8006222:	d107      	bne.n	8006234 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0220 	mvn.w	r2, #32
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fb04 	bl	800683c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIM_ConfigClockSource+0x1c>
 8006254:	2302      	movs	r3, #2
 8006256:	e0dc      	b.n	8006412 <HAL_TIM_ConfigClockSource+0x1d6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006274:	4013      	ands	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800627e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a64      	ldr	r2, [pc, #400]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f000 80a9 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006294:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f200 80ae 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800629c:	4a61      	ldr	r2, [pc, #388]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f000 80a1 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062a4:	4a5f      	ldr	r2, [pc, #380]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f200 80a6 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ac:	4a5e      	ldr	r2, [pc, #376]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f000 8099 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062b4:	4a5c      	ldr	r2, [pc, #368]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f200 809e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c0:	f000 8091 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c8:	f200 8096 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	f000 8089 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d8:	f200 808e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d03e      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0x124>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e6:	f200 8087 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	f000 8086 	beq.w	80063fe <HAL_TIM_ConfigClockSource+0x1c2>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d87f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062f8:	2b70      	cmp	r3, #112	; 0x70
 80062fa:	d01a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0xf6>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d87b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d050      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x16a>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d877      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006308:	2b50      	cmp	r3, #80	; 0x50
 800630a:	d03c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x14a>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d873      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d058      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x18a>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d86f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d86b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d060      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d867      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800632c:	2b10      	cmp	r3, #16
 800632e:	d05a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006330:	e062      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f000 f9bf 	bl	80066c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e04f      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f000 f9a8 	bl	80066c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e03c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 f918 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2150      	movs	r1, #80	; 0x50
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f972 	bl	8006688 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e02c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 f937 	bl	8006626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2160      	movs	r1, #96	; 0x60
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f962 	bl	8006688 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e01c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 f8f8 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f952 	bl	8006688 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 f949 	bl	8006688 <TIM_ITRx_SetConfig>
      break;
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80063fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	ffceff88 	.word	0xffceff88
 8006420:	00100040 	.word	0x00100040
 8006424:	00100030 	.word	0x00100030
 8006428:	00100020 	.word	0x00100020

0800642c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a44      	ldr	r2, [pc, #272]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649a:	d00f      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a41      	ldr	r2, [pc, #260]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a40      	ldr	r2, [pc, #256]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3f      	ldr	r2, [pc, #252]	; (80065ac <TIM_Base_SetConfig+0x130>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <TIM_Base_SetConfig+0x134>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d027      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d023      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a30      	ldr	r2, [pc, #192]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01f      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <TIM_Base_SetConfig+0x130>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d017      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <TIM_Base_SetConfig+0x134>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <TIM_Base_SetConfig+0x138>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <TIM_Base_SetConfig+0x13c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2a      	ldr	r2, [pc, #168]	; (80065bc <TIM_Base_SetConfig+0x140>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <TIM_Base_SetConfig+0x144>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_Base_SetConfig+0xaa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a28      	ldr	r2, [pc, #160]	; (80065c4 <TIM_Base_SetConfig+0x148>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d108      	bne.n	8006538 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00f      	beq.n	8006584 <TIM_Base_SetConfig+0x108>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <TIM_Base_SetConfig+0x134>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00b      	beq.n	8006584 <TIM_Base_SetConfig+0x108>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <TIM_Base_SetConfig+0x138>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <TIM_Base_SetConfig+0x108>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <TIM_Base_SetConfig+0x13c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_Base_SetConfig+0x108>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <TIM_Base_SetConfig+0x140>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	615a      	str	r2, [r3, #20]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40010000 	.word	0x40010000
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00
 80065b0:	40010400 	.word	0x40010400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800
 80065c0:	4000e000 	.word	0x4000e000
 80065c4:	4000e400 	.word	0x4000e400

080065c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 030a 	bic.w	r3, r3, #10
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0210 	bic.w	r2, r3, #16
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <TIM_ITRx_SetConfig+0x38>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f043 0307 	orr.w	r3, r3, #7
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	609a      	str	r2, [r3, #8]
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	ffcfff8f 	.word	0xffcfff8f

080066c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	021a      	lsls	r2, r3, #8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006718:	2302      	movs	r3, #2
 800671a:	e077      	b.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a35      	ldr	r2, [pc, #212]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a34      	ldr	r2, [pc, #208]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d108      	bne.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a25      	ldr	r2, [pc, #148]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d02c      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d027      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01d      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1a      	ldr	r2, [pc, #104]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40001800 	.word	0x40001800
 8006830:	40014000 	.word	0x40014000
 8006834:	4000e000 	.word	0x4000e000
 8006838:	4000e400 	.word	0x4000e400

0800683c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	f107 001c 	add.w	r0, r7, #28
 8006886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	2b01      	cmp	r3, #1
 800688e:	d120      	bne.n	80068d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <USB_CoreInit+0xd4>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fc04 	bl	80080d4 <USB_CoreReset>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
 80068d0:	e01a      	b.n	8006908 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fbf8 	bl	80080d4 <USB_CoreReset>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
 80068fa:	e005      	b.n	8006908 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	2b01      	cmp	r3, #1
 800690c:	d116      	bne.n	800693c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006912:	b29a      	uxth	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <USB_CoreInit+0xd8>)
 800691e:	4313      	orrs	r3, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f043 0206 	orr.w	r2, r3, #6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f043 0220 	orr.w	r2, r3, #32
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006948:	b004      	add	sp, #16
 800694a:	4770      	bx	lr
 800694c:	ffbdffbf 	.word	0xffbdffbf
 8006950:	03ee0000 	.word	0x03ee0000

08006954 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d165      	bne.n	8006a34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4a41      	ldr	r2, [pc, #260]	; (8006a70 <USB_SetTurnaroundTime+0x11c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d906      	bls.n	800697e <USB_SetTurnaroundTime+0x2a>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a40      	ldr	r2, [pc, #256]	; (8006a74 <USB_SetTurnaroundTime+0x120>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d202      	bcs.n	800697e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006978:	230f      	movs	r3, #15
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e062      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a3c      	ldr	r2, [pc, #240]	; (8006a74 <USB_SetTurnaroundTime+0x120>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d306      	bcc.n	8006994 <USB_SetTurnaroundTime+0x40>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4a3b      	ldr	r2, [pc, #236]	; (8006a78 <USB_SetTurnaroundTime+0x124>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d202      	bcs.n	8006994 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800698e:	230e      	movs	r3, #14
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e057      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a38      	ldr	r2, [pc, #224]	; (8006a78 <USB_SetTurnaroundTime+0x124>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d306      	bcc.n	80069aa <USB_SetTurnaroundTime+0x56>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4a37      	ldr	r2, [pc, #220]	; (8006a7c <USB_SetTurnaroundTime+0x128>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d202      	bcs.n	80069aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069a4:	230d      	movs	r3, #13
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e04c      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4a33      	ldr	r2, [pc, #204]	; (8006a7c <USB_SetTurnaroundTime+0x128>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d306      	bcc.n	80069c0 <USB_SetTurnaroundTime+0x6c>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <USB_SetTurnaroundTime+0x12c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d802      	bhi.n	80069c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069ba:	230c      	movs	r3, #12
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e041      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <USB_SetTurnaroundTime+0x12c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d906      	bls.n	80069d6 <USB_SetTurnaroundTime+0x82>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a2e      	ldr	r2, [pc, #184]	; (8006a84 <USB_SetTurnaroundTime+0x130>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d802      	bhi.n	80069d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069d0:	230b      	movs	r3, #11
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e036      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <USB_SetTurnaroundTime+0x130>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d906      	bls.n	80069ec <USB_SetTurnaroundTime+0x98>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <USB_SetTurnaroundTime+0x134>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d802      	bhi.n	80069ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069e6:	230a      	movs	r3, #10
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e02b      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a26      	ldr	r2, [pc, #152]	; (8006a88 <USB_SetTurnaroundTime+0x134>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d906      	bls.n	8006a02 <USB_SetTurnaroundTime+0xae>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <USB_SetTurnaroundTime+0x138>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d202      	bcs.n	8006a02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069fc:	2309      	movs	r3, #9
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e020      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4a21      	ldr	r2, [pc, #132]	; (8006a8c <USB_SetTurnaroundTime+0x138>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d306      	bcc.n	8006a18 <USB_SetTurnaroundTime+0xc4>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <USB_SetTurnaroundTime+0x13c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d802      	bhi.n	8006a18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a12:	2308      	movs	r3, #8
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e015      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <USB_SetTurnaroundTime+0x13c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d906      	bls.n	8006a2e <USB_SetTurnaroundTime+0xda>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <USB_SetTurnaroundTime+0x140>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d202      	bcs.n	8006a2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a28:	2307      	movs	r3, #7
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e00a      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a2e:	2306      	movs	r3, #6
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e007      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a3a:	2309      	movs	r3, #9
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e001      	b.n	8006a44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a40:	2309      	movs	r3, #9
 8006a42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	00d8acbf 	.word	0x00d8acbf
 8006a74:	00e4e1c0 	.word	0x00e4e1c0
 8006a78:	00f42400 	.word	0x00f42400
 8006a7c:	01067380 	.word	0x01067380
 8006a80:	011a499f 	.word	0x011a499f
 8006a84:	01312cff 	.word	0x01312cff
 8006a88:	014ca43f 	.word	0x014ca43f
 8006a8c:	016e3600 	.word	0x016e3600
 8006a90:	01a6ab1f 	.word	0x01a6ab1f
 8006a94:	01e84800 	.word	0x01e84800

08006a98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d115      	bne.n	8006b2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f7fa fff0 	bl	8001af0 <HAL_Delay>
      ms++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fa4b 	bl	8007fb2 <USB_GetMode>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d01e      	beq.n	8006b60 <USB_SetCurrentMode+0x84>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b31      	cmp	r3, #49	; 0x31
 8006b26:	d9f0      	bls.n	8006b0a <USB_SetCurrentMode+0x2e>
 8006b28:	e01a      	b.n	8006b60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d115      	bne.n	8006b5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f7fa ffd7 	bl	8001af0 <HAL_Delay>
      ms++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fa32 	bl	8007fb2 <USB_GetMode>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <USB_SetCurrentMode+0x84>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b31      	cmp	r3, #49	; 0x31
 8006b58:	d9f0      	bls.n	8006b3c <USB_SetCurrentMode+0x60>
 8006b5a:	e001      	b.n	8006b60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e005      	b.n	8006b6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b32      	cmp	r3, #50	; 0x32
 8006b64:	d101      	bne.n	8006b6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b74:	b084      	sub	sp, #16
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e009      	b.n	8006ba8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3340      	adds	r3, #64	; 0x40
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b0e      	cmp	r3, #14
 8006bac:	d9f2      	bls.n	8006b94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11c      	bne.n	8006bee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e005      	b.n	8006bfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	461a      	mov	r2, r3
 8006c16:	680b      	ldr	r3, [r1, #0]
 8006c18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10c      	bne.n	8006c3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c26:	2100      	movs	r1, #0
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f965 	bl	8006ef8 <USB_SetDevSpeed>
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c30:	2101      	movs	r1, #1
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f960 	bl	8006ef8 <USB_SetDevSpeed>
 8006c38:	e003      	b.n	8006c42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c3a:	2103      	movs	r1, #3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f95b 	bl	8006ef8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c42:	2110      	movs	r1, #16
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8f3 	bl	8006e30 <USB_FlushTxFifo>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f91f 	bl	8006e98 <USB_FlushRxFifo>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	461a      	mov	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	e043      	b.n	8006d16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca4:	d118      	bne.n	8006cd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e013      	b.n	8006cea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e008      	b.n	8006cea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3301      	adds	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d3b7      	bcc.n	8006c8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e043      	b.n	8006dac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3a:	d118      	bne.n	8006d6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e013      	b.n	8006d80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e008      	b.n	8006d80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3b7      	bcc.n	8006d24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <USB_DevInit+0x2b4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <USB_DevInit+0x2b8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e24:	b004      	add	sp, #16
 8006e26:	4770      	bx	lr
 8006e28:	803c3800 	.word	0x803c3800
 8006e2c:	40000004 	.word	0x40000004

08006e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e01b      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	daf2      	bge.n	8006e3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	019b      	lsls	r3, r3, #6
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e006      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d0f0      	beq.n	8006e68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	00030d40 	.word	0x00030d40

08006e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e018      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	daf2      	bge.n	8006ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e006      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d0f0      	beq.n	8006ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b087      	sub	sp, #28
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 0306 	and.w	r3, r3, #6
 8006f42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d102      	bne.n	8006f50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
 8006f4e:	e00a      	b.n	8006f66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d002      	beq.n	8006f5c <USB_GetDevSpeed+0x32>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d102      	bne.n	8006f62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	75fb      	strb	r3, [r7, #23]
 8006f60:	e001      	b.n	8006f66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f62:	230f      	movs	r3, #15
 8006f64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d139      	bne.n	8007004 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	68f9      	ldr	r1, [r7, #12]
 8006faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d153      	bne.n	8007070 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fe4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	059b      	lsls	r3, r3, #22
 8006fea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fec:	431a      	orrs	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	0159      	lsls	r1, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	440b      	add	r3, r1
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4b20      	ldr	r3, [pc, #128]	; (8007080 <USB_ActivateEndpoint+0x10c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
 8007002:	e035      	b.n	8007070 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	2101      	movs	r1, #1
 8007016:	fa01 f303 	lsl.w	r3, r1, r3
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	68f9      	ldr	r1, [r7, #12]
 800701e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007022:	4313      	orrs	r3, r2
 8007024:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d119      	bne.n	8007070 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	791b      	ldrb	r3, [r3, #4]
 8007056:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007058:	430b      	orrs	r3, r1
 800705a:	431a      	orrs	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	0159      	lsls	r1, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	440b      	add	r3, r1
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	4619      	mov	r1, r3
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <USB_ActivateEndpoint+0x10c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	10008000 	.word	0x10008000

08007084 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d161      	bne.n	8007164 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b6:	d11f      	bne.n	80070f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	b29b      	uxth	r3, r3
 8007110:	43db      	mvns	r3, r3
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007118:	4013      	ands	r3, r2
 800711a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	2101      	movs	r1, #1
 800712e:	fa01 f303 	lsl.w	r3, r1, r3
 8007132:	b29b      	uxth	r3, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713c:	4013      	ands	r3, r2
 800713e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	0159      	lsls	r1, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	440b      	add	r3, r1
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	4619      	mov	r1, r3
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <USB_DeactivateEndpoint+0x1b0>)
 800715e:	4013      	ands	r3, r2
 8007160:	600b      	str	r3, [r1, #0]
 8007162:	e060      	b.n	8007226 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800717a:	d11f      	bne.n	80071bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800719a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	2101      	movs	r1, #1
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	43db      	mvns	r3, r3
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071dc:	4013      	ands	r3, r2
 80071de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	43db      	mvns	r3, r3
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007200:	4013      	ands	r3, r2
 8007202:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0159      	lsls	r1, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	440b      	add	r3, r1
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	4619      	mov	r1, r3
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <USB_DeactivateEndpoint+0x1b4>)
 8007222:	4013      	ands	r3, r2
 8007224:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	ec337800 	.word	0xec337800
 8007238:	eff37800 	.word	0xeff37800

0800723c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	f040 8163 	bne.w	8007524 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d132      	bne.n	80072cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	0159      	lsls	r1, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	440b      	add	r3, r1
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	4619      	mov	r1, r3
 8007282:	4ba5      	ldr	r3, [pc, #660]	; (8007518 <USB_EPStartXfer+0x2dc>)
 8007284:	4013      	ands	r3, r2
 8007286:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	0159      	lsls	r1, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	440b      	add	r3, r1
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	4619      	mov	r1, r3
 80072c4:	4b95      	ldr	r3, [pc, #596]	; (800751c <USB_EPStartXfer+0x2e0>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	610b      	str	r3, [r1, #16]
 80072ca:	e074      	b.n	80073b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	0159      	lsls	r1, r3, #5
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	4619      	mov	r1, r3
 80072e8:	4b8c      	ldr	r3, [pc, #560]	; (800751c <USB_EPStartXfer+0x2e0>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	0159      	lsls	r1, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	440b      	add	r3, r1
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	4619      	mov	r1, r3
 800730a:	4b83      	ldr	r3, [pc, #524]	; (8007518 <USB_EPStartXfer+0x2dc>)
 800730c:	4013      	ands	r3, r2
 800730e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6999      	ldr	r1, [r3, #24]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	440b      	add	r3, r1
 8007328:	1e59      	subs	r1, r3, #1
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007332:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007334:	4b7a      	ldr	r3, [pc, #488]	; (8007520 <USB_EPStartXfer+0x2e4>)
 8007336:	400b      	ands	r3, r1
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	0148      	lsls	r0, r1, #5
 800733c:	69f9      	ldr	r1, [r7, #28]
 800733e:	4401      	add	r1, r0
 8007340:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007344:	4313      	orrs	r3, r2
 8007346:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	0148      	lsls	r0, r1, #5
 8007362:	69f9      	ldr	r1, [r7, #28]
 8007364:	4401      	add	r1, r0
 8007366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800736a:	4313      	orrs	r3, r2
 800736c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	791b      	ldrb	r3, [r3, #4]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d11f      	bne.n	80073b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007394:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d14b      	bne.n	8007454 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	461a      	mov	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	791b      	ldrb	r3, [r3, #4]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d128      	bne.n	8007432 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d110      	bne.n	8007412 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e00f      	b.n	8007432 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	0151      	lsls	r1, r2, #5
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	440a      	add	r2, r1
 8007428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e137      	b.n	80076c4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007472:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d015      	beq.n	80074a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 811f 	beq.w	80076c4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	2101      	movs	r1, #1
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	69f9      	ldr	r1, [r7, #28]
 800749e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a2:	4313      	orrs	r3, r2
 80074a4:	634b      	str	r3, [r1, #52]	; 0x34
 80074a6:	e10d      	b.n	80076c4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e00f      	b.n	80074fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6919      	ldr	r1, [r3, #16]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	b298      	uxth	r0, r3
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	4603      	mov	r3, r0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 faea 	bl	8007ae8 <USB_WritePacket>
 8007514:	e0d6      	b.n	80076c4 <USB_EPStartXfer+0x488>
 8007516:	bf00      	nop
 8007518:	e007ffff 	.word	0xe007ffff
 800751c:	fff80000 	.word	0xfff80000
 8007520:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	0159      	lsls	r1, r3, #5
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	440b      	add	r3, r1
 800753a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753e:	4619      	mov	r1, r3
 8007540:	4b63      	ldr	r3, [pc, #396]	; (80076d0 <USB_EPStartXfer+0x494>)
 8007542:	4013      	ands	r3, r2
 8007544:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	0159      	lsls	r1, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	440b      	add	r3, r1
 800755c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007560:	4619      	mov	r1, r3
 8007562:	4b5c      	ldr	r3, [pc, #368]	; (80076d4 <USB_EPStartXfer+0x498>)
 8007564:	4013      	ands	r3, r2
 8007566:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d123      	bne.n	80075b8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007586:	69b9      	ldr	r1, [r7, #24]
 8007588:	0148      	lsls	r0, r1, #5
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	4401      	add	r1, r0
 800758e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007592:	4313      	orrs	r3, r2
 8007594:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b4:	6113      	str	r3, [r2, #16]
 80075b6:	e037      	b.n	8007628 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	1e5a      	subs	r2, r3, #1
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	8afa      	ldrh	r2, [r7, #22]
 80075d4:	fb03 f202 	mul.w	r2, r3, r2
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	8afb      	ldrh	r3, [r7, #22]
 80075ec:	04d9      	lsls	r1, r3, #19
 80075ee:	4b3a      	ldr	r3, [pc, #232]	; (80076d8 <USB_EPStartXfer+0x49c>)
 80075f0:	400b      	ands	r3, r1
 80075f2:	69b9      	ldr	r1, [r7, #24]
 80075f4:	0148      	lsls	r0, r1, #5
 80075f6:	69f9      	ldr	r1, [r7, #28]
 80075f8:	4401      	add	r1, r0
 80075fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075fe:	4313      	orrs	r3, r2
 8007600:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007618:	69b9      	ldr	r1, [r7, #24]
 800761a:	0148      	lsls	r0, r1, #5
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	4401      	add	r1, r0
 8007620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007624:	4313      	orrs	r3, r2
 8007626:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10d      	bne.n	800764a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6919      	ldr	r1, [r3, #16]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	460a      	mov	r2, r1
 8007648:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d128      	bne.n	80076a4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d110      	bne.n	8007684 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e00f      	b.n	80076a4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	fff80000 	.word	0xfff80000
 80076d4:	e007ffff 	.word	0xe007ffff
 80076d8:	1ff80000 	.word	0x1ff80000

080076dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 80ce 	bne.w	800789a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d132      	bne.n	800776c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	0159      	lsls	r1, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	440b      	add	r3, r1
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	4619      	mov	r1, r3
 8007722:	4b9a      	ldr	r3, [pc, #616]	; (800798c <USB_EP0StartXfer+0x2b0>)
 8007724:	4013      	ands	r3, r2
 8007726:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	0159      	lsls	r1, r3, #5
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	440b      	add	r3, r1
 800775e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007762:	4619      	mov	r1, r3
 8007764:	4b8a      	ldr	r3, [pc, #552]	; (8007990 <USB_EP0StartXfer+0x2b4>)
 8007766:	4013      	ands	r3, r2
 8007768:	610b      	str	r3, [r1, #16]
 800776a:	e04e      	b.n	800780a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	0159      	lsls	r1, r3, #5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	440b      	add	r3, r1
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	4619      	mov	r1, r3
 8007788:	4b81      	ldr	r3, [pc, #516]	; (8007990 <USB_EP0StartXfer+0x2b4>)
 800778a:	4013      	ands	r3, r2
 800778c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	0159      	lsls	r1, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	440b      	add	r3, r1
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	4619      	mov	r1, r3
 80077aa:	4b78      	ldr	r3, [pc, #480]	; (800798c <USB_EP0StartXfer+0x2b0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d903      	bls.n	80077c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077fa:	6939      	ldr	r1, [r7, #16]
 80077fc:	0148      	lsls	r0, r1, #5
 80077fe:	6979      	ldr	r1, [r7, #20]
 8007800:	4401      	add	r1, r0
 8007802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007806:	4313      	orrs	r3, r2
 8007808:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d11e      	bne.n	800784e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d009      	beq.n	800782c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	461a      	mov	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	440a      	add	r2, r1
 8007842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	e097      	b.n	800797e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	440a      	add	r2, r1
 8007864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800786c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 8083 	beq.w	800797e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	2101      	movs	r1, #1
 800788a:	fa01 f303 	lsl.w	r3, r1, r3
 800788e:	6979      	ldr	r1, [r7, #20]
 8007890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007894:	4313      	orrs	r3, r2
 8007896:	634b      	str	r3, [r1, #52]	; 0x34
 8007898:	e071      	b.n	800797e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	0159      	lsls	r1, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	440b      	add	r3, r1
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	4619      	mov	r1, r3
 80078b6:	4b36      	ldr	r3, [pc, #216]	; (8007990 <USB_EP0StartXfer+0x2b4>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	0159      	lsls	r1, r3, #5
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	440b      	add	r3, r1
 80078d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d6:	4619      	mov	r1, r3
 80078d8:	4b2c      	ldr	r3, [pc, #176]	; (800798c <USB_EP0StartXfer+0x2b0>)
 80078da:	4013      	ands	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	440a      	add	r2, r1
 800790c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792c:	6939      	ldr	r1, [r7, #16]
 800792e:	0148      	lsls	r0, r1, #5
 8007930:	6979      	ldr	r1, [r7, #20]
 8007932:	4401      	add	r1, r0
 8007934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007938:	4313      	orrs	r3, r2
 800793a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d10d      	bne.n	800795e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6919      	ldr	r1, [r3, #16]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	460a      	mov	r2, r1
 800795c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	440a      	add	r2, r1
 8007974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800797c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	e007ffff 	.word	0xe007ffff
 8007990:	fff80000 	.word	0xfff80000

08007994 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d14a      	bne.n	8007a48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ca:	f040 8086 	bne.w	8007ada <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	7812      	ldrb	r2, [r2, #0]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d902      	bls.n	8007a2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
          break;
 8007a2a:	e056      	b.n	8007ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a44:	d0e7      	beq.n	8007a16 <USB_EPStopXfer+0x82>
 8007a46:	e048      	b.n	8007ada <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a60:	d13b      	bne.n	8007ada <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d902      	bls.n	8007ac0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
          break;
 8007abe:	e00c      	b.n	8007ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad8:	d0e7      	beq.n	8007aaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b089      	sub	sp, #36	; 0x24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4611      	mov	r1, r2
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	71fb      	strb	r3, [r7, #7]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d123      	bne.n	8007b56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b0e:	88bb      	ldrh	r3, [r7, #4]
 8007b10:	3303      	adds	r3, #3
 8007b12:	089b      	lsrs	r3, r3, #2
 8007b14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	e018      	b.n	8007b4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	031a      	lsls	r2, r3, #12
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b28:	461a      	mov	r2, r3
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	3301      	adds	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	3301      	adds	r3, #1
 8007b46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d3e2      	bcc.n	8007b1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3724      	adds	r7, #36	; 0x24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b08b      	sub	sp, #44	; 0x2c
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	e014      	b.n	8007bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	3301      	adds	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3e6      	bcc.n	8007b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bc2:	8bfb      	ldrh	r3, [r7, #30]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01e      	beq.n	8007c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f107 0310 	add.w	r3, r7, #16
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	701a      	strb	r2, [r3, #0]
      i++;
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007bfa:	8bfb      	ldrh	r3, [r7, #30]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c00:	8bfb      	ldrh	r3, [r7, #30]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1ea      	bne.n	8007bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	372c      	adds	r7, #44	; 0x2c
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d12c      	bne.n	8007c8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	db12      	blt.n	8007c68 <USB_EPSetStall+0x54>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00f      	beq.n	8007c68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	0151      	lsls	r1, r2, #5
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	440a      	add	r2, r1
 8007c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	e02b      	b.n	8007ce2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db12      	blt.n	8007cc2 <USB_EPSetStall+0xae>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d128      	bne.n	8007d5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	791b      	ldrb	r3, [r3, #4]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d003      	beq.n	8007d3c <USB_EPClearStall+0x4c>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	791b      	ldrb	r3, [r3, #4]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d138      	bne.n	8007dae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e027      	b.n	8007dae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	791b      	ldrb	r3, [r3, #4]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d003      	beq.n	8007d8e <USB_EPClearStall+0x9e>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	791b      	ldrb	r3, [r3, #4]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d10f      	bne.n	8007dae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007dde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007df0:	68f9      	ldr	r1, [r7, #12]
 8007df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e36:	f023 0302 	bic.w	r3, r3, #2
 8007e3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	b29b      	uxth	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4013      	ands	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f48:	68bb      	ldr	r3, [r7, #8]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 030f 	and.w	r3, r3, #15
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	01db      	lsls	r3, r3, #7
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fea:	4619      	mov	r1, r3
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <USB_ActivateSetup+0x44>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	fffff800 	.word	0xfffff800

08008018 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	460b      	mov	r3, r1
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	333c      	adds	r3, #60	; 0x3c
 800802e:	3304      	adds	r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <USB_EP0_OutStart+0xb8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d90a      	bls.n	8008052 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804c:	d101      	bne.n	8008052 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e037      	b.n	80080c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008058:	461a      	mov	r2, r3
 800805a:	2300      	movs	r3, #0
 800805c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800806c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	f043 0318 	orr.w	r3, r3, #24
 8008084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008094:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008098:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10f      	bne.n	80080c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80080be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	4f54300a 	.word	0x4f54300a

080080d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a13      	ldr	r2, [pc, #76]	; (8008138 <USB_CoreReset+0x64>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d901      	bls.n	80080f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e01b      	b.n	800812a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	daf2      	bge.n	80080e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f043 0201 	orr.w	r2, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <USB_CoreReset+0x64>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e006      	b.n	800812a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b01      	cmp	r3, #1
 8008126:	d0f0      	beq.n	800810a <USB_CoreReset+0x36>

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	00030d40 	.word	0x00030d40

0800813c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008148:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800814c:	f002 fcd0 	bl	800aaf0 <USBD_static_malloc>
 8008150:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	32b0      	adds	r2, #176	; 0xb0
 8008162:	2100      	movs	r1, #0
 8008164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008168:	2302      	movs	r3, #2
 800816a:	e0d4      	b.n	8008316 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800816c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008170:	2100      	movs	r1, #0
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f002 fd3c 	bl	800abf0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32b0      	adds	r2, #176	; 0xb0
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	32b0      	adds	r2, #176	; 0xb0
 8008192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7c1b      	ldrb	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d138      	bne.n	8008216 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081a4:	4b5e      	ldr	r3, [pc, #376]	; (8008320 <USBD_CDC_Init+0x1e4>)
 80081a6:	7819      	ldrb	r1, [r3, #0]
 80081a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ac:	2202      	movs	r2, #2
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f002 fb7b 	bl	800a8aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081b4:	4b5a      	ldr	r3, [pc, #360]	; (8008320 <USBD_CDC_Init+0x1e4>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 020f 	and.w	r2, r3, #15
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	2201      	movs	r2, #1
 80081cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081ce:	4b55      	ldr	r3, [pc, #340]	; (8008324 <USBD_CDC_Init+0x1e8>)
 80081d0:	7819      	ldrb	r1, [r3, #0]
 80081d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d6:	2202      	movs	r2, #2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 fb66 	bl	800a8aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081de:	4b51      	ldr	r3, [pc, #324]	; (8008324 <USBD_CDC_Init+0x1e8>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f6:	2201      	movs	r2, #1
 80081f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081fa:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <USBD_CDC_Init+0x1ec>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 020f 	and.w	r2, r3, #15
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	3326      	adds	r3, #38	; 0x26
 8008210:	2210      	movs	r2, #16
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e035      	b.n	8008282 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008216:	4b42      	ldr	r3, [pc, #264]	; (8008320 <USBD_CDC_Init+0x1e4>)
 8008218:	7819      	ldrb	r1, [r3, #0]
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	2202      	movs	r2, #2
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f002 fb43 	bl	800a8aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008224:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <USBD_CDC_Init+0x1e4>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	3324      	adds	r3, #36	; 0x24
 800823a:	2201      	movs	r2, #1
 800823c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <USBD_CDC_Init+0x1e8>)
 8008240:	7819      	ldrb	r1, [r3, #0]
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	2202      	movs	r2, #2
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f002 fb2f 	bl	800a8aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800824c:	4b35      	ldr	r3, [pc, #212]	; (8008324 <USBD_CDC_Init+0x1e8>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008264:	2201      	movs	r2, #1
 8008266:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008268:	4b2f      	ldr	r3, [pc, #188]	; (8008328 <USBD_CDC_Init+0x1ec>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 020f 	and.w	r2, r3, #15
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	3326      	adds	r3, #38	; 0x26
 800827e:	2210      	movs	r2, #16
 8008280:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <USBD_CDC_Init+0x1ec>)
 8008284:	7819      	ldrb	r1, [r3, #0]
 8008286:	2308      	movs	r3, #8
 8008288:	2203      	movs	r2, #3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f002 fb0d 	bl	800a8aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <USBD_CDC_Init+0x1ec>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 020f 	and.w	r2, r3, #15
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	3324      	adds	r3, #36	; 0x24
 80082a6:	2201      	movs	r2, #1
 80082a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	33b0      	adds	r3, #176	; 0xb0
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80082e0:	2302      	movs	r3, #2
 80082e2:	e018      	b.n	8008316 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7c1b      	ldrb	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <USBD_CDC_Init+0x1e8>)
 80082ee:	7819      	ldrb	r1, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f002 fbc4 	bl	800aa88 <USBD_LL_PrepareReceive>
 8008300:	e008      	b.n	8008314 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008302:	4b08      	ldr	r3, [pc, #32]	; (8008324 <USBD_CDC_Init+0x1e8>)
 8008304:	7819      	ldrb	r1, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f002 fbba 	bl	800aa88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	240000b7 	.word	0x240000b7
 8008324:	240000b8 	.word	0x240000b8
 8008328:	240000b9 	.word	0x240000b9

0800832c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008338:	4b3a      	ldr	r3, [pc, #232]	; (8008424 <USBD_CDC_DeInit+0xf8>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f002 fad9 	bl	800a8f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008344:	4b37      	ldr	r3, [pc, #220]	; (8008424 <USBD_CDC_DeInit+0xf8>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 020f 	and.w	r2, r3, #15
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	3324      	adds	r3, #36	; 0x24
 800835a:	2200      	movs	r2, #0
 800835c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800835e:	4b32      	ldr	r3, [pc, #200]	; (8008428 <USBD_CDC_DeInit+0xfc>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 fac6 	bl	800a8f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800836a:	4b2f      	ldr	r3, [pc, #188]	; (8008428 <USBD_CDC_DeInit+0xfc>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 020f 	and.w	r2, r3, #15
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008382:	2200      	movs	r2, #0
 8008384:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008386:	4b29      	ldr	r3, [pc, #164]	; (800842c <USBD_CDC_DeInit+0x100>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f002 fab2 	bl	800a8f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008392:	4b26      	ldr	r3, [pc, #152]	; (800842c <USBD_CDC_DeInit+0x100>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	f003 020f 	and.w	r2, r3, #15
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	3324      	adds	r3, #36	; 0x24
 80083a8:	2200      	movs	r2, #0
 80083aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80083ac:	4b1f      	ldr	r3, [pc, #124]	; (800842c <USBD_CDC_DeInit+0x100>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	f003 020f 	and.w	r2, r3, #15
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	3326      	adds	r3, #38	; 0x26
 80083c2:	2200      	movs	r2, #0
 80083c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32b0      	adds	r2, #176	; 0xb0
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01f      	beq.n	8008418 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	33b0      	adds	r3, #176	; 0xb0
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32b0      	adds	r2, #176	; 0xb0
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 fb86 	bl	800ab0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	32b0      	adds	r2, #176	; 0xb0
 800840a:	2100      	movs	r1, #0
 800840c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	240000b7 	.word	0x240000b7
 8008428:	240000b8 	.word	0x240000b8
 800842c:	240000b9 	.word	0x240000b9

08008430 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	32b0      	adds	r2, #176	; 0xb0
 8008444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008448:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	e0bf      	b.n	80085e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008468:	2b00      	cmp	r3, #0
 800846a:	d050      	beq.n	800850e <USBD_CDC_Setup+0xde>
 800846c:	2b20      	cmp	r3, #32
 800846e:	f040 80af 	bne.w	80085d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d03a      	beq.n	80084f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b25b      	sxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	da1b      	bge.n	80084bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	33b0      	adds	r3, #176	; 0xb0
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800849a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	88d2      	ldrh	r2, [r2, #6]
 80084a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	bf28      	it	cs
 80084aa:	2307      	movcs	r3, #7
 80084ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	89fa      	ldrh	r2, [r7, #14]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fd89 	bl	8009fcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80084ba:	e090      	b.n	80085de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	785a      	ldrb	r2, [r3, #1]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b3f      	cmp	r3, #63	; 0x3f
 80084cc:	d803      	bhi.n	80084d6 <USBD_CDC_Setup+0xa6>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	e000      	b.n	80084d8 <USBD_CDC_Setup+0xa8>
 80084d6:	2240      	movs	r2, #64	; 0x40
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084de:	6939      	ldr	r1, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80084e6:	461a      	mov	r2, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 fd9b 	bl	800a024 <USBD_CtlPrepareRx>
      break;
 80084ee:	e076      	b.n	80085de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	33b0      	adds	r3, #176	; 0xb0
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	7850      	ldrb	r0, [r2, #1]
 8008506:	2200      	movs	r2, #0
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	4798      	blx	r3
      break;
 800850c:	e067      	b.n	80085de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b0b      	cmp	r3, #11
 8008514:	d851      	bhi.n	80085ba <USBD_CDC_Setup+0x18a>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USBD_CDC_Setup+0xec>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	0800854d 	.word	0x0800854d
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085bb 	.word	0x080085bb
 8008528:	080085bb 	.word	0x080085bb
 800852c:	080085bb 	.word	0x080085bb
 8008530:	080085bb 	.word	0x080085bb
 8008534:	080085bb 	.word	0x080085bb
 8008538:	080085bb 	.word	0x080085bb
 800853c:	080085bb 	.word	0x080085bb
 8008540:	080085bb 	.word	0x080085bb
 8008544:	08008577 	.word	0x08008577
 8008548:	080085a1 	.word	0x080085a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b03      	cmp	r3, #3
 8008556:	d107      	bne.n	8008568 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008558:	f107 030a 	add.w	r3, r7, #10
 800855c:	2202      	movs	r2, #2
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fd33 	bl	8009fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008566:	e032      	b.n	80085ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 fcbd 	bl	8009eea <USBD_CtlError>
            ret = USBD_FAIL;
 8008570:	2303      	movs	r3, #3
 8008572:	75fb      	strb	r3, [r7, #23]
          break;
 8008574:	e02b      	b.n	80085ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b03      	cmp	r3, #3
 8008580:	d107      	bne.n	8008592 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008582:	f107 030d 	add.w	r3, r7, #13
 8008586:	2201      	movs	r2, #1
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 fd1e 	bl	8009fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008590:	e01d      	b.n	80085ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fca8 	bl	8009eea <USBD_CtlError>
            ret = USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	75fb      	strb	r3, [r7, #23]
          break;
 800859e:	e016      	b.n	80085ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d00f      	beq.n	80085cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fc9b 	bl	8009eea <USBD_CtlError>
            ret = USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085b8:	e008      	b.n	80085cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fc94 	bl	8009eea <USBD_CtlError>
          ret = USBD_FAIL;
 80085c2:	2303      	movs	r3, #3
 80085c4:	75fb      	strb	r3, [r7, #23]
          break;
 80085c6:	e002      	b.n	80085ce <USBD_CDC_Setup+0x19e>
          break;
 80085c8:	bf00      	nop
 80085ca:	e008      	b.n	80085de <USBD_CDC_Setup+0x1ae>
          break;
 80085cc:	bf00      	nop
      }
      break;
 80085ce:	e006      	b.n	80085de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fc89 	bl	8009eea <USBD_CtlError>
      ret = USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	75fb      	strb	r3, [r7, #23]
      break;
 80085dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32b0      	adds	r2, #176	; 0xb0
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	e065      	b.n	80086de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	32b0      	adds	r2, #176	; 0xb0
 800861c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008620:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	3318      	adds	r3, #24
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d02f      	beq.n	800869c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	3318      	adds	r3, #24
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 010f 	and.w	r1, r3, #15
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	460b      	mov	r3, r1
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	440b      	add	r3, r1
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4403      	add	r3, r0
 8008664:	3348      	adds	r3, #72	; 0x48
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	fbb2 f1f3 	udiv	r1, r2, r3
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008672:	2b00      	cmp	r3, #0
 8008674:	d112      	bne.n	800869c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	3318      	adds	r3, #24
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800868e:	78f9      	ldrb	r1, [r7, #3]
 8008690:	2300      	movs	r3, #0
 8008692:	2200      	movs	r2, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f002 f9d6 	bl	800aa46 <USBD_LL_Transmit>
 800869a:	e01f      	b.n	80086dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	33b0      	adds	r3, #176	; 0xb0
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d010      	beq.n	80086dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	33b0      	adds	r3, #176	; 0xb0
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086d8:	78fa      	ldrb	r2, [r7, #3]
 80086da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	32b0      	adds	r2, #176	; 0xb0
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	32b0      	adds	r2, #176	; 0xb0
 800870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	e01a      	b.n	800874e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f002 f9d4 	bl	800aaca <USBD_LL_GetRxDataSize>
 8008722:	4602      	mov	r2, r0
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	33b0      	adds	r3, #176	; 0xb0
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008748:	4611      	mov	r1, r2
 800874a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	32b0      	adds	r2, #176	; 0xb0
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008774:	2303      	movs	r3, #3
 8008776:	e025      	b.n	80087c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	33b0      	adds	r3, #176	; 0xb0
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01a      	beq.n	80087c2 <USBD_CDC_EP0_RxReady+0x6c>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d015      	beq.n	80087c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	33b0      	adds	r3, #176	; 0xb0
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80087ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087b6:	b292      	uxth	r2, r2
 80087b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087d4:	2182      	movs	r1, #130	; 0x82
 80087d6:	4818      	ldr	r0, [pc, #96]	; (8008838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087d8:	f000 fd4f 	bl	800927a <USBD_GetEpDesc>
 80087dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087de:	2101      	movs	r1, #1
 80087e0:	4815      	ldr	r0, [pc, #84]	; (8008838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087e2:	f000 fd4a 	bl	800927a <USBD_GetEpDesc>
 80087e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087e8:	2181      	movs	r1, #129	; 0x81
 80087ea:	4813      	ldr	r0, [pc, #76]	; (8008838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087ec:	f000 fd45 	bl	800927a <USBD_GetEpDesc>
 80087f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2210      	movs	r2, #16
 80087fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2200      	movs	r2, #0
 8008808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800880c:	711a      	strb	r2, [r3, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008820:	711a      	strb	r2, [r3, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2243      	movs	r2, #67	; 0x43
 800882a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	24000074 	.word	0x24000074

0800883c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008844:	2182      	movs	r1, #130	; 0x82
 8008846:	4818      	ldr	r0, [pc, #96]	; (80088a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008848:	f000 fd17 	bl	800927a <USBD_GetEpDesc>
 800884c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800884e:	2101      	movs	r1, #1
 8008850:	4815      	ldr	r0, [pc, #84]	; (80088a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008852:	f000 fd12 	bl	800927a <USBD_GetEpDesc>
 8008856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008858:	2181      	movs	r1, #129	; 0x81
 800885a:	4813      	ldr	r0, [pc, #76]	; (80088a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800885c:	f000 fd0d 	bl	800927a <USBD_GetEpDesc>
 8008860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2210      	movs	r2, #16
 800886c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2200      	movs	r2, #0
 8008878:	711a      	strb	r2, [r3, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f042 0202 	orr.w	r2, r2, #2
 8008880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	711a      	strb	r2, [r3, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f042 0202 	orr.w	r2, r2, #2
 8008894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2243      	movs	r2, #67	; 0x43
 800889a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	24000074 	.word	0x24000074

080088ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088b4:	2182      	movs	r1, #130	; 0x82
 80088b6:	4818      	ldr	r0, [pc, #96]	; (8008918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088b8:	f000 fcdf 	bl	800927a <USBD_GetEpDesc>
 80088bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088be:	2101      	movs	r1, #1
 80088c0:	4815      	ldr	r0, [pc, #84]	; (8008918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088c2:	f000 fcda 	bl	800927a <USBD_GetEpDesc>
 80088c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088c8:	2181      	movs	r1, #129	; 0x81
 80088ca:	4813      	ldr	r0, [pc, #76]	; (8008918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088cc:	f000 fcd5 	bl	800927a <USBD_GetEpDesc>
 80088d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2210      	movs	r2, #16
 80088dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ec:	711a      	strb	r2, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008900:	711a      	strb	r2, [r3, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2243      	movs	r2, #67	; 0x43
 800890a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	24000074 	.word	0x24000074

0800891c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	220a      	movs	r2, #10
 8008928:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800892a:	4b03      	ldr	r3, [pc, #12]	; (8008938 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	24000030 	.word	0x24000030

0800893c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800894c:	2303      	movs	r3, #3
 800894e:	e009      	b.n	8008964 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	33b0      	adds	r3, #176	; 0xb0
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	32b0      	adds	r2, #176	; 0xb0
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008992:	2303      	movs	r3, #3
 8008994:	e008      	b.n	80089a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32b0      	adds	r2, #176	; 0xb0
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e004      	b.n	80089e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	32b0      	adds	r2, #176	; 0xb0
 8008a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	32b0      	adds	r2, #176	; 0xb0
 8008a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e025      	b.n	8008a6e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d11f      	bne.n	8008a6c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a34:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <USBD_CDC_TransmitPacket+0x88>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4403      	add	r3, r0
 8008a4e:	3318      	adds	r3, #24
 8008a50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <USBD_CDC_TransmitPacket+0x88>)
 8008a54:	7819      	ldrb	r1, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 ffef 	bl	800aa46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	240000b7 	.word	0x240000b7

08008a7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32b0      	adds	r2, #176	; 0xb0
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	32b0      	adds	r2, #176	; 0xb0
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e018      	b.n	8008adc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7c1b      	ldrb	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <USBD_CDC_ReceivePacket+0x68>)
 8008ab4:	7819      	ldrb	r1, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 ffe1 	bl	800aa88 <USBD_LL_PrepareReceive>
 8008ac6:	e008      	b.n	8008ada <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ac8:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <USBD_CDC_ReceivePacket+0x68>)
 8008aca:	7819      	ldrb	r1, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ad2:	2340      	movs	r3, #64	; 0x40
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ffd7 	bl	800aa88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	240000b8 	.word	0x240000b8

08008ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e01f      	b.n	8008b40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f001 fe4b 	bl	800a7d0 <USBD_LL_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e025      	b.n	8008bac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	32ae      	adds	r2, #174	; 0xae
 8008b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00f      	beq.n	8008b9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	; 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	f107 020e 	add.w	r2, r7, #14
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	4602      	mov	r2, r0
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 fe59 	bl	800a874 <USBD_LL_Start>
 8008bc2:	4603      	mov	r3, r0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	4611      	mov	r1, r2
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	4798      	blx	r3
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 f908 	bl	8009e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c74:	461a      	mov	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d01a      	beq.n	8008cc0 <USBD_LL_SetupStage+0x72>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d822      	bhi.n	8008cd4 <USBD_LL_SetupStage+0x86>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <USBD_LL_SetupStage+0x4a>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00a      	beq.n	8008cac <USBD_LL_SetupStage+0x5e>
 8008c96:	e01d      	b.n	8008cd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb5f 	bl	8009364 <USBD_StdDevReq>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8008caa:	e020      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fbc7 	bl	8009448 <USBD_StdItfReq>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cbe:	e016      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc29 	bl	8009520 <USBD_StdEPReq>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	e00c      	b.n	8008cee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fe26 	bl	800a934 <USBD_LL_StallEP>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
      break;
 8008cec:	bf00      	nop
  }

  return ret;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	460b      	mov	r3, r1
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d16e      	bne.n	8008dee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f040 8098 	bne.w	8008e54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d913      	bls.n	8008d58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	1ad2      	subs	r2, r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	4293      	cmp	r3, r2
 8008d48:	bf28      	it	cs
 8008d4a:	4613      	movcs	r3, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f001 f984 	bl	800a05e <USBD_CtlContinueRx>
 8008d56:	e07d      	b.n	8008e54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d014      	beq.n	8008d90 <USBD_LL_DataOutStage+0x98>
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d81d      	bhi.n	8008da6 <USBD_LL_DataOutStage+0xae>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <USBD_LL_DataOutStage+0x7c>
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d003      	beq.n	8008d7a <USBD_LL_DataOutStage+0x82>
 8008d72:	e018      	b.n	8008da6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75bb      	strb	r3, [r7, #22]
            break;
 8008d78:	e018      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fa5e 	bl	8009246 <USBD_CoreFindIF>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008d8e:	e00d      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 fa60 	bl	8009260 <USBD_CoreFindEP>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75bb      	strb	r3, [r7, #22]
            break;
 8008da4:	e002      	b.n	8008dac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75bb      	strb	r3, [r7, #22]
            break;
 8008daa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dac:	7dbb      	ldrb	r3, [r7, #22]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d119      	bne.n	8008de6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d113      	bne.n	8008de6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dbe:	7dba      	ldrb	r2, [r7, #22]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	32ae      	adds	r2, #174	; 0xae
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008dce:	7dba      	ldrb	r2, [r7, #22]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dd6:	7dba      	ldrb	r2, [r7, #22]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	32ae      	adds	r2, #174	; 0xae
 8008ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f001 f94a 	bl	800a080 <USBD_CtlSendStatus>
 8008dec:	e032      	b.n	8008e54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008dee:	7afb      	ldrb	r3, [r7, #11]
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fa31 	bl	8009260 <USBD_CoreFindEP>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e02:	7dbb      	ldrb	r3, [r7, #22]
 8008e04:	2bff      	cmp	r3, #255	; 0xff
 8008e06:	d025      	beq.n	8008e54 <USBD_LL_DataOutStage+0x15c>
 8008e08:	7dbb      	ldrb	r3, [r7, #22]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d122      	bne.n	8008e54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d117      	bne.n	8008e4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e1a:	7dba      	ldrb	r2, [r7, #22]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	32ae      	adds	r2, #174	; 0xae
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00f      	beq.n	8008e4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e2a:	7dba      	ldrb	r2, [r7, #22]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e32:	7dba      	ldrb	r2, [r7, #22]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	32ae      	adds	r2, #174	; 0xae
 8008e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	7afa      	ldrb	r2, [r7, #11]
 8008e40:	4611      	mov	r1, r2
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	e000      	b.n	8008e56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	460b      	mov	r3, r1
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d16f      	bne.n	8008f52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3314      	adds	r3, #20
 8008e76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d15a      	bne.n	8008f38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d914      	bls.n	8008eb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f001 f8ac 	bl	800a002 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f001 fde9 	bl	800aa88 <USBD_LL_PrepareReceive>
 8008eb6:	e03f      	b.n	8008f38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d11c      	bne.n	8008efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d316      	bcc.n	8008efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20f      	bcs.n	8008efe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f001 f88d 	bl	800a002 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f001 fdc6 	bl	800aa88 <USBD_LL_PrepareReceive>
 8008efc:	e01c      	b.n	8008f38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d10f      	bne.n	8008f2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f2a:	2180      	movs	r1, #128	; 0x80
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f001 fd01 	bl	800a934 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 f8b7 	bl	800a0a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d03a      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff fe42 	bl	8008bcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f50:	e032      	b.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f97f 	bl	8009260 <USBD_CoreFindEP>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2bff      	cmp	r3, #255	; 0xff
 8008f6a:	d025      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d122      	bne.n	8008fb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d11c      	bne.n	8008fb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f7e:	7dfa      	ldrb	r2, [r7, #23]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	32ae      	adds	r2, #174	; 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d014      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f8e:	7dfa      	ldrb	r2, [r7, #23]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f96:	7dfa      	ldrb	r2, [r7, #23]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	32ae      	adds	r2, #174	; 0xae
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	7afa      	ldrb	r2, [r7, #11]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fae:	7dbb      	ldrb	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
 8008fb6:	e000      	b.n	8008fba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d014      	beq.n	8009028 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6852      	ldr	r2, [r2, #4]
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	4611      	mov	r1, r2
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009024:	2303      	movs	r3, #3
 8009026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fc3b 	bl	800a8aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2240      	movs	r2, #64	; 0x40
 8009040:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	2200      	movs	r2, #0
 8009048:	2180      	movs	r1, #128	; 0x80
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fc2d 	bl	800a8aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2240      	movs	r2, #64	; 0x40
 800905a:	621a      	str	r2, [r3, #32]

  return ret;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009094:	b2da      	uxtb	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2204      	movs	r2, #4
 80090a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d106      	bne.n	80090d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d110      	bne.n	8009118 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	32ae      	adds	r2, #174	; 0xae
 8009138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e01c      	b.n	800917e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b03      	cmp	r3, #3
 800914e:	d115      	bne.n	800917c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	; 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	32ae      	adds	r2, #174	; 0xae
 800916e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	4611      	mov	r1, r2
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	32ae      	adds	r2, #174	; 0xae
 800919c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e01c      	b.n	80091e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d115      	bne.n	80091e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32ae      	adds	r2, #174	; 0xae
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	32ae      	adds	r2, #174	; 0xae
 80091d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	4611      	mov	r1, r2
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6852      	ldr	r2, [r2, #4]
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	4611      	mov	r1, r2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009252:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800926c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	429a      	cmp	r2, r3
 80092a0:	d920      	bls.n	80092e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092aa:	e013      	b.n	80092d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092ac:	f107 030a 	add.w	r3, r7, #10
 80092b0:	4619      	mov	r1, r3
 80092b2:	6978      	ldr	r0, [r7, #20]
 80092b4:	f000 f81b 	bl	80092ee <USBD_GetNextDesc>
 80092b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d108      	bne.n	80092d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	789b      	ldrb	r3, [r3, #2]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d008      	beq.n	80092e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	885b      	ldrh	r3, [r3, #2]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	897b      	ldrh	r3, [r7, #10]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d8e5      	bhi.n	80092ac <USBD_GetEpDesc+0x32>
 80092e0:	e000      	b.n	80092e4 <USBD_GetEpDesc+0x6a>
          break;
 80092e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092e4:	693b      	ldr	r3, [r7, #16]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b085      	sub	sp, #20
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	881a      	ldrh	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	4413      	add	r3, r2
 8009308:	b29a      	uxth	r2, r3
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4413      	add	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800931a:	68fb      	ldr	r3, [r7, #12]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	3301      	adds	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009346:	8a3b      	ldrh	r3, [r7, #16]
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	b21a      	sxth	r2, r3
 800934c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009350:	4313      	orrs	r3, r2
 8009352:	b21b      	sxth	r3, r3
 8009354:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009356:	89fb      	ldrh	r3, [r7, #14]
}
 8009358:	4618      	mov	r0, r3
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d005      	beq.n	800938a <USBD_StdDevReq+0x26>
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d857      	bhi.n	8009432 <USBD_StdDevReq+0xce>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <USBD_StdDevReq+0x42>
 8009386:	2b20      	cmp	r3, #32
 8009388:	d153      	bne.n	8009432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	32ae      	adds	r2, #174	; 0xae
 8009394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
      break;
 80093a4:	e04a      	b.n	800943c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	2b09      	cmp	r3, #9
 80093ac:	d83b      	bhi.n	8009426 <USBD_StdDevReq+0xc2>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <USBD_StdDevReq+0x50>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	08009409 	.word	0x08009409
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	08009427 	.word	0x08009427
 80093c0:	08009413 	.word	0x08009413
 80093c4:	08009427 	.word	0x08009427
 80093c8:	080093e7 	.word	0x080093e7
 80093cc:	080093dd 	.word	0x080093dd
 80093d0:	08009427 	.word	0x08009427
 80093d4:	080093ff 	.word	0x080093ff
 80093d8:	080093f1 	.word	0x080093f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa3c 	bl	800985c <USBD_GetDescriptor>
          break;
 80093e4:	e024      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fba1 	bl	8009b30 <USBD_SetAddress>
          break;
 80093ee:	e01f      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fbe0 	bl	8009bb8 <USBD_SetConfig>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]
          break;
 80093fc:	e018      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc83 	bl	8009d0c <USBD_GetConfig>
          break;
 8009406:	e013      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fcb4 	bl	8009d78 <USBD_GetStatus>
          break;
 8009410:	e00e      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fce3 	bl	8009de0 <USBD_SetFeature>
          break;
 800941a:	e009      	b.n	8009430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fd07 	bl	8009e32 <USBD_ClrFeature>
          break;
 8009424:	e004      	b.n	8009430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fd5e 	bl	8009eea <USBD_CtlError>
          break;
 800942e:	bf00      	nop
      }
      break;
 8009430:	e004      	b.n	800943c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fd58 	bl	8009eea <USBD_CtlError>
      break;
 800943a:	bf00      	nop
  }

  return ret;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800945e:	2b40      	cmp	r3, #64	; 0x40
 8009460:	d005      	beq.n	800946e <USBD_StdItfReq+0x26>
 8009462:	2b40      	cmp	r3, #64	; 0x40
 8009464:	d852      	bhi.n	800950c <USBD_StdItfReq+0xc4>
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <USBD_StdItfReq+0x26>
 800946a:	2b20      	cmp	r3, #32
 800946c:	d14e      	bne.n	800950c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009474:	b2db      	uxtb	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	2b02      	cmp	r3, #2
 800947a:	d840      	bhi.n	80094fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	889b      	ldrh	r3, [r3, #4]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b01      	cmp	r3, #1
 8009484:	d836      	bhi.n	80094f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	889b      	ldrh	r3, [r3, #4]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff fed9 	bl	8009246 <USBD_CoreFindIF>
 8009494:	4603      	mov	r3, r0
 8009496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2bff      	cmp	r3, #255	; 0xff
 800949c:	d01d      	beq.n	80094da <USBD_StdItfReq+0x92>
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11a      	bne.n	80094da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094a4:	7bba      	ldrb	r2, [r7, #14]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32ae      	adds	r2, #174	; 0xae
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00f      	beq.n	80094d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094b4:	7bba      	ldrb	r2, [r7, #14]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094bc:	7bba      	ldrb	r2, [r7, #14]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32ae      	adds	r2, #174	; 0xae
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094d2:	e004      	b.n	80094de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094d8:	e001      	b.n	80094de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d110      	bne.n	8009508 <USBD_StdItfReq+0xc0>
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10d      	bne.n	8009508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fdc7 	bl	800a080 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094f2:	e009      	b.n	8009508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fcf7 	bl	8009eea <USBD_CtlError>
          break;
 80094fc:	e004      	b.n	8009508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fcf2 	bl	8009eea <USBD_CtlError>
          break;
 8009506:	e000      	b.n	800950a <USBD_StdItfReq+0xc2>
          break;
 8009508:	bf00      	nop
      }
      break;
 800950a:	e004      	b.n	8009516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fceb 	bl	8009eea <USBD_CtlError>
      break;
 8009514:	bf00      	nop
  }

  return ret;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	889b      	ldrh	r3, [r3, #4]
 8009532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800953c:	2b40      	cmp	r3, #64	; 0x40
 800953e:	d007      	beq.n	8009550 <USBD_StdEPReq+0x30>
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	f200 817f 	bhi.w	8009844 <USBD_StdEPReq+0x324>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d02a      	beq.n	80095a0 <USBD_StdEPReq+0x80>
 800954a:	2b20      	cmp	r3, #32
 800954c:	f040 817a 	bne.w	8009844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff fe83 	bl	8009260 <USBD_CoreFindEP>
 800955a:	4603      	mov	r3, r0
 800955c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800955e:	7b7b      	ldrb	r3, [r7, #13]
 8009560:	2bff      	cmp	r3, #255	; 0xff
 8009562:	f000 8174 	beq.w	800984e <USBD_StdEPReq+0x32e>
 8009566:	7b7b      	ldrb	r3, [r7, #13]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f040 8170 	bne.w	800984e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800956e:	7b7a      	ldrb	r2, [r7, #13]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009576:	7b7a      	ldrb	r2, [r7, #13]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	32ae      	adds	r2, #174	; 0xae
 800957c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 8163 	beq.w	800984e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009588:	7b7a      	ldrb	r2, [r7, #13]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	32ae      	adds	r2, #174	; 0xae
 800958e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800959e:	e156      	b.n	800984e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d008      	beq.n	80095ba <USBD_StdEPReq+0x9a>
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	f300 8145 	bgt.w	8009838 <USBD_StdEPReq+0x318>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 809b 	beq.w	80096ea <USBD_StdEPReq+0x1ca>
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d03c      	beq.n	8009632 <USBD_StdEPReq+0x112>
 80095b8:	e13e      	b.n	8009838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d002      	beq.n	80095cc <USBD_StdEPReq+0xac>
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d016      	beq.n	80095f8 <USBD_StdEPReq+0xd8>
 80095ca:	e02c      	b.n	8009626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00d      	beq.n	80095ee <USBD_StdEPReq+0xce>
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	2b80      	cmp	r3, #128	; 0x80
 80095d6:	d00a      	beq.n	80095ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 f9a9 	bl	800a934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095e2:	2180      	movs	r1, #128	; 0x80
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 f9a5 	bl	800a934 <USBD_LL_StallEP>
 80095ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095ec:	e020      	b.n	8009630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fc7a 	bl	8009eea <USBD_CtlError>
              break;
 80095f6:	e01b      	b.n	8009630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10e      	bne.n	800961e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <USBD_StdEPReq+0xfe>
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d008      	beq.n	800961e <USBD_StdEPReq+0xfe>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	88db      	ldrh	r3, [r3, #6]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f98b 	bl	800a934 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fd2e 	bl	800a080 <USBD_CtlSendStatus>

              break;
 8009624:	e004      	b.n	8009630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fc5e 	bl	8009eea <USBD_CtlError>
              break;
 800962e:	bf00      	nop
          }
          break;
 8009630:	e107      	b.n	8009842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d002      	beq.n	8009644 <USBD_StdEPReq+0x124>
 800963e:	2b03      	cmp	r3, #3
 8009640:	d016      	beq.n	8009670 <USBD_StdEPReq+0x150>
 8009642:	e04b      	b.n	80096dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <USBD_StdEPReq+0x146>
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b80      	cmp	r3, #128	; 0x80
 800964e:	d00a      	beq.n	8009666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f001 f96d 	bl	800a934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 f969 	bl	800a934 <USBD_LL_StallEP>
 8009662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009664:	e040      	b.n	80096e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fc3e 	bl	8009eea <USBD_CtlError>
              break;
 800966e:	e03b      	b.n	80096e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	885b      	ldrh	r3, [r3, #2]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d136      	bne.n	80096e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 f973 	bl	800a972 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fcf7 	bl	800a080 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fde2 	bl	8009260 <USBD_CoreFindEP>
 800969c:	4603      	mov	r3, r0
 800969e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096a0:	7b7b      	ldrb	r3, [r7, #13]
 80096a2:	2bff      	cmp	r3, #255	; 0xff
 80096a4:	d01f      	beq.n	80096e6 <USBD_StdEPReq+0x1c6>
 80096a6:	7b7b      	ldrb	r3, [r7, #13]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d11c      	bne.n	80096e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096ac:	7b7a      	ldrb	r2, [r7, #13]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096b4:	7b7a      	ldrb	r2, [r7, #13]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	32ae      	adds	r2, #174	; 0xae
 80096ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096c4:	7b7a      	ldrb	r2, [r7, #13]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32ae      	adds	r2, #174	; 0xae
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096da:	e004      	b.n	80096e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fc03 	bl	8009eea <USBD_CtlError>
              break;
 80096e4:	e000      	b.n	80096e8 <USBD_StdEPReq+0x1c8>
              break;
 80096e6:	bf00      	nop
          }
          break;
 80096e8:	e0ab      	b.n	8009842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d002      	beq.n	80096fc <USBD_StdEPReq+0x1dc>
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d032      	beq.n	8009760 <USBD_StdEPReq+0x240>
 80096fa:	e097      	b.n	800982c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <USBD_StdEPReq+0x1f2>
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b80      	cmp	r3, #128	; 0x80
 8009706:	d004      	beq.n	8009712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fbed 	bl	8009eea <USBD_CtlError>
                break;
 8009710:	e091      	b.n	8009836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009716:	2b00      	cmp	r3, #0
 8009718:	da0b      	bge.n	8009732 <USBD_StdEPReq+0x212>
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	3310      	adds	r3, #16
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	3304      	adds	r3, #4
 8009730:	e00b      	b.n	800974a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	4413      	add	r3, r2
 8009748:	3304      	adds	r3, #4
 800974a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2202      	movs	r2, #2
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc37 	bl	8009fcc <USBD_CtlSendData>
              break;
 800975e:	e06a      	b.n	8009836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da11      	bge.n	800978c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	f003 020f 	and.w	r2, r3, #15
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	3324      	adds	r3, #36	; 0x24
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d117      	bne.n	80097b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fbb0 	bl	8009eea <USBD_CtlError>
                  break;
 800978a:	e054      	b.n	8009836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800978c:	7bbb      	ldrb	r3, [r7, #14]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb9d 	bl	8009eea <USBD_CtlError>
                  break;
 80097b0:	e041      	b.n	8009836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da0b      	bge.n	80097d2 <USBD_StdEPReq+0x2b2>
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	3310      	adds	r3, #16
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	3304      	adds	r3, #4
 80097d0:	e00b      	b.n	80097ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	4413      	add	r3, r2
 80097e8:	3304      	adds	r3, #4
 80097ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <USBD_StdEPReq+0x2d8>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d103      	bne.n	8009800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e00e      	b.n	800981e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f8d3 	bl	800a9b0 <USBD_LL_IsStallEP>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e002      	b.n	800981e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2202      	movs	r2, #2
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fbd1 	bl	8009fcc <USBD_CtlSendData>
              break;
 800982a:	e004      	b.n	8009836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fb5b 	bl	8009eea <USBD_CtlError>
              break;
 8009834:	bf00      	nop
          }
          break;
 8009836:	e004      	b.n	8009842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fb55 	bl	8009eea <USBD_CtlError>
          break;
 8009840:	bf00      	nop
      }
      break;
 8009842:	e005      	b.n	8009850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fb4f 	bl	8009eea <USBD_CtlError>
      break;
 800984c:	e000      	b.n	8009850 <USBD_StdEPReq+0x330>
      break;
 800984e:	bf00      	nop
  }

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	2b06      	cmp	r3, #6
 800987e:	f200 8128 	bhi.w	8009ad2 <USBD_GetDescriptor+0x276>
 8009882:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <USBD_GetDescriptor+0x2c>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	080098a5 	.word	0x080098a5
 800988c:	080098bd 	.word	0x080098bd
 8009890:	080098fd 	.word	0x080098fd
 8009894:	08009ad3 	.word	0x08009ad3
 8009898:	08009ad3 	.word	0x08009ad3
 800989c:	08009a73 	.word	0x08009a73
 80098a0:	08009a9f 	.word	0x08009a9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
      break;
 80098ba:	e112      	b.n	8009ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	7c1b      	ldrb	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10d      	bne.n	80098e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f107 0208 	add.w	r2, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	2202      	movs	r2, #2
 80098dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098de:	e100      	b.n	8009ae2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	f107 0208 	add.w	r2, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
      break;
 80098fa:	e0f2      	b.n	8009ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b05      	cmp	r3, #5
 8009904:	f200 80ac 	bhi.w	8009a60 <USBD_GetDescriptor+0x204>
 8009908:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <USBD_GetDescriptor+0xb4>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	08009929 	.word	0x08009929
 8009914:	0800995d 	.word	0x0800995d
 8009918:	08009991 	.word	0x08009991
 800991c:	080099c5 	.word	0x080099c5
 8009920:	080099f9 	.word	0x080099f9
 8009924:	08009a2d 	.word	0x08009a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7c12      	ldrb	r2, [r2, #16]
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994a:	e091      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 facb 	bl	8009eea <USBD_CtlError>
            err++;
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	3301      	adds	r3, #1
 8009958:	72fb      	strb	r3, [r7, #11]
          break;
 800995a:	e089      	b.n	8009a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800997e:	e077      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fab1 	bl	8009eea <USBD_CtlError>
            err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
          break;
 800998e:	e06f      	b.n	8009a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	7c12      	ldrb	r2, [r2, #16]
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b2:	e05d      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa97 	bl	8009eea <USBD_CtlError>
            err++;
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	3301      	adds	r3, #1
 80099c0:	72fb      	strb	r3, [r7, #11]
          break;
 80099c2:	e055      	b.n	8009a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	7c12      	ldrb	r2, [r2, #16]
 80099dc:	f107 0108 	add.w	r1, r7, #8
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099e6:	e043      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa7d 	bl	8009eea <USBD_CtlError>
            err++;
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	3301      	adds	r3, #1
 80099f4:	72fb      	strb	r3, [r7, #11]
          break;
 80099f6:	e03b      	b.n	8009a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00b      	beq.n	8009a1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	7c12      	ldrb	r2, [r2, #16]
 8009a10:	f107 0108 	add.w	r1, r7, #8
 8009a14:	4610      	mov	r0, r2
 8009a16:	4798      	blx	r3
 8009a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1a:	e029      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa63 	bl	8009eea <USBD_CtlError>
            err++;
 8009a24:	7afb      	ldrb	r3, [r7, #11]
 8009a26:	3301      	adds	r3, #1
 8009a28:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2a:	e021      	b.n	8009a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	7c12      	ldrb	r2, [r2, #16]
 8009a44:	f107 0108 	add.w	r1, r7, #8
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4798      	blx	r3
 8009a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4e:	e00f      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa49 	bl	8009eea <USBD_CtlError>
            err++;
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5e:	e007      	b.n	8009a70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa41 	bl	8009eea <USBD_CtlError>
          err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e037      	b.n	8009ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7c1b      	ldrb	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	f107 0208 	add.w	r2, r7, #8
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3
 8009a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a8c:	e029      	b.n	8009ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fa2a 	bl	8009eea <USBD_CtlError>
        err++;
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a9c:	e021      	b.n	8009ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7c1b      	ldrb	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10d      	bne.n	8009ac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aae:	f107 0208 	add.w	r2, r7, #8
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4798      	blx	r3
 8009ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	2207      	movs	r2, #7
 8009abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ac0:	e00f      	b.n	8009ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa10 	bl	8009eea <USBD_CtlError>
        err++;
 8009aca:	7afb      	ldrb	r3, [r7, #11]
 8009acc:	3301      	adds	r3, #1
 8009ace:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad0:	e007      	b.n	8009ae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fa08 	bl	8009eea <USBD_CtlError>
      err++;
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	3301      	adds	r3, #1
 8009ade:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae0:	bf00      	nop
  }

  if (err != 0U)
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d11e      	bne.n	8009b26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	88db      	ldrh	r3, [r3, #6]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009af0:	893b      	ldrh	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00e      	beq.n	8009b14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	88da      	ldrh	r2, [r3, #6]
 8009afa:	893b      	ldrh	r3, [r7, #8]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bf28      	it	cs
 8009b00:	4613      	movcs	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b06:	893b      	ldrh	r3, [r7, #8]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa5d 	bl	8009fcc <USBD_CtlSendData>
 8009b12:	e009      	b.n	8009b28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f9e7 	bl	8009eea <USBD_CtlError>
 8009b1c:	e004      	b.n	8009b28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 faae 	bl	800a080 <USBD_CtlSendStatus>
 8009b24:	e000      	b.n	8009b28 <USBD_GetDescriptor+0x2cc>
    return;
 8009b26:	bf00      	nop
  }
}
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop

08009b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	889b      	ldrh	r3, [r3, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d131      	bne.n	8009ba6 <USBD_SetAddress+0x76>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	88db      	ldrh	r3, [r3, #6]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d12d      	bne.n	8009ba6 <USBD_SetAddress+0x76>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b50:	d829      	bhi.n	8009ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	885b      	ldrh	r3, [r3, #2]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d104      	bne.n	8009b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9bc 	bl	8009eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b72:	e01d      	b.n	8009bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7bfa      	ldrb	r2, [r7, #15]
 8009b78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 ff41 	bl	800aa08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa7a 	bl	800a080 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9a:	e009      	b.n	8009bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba4:	e004      	b.n	8009bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f99e 	bl	8009eea <USBD_CtlError>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	4b4e      	ldr	r3, [pc, #312]	; (8009d08 <USBD_SetConfig+0x150>)
 8009bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bd0:	4b4d      	ldr	r3, [pc, #308]	; (8009d08 <USBD_SetConfig+0x150>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d905      	bls.n	8009be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f985 	bl	8009eea <USBD_CtlError>
    return USBD_FAIL;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e08c      	b.n	8009cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d002      	beq.n	8009bf6 <USBD_SetConfig+0x3e>
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d029      	beq.n	8009c48 <USBD_SetConfig+0x90>
 8009bf4:	e075      	b.n	8009ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bf6:	4b44      	ldr	r3, [pc, #272]	; (8009d08 <USBD_SetConfig+0x150>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d020      	beq.n	8009c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bfe:	4b42      	ldr	r3, [pc, #264]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c08:	4b3f      	ldr	r3, [pc, #252]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fe ffe7 	bl	8008be2 <USBD_SetClassConfig>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d008      	beq.n	8009c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f962 	bl	8009eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2202      	movs	r2, #2
 8009c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c2e:	e065      	b.n	8009cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa25 	bl	800a080 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2203      	movs	r2, #3
 8009c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c3e:	e05d      	b.n	8009cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fa1d 	bl	800a080 <USBD_CtlSendStatus>
      break;
 8009c46:	e059      	b.n	8009cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c48:	4b2f      	ldr	r3, [pc, #188]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d112      	bne.n	8009c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c58:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe ffd6 	bl	8008c1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa06 	bl	800a080 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c74:	e042      	b.n	8009cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c76:	4b24      	ldr	r3, [pc, #144]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d02a      	beq.n	8009cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7fe ffc4 	bl	8008c1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c92:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <USBD_SetConfig+0x150>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7fe ff9d 	bl	8008be2 <USBD_SetClassConfig>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00f      	beq.n	8009cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f918 	bl	8009eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7fe ffa9 	bl	8008c1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cd0:	e014      	b.n	8009cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9d4 	bl	800a080 <USBD_CtlSendStatus>
      break;
 8009cd8:	e010      	b.n	8009cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f9d0 	bl	800a080 <USBD_CtlSendStatus>
      break;
 8009ce0:	e00c      	b.n	8009cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f900 	bl	8009eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <USBD_SetConfig+0x150>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fe ff92 	bl	8008c1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cfa:	bf00      	nop
  }

  return ret;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	24022b94 	.word	0x24022b94

08009d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88db      	ldrh	r3, [r3, #6]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d004      	beq.n	8009d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8e2 	bl	8009eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d26:	e023      	b.n	8009d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	dc02      	bgt.n	8009d3a <USBD_GetConfig+0x2e>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc03      	bgt.n	8009d40 <USBD_GetConfig+0x34>
 8009d38:	e015      	b.n	8009d66 <USBD_GetConfig+0x5a>
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d00b      	beq.n	8009d56 <USBD_GetConfig+0x4a>
 8009d3e:	e012      	b.n	8009d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f93c 	bl	8009fcc <USBD_CtlSendData>
        break;
 8009d54:	e00c      	b.n	8009d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3304      	adds	r3, #4
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f934 	bl	8009fcc <USBD_CtlSendData>
        break;
 8009d64:	e004      	b.n	8009d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8be 	bl	8009eea <USBD_CtlError>
        break;
 8009d6e:	bf00      	nop
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d81e      	bhi.n	8009dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	88db      	ldrh	r3, [r3, #6]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d004      	beq.n	8009da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f8a5 	bl	8009eea <USBD_CtlError>
        break;
 8009da0:	e01a      	b.n	8009dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f043 0202 	orr.w	r2, r3, #2
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	330c      	adds	r3, #12
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f900 	bl	8009fcc <USBD_CtlSendData>
      break;
 8009dcc:	e004      	b.n	8009dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f88a 	bl	8009eea <USBD_CtlError>
      break;
 8009dd6:	bf00      	nop
  }
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	885b      	ldrh	r3, [r3, #2]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d107      	bne.n	8009e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f940 	bl	800a080 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e00:	e013      	b.n	8009e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	885b      	ldrh	r3, [r3, #2]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d10b      	bne.n	8009e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	889b      	ldrh	r3, [r3, #4]
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f930 	bl	800a080 <USBD_CtlSendStatus>
}
 8009e20:	e003      	b.n	8009e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f860 	bl	8009eea <USBD_CtlError>
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d80b      	bhi.n	8009e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d10c      	bne.n	8009e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f910 	bl	800a080 <USBD_CtlSendStatus>
      }
      break;
 8009e60:	e004      	b.n	8009e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f840 	bl	8009eea <USBD_CtlError>
      break;
 8009e6a:	e000      	b.n	8009e6e <USBD_ClrFeature+0x3c>
      break;
 8009e6c:	bf00      	nop
  }
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	781a      	ldrb	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7ff fa41 	bl	8009328 <SWAPBYTE>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fa34 	bl	8009328 <SWAPBYTE>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fa27 	bl	8009328 <SWAPBYTE>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	80da      	strh	r2, [r3, #6]
}
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ef4:	2180      	movs	r1, #128	; 0x80
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fd1c 	bl	800a934 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009efc:	2100      	movs	r1, #0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fd18 	bl	800a934 <USBD_LL_StallEP>
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d036      	beq.n	8009f90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f26:	6938      	ldr	r0, [r7, #16]
 8009f28:	f000 f836 	bl	8009f98 <USBD_GetLen>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	3301      	adds	r3, #1
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	4413      	add	r3, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4413      	add	r3, r2
 8009f52:	2203      	movs	r2, #3
 8009f54:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f5c:	e013      	b.n	8009f86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	4413      	add	r3, r2
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]
    idx++;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	3301      	adds	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	3301      	adds	r3, #1
 8009f84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e7      	bne.n	8009f5e <USBD_GetString+0x52>
 8009f8e:	e000      	b.n	8009f92 <USBD_GetString+0x86>
    return;
 8009f90:	bf00      	nop
  }
}
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fa8:	e005      	b.n	8009fb6 <USBD_GetLen+0x1e>
  {
    len++;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	3301      	adds	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1f5      	bne.n	8009faa <USBD_GetLen+0x12>
  }

  return len;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 fd27 	bl	800aa46 <USBD_LL_Transmit>

  return USBD_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	2100      	movs	r1, #0
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 fd16 	bl	800aa46 <USBD_LL_Transmit>

  return USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2203      	movs	r2, #3
 800a034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	2100      	movs	r1, #0
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fd1a 	bl	800aa88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	2100      	movs	r1, #0
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 fd09 	bl	800aa88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2204      	movs	r2, #4
 800a08c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a090:	2300      	movs	r3, #0
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fcd5 	bl	800aa46 <USBD_LL_Transmit>

  return USBD_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fce3 	bl	800aa88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	4913      	ldr	r1, [pc, #76]	; (800a120 <MX_USB_DEVICE_Init+0x54>)
 800a0d4:	4813      	ldr	r0, [pc, #76]	; (800a124 <MX_USB_DEVICE_Init+0x58>)
 800a0d6:	f7fe fd07 	bl	8008ae8 <USBD_Init>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0e0:	f7f7 f9e2 	bl	80014a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a0e4:	4910      	ldr	r1, [pc, #64]	; (800a128 <MX_USB_DEVICE_Init+0x5c>)
 800a0e6:	480f      	ldr	r0, [pc, #60]	; (800a124 <MX_USB_DEVICE_Init+0x58>)
 800a0e8:	f7fe fd2e 	bl	8008b48 <USBD_RegisterClass>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0f2:	f7f7 f9d9 	bl	80014a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a0f6:	490d      	ldr	r1, [pc, #52]	; (800a12c <MX_USB_DEVICE_Init+0x60>)
 800a0f8:	480a      	ldr	r0, [pc, #40]	; (800a124 <MX_USB_DEVICE_Init+0x58>)
 800a0fa:	f7fe fc1f 	bl	800893c <USBD_CDC_RegisterInterface>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a104:	f7f7 f9d0 	bl	80014a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a108:	4806      	ldr	r0, [pc, #24]	; (800a124 <MX_USB_DEVICE_Init+0x58>)
 800a10a:	f7fe fd53 	bl	8008bb4 <USBD_Start>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a114:	f7f7 f9c8 	bl	80014a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a118:	f7f9 fb08 	bl	800372c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a11c:	bf00      	nop
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	240000d0 	.word	0x240000d0
 800a124:	24022b98 	.word	0x24022b98
 800a128:	2400003c 	.word	0x2400003c
 800a12c:	240000bc 	.word	0x240000bc

0800a130 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a134:	2200      	movs	r2, #0
 800a136:	4905      	ldr	r1, [pc, #20]	; (800a14c <CDC_Init_HS+0x1c>)
 800a138:	4805      	ldr	r0, [pc, #20]	; (800a150 <CDC_Init_HS+0x20>)
 800a13a:	f7fe fc19 	bl	8008970 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a13e:	4905      	ldr	r1, [pc, #20]	; (800a154 <CDC_Init_HS+0x24>)
 800a140:	4803      	ldr	r0, [pc, #12]	; (800a150 <CDC_Init_HS+0x20>)
 800a142:	f7fe fc37 	bl	80089b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a146:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a148:	4618      	mov	r0, r3
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	24023674 	.word	0x24023674
 800a150:	24022b98 	.word	0x24022b98
 800a154:	24022e74 	.word	0x24022e74

0800a158 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a15c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a15e:	4618      	mov	r0, r3
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
 800a174:	4613      	mov	r3, r2
 800a176:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	2b23      	cmp	r3, #35	; 0x23
 800a17c:	d84a      	bhi.n	800a214 <CDC_Control_HS+0xac>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <CDC_Control_HS+0x1c>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a215 	.word	0x0800a215
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a215 	.word	0x0800a215
 800a190:	0800a215 	.word	0x0800a215
 800a194:	0800a215 	.word	0x0800a215
 800a198:	0800a215 	.word	0x0800a215
 800a19c:	0800a215 	.word	0x0800a215
 800a1a0:	0800a215 	.word	0x0800a215
 800a1a4:	0800a215 	.word	0x0800a215
 800a1a8:	0800a215 	.word	0x0800a215
 800a1ac:	0800a215 	.word	0x0800a215
 800a1b0:	0800a215 	.word	0x0800a215
 800a1b4:	0800a215 	.word	0x0800a215
 800a1b8:	0800a215 	.word	0x0800a215
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	0800a215 	.word	0x0800a215
 800a1c4:	0800a215 	.word	0x0800a215
 800a1c8:	0800a215 	.word	0x0800a215
 800a1cc:	0800a215 	.word	0x0800a215
 800a1d0:	0800a215 	.word	0x0800a215
 800a1d4:	0800a215 	.word	0x0800a215
 800a1d8:	0800a215 	.word	0x0800a215
 800a1dc:	0800a215 	.word	0x0800a215
 800a1e0:	0800a215 	.word	0x0800a215
 800a1e4:	0800a215 	.word	0x0800a215
 800a1e8:	0800a215 	.word	0x0800a215
 800a1ec:	0800a215 	.word	0x0800a215
 800a1f0:	0800a215 	.word	0x0800a215
 800a1f4:	0800a215 	.word	0x0800a215
 800a1f8:	0800a215 	.word	0x0800a215
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a215 	.word	0x0800a215
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a215 	.word	0x0800a215
 800a20c:	0800a215 	.word	0x0800a215
 800a210:	0800a215 	.word	0x0800a215
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a214:	bf00      	nop
  }

  return (USBD_OK);
 800a216:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	480f      	ldr	r0, [pc, #60]	; (800a270 <CDC_Receive_HS+0x4c>)
 800a232:	f7fe fbbf 	bl	80089b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a236:	480e      	ldr	r0, [pc, #56]	; (800a270 <CDC_Receive_HS+0x4c>)
 800a238:	f7fe fc20 	bl	8008a7c <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 800a23c:	2240      	movs	r2, #64	; 0x40
 800a23e:	2100      	movs	r1, #0
 800a240:	480c      	ldr	r0, [pc, #48]	; (800a274 <CDC_Receive_HS+0x50>)
 800a242:	f000 fcd5 	bl	800abf0 <memset>
  uint8_t len = (uint8_t)*Len;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	461a      	mov	r2, r3
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4808      	ldr	r0, [pc, #32]	; (800a274 <CDC_Receive_HS+0x50>)
 800a254:	f000 fcbe 	bl	800abd4 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	461a      	mov	r2, r3
 800a25c:	2100      	movs	r1, #0
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fcc6 	bl	800abf0 <memset>

  return (USBD_OK);
 800a264:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	24022b98 	.word	0x24022b98
 800a274:	24000274 	.word	0x24000274

0800a278 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a288:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <CDC_Transmit_HS+0x48>)
 800a28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a28e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e00b      	b.n	800a2b6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a29e:	887b      	ldrh	r3, [r7, #2]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	4806      	ldr	r0, [pc, #24]	; (800a2c0 <CDC_Transmit_HS+0x48>)
 800a2a6:	f7fe fb63 	bl	8008970 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a2aa:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <CDC_Transmit_HS+0x48>)
 800a2ac:	f7fe fba0 	bl	80089f0 <USBD_CDC_TransmitPacket>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	24022b98 	.word	0x24022b98

0800a2c4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a2d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2212      	movs	r2, #18
 800a2f8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a2fa:	4b03      	ldr	r3, [pc, #12]	; (800a308 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	240000ec 	.word	0x240000ec

0800a30c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2204      	movs	r2, #4
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	24000100 	.word	0x24000100

0800a330 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	4907      	ldr	r1, [pc, #28]	; (800a364 <USBD_HS_ProductStrDescriptor+0x34>)
 800a346:	4808      	ldr	r0, [pc, #32]	; (800a368 <USBD_HS_ProductStrDescriptor+0x38>)
 800a348:	f7ff fde0 	bl	8009f0c <USBD_GetString>
 800a34c:	e004      	b.n	800a358 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	4904      	ldr	r1, [pc, #16]	; (800a364 <USBD_HS_ProductStrDescriptor+0x34>)
 800a352:	4805      	ldr	r0, [pc, #20]	; (800a368 <USBD_HS_ProductStrDescriptor+0x38>)
 800a354:	f7ff fdda 	bl	8009f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	24023e74 	.word	0x24023e74
 800a368:	0800bde0 	.word	0x0800bde0

0800a36c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	4904      	ldr	r1, [pc, #16]	; (800a38c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a37c:	4804      	ldr	r0, [pc, #16]	; (800a390 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a37e:	f7ff fdc5 	bl	8009f0c <USBD_GetString>
  return USBD_StrDesc;
 800a382:	4b02      	ldr	r3, [pc, #8]	; (800a38c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	24023e74 	.word	0x24023e74
 800a390:	0800bdf8 	.word	0x0800bdf8

0800a394 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	221a      	movs	r2, #26
 800a3a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3a6:	f000 f843 	bl	800a430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a3aa:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	24000104 	.word	0x24000104

0800a3b8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	; (800a3ec <USBD_HS_ConfigStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a3d0:	f7ff fd9c 	bl	8009f0c <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	; (800a3ec <USBD_HS_ConfigStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a3dc:	f7ff fd96 	bl	8009f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	24023e74 	.word	0x24023e74
 800a3f0:	0800be0c 	.word	0x0800be0c

0800a3f4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	4907      	ldr	r1, [pc, #28]	; (800a428 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a40a:	4808      	ldr	r0, [pc, #32]	; (800a42c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a40c:	f7ff fd7e 	bl	8009f0c <USBD_GetString>
 800a410:	e004      	b.n	800a41c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4904      	ldr	r1, [pc, #16]	; (800a428 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a416:	4805      	ldr	r0, [pc, #20]	; (800a42c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a418:	f7ff fd78 	bl	8009f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	24023e74 	.word	0x24023e74
 800a42c:	0800be18 	.word	0x0800be18

0800a430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a436:	4b0f      	ldr	r3, [pc, #60]	; (800a474 <Get_SerialNum+0x44>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a43c:	4b0e      	ldr	r3, [pc, #56]	; (800a478 <Get_SerialNum+0x48>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <Get_SerialNum+0x4c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a456:	2208      	movs	r2, #8
 800a458:	4909      	ldr	r1, [pc, #36]	; (800a480 <Get_SerialNum+0x50>)
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f814 	bl	800a488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a460:	2204      	movs	r2, #4
 800a462:	4908      	ldr	r1, [pc, #32]	; (800a484 <Get_SerialNum+0x54>)
 800a464:	68b8      	ldr	r0, [r7, #8]
 800a466:	f000 f80f 	bl	800a488 <IntToUnicode>
  }
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	1ff1e800 	.word	0x1ff1e800
 800a478:	1ff1e804 	.word	0x1ff1e804
 800a47c:	1ff1e808 	.word	0x1ff1e808
 800a480:	24000106 	.word	0x24000106
 800a484:	24000116 	.word	0x24000116

0800a488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
 800a49e:	e027      	b.n	800a4f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	0f1b      	lsrs	r3, r3, #28
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d80b      	bhi.n	800a4c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3230      	adds	r2, #48	; 0x30
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e00a      	b.n	800a4d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	0f1b      	lsrs	r3, r3, #28
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	440b      	add	r3, r1
 800a4d0:	3237      	adds	r2, #55	; 0x37
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	75fb      	strb	r3, [r7, #23]
 800a4f0:	7dfa      	ldrb	r2, [r7, #23]
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3d3      	bcc.n	800a4a0 <IntToUnicode+0x18>
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
	...

0800a508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b0b6      	sub	sp, #216	; 0xd8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a510:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	609a      	str	r2, [r3, #8]
 800a51c:	60da      	str	r2, [r3, #12]
 800a51e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a520:	f107 0310 	add.w	r3, r7, #16
 800a524:	22b4      	movs	r2, #180	; 0xb4
 800a526:	2100      	movs	r1, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 fb61 	bl	800abf0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a2b      	ldr	r2, [pc, #172]	; (800a5e0 <HAL_PCD_MspInit+0xd8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d14e      	bne.n	800a5d6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a53c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a53e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a546:	f107 0310 	add.w	r3, r7, #16
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fa f80c 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800a556:	f7f6 ffa7 	bl	80014a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a55a:	f7f9 f8e7 	bl	800372c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a55e:	4b21      	ldr	r3, [pc, #132]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a564:	4a1f      	ldr	r2, [pc, #124]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a566:	f043 0301 	orr.w	r3, r3, #1
 800a56a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a56e:	4b1d      	ldr	r3, [pc, #116]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800a57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a584:	2302      	movs	r3, #2
 800a586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a590:	2300      	movs	r3, #0
 800a592:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a596:	230a      	movs	r3, #10
 800a598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800a59c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4811      	ldr	r0, [pc, #68]	; (800a5e8 <HAL_PCD_MspInit+0xe0>)
 800a5a4:	f7f7 fbd8 	bl	8001d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a5a8:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a5aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5ae:	4a0d      	ldr	r2, [pc, #52]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a5b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <HAL_PCD_MspInit+0xdc>)
 800a5ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c2:	60bb      	str	r3, [r7, #8]
 800a5c4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	204d      	movs	r0, #77	; 0x4d
 800a5cc:	f7f7 fb8f 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a5d0:	204d      	movs	r0, #77	; 0x4d
 800a5d2:	f7f7 fba6 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a5d6:	bf00      	nop
 800a5d8:	37d8      	adds	r7, #216	; 0xd8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40040000 	.word	0x40040000
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	58020000 	.word	0x58020000

0800a5ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fe fb23 	bl	8008c4e <USBD_LL_SetupStage>
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a622:	78fa      	ldrb	r2, [r7, #3]
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	4619      	mov	r1, r3
 800a63a:	f7fe fb5d 	bl	8008cf8 <USBD_LL_DataOutStage>
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	4613      	mov	r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	440b      	add	r3, r1
 800a666:	334c      	adds	r3, #76	; 0x4c
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	78fb      	ldrb	r3, [r7, #3]
 800a66c:	4619      	mov	r1, r3
 800a66e:	f7fe fbf6 	bl	8008e5e <USBD_LL_DataInStage>
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe fd2a 	bl	80090e2 <USBD_LL_SOF>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
 800a6ae:	e008      	b.n	800a6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d102      	bne.n	800a6be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]
 800a6bc:	e001      	b.n	800a6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6be:	f7f6 fef3 	bl	80014a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6c8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe fcca 	bl	8009066 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fc72 	bl	8008fc2 <USBD_LL_Reset>
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fcc5 	bl	8009086 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a70e:	f043 0301 	orr.w	r3, r3, #1
 800a712:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a71c:	4b04      	ldr	r3, [pc, #16]	; (800a730 <HAL_PCD_SuspendCallback+0x48>)
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	4a03      	ldr	r2, [pc, #12]	; (800a730 <HAL_PCD_SuspendCallback+0x48>)
 800a722:	f043 0306 	orr.w	r3, r3, #6
 800a726:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	e000ed00 	.word	0xe000ed00

0800a734 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fcb5 	bl	80090b2 <USBD_LL_Resume>
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fd0d 	bl	8009186 <USBD_LL_IsoOUTIncomplete>
}
 800a76c:	bf00      	nop
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a786:	78fa      	ldrb	r2, [r7, #3]
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fcc9 	bl	8009122 <USBD_LL_IsoINIncomplete>
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fd1f 	bl	80091ea <USBD_LL_DevConnected>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fd1c 	bl	8009200 <USBD_LL_DevDisconnected>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d140      	bne.n	800a862 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a7e0:	4a22      	ldr	r2, [pc, #136]	; (800a86c <USBD_LL_Init+0x9c>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a20      	ldr	r2, [pc, #128]	; (800a86c <USBD_LL_Init+0x9c>)
 800a7ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a7f0:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <USBD_LL_Init+0x9c>)
 800a7f2:	4a1f      	ldr	r2, [pc, #124]	; (800a870 <USBD_LL_Init+0xa0>)
 800a7f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a7f6:	4b1d      	ldr	r3, [pc, #116]	; (800a86c <USBD_LL_Init+0x9c>)
 800a7f8:	2209      	movs	r2, #9
 800a7fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <USBD_LL_Init+0x9c>)
 800a7fe:	2202      	movs	r2, #2
 800a800:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a802:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <USBD_LL_Init+0x9c>)
 800a804:	2200      	movs	r2, #0
 800a806:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a808:	4b18      	ldr	r3, [pc, #96]	; (800a86c <USBD_LL_Init+0x9c>)
 800a80a:	2202      	movs	r2, #2
 800a80c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a80e:	4b17      	ldr	r3, [pc, #92]	; (800a86c <USBD_LL_Init+0x9c>)
 800a810:	2200      	movs	r2, #0
 800a812:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a814:	4b15      	ldr	r3, [pc, #84]	; (800a86c <USBD_LL_Init+0x9c>)
 800a816:	2200      	movs	r2, #0
 800a818:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <USBD_LL_Init+0x9c>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <USBD_LL_Init+0x9c>)
 800a822:	2200      	movs	r2, #0
 800a824:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a826:	4b11      	ldr	r3, [pc, #68]	; (800a86c <USBD_LL_Init+0x9c>)
 800a828:	2200      	movs	r2, #0
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a82c:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <USBD_LL_Init+0x9c>)
 800a82e:	2200      	movs	r2, #0
 800a830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a832:	480e      	ldr	r0, [pc, #56]	; (800a86c <USBD_LL_Init+0x9c>)
 800a834:	f7f7 fc6b 	bl	800210e <HAL_PCD_Init>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a83e:	f7f6 fe33 	bl	80014a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a842:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a846:	4809      	ldr	r0, [pc, #36]	; (800a86c <USBD_LL_Init+0x9c>)
 800a848:	f7f8 fef5 	bl	8003636 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a84c:	2280      	movs	r2, #128	; 0x80
 800a84e:	2100      	movs	r1, #0
 800a850:	4806      	ldr	r0, [pc, #24]	; (800a86c <USBD_LL_Init+0x9c>)
 800a852:	f7f8 fea9 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a856:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a85a:	2101      	movs	r1, #1
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <USBD_LL_Init+0x9c>)
 800a85e:	f7f8 fea3 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	24024074 	.word	0x24024074
 800a870:	40040000 	.word	0x40040000

0800a874 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7f7 fd63 	bl	8002356 <HAL_PCD_Start>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f942 	bl	800ab20 <USBD_Get_USB_Status>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	4608      	mov	r0, r1
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	70fb      	strb	r3, [r7, #3]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	70bb      	strb	r3, [r7, #2]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8d2:	78bb      	ldrb	r3, [r7, #2]
 800a8d4:	883a      	ldrh	r2, [r7, #0]
 800a8d6:	78f9      	ldrb	r1, [r7, #3]
 800a8d8:	f7f8 fa61 	bl	8002d9e <HAL_PCD_EP_Open>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f91c 	bl	800ab20 <USBD_Get_USB_Status>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	460b      	mov	r3, r1
 800a900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a910:	78fa      	ldrb	r2, [r7, #3]
 800a912:	4611      	mov	r1, r2
 800a914:	4618      	mov	r0, r3
 800a916:	f7f8 faaa 	bl	8002e6e <HAL_PCD_EP_Close>
 800a91a:	4603      	mov	r3, r0
 800a91c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	4618      	mov	r0, r3
 800a922:	f000 f8fd 	bl	800ab20 <USBD_Get_USB_Status>
 800a926:	4603      	mov	r3, r0
 800a928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a94e:	78fa      	ldrb	r2, [r7, #3]
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f7f8 fb82 	bl	800305c <HAL_PCD_EP_SetStall>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f8de 	bl	800ab20 <USBD_Get_USB_Status>
 800a964:	4603      	mov	r3, r0
 800a966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a968:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a98c:	78fa      	ldrb	r2, [r7, #3]
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f7f8 fbc7 	bl	8003124 <HAL_PCD_EP_ClrStall>
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f8bf 	bl	800ab20 <USBD_Get_USB_Status>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da0b      	bge.n	800a9e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9d2:	68f9      	ldr	r1, [r7, #12]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	440b      	add	r3, r1
 800a9de:	333e      	adds	r3, #62	; 0x3e
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	e00b      	b.n	800a9fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9ea:	68f9      	ldr	r1, [r7, #12]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a9fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa22:	78fa      	ldrb	r2, [r7, #3]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f8 f994 	bl	8002d54 <HAL_PCD_SetAddress>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f874 	bl	800ab20 <USBD_Get_USB_Status>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	460b      	mov	r3, r1
 800aa54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa64:	7af9      	ldrb	r1, [r7, #11]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	f7f8 faad 	bl	8002fc8 <HAL_PCD_EP_Transmit>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 f853 	bl	800ab20 <USBD_Get_USB_Status>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	460b      	mov	r3, r1
 800aa96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aaa6:	7af9      	ldrb	r1, [r7, #11]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	f7f8 fa29 	bl	8002f02 <HAL_PCD_EP_Receive>
 800aab0:	4603      	mov	r3, r0
 800aab2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 f832 	bl	800ab20 <USBD_Get_USB_Status>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aac0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7f8 fa59 	bl	8002f98 <HAL_PCD_EP_GetRxCount>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aaf8:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <USBD_static_malloc+0x18>)
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	24024580 	.word	0x24024580

0800ab0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]

}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d817      	bhi.n	800ab64 <USBD_Get_USB_Status+0x44>
 800ab34:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <USBD_Get_USB_Status+0x1c>)
 800ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3a:	bf00      	nop
 800ab3c:	0800ab4d 	.word	0x0800ab4d
 800ab40:	0800ab53 	.word	0x0800ab53
 800ab44:	0800ab59 	.word	0x0800ab59
 800ab48:	0800ab5f 	.word	0x0800ab5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab50:	e00b      	b.n	800ab6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab52:	2303      	movs	r3, #3
 800ab54:	73fb      	strb	r3, [r7, #15]
    break;
 800ab56:	e008      	b.n	800ab6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	e005      	b.n	800ab6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	73fb      	strb	r3, [r7, #15]
    break;
 800ab62:	e002      	b.n	800ab6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	73fb      	strb	r3, [r7, #15]
    break;
 800ab68:	bf00      	nop
  }
  return usb_status;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <atoi>:
 800ab78:	220a      	movs	r2, #10
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	f000 b91e 	b.w	800adbc <strtol>

0800ab80 <__errno>:
 800ab80:	4b01      	ldr	r3, [pc, #4]	; (800ab88 <__errno+0x8>)
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	24000120 	.word	0x24000120

0800ab8c <__libc_init_array>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	4d0d      	ldr	r5, [pc, #52]	; (800abc4 <__libc_init_array+0x38>)
 800ab90:	4c0d      	ldr	r4, [pc, #52]	; (800abc8 <__libc_init_array+0x3c>)
 800ab92:	1b64      	subs	r4, r4, r5
 800ab94:	10a4      	asrs	r4, r4, #2
 800ab96:	2600      	movs	r6, #0
 800ab98:	42a6      	cmp	r6, r4
 800ab9a:	d109      	bne.n	800abb0 <__libc_init_array+0x24>
 800ab9c:	4d0b      	ldr	r5, [pc, #44]	; (800abcc <__libc_init_array+0x40>)
 800ab9e:	4c0c      	ldr	r4, [pc, #48]	; (800abd0 <__libc_init_array+0x44>)
 800aba0:	f001 f910 	bl	800bdc4 <_init>
 800aba4:	1b64      	subs	r4, r4, r5
 800aba6:	10a4      	asrs	r4, r4, #2
 800aba8:	2600      	movs	r6, #0
 800abaa:	42a6      	cmp	r6, r4
 800abac:	d105      	bne.n	800abba <__libc_init_array+0x2e>
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb4:	4798      	blx	r3
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7ee      	b.n	800ab98 <__libc_init_array+0xc>
 800abba:	f855 3b04 	ldr.w	r3, [r5], #4
 800abbe:	4798      	blx	r3
 800abc0:	3601      	adds	r6, #1
 800abc2:	e7f2      	b.n	800abaa <__libc_init_array+0x1e>
 800abc4:	0800c080 	.word	0x0800c080
 800abc8:	0800c080 	.word	0x0800c080
 800abcc:	0800c080 	.word	0x0800c080
 800abd0:	0800c084 	.word	0x0800c084

0800abd4 <memcpy>:
 800abd4:	440a      	add	r2, r1
 800abd6:	4291      	cmp	r1, r2
 800abd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800abdc:	d100      	bne.n	800abe0 <memcpy+0xc>
 800abde:	4770      	bx	lr
 800abe0:	b510      	push	{r4, lr}
 800abe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abea:	4291      	cmp	r1, r2
 800abec:	d1f9      	bne.n	800abe2 <memcpy+0xe>
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <memset>:
 800abf0:	4402      	add	r2, r0
 800abf2:	4603      	mov	r3, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d100      	bne.n	800abfa <memset+0xa>
 800abf8:	4770      	bx	lr
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	e7f9      	b.n	800abf4 <memset+0x4>

0800ac00 <strtok>:
 800ac00:	4b16      	ldr	r3, [pc, #88]	; (800ac5c <strtok+0x5c>)
 800ac02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac04:	681e      	ldr	r6, [r3, #0]
 800ac06:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ac08:	4605      	mov	r5, r0
 800ac0a:	b9fc      	cbnz	r4, 800ac4c <strtok+0x4c>
 800ac0c:	2050      	movs	r0, #80	; 0x50
 800ac0e:	9101      	str	r1, [sp, #4]
 800ac10:	f000 f90e 	bl	800ae30 <malloc>
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	65b0      	str	r0, [r6, #88]	; 0x58
 800ac18:	4602      	mov	r2, r0
 800ac1a:	b920      	cbnz	r0, 800ac26 <strtok+0x26>
 800ac1c:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <strtok+0x60>)
 800ac1e:	4811      	ldr	r0, [pc, #68]	; (800ac64 <strtok+0x64>)
 800ac20:	2157      	movs	r1, #87	; 0x57
 800ac22:	f000 f8d5 	bl	800add0 <__assert_func>
 800ac26:	e9c0 4400 	strd	r4, r4, [r0]
 800ac2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ac36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ac3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac46:	6184      	str	r4, [r0, #24]
 800ac48:	7704      	strb	r4, [r0, #28]
 800ac4a:	6244      	str	r4, [r0, #36]	; 0x24
 800ac4c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4628      	mov	r0, r5
 800ac52:	b002      	add	sp, #8
 800ac54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac58:	f000 b806 	b.w	800ac68 <__strtok_r>
 800ac5c:	24000120 	.word	0x24000120
 800ac60:	0800be3c 	.word	0x0800be3c
 800ac64:	0800be53 	.word	0x0800be53

0800ac68 <__strtok_r>:
 800ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6a:	b908      	cbnz	r0, 800ac70 <__strtok_r+0x8>
 800ac6c:	6810      	ldr	r0, [r2, #0]
 800ac6e:	b188      	cbz	r0, 800ac94 <__strtok_r+0x2c>
 800ac70:	4604      	mov	r4, r0
 800ac72:	4620      	mov	r0, r4
 800ac74:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac78:	460f      	mov	r7, r1
 800ac7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac7e:	b91e      	cbnz	r6, 800ac88 <__strtok_r+0x20>
 800ac80:	b965      	cbnz	r5, 800ac9c <__strtok_r+0x34>
 800ac82:	6015      	str	r5, [r2, #0]
 800ac84:	4628      	mov	r0, r5
 800ac86:	e005      	b.n	800ac94 <__strtok_r+0x2c>
 800ac88:	42b5      	cmp	r5, r6
 800ac8a:	d1f6      	bne.n	800ac7a <__strtok_r+0x12>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1f0      	bne.n	800ac72 <__strtok_r+0xa>
 800ac90:	6014      	str	r4, [r2, #0]
 800ac92:	7003      	strb	r3, [r0, #0]
 800ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac96:	461c      	mov	r4, r3
 800ac98:	e00c      	b.n	800acb4 <__strtok_r+0x4c>
 800ac9a:	b915      	cbnz	r5, 800aca2 <__strtok_r+0x3a>
 800ac9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aca0:	460e      	mov	r6, r1
 800aca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aca6:	42ab      	cmp	r3, r5
 800aca8:	d1f7      	bne.n	800ac9a <__strtok_r+0x32>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0f3      	beq.n	800ac96 <__strtok_r+0x2e>
 800acae:	2300      	movs	r3, #0
 800acb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acb4:	6014      	str	r4, [r2, #0]
 800acb6:	e7ed      	b.n	800ac94 <__strtok_r+0x2c>

0800acb8 <_strtol_l.constprop.0>:
 800acb8:	2b01      	cmp	r3, #1
 800acba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbe:	d001      	beq.n	800acc4 <_strtol_l.constprop.0+0xc>
 800acc0:	2b24      	cmp	r3, #36	; 0x24
 800acc2:	d906      	bls.n	800acd2 <_strtol_l.constprop.0+0x1a>
 800acc4:	f7ff ff5c 	bl	800ab80 <__errno>
 800acc8:	2316      	movs	r3, #22
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	2000      	movs	r0, #0
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800adb8 <_strtol_l.constprop.0+0x100>
 800acd6:	460d      	mov	r5, r1
 800acd8:	462e      	mov	r6, r5
 800acda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acde:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ace2:	f017 0708 	ands.w	r7, r7, #8
 800ace6:	d1f7      	bne.n	800acd8 <_strtol_l.constprop.0+0x20>
 800ace8:	2c2d      	cmp	r4, #45	; 0x2d
 800acea:	d132      	bne.n	800ad52 <_strtol_l.constprop.0+0x9a>
 800acec:	782c      	ldrb	r4, [r5, #0]
 800acee:	2701      	movs	r7, #1
 800acf0:	1cb5      	adds	r5, r6, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d05b      	beq.n	800adae <_strtol_l.constprop.0+0xf6>
 800acf6:	2b10      	cmp	r3, #16
 800acf8:	d109      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800acfa:	2c30      	cmp	r4, #48	; 0x30
 800acfc:	d107      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800acfe:	782c      	ldrb	r4, [r5, #0]
 800ad00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad04:	2c58      	cmp	r4, #88	; 0x58
 800ad06:	d14d      	bne.n	800ada4 <_strtol_l.constprop.0+0xec>
 800ad08:	786c      	ldrb	r4, [r5, #1]
 800ad0a:	2310      	movs	r3, #16
 800ad0c:	3502      	adds	r5, #2
 800ad0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad16:	f04f 0c00 	mov.w	ip, #0
 800ad1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad1e:	4666      	mov	r6, ip
 800ad20:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad28:	f1be 0f09 	cmp.w	lr, #9
 800ad2c:	d816      	bhi.n	800ad5c <_strtol_l.constprop.0+0xa4>
 800ad2e:	4674      	mov	r4, lr
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	dd24      	ble.n	800ad7e <_strtol_l.constprop.0+0xc6>
 800ad34:	f1bc 0f00 	cmp.w	ip, #0
 800ad38:	db1e      	blt.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad3a:	45b1      	cmp	r9, r6
 800ad3c:	d31c      	bcc.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad3e:	d101      	bne.n	800ad44 <_strtol_l.constprop.0+0x8c>
 800ad40:	45a2      	cmp	sl, r4
 800ad42:	db19      	blt.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad44:	fb06 4603 	mla	r6, r6, r3, r4
 800ad48:	f04f 0c01 	mov.w	ip, #1
 800ad4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad50:	e7e8      	b.n	800ad24 <_strtol_l.constprop.0+0x6c>
 800ad52:	2c2b      	cmp	r4, #43	; 0x2b
 800ad54:	bf04      	itt	eq
 800ad56:	782c      	ldrbeq	r4, [r5, #0]
 800ad58:	1cb5      	addeq	r5, r6, #2
 800ad5a:	e7ca      	b.n	800acf2 <_strtol_l.constprop.0+0x3a>
 800ad5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad60:	f1be 0f19 	cmp.w	lr, #25
 800ad64:	d801      	bhi.n	800ad6a <_strtol_l.constprop.0+0xb2>
 800ad66:	3c37      	subs	r4, #55	; 0x37
 800ad68:	e7e2      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad6e:	f1be 0f19 	cmp.w	lr, #25
 800ad72:	d804      	bhi.n	800ad7e <_strtol_l.constprop.0+0xc6>
 800ad74:	3c57      	subs	r4, #87	; 0x57
 800ad76:	e7db      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad7c:	e7e6      	b.n	800ad4c <_strtol_l.constprop.0+0x94>
 800ad7e:	f1bc 0f00 	cmp.w	ip, #0
 800ad82:	da05      	bge.n	800ad90 <_strtol_l.constprop.0+0xd8>
 800ad84:	2322      	movs	r3, #34	; 0x22
 800ad86:	6003      	str	r3, [r0, #0]
 800ad88:	4646      	mov	r6, r8
 800ad8a:	b942      	cbnz	r2, 800ad9e <_strtol_l.constprop.0+0xe6>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	e79e      	b.n	800acce <_strtol_l.constprop.0+0x16>
 800ad90:	b107      	cbz	r7, 800ad94 <_strtol_l.constprop.0+0xdc>
 800ad92:	4276      	negs	r6, r6
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d0f9      	beq.n	800ad8c <_strtol_l.constprop.0+0xd4>
 800ad98:	f1bc 0f00 	cmp.w	ip, #0
 800ad9c:	d000      	beq.n	800ada0 <_strtol_l.constprop.0+0xe8>
 800ad9e:	1e69      	subs	r1, r5, #1
 800ada0:	6011      	str	r1, [r2, #0]
 800ada2:	e7f3      	b.n	800ad8c <_strtol_l.constprop.0+0xd4>
 800ada4:	2430      	movs	r4, #48	; 0x30
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1b1      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adaa:	2308      	movs	r3, #8
 800adac:	e7af      	b.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adae:	2c30      	cmp	r4, #48	; 0x30
 800adb0:	d0a5      	beq.n	800acfe <_strtol_l.constprop.0+0x46>
 800adb2:	230a      	movs	r3, #10
 800adb4:	e7ab      	b.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adb6:	bf00      	nop
 800adb8:	0800beed 	.word	0x0800beed

0800adbc <strtol>:
 800adbc:	4613      	mov	r3, r2
 800adbe:	460a      	mov	r2, r1
 800adc0:	4601      	mov	r1, r0
 800adc2:	4802      	ldr	r0, [pc, #8]	; (800adcc <strtol+0x10>)
 800adc4:	6800      	ldr	r0, [r0, #0]
 800adc6:	f7ff bf77 	b.w	800acb8 <_strtol_l.constprop.0>
 800adca:	bf00      	nop
 800adcc:	24000120 	.word	0x24000120

0800add0 <__assert_func>:
 800add0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800add2:	4614      	mov	r4, r2
 800add4:	461a      	mov	r2, r3
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <__assert_func+0x2c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4605      	mov	r5, r0
 800addc:	68d8      	ldr	r0, [r3, #12]
 800adde:	b14c      	cbz	r4, 800adf4 <__assert_func+0x24>
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <__assert_func+0x30>)
 800ade2:	9100      	str	r1, [sp, #0]
 800ade4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ade8:	4906      	ldr	r1, [pc, #24]	; (800ae04 <__assert_func+0x34>)
 800adea:	462b      	mov	r3, r5
 800adec:	f000 f80e 	bl	800ae0c <fiprintf>
 800adf0:	f000 fcc4 	bl	800b77c <abort>
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <__assert_func+0x38>)
 800adf6:	461c      	mov	r4, r3
 800adf8:	e7f3      	b.n	800ade2 <__assert_func+0x12>
 800adfa:	bf00      	nop
 800adfc:	24000120 	.word	0x24000120
 800ae00:	0800beb0 	.word	0x0800beb0
 800ae04:	0800bebd 	.word	0x0800bebd
 800ae08:	0800beeb 	.word	0x0800beeb

0800ae0c <fiprintf>:
 800ae0c:	b40e      	push	{r1, r2, r3}
 800ae0e:	b503      	push	{r0, r1, lr}
 800ae10:	4601      	mov	r1, r0
 800ae12:	ab03      	add	r3, sp, #12
 800ae14:	4805      	ldr	r0, [pc, #20]	; (800ae2c <fiprintf+0x20>)
 800ae16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1a:	6800      	ldr	r0, [r0, #0]
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	f000 f919 	bl	800b054 <_vfiprintf_r>
 800ae22:	b002      	add	sp, #8
 800ae24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae28:	b003      	add	sp, #12
 800ae2a:	4770      	bx	lr
 800ae2c:	24000120 	.word	0x24000120

0800ae30 <malloc>:
 800ae30:	4b02      	ldr	r3, [pc, #8]	; (800ae3c <malloc+0xc>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f000 b86f 	b.w	800af18 <_malloc_r>
 800ae3a:	bf00      	nop
 800ae3c:	24000120 	.word	0x24000120

0800ae40 <_free_r>:
 800ae40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae42:	2900      	cmp	r1, #0
 800ae44:	d044      	beq.n	800aed0 <_free_r+0x90>
 800ae46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae4a:	9001      	str	r0, [sp, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae52:	bfb8      	it	lt
 800ae54:	18e4      	addlt	r4, r4, r3
 800ae56:	f000 feb9 	bl	800bbcc <__malloc_lock>
 800ae5a:	4a1e      	ldr	r2, [pc, #120]	; (800aed4 <_free_r+0x94>)
 800ae5c:	9801      	ldr	r0, [sp, #4]
 800ae5e:	6813      	ldr	r3, [r2, #0]
 800ae60:	b933      	cbnz	r3, 800ae70 <_free_r+0x30>
 800ae62:	6063      	str	r3, [r4, #4]
 800ae64:	6014      	str	r4, [r2, #0]
 800ae66:	b003      	add	sp, #12
 800ae68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae6c:	f000 beb4 	b.w	800bbd8 <__malloc_unlock>
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d908      	bls.n	800ae86 <_free_r+0x46>
 800ae74:	6825      	ldr	r5, [r4, #0]
 800ae76:	1961      	adds	r1, r4, r5
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf01      	itttt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	1949      	addeq	r1, r1, r5
 800ae82:	6021      	streq	r1, [r4, #0]
 800ae84:	e7ed      	b.n	800ae62 <_free_r+0x22>
 800ae86:	461a      	mov	r2, r3
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	b10b      	cbz	r3, 800ae90 <_free_r+0x50>
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	d9fa      	bls.n	800ae86 <_free_r+0x46>
 800ae90:	6811      	ldr	r1, [r2, #0]
 800ae92:	1855      	adds	r5, r2, r1
 800ae94:	42a5      	cmp	r5, r4
 800ae96:	d10b      	bne.n	800aeb0 <_free_r+0x70>
 800ae98:	6824      	ldr	r4, [r4, #0]
 800ae9a:	4421      	add	r1, r4
 800ae9c:	1854      	adds	r4, r2, r1
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	6011      	str	r1, [r2, #0]
 800aea2:	d1e0      	bne.n	800ae66 <_free_r+0x26>
 800aea4:	681c      	ldr	r4, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	6053      	str	r3, [r2, #4]
 800aeaa:	4421      	add	r1, r4
 800aeac:	6011      	str	r1, [r2, #0]
 800aeae:	e7da      	b.n	800ae66 <_free_r+0x26>
 800aeb0:	d902      	bls.n	800aeb8 <_free_r+0x78>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	6003      	str	r3, [r0, #0]
 800aeb6:	e7d6      	b.n	800ae66 <_free_r+0x26>
 800aeb8:	6825      	ldr	r5, [r4, #0]
 800aeba:	1961      	adds	r1, r4, r5
 800aebc:	428b      	cmp	r3, r1
 800aebe:	bf04      	itt	eq
 800aec0:	6819      	ldreq	r1, [r3, #0]
 800aec2:	685b      	ldreq	r3, [r3, #4]
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	bf04      	itt	eq
 800aec8:	1949      	addeq	r1, r1, r5
 800aeca:	6021      	streq	r1, [r4, #0]
 800aecc:	6054      	str	r4, [r2, #4]
 800aece:	e7ca      	b.n	800ae66 <_free_r+0x26>
 800aed0:	b003      	add	sp, #12
 800aed2:	bd30      	pop	{r4, r5, pc}
 800aed4:	240247a0 	.word	0x240247a0

0800aed8 <sbrk_aligned>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	4e0e      	ldr	r6, [pc, #56]	; (800af14 <sbrk_aligned+0x3c>)
 800aedc:	460c      	mov	r4, r1
 800aede:	6831      	ldr	r1, [r6, #0]
 800aee0:	4605      	mov	r5, r0
 800aee2:	b911      	cbnz	r1, 800aeea <sbrk_aligned+0x12>
 800aee4:	f000 fb7a 	bl	800b5dc <_sbrk_r>
 800aee8:	6030      	str	r0, [r6, #0]
 800aeea:	4621      	mov	r1, r4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 fb75 	bl	800b5dc <_sbrk_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d00a      	beq.n	800af0c <sbrk_aligned+0x34>
 800aef6:	1cc4      	adds	r4, r0, #3
 800aef8:	f024 0403 	bic.w	r4, r4, #3
 800aefc:	42a0      	cmp	r0, r4
 800aefe:	d007      	beq.n	800af10 <sbrk_aligned+0x38>
 800af00:	1a21      	subs	r1, r4, r0
 800af02:	4628      	mov	r0, r5
 800af04:	f000 fb6a 	bl	800b5dc <_sbrk_r>
 800af08:	3001      	adds	r0, #1
 800af0a:	d101      	bne.n	800af10 <sbrk_aligned+0x38>
 800af0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800af10:	4620      	mov	r0, r4
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	240247a4 	.word	0x240247a4

0800af18 <_malloc_r>:
 800af18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1c:	1ccd      	adds	r5, r1, #3
 800af1e:	f025 0503 	bic.w	r5, r5, #3
 800af22:	3508      	adds	r5, #8
 800af24:	2d0c      	cmp	r5, #12
 800af26:	bf38      	it	cc
 800af28:	250c      	movcc	r5, #12
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	4607      	mov	r7, r0
 800af2e:	db01      	blt.n	800af34 <_malloc_r+0x1c>
 800af30:	42a9      	cmp	r1, r5
 800af32:	d905      	bls.n	800af40 <_malloc_r+0x28>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	2600      	movs	r6, #0
 800af3a:	4630      	mov	r0, r6
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	4e2e      	ldr	r6, [pc, #184]	; (800affc <_malloc_r+0xe4>)
 800af42:	f000 fe43 	bl	800bbcc <__malloc_lock>
 800af46:	6833      	ldr	r3, [r6, #0]
 800af48:	461c      	mov	r4, r3
 800af4a:	bb34      	cbnz	r4, 800af9a <_malloc_r+0x82>
 800af4c:	4629      	mov	r1, r5
 800af4e:	4638      	mov	r0, r7
 800af50:	f7ff ffc2 	bl	800aed8 <sbrk_aligned>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	4604      	mov	r4, r0
 800af58:	d14d      	bne.n	800aff6 <_malloc_r+0xde>
 800af5a:	6834      	ldr	r4, [r6, #0]
 800af5c:	4626      	mov	r6, r4
 800af5e:	2e00      	cmp	r6, #0
 800af60:	d140      	bne.n	800afe4 <_malloc_r+0xcc>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	4631      	mov	r1, r6
 800af66:	4638      	mov	r0, r7
 800af68:	eb04 0803 	add.w	r8, r4, r3
 800af6c:	f000 fb36 	bl	800b5dc <_sbrk_r>
 800af70:	4580      	cmp	r8, r0
 800af72:	d13a      	bne.n	800afea <_malloc_r+0xd2>
 800af74:	6821      	ldr	r1, [r4, #0]
 800af76:	3503      	adds	r5, #3
 800af78:	1a6d      	subs	r5, r5, r1
 800af7a:	f025 0503 	bic.w	r5, r5, #3
 800af7e:	3508      	adds	r5, #8
 800af80:	2d0c      	cmp	r5, #12
 800af82:	bf38      	it	cc
 800af84:	250c      	movcc	r5, #12
 800af86:	4629      	mov	r1, r5
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ffa5 	bl	800aed8 <sbrk_aligned>
 800af8e:	3001      	adds	r0, #1
 800af90:	d02b      	beq.n	800afea <_malloc_r+0xd2>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	442b      	add	r3, r5
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	e00e      	b.n	800afb8 <_malloc_r+0xa0>
 800af9a:	6822      	ldr	r2, [r4, #0]
 800af9c:	1b52      	subs	r2, r2, r5
 800af9e:	d41e      	bmi.n	800afde <_malloc_r+0xc6>
 800afa0:	2a0b      	cmp	r2, #11
 800afa2:	d916      	bls.n	800afd2 <_malloc_r+0xba>
 800afa4:	1961      	adds	r1, r4, r5
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	6025      	str	r5, [r4, #0]
 800afaa:	bf18      	it	ne
 800afac:	6059      	strne	r1, [r3, #4]
 800afae:	6863      	ldr	r3, [r4, #4]
 800afb0:	bf08      	it	eq
 800afb2:	6031      	streq	r1, [r6, #0]
 800afb4:	5162      	str	r2, [r4, r5]
 800afb6:	604b      	str	r3, [r1, #4]
 800afb8:	4638      	mov	r0, r7
 800afba:	f104 060b 	add.w	r6, r4, #11
 800afbe:	f000 fe0b 	bl	800bbd8 <__malloc_unlock>
 800afc2:	f026 0607 	bic.w	r6, r6, #7
 800afc6:	1d23      	adds	r3, r4, #4
 800afc8:	1af2      	subs	r2, r6, r3
 800afca:	d0b6      	beq.n	800af3a <_malloc_r+0x22>
 800afcc:	1b9b      	subs	r3, r3, r6
 800afce:	50a3      	str	r3, [r4, r2]
 800afd0:	e7b3      	b.n	800af3a <_malloc_r+0x22>
 800afd2:	6862      	ldr	r2, [r4, #4]
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	bf0c      	ite	eq
 800afd8:	6032      	streq	r2, [r6, #0]
 800afda:	605a      	strne	r2, [r3, #4]
 800afdc:	e7ec      	b.n	800afb8 <_malloc_r+0xa0>
 800afde:	4623      	mov	r3, r4
 800afe0:	6864      	ldr	r4, [r4, #4]
 800afe2:	e7b2      	b.n	800af4a <_malloc_r+0x32>
 800afe4:	4634      	mov	r4, r6
 800afe6:	6876      	ldr	r6, [r6, #4]
 800afe8:	e7b9      	b.n	800af5e <_malloc_r+0x46>
 800afea:	230c      	movs	r3, #12
 800afec:	603b      	str	r3, [r7, #0]
 800afee:	4638      	mov	r0, r7
 800aff0:	f000 fdf2 	bl	800bbd8 <__malloc_unlock>
 800aff4:	e7a1      	b.n	800af3a <_malloc_r+0x22>
 800aff6:	6025      	str	r5, [r4, #0]
 800aff8:	e7de      	b.n	800afb8 <_malloc_r+0xa0>
 800affa:	bf00      	nop
 800affc:	240247a0 	.word	0x240247a0

0800b000 <__sfputc_r>:
 800b000:	6893      	ldr	r3, [r2, #8]
 800b002:	3b01      	subs	r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	b410      	push	{r4}
 800b008:	6093      	str	r3, [r2, #8]
 800b00a:	da08      	bge.n	800b01e <__sfputc_r+0x1e>
 800b00c:	6994      	ldr	r4, [r2, #24]
 800b00e:	42a3      	cmp	r3, r4
 800b010:	db01      	blt.n	800b016 <__sfputc_r+0x16>
 800b012:	290a      	cmp	r1, #10
 800b014:	d103      	bne.n	800b01e <__sfputc_r+0x1e>
 800b016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b01a:	f000 baef 	b.w	800b5fc <__swbuf_r>
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	1c58      	adds	r0, r3, #1
 800b022:	6010      	str	r0, [r2, #0]
 800b024:	7019      	strb	r1, [r3, #0]
 800b026:	4608      	mov	r0, r1
 800b028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <__sfputs_r>:
 800b02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b030:	4606      	mov	r6, r0
 800b032:	460f      	mov	r7, r1
 800b034:	4614      	mov	r4, r2
 800b036:	18d5      	adds	r5, r2, r3
 800b038:	42ac      	cmp	r4, r5
 800b03a:	d101      	bne.n	800b040 <__sfputs_r+0x12>
 800b03c:	2000      	movs	r0, #0
 800b03e:	e007      	b.n	800b050 <__sfputs_r+0x22>
 800b040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b044:	463a      	mov	r2, r7
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ffda 	bl	800b000 <__sfputc_r>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	d1f3      	bne.n	800b038 <__sfputs_r+0xa>
 800b050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b054 <_vfiprintf_r>:
 800b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	460d      	mov	r5, r1
 800b05a:	b09d      	sub	sp, #116	; 0x74
 800b05c:	4614      	mov	r4, r2
 800b05e:	4698      	mov	r8, r3
 800b060:	4606      	mov	r6, r0
 800b062:	b118      	cbz	r0, 800b06c <_vfiprintf_r+0x18>
 800b064:	6983      	ldr	r3, [r0, #24]
 800b066:	b90b      	cbnz	r3, 800b06c <_vfiprintf_r+0x18>
 800b068:	f000 fcaa 	bl	800b9c0 <__sinit>
 800b06c:	4b89      	ldr	r3, [pc, #548]	; (800b294 <_vfiprintf_r+0x240>)
 800b06e:	429d      	cmp	r5, r3
 800b070:	d11b      	bne.n	800b0aa <_vfiprintf_r+0x56>
 800b072:	6875      	ldr	r5, [r6, #4]
 800b074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	d405      	bmi.n	800b086 <_vfiprintf_r+0x32>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	059a      	lsls	r2, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_vfiprintf_r+0x32>
 800b080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b082:	f000 fd3b 	bl	800bafc <__retarget_lock_acquire_recursive>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	071b      	lsls	r3, r3, #28
 800b08a:	d501      	bpl.n	800b090 <_vfiprintf_r+0x3c>
 800b08c:	692b      	ldr	r3, [r5, #16]
 800b08e:	b9eb      	cbnz	r3, 800b0cc <_vfiprintf_r+0x78>
 800b090:	4629      	mov	r1, r5
 800b092:	4630      	mov	r0, r6
 800b094:	f000 fb04 	bl	800b6a0 <__swsetup_r>
 800b098:	b1c0      	cbz	r0, 800b0cc <_vfiprintf_r+0x78>
 800b09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b09c:	07dc      	lsls	r4, r3, #31
 800b09e:	d50e      	bpl.n	800b0be <_vfiprintf_r+0x6a>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a4:	b01d      	add	sp, #116	; 0x74
 800b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	4b7b      	ldr	r3, [pc, #492]	; (800b298 <_vfiprintf_r+0x244>)
 800b0ac:	429d      	cmp	r5, r3
 800b0ae:	d101      	bne.n	800b0b4 <_vfiprintf_r+0x60>
 800b0b0:	68b5      	ldr	r5, [r6, #8]
 800b0b2:	e7df      	b.n	800b074 <_vfiprintf_r+0x20>
 800b0b4:	4b79      	ldr	r3, [pc, #484]	; (800b29c <_vfiprintf_r+0x248>)
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	bf08      	it	eq
 800b0ba:	68f5      	ldreq	r5, [r6, #12]
 800b0bc:	e7da      	b.n	800b074 <_vfiprintf_r+0x20>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	0598      	lsls	r0, r3, #22
 800b0c2:	d4ed      	bmi.n	800b0a0 <_vfiprintf_r+0x4c>
 800b0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0c6:	f000 fd1a 	bl	800bafe <__retarget_lock_release_recursive>
 800b0ca:	e7e9      	b.n	800b0a0 <_vfiprintf_r+0x4c>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0da:	2330      	movs	r3, #48	; 0x30
 800b0dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2a0 <_vfiprintf_r+0x24c>
 800b0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0e4:	f04f 0901 	mov.w	r9, #1
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	469a      	mov	sl, r3
 800b0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0f0:	b10a      	cbz	r2, 800b0f6 <_vfiprintf_r+0xa2>
 800b0f2:	2a25      	cmp	r2, #37	; 0x25
 800b0f4:	d1f9      	bne.n	800b0ea <_vfiprintf_r+0x96>
 800b0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0fa:	d00b      	beq.n	800b114 <_vfiprintf_r+0xc0>
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	4622      	mov	r2, r4
 800b100:	4629      	mov	r1, r5
 800b102:	4630      	mov	r0, r6
 800b104:	f7ff ff93 	bl	800b02e <__sfputs_r>
 800b108:	3001      	adds	r0, #1
 800b10a:	f000 80aa 	beq.w	800b262 <_vfiprintf_r+0x20e>
 800b10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b110:	445a      	add	r2, fp
 800b112:	9209      	str	r2, [sp, #36]	; 0x24
 800b114:	f89a 3000 	ldrb.w	r3, [sl]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 80a2 	beq.w	800b262 <_vfiprintf_r+0x20e>
 800b11e:	2300      	movs	r3, #0
 800b120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b128:	f10a 0a01 	add.w	sl, sl, #1
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b134:	931a      	str	r3, [sp, #104]	; 0x68
 800b136:	4654      	mov	r4, sl
 800b138:	2205      	movs	r2, #5
 800b13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13e:	4858      	ldr	r0, [pc, #352]	; (800b2a0 <_vfiprintf_r+0x24c>)
 800b140:	f7f5 f8f6 	bl	8000330 <memchr>
 800b144:	9a04      	ldr	r2, [sp, #16]
 800b146:	b9d8      	cbnz	r0, 800b180 <_vfiprintf_r+0x12c>
 800b148:	06d1      	lsls	r1, r2, #27
 800b14a:	bf44      	itt	mi
 800b14c:	2320      	movmi	r3, #32
 800b14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b152:	0713      	lsls	r3, r2, #28
 800b154:	bf44      	itt	mi
 800b156:	232b      	movmi	r3, #43	; 0x2b
 800b158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b15c:	f89a 3000 	ldrb.w	r3, [sl]
 800b160:	2b2a      	cmp	r3, #42	; 0x2a
 800b162:	d015      	beq.n	800b190 <_vfiprintf_r+0x13c>
 800b164:	9a07      	ldr	r2, [sp, #28]
 800b166:	4654      	mov	r4, sl
 800b168:	2000      	movs	r0, #0
 800b16a:	f04f 0c0a 	mov.w	ip, #10
 800b16e:	4621      	mov	r1, r4
 800b170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b174:	3b30      	subs	r3, #48	; 0x30
 800b176:	2b09      	cmp	r3, #9
 800b178:	d94e      	bls.n	800b218 <_vfiprintf_r+0x1c4>
 800b17a:	b1b0      	cbz	r0, 800b1aa <_vfiprintf_r+0x156>
 800b17c:	9207      	str	r2, [sp, #28]
 800b17e:	e014      	b.n	800b1aa <_vfiprintf_r+0x156>
 800b180:	eba0 0308 	sub.w	r3, r0, r8
 800b184:	fa09 f303 	lsl.w	r3, r9, r3
 800b188:	4313      	orrs	r3, r2
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	46a2      	mov	sl, r4
 800b18e:	e7d2      	b.n	800b136 <_vfiprintf_r+0xe2>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	1d19      	adds	r1, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	9103      	str	r1, [sp, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	bfbb      	ittet	lt
 800b19c:	425b      	neglt	r3, r3
 800b19e:	f042 0202 	orrlt.w	r2, r2, #2
 800b1a2:	9307      	strge	r3, [sp, #28]
 800b1a4:	9307      	strlt	r3, [sp, #28]
 800b1a6:	bfb8      	it	lt
 800b1a8:	9204      	strlt	r2, [sp, #16]
 800b1aa:	7823      	ldrb	r3, [r4, #0]
 800b1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ae:	d10c      	bne.n	800b1ca <_vfiprintf_r+0x176>
 800b1b0:	7863      	ldrb	r3, [r4, #1]
 800b1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b4:	d135      	bne.n	800b222 <_vfiprintf_r+0x1ce>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	1d1a      	adds	r2, r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9203      	str	r2, [sp, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfb8      	it	lt
 800b1c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1c6:	3402      	adds	r4, #2
 800b1c8:	9305      	str	r3, [sp, #20]
 800b1ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2b0 <_vfiprintf_r+0x25c>
 800b1ce:	7821      	ldrb	r1, [r4, #0]
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	f7f5 f8ac 	bl	8000330 <memchr>
 800b1d8:	b140      	cbz	r0, 800b1ec <_vfiprintf_r+0x198>
 800b1da:	2340      	movs	r3, #64	; 0x40
 800b1dc:	eba0 000a 	sub.w	r0, r0, sl
 800b1e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	4303      	orrs	r3, r0
 800b1e8:	3401      	adds	r4, #1
 800b1ea:	9304      	str	r3, [sp, #16]
 800b1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f0:	482c      	ldr	r0, [pc, #176]	; (800b2a4 <_vfiprintf_r+0x250>)
 800b1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1f6:	2206      	movs	r2, #6
 800b1f8:	f7f5 f89a 	bl	8000330 <memchr>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d03f      	beq.n	800b280 <_vfiprintf_r+0x22c>
 800b200:	4b29      	ldr	r3, [pc, #164]	; (800b2a8 <_vfiprintf_r+0x254>)
 800b202:	bb1b      	cbnz	r3, 800b24c <_vfiprintf_r+0x1f8>
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	3307      	adds	r3, #7
 800b208:	f023 0307 	bic.w	r3, r3, #7
 800b20c:	3308      	adds	r3, #8
 800b20e:	9303      	str	r3, [sp, #12]
 800b210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b212:	443b      	add	r3, r7
 800b214:	9309      	str	r3, [sp, #36]	; 0x24
 800b216:	e767      	b.n	800b0e8 <_vfiprintf_r+0x94>
 800b218:	fb0c 3202 	mla	r2, ip, r2, r3
 800b21c:	460c      	mov	r4, r1
 800b21e:	2001      	movs	r0, #1
 800b220:	e7a5      	b.n	800b16e <_vfiprintf_r+0x11a>
 800b222:	2300      	movs	r3, #0
 800b224:	3401      	adds	r4, #1
 800b226:	9305      	str	r3, [sp, #20]
 800b228:	4619      	mov	r1, r3
 800b22a:	f04f 0c0a 	mov.w	ip, #10
 800b22e:	4620      	mov	r0, r4
 800b230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b234:	3a30      	subs	r2, #48	; 0x30
 800b236:	2a09      	cmp	r2, #9
 800b238:	d903      	bls.n	800b242 <_vfiprintf_r+0x1ee>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0c5      	beq.n	800b1ca <_vfiprintf_r+0x176>
 800b23e:	9105      	str	r1, [sp, #20]
 800b240:	e7c3      	b.n	800b1ca <_vfiprintf_r+0x176>
 800b242:	fb0c 2101 	mla	r1, ip, r1, r2
 800b246:	4604      	mov	r4, r0
 800b248:	2301      	movs	r3, #1
 800b24a:	e7f0      	b.n	800b22e <_vfiprintf_r+0x1da>
 800b24c:	ab03      	add	r3, sp, #12
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	462a      	mov	r2, r5
 800b252:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <_vfiprintf_r+0x258>)
 800b254:	a904      	add	r1, sp, #16
 800b256:	4630      	mov	r0, r6
 800b258:	f3af 8000 	nop.w
 800b25c:	4607      	mov	r7, r0
 800b25e:	1c78      	adds	r0, r7, #1
 800b260:	d1d6      	bne.n	800b210 <_vfiprintf_r+0x1bc>
 800b262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b264:	07d9      	lsls	r1, r3, #31
 800b266:	d405      	bmi.n	800b274 <_vfiprintf_r+0x220>
 800b268:	89ab      	ldrh	r3, [r5, #12]
 800b26a:	059a      	lsls	r2, r3, #22
 800b26c:	d402      	bmi.n	800b274 <_vfiprintf_r+0x220>
 800b26e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b270:	f000 fc45 	bl	800bafe <__retarget_lock_release_recursive>
 800b274:	89ab      	ldrh	r3, [r5, #12]
 800b276:	065b      	lsls	r3, r3, #25
 800b278:	f53f af12 	bmi.w	800b0a0 <_vfiprintf_r+0x4c>
 800b27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b27e:	e711      	b.n	800b0a4 <_vfiprintf_r+0x50>
 800b280:	ab03      	add	r3, sp, #12
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	462a      	mov	r2, r5
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <_vfiprintf_r+0x258>)
 800b288:	a904      	add	r1, sp, #16
 800b28a:	4630      	mov	r0, r6
 800b28c:	f000 f880 	bl	800b390 <_printf_i>
 800b290:	e7e4      	b.n	800b25c <_vfiprintf_r+0x208>
 800b292:	bf00      	nop
 800b294:	0800c040 	.word	0x0800c040
 800b298:	0800c060 	.word	0x0800c060
 800b29c:	0800c020 	.word	0x0800c020
 800b2a0:	0800bfed 	.word	0x0800bfed
 800b2a4:	0800bff7 	.word	0x0800bff7
 800b2a8:	00000000 	.word	0x00000000
 800b2ac:	0800b02f 	.word	0x0800b02f
 800b2b0:	0800bff3 	.word	0x0800bff3

0800b2b4 <_printf_common>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	4616      	mov	r6, r2
 800b2ba:	4699      	mov	r9, r3
 800b2bc:	688a      	ldr	r2, [r1, #8]
 800b2be:	690b      	ldr	r3, [r1, #16]
 800b2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	bfb8      	it	lt
 800b2c8:	4613      	movlt	r3, r2
 800b2ca:	6033      	str	r3, [r6, #0]
 800b2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	b10a      	cbz	r2, 800b2da <_printf_common+0x26>
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	6033      	str	r3, [r6, #0]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	0699      	lsls	r1, r3, #26
 800b2de:	bf42      	ittt	mi
 800b2e0:	6833      	ldrmi	r3, [r6, #0]
 800b2e2:	3302      	addmi	r3, #2
 800b2e4:	6033      	strmi	r3, [r6, #0]
 800b2e6:	6825      	ldr	r5, [r4, #0]
 800b2e8:	f015 0506 	ands.w	r5, r5, #6
 800b2ec:	d106      	bne.n	800b2fc <_printf_common+0x48>
 800b2ee:	f104 0a19 	add.w	sl, r4, #25
 800b2f2:	68e3      	ldr	r3, [r4, #12]
 800b2f4:	6832      	ldr	r2, [r6, #0]
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	dc26      	bgt.n	800b34a <_printf_common+0x96>
 800b2fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b300:	1e13      	subs	r3, r2, #0
 800b302:	6822      	ldr	r2, [r4, #0]
 800b304:	bf18      	it	ne
 800b306:	2301      	movne	r3, #1
 800b308:	0692      	lsls	r2, r2, #26
 800b30a:	d42b      	bmi.n	800b364 <_printf_common+0xb0>
 800b30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b310:	4649      	mov	r1, r9
 800b312:	4638      	mov	r0, r7
 800b314:	47c0      	blx	r8
 800b316:	3001      	adds	r0, #1
 800b318:	d01e      	beq.n	800b358 <_printf_common+0xa4>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	68e5      	ldr	r5, [r4, #12]
 800b31e:	6832      	ldr	r2, [r6, #0]
 800b320:	f003 0306 	and.w	r3, r3, #6
 800b324:	2b04      	cmp	r3, #4
 800b326:	bf08      	it	eq
 800b328:	1aad      	subeq	r5, r5, r2
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	6922      	ldr	r2, [r4, #16]
 800b32e:	bf0c      	ite	eq
 800b330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b334:	2500      	movne	r5, #0
 800b336:	4293      	cmp	r3, r2
 800b338:	bfc4      	itt	gt
 800b33a:	1a9b      	subgt	r3, r3, r2
 800b33c:	18ed      	addgt	r5, r5, r3
 800b33e:	2600      	movs	r6, #0
 800b340:	341a      	adds	r4, #26
 800b342:	42b5      	cmp	r5, r6
 800b344:	d11a      	bne.n	800b37c <_printf_common+0xc8>
 800b346:	2000      	movs	r0, #0
 800b348:	e008      	b.n	800b35c <_printf_common+0xa8>
 800b34a:	2301      	movs	r3, #1
 800b34c:	4652      	mov	r2, sl
 800b34e:	4649      	mov	r1, r9
 800b350:	4638      	mov	r0, r7
 800b352:	47c0      	blx	r8
 800b354:	3001      	adds	r0, #1
 800b356:	d103      	bne.n	800b360 <_printf_common+0xac>
 800b358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b360:	3501      	adds	r5, #1
 800b362:	e7c6      	b.n	800b2f2 <_printf_common+0x3e>
 800b364:	18e1      	adds	r1, r4, r3
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	2030      	movs	r0, #48	; 0x30
 800b36a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b36e:	4422      	add	r2, r4
 800b370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b378:	3302      	adds	r3, #2
 800b37a:	e7c7      	b.n	800b30c <_printf_common+0x58>
 800b37c:	2301      	movs	r3, #1
 800b37e:	4622      	mov	r2, r4
 800b380:	4649      	mov	r1, r9
 800b382:	4638      	mov	r0, r7
 800b384:	47c0      	blx	r8
 800b386:	3001      	adds	r0, #1
 800b388:	d0e6      	beq.n	800b358 <_printf_common+0xa4>
 800b38a:	3601      	adds	r6, #1
 800b38c:	e7d9      	b.n	800b342 <_printf_common+0x8e>
	...

0800b390 <_printf_i>:
 800b390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	7e0f      	ldrb	r7, [r1, #24]
 800b396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b398:	2f78      	cmp	r7, #120	; 0x78
 800b39a:	4691      	mov	r9, r2
 800b39c:	4680      	mov	r8, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	469a      	mov	sl, r3
 800b3a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3a6:	d807      	bhi.n	800b3b8 <_printf_i+0x28>
 800b3a8:	2f62      	cmp	r7, #98	; 0x62
 800b3aa:	d80a      	bhi.n	800b3c2 <_printf_i+0x32>
 800b3ac:	2f00      	cmp	r7, #0
 800b3ae:	f000 80d8 	beq.w	800b562 <_printf_i+0x1d2>
 800b3b2:	2f58      	cmp	r7, #88	; 0x58
 800b3b4:	f000 80a3 	beq.w	800b4fe <_printf_i+0x16e>
 800b3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3c0:	e03a      	b.n	800b438 <_printf_i+0xa8>
 800b3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3c6:	2b15      	cmp	r3, #21
 800b3c8:	d8f6      	bhi.n	800b3b8 <_printf_i+0x28>
 800b3ca:	a101      	add	r1, pc, #4	; (adr r1, 800b3d0 <_printf_i+0x40>)
 800b3cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3d0:	0800b429 	.word	0x0800b429
 800b3d4:	0800b43d 	.word	0x0800b43d
 800b3d8:	0800b3b9 	.word	0x0800b3b9
 800b3dc:	0800b3b9 	.word	0x0800b3b9
 800b3e0:	0800b3b9 	.word	0x0800b3b9
 800b3e4:	0800b3b9 	.word	0x0800b3b9
 800b3e8:	0800b43d 	.word	0x0800b43d
 800b3ec:	0800b3b9 	.word	0x0800b3b9
 800b3f0:	0800b3b9 	.word	0x0800b3b9
 800b3f4:	0800b3b9 	.word	0x0800b3b9
 800b3f8:	0800b3b9 	.word	0x0800b3b9
 800b3fc:	0800b549 	.word	0x0800b549
 800b400:	0800b46d 	.word	0x0800b46d
 800b404:	0800b52b 	.word	0x0800b52b
 800b408:	0800b3b9 	.word	0x0800b3b9
 800b40c:	0800b3b9 	.word	0x0800b3b9
 800b410:	0800b56b 	.word	0x0800b56b
 800b414:	0800b3b9 	.word	0x0800b3b9
 800b418:	0800b46d 	.word	0x0800b46d
 800b41c:	0800b3b9 	.word	0x0800b3b9
 800b420:	0800b3b9 	.word	0x0800b3b9
 800b424:	0800b533 	.word	0x0800b533
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	1d1a      	adds	r2, r3, #4
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	602a      	str	r2, [r5, #0]
 800b430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b438:	2301      	movs	r3, #1
 800b43a:	e0a3      	b.n	800b584 <_printf_i+0x1f4>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	6829      	ldr	r1, [r5, #0]
 800b440:	0606      	lsls	r6, r0, #24
 800b442:	f101 0304 	add.w	r3, r1, #4
 800b446:	d50a      	bpl.n	800b45e <_printf_i+0xce>
 800b448:	680e      	ldr	r6, [r1, #0]
 800b44a:	602b      	str	r3, [r5, #0]
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	da03      	bge.n	800b458 <_printf_i+0xc8>
 800b450:	232d      	movs	r3, #45	; 0x2d
 800b452:	4276      	negs	r6, r6
 800b454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b458:	485e      	ldr	r0, [pc, #376]	; (800b5d4 <_printf_i+0x244>)
 800b45a:	230a      	movs	r3, #10
 800b45c:	e019      	b.n	800b492 <_printf_i+0x102>
 800b45e:	680e      	ldr	r6, [r1, #0]
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b466:	bf18      	it	ne
 800b468:	b236      	sxthne	r6, r6
 800b46a:	e7ef      	b.n	800b44c <_printf_i+0xbc>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	6820      	ldr	r0, [r4, #0]
 800b470:	1d19      	adds	r1, r3, #4
 800b472:	6029      	str	r1, [r5, #0]
 800b474:	0601      	lsls	r1, r0, #24
 800b476:	d501      	bpl.n	800b47c <_printf_i+0xec>
 800b478:	681e      	ldr	r6, [r3, #0]
 800b47a:	e002      	b.n	800b482 <_printf_i+0xf2>
 800b47c:	0646      	lsls	r6, r0, #25
 800b47e:	d5fb      	bpl.n	800b478 <_printf_i+0xe8>
 800b480:	881e      	ldrh	r6, [r3, #0]
 800b482:	4854      	ldr	r0, [pc, #336]	; (800b5d4 <_printf_i+0x244>)
 800b484:	2f6f      	cmp	r7, #111	; 0x6f
 800b486:	bf0c      	ite	eq
 800b488:	2308      	moveq	r3, #8
 800b48a:	230a      	movne	r3, #10
 800b48c:	2100      	movs	r1, #0
 800b48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b492:	6865      	ldr	r5, [r4, #4]
 800b494:	60a5      	str	r5, [r4, #8]
 800b496:	2d00      	cmp	r5, #0
 800b498:	bfa2      	ittt	ge
 800b49a:	6821      	ldrge	r1, [r4, #0]
 800b49c:	f021 0104 	bicge.w	r1, r1, #4
 800b4a0:	6021      	strge	r1, [r4, #0]
 800b4a2:	b90e      	cbnz	r6, 800b4a8 <_printf_i+0x118>
 800b4a4:	2d00      	cmp	r5, #0
 800b4a6:	d04d      	beq.n	800b544 <_printf_i+0x1b4>
 800b4a8:	4615      	mov	r5, r2
 800b4aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b4b2:	5dc7      	ldrb	r7, [r0, r7]
 800b4b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4b8:	4637      	mov	r7, r6
 800b4ba:	42bb      	cmp	r3, r7
 800b4bc:	460e      	mov	r6, r1
 800b4be:	d9f4      	bls.n	800b4aa <_printf_i+0x11a>
 800b4c0:	2b08      	cmp	r3, #8
 800b4c2:	d10b      	bne.n	800b4dc <_printf_i+0x14c>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	07de      	lsls	r6, r3, #31
 800b4c8:	d508      	bpl.n	800b4dc <_printf_i+0x14c>
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	6861      	ldr	r1, [r4, #4]
 800b4ce:	4299      	cmp	r1, r3
 800b4d0:	bfde      	ittt	le
 800b4d2:	2330      	movle	r3, #48	; 0x30
 800b4d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b4dc:	1b52      	subs	r2, r2, r5
 800b4de:	6122      	str	r2, [r4, #16]
 800b4e0:	f8cd a000 	str.w	sl, [sp]
 800b4e4:	464b      	mov	r3, r9
 800b4e6:	aa03      	add	r2, sp, #12
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	f7ff fee2 	bl	800b2b4 <_printf_common>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d14c      	bne.n	800b58e <_printf_i+0x1fe>
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f8:	b004      	add	sp, #16
 800b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fe:	4835      	ldr	r0, [pc, #212]	; (800b5d4 <_printf_i+0x244>)
 800b500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b504:	6829      	ldr	r1, [r5, #0]
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	f851 6b04 	ldr.w	r6, [r1], #4
 800b50c:	6029      	str	r1, [r5, #0]
 800b50e:	061d      	lsls	r5, r3, #24
 800b510:	d514      	bpl.n	800b53c <_printf_i+0x1ac>
 800b512:	07df      	lsls	r7, r3, #31
 800b514:	bf44      	itt	mi
 800b516:	f043 0320 	orrmi.w	r3, r3, #32
 800b51a:	6023      	strmi	r3, [r4, #0]
 800b51c:	b91e      	cbnz	r6, 800b526 <_printf_i+0x196>
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	f023 0320 	bic.w	r3, r3, #32
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	2310      	movs	r3, #16
 800b528:	e7b0      	b.n	800b48c <_printf_i+0xfc>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	f043 0320 	orr.w	r3, r3, #32
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	2378      	movs	r3, #120	; 0x78
 800b534:	4828      	ldr	r0, [pc, #160]	; (800b5d8 <_printf_i+0x248>)
 800b536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b53a:	e7e3      	b.n	800b504 <_printf_i+0x174>
 800b53c:	0659      	lsls	r1, r3, #25
 800b53e:	bf48      	it	mi
 800b540:	b2b6      	uxthmi	r6, r6
 800b542:	e7e6      	b.n	800b512 <_printf_i+0x182>
 800b544:	4615      	mov	r5, r2
 800b546:	e7bb      	b.n	800b4c0 <_printf_i+0x130>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	6826      	ldr	r6, [r4, #0]
 800b54c:	6961      	ldr	r1, [r4, #20]
 800b54e:	1d18      	adds	r0, r3, #4
 800b550:	6028      	str	r0, [r5, #0]
 800b552:	0635      	lsls	r5, r6, #24
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	d501      	bpl.n	800b55c <_printf_i+0x1cc>
 800b558:	6019      	str	r1, [r3, #0]
 800b55a:	e002      	b.n	800b562 <_printf_i+0x1d2>
 800b55c:	0670      	lsls	r0, r6, #25
 800b55e:	d5fb      	bpl.n	800b558 <_printf_i+0x1c8>
 800b560:	8019      	strh	r1, [r3, #0]
 800b562:	2300      	movs	r3, #0
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	4615      	mov	r5, r2
 800b568:	e7ba      	b.n	800b4e0 <_printf_i+0x150>
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	1d1a      	adds	r2, r3, #4
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	681d      	ldr	r5, [r3, #0]
 800b572:	6862      	ldr	r2, [r4, #4]
 800b574:	2100      	movs	r1, #0
 800b576:	4628      	mov	r0, r5
 800b578:	f7f4 feda 	bl	8000330 <memchr>
 800b57c:	b108      	cbz	r0, 800b582 <_printf_i+0x1f2>
 800b57e:	1b40      	subs	r0, r0, r5
 800b580:	6060      	str	r0, [r4, #4]
 800b582:	6863      	ldr	r3, [r4, #4]
 800b584:	6123      	str	r3, [r4, #16]
 800b586:	2300      	movs	r3, #0
 800b588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b58c:	e7a8      	b.n	800b4e0 <_printf_i+0x150>
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	462a      	mov	r2, r5
 800b592:	4649      	mov	r1, r9
 800b594:	4640      	mov	r0, r8
 800b596:	47d0      	blx	sl
 800b598:	3001      	adds	r0, #1
 800b59a:	d0ab      	beq.n	800b4f4 <_printf_i+0x164>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	079b      	lsls	r3, r3, #30
 800b5a0:	d413      	bmi.n	800b5ca <_printf_i+0x23a>
 800b5a2:	68e0      	ldr	r0, [r4, #12]
 800b5a4:	9b03      	ldr	r3, [sp, #12]
 800b5a6:	4298      	cmp	r0, r3
 800b5a8:	bfb8      	it	lt
 800b5aa:	4618      	movlt	r0, r3
 800b5ac:	e7a4      	b.n	800b4f8 <_printf_i+0x168>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	47d0      	blx	sl
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d09b      	beq.n	800b4f4 <_printf_i+0x164>
 800b5bc:	3501      	adds	r5, #1
 800b5be:	68e3      	ldr	r3, [r4, #12]
 800b5c0:	9903      	ldr	r1, [sp, #12]
 800b5c2:	1a5b      	subs	r3, r3, r1
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	dcf2      	bgt.n	800b5ae <_printf_i+0x21e>
 800b5c8:	e7eb      	b.n	800b5a2 <_printf_i+0x212>
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	f104 0619 	add.w	r6, r4, #25
 800b5d0:	e7f5      	b.n	800b5be <_printf_i+0x22e>
 800b5d2:	bf00      	nop
 800b5d4:	0800bffe 	.word	0x0800bffe
 800b5d8:	0800c00f 	.word	0x0800c00f

0800b5dc <_sbrk_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_sbrk_r+0x1c>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7f6 f908 	bl	80017fc <_sbrk>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_sbrk_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_sbrk_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	240247ac 	.word	0x240247ac

0800b5fc <__swbuf_r>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	460e      	mov	r6, r1
 800b600:	4614      	mov	r4, r2
 800b602:	4605      	mov	r5, r0
 800b604:	b118      	cbz	r0, 800b60e <__swbuf_r+0x12>
 800b606:	6983      	ldr	r3, [r0, #24]
 800b608:	b90b      	cbnz	r3, 800b60e <__swbuf_r+0x12>
 800b60a:	f000 f9d9 	bl	800b9c0 <__sinit>
 800b60e:	4b21      	ldr	r3, [pc, #132]	; (800b694 <__swbuf_r+0x98>)
 800b610:	429c      	cmp	r4, r3
 800b612:	d12b      	bne.n	800b66c <__swbuf_r+0x70>
 800b614:	686c      	ldr	r4, [r5, #4]
 800b616:	69a3      	ldr	r3, [r4, #24]
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	071a      	lsls	r2, r3, #28
 800b61e:	d52f      	bpl.n	800b680 <__swbuf_r+0x84>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	b36b      	cbz	r3, 800b680 <__swbuf_r+0x84>
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	6820      	ldr	r0, [r4, #0]
 800b628:	1ac0      	subs	r0, r0, r3
 800b62a:	6963      	ldr	r3, [r4, #20]
 800b62c:	b2f6      	uxtb	r6, r6
 800b62e:	4283      	cmp	r3, r0
 800b630:	4637      	mov	r7, r6
 800b632:	dc04      	bgt.n	800b63e <__swbuf_r+0x42>
 800b634:	4621      	mov	r1, r4
 800b636:	4628      	mov	r0, r5
 800b638:	f000 f92e 	bl	800b898 <_fflush_r>
 800b63c:	bb30      	cbnz	r0, 800b68c <__swbuf_r+0x90>
 800b63e:	68a3      	ldr	r3, [r4, #8]
 800b640:	3b01      	subs	r3, #1
 800b642:	60a3      	str	r3, [r4, #8]
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	6022      	str	r2, [r4, #0]
 800b64a:	701e      	strb	r6, [r3, #0]
 800b64c:	6963      	ldr	r3, [r4, #20]
 800b64e:	3001      	adds	r0, #1
 800b650:	4283      	cmp	r3, r0
 800b652:	d004      	beq.n	800b65e <__swbuf_r+0x62>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	07db      	lsls	r3, r3, #31
 800b658:	d506      	bpl.n	800b668 <__swbuf_r+0x6c>
 800b65a:	2e0a      	cmp	r6, #10
 800b65c:	d104      	bne.n	800b668 <__swbuf_r+0x6c>
 800b65e:	4621      	mov	r1, r4
 800b660:	4628      	mov	r0, r5
 800b662:	f000 f919 	bl	800b898 <_fflush_r>
 800b666:	b988      	cbnz	r0, 800b68c <__swbuf_r+0x90>
 800b668:	4638      	mov	r0, r7
 800b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <__swbuf_r+0x9c>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	d101      	bne.n	800b676 <__swbuf_r+0x7a>
 800b672:	68ac      	ldr	r4, [r5, #8]
 800b674:	e7cf      	b.n	800b616 <__swbuf_r+0x1a>
 800b676:	4b09      	ldr	r3, [pc, #36]	; (800b69c <__swbuf_r+0xa0>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	bf08      	it	eq
 800b67c:	68ec      	ldreq	r4, [r5, #12]
 800b67e:	e7ca      	b.n	800b616 <__swbuf_r+0x1a>
 800b680:	4621      	mov	r1, r4
 800b682:	4628      	mov	r0, r5
 800b684:	f000 f80c 	bl	800b6a0 <__swsetup_r>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0cb      	beq.n	800b624 <__swbuf_r+0x28>
 800b68c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b690:	e7ea      	b.n	800b668 <__swbuf_r+0x6c>
 800b692:	bf00      	nop
 800b694:	0800c040 	.word	0x0800c040
 800b698:	0800c060 	.word	0x0800c060
 800b69c:	0800c020 	.word	0x0800c020

0800b6a0 <__swsetup_r>:
 800b6a0:	4b32      	ldr	r3, [pc, #200]	; (800b76c <__swsetup_r+0xcc>)
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	681d      	ldr	r5, [r3, #0]
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	b125      	cbz	r5, 800b6b6 <__swsetup_r+0x16>
 800b6ac:	69ab      	ldr	r3, [r5, #24]
 800b6ae:	b913      	cbnz	r3, 800b6b6 <__swsetup_r+0x16>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f000 f985 	bl	800b9c0 <__sinit>
 800b6b6:	4b2e      	ldr	r3, [pc, #184]	; (800b770 <__swsetup_r+0xd0>)
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	d10f      	bne.n	800b6dc <__swsetup_r+0x3c>
 800b6bc:	686c      	ldr	r4, [r5, #4]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6c4:	0719      	lsls	r1, r3, #28
 800b6c6:	d42c      	bmi.n	800b722 <__swsetup_r+0x82>
 800b6c8:	06dd      	lsls	r5, r3, #27
 800b6ca:	d411      	bmi.n	800b6f0 <__swsetup_r+0x50>
 800b6cc:	2309      	movs	r3, #9
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6da:	e03e      	b.n	800b75a <__swsetup_r+0xba>
 800b6dc:	4b25      	ldr	r3, [pc, #148]	; (800b774 <__swsetup_r+0xd4>)
 800b6de:	429c      	cmp	r4, r3
 800b6e0:	d101      	bne.n	800b6e6 <__swsetup_r+0x46>
 800b6e2:	68ac      	ldr	r4, [r5, #8]
 800b6e4:	e7eb      	b.n	800b6be <__swsetup_r+0x1e>
 800b6e6:	4b24      	ldr	r3, [pc, #144]	; (800b778 <__swsetup_r+0xd8>)
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	bf08      	it	eq
 800b6ec:	68ec      	ldreq	r4, [r5, #12]
 800b6ee:	e7e6      	b.n	800b6be <__swsetup_r+0x1e>
 800b6f0:	0758      	lsls	r0, r3, #29
 800b6f2:	d512      	bpl.n	800b71a <__swsetup_r+0x7a>
 800b6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f6:	b141      	cbz	r1, 800b70a <__swsetup_r+0x6a>
 800b6f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6fc:	4299      	cmp	r1, r3
 800b6fe:	d002      	beq.n	800b706 <__swsetup_r+0x66>
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff fb9d 	bl	800ae40 <_free_r>
 800b706:	2300      	movs	r3, #0
 800b708:	6363      	str	r3, [r4, #52]	; 0x34
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	2300      	movs	r3, #0
 800b714:	6063      	str	r3, [r4, #4]
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0308 	orr.w	r3, r3, #8
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	b94b      	cbnz	r3, 800b73a <__swsetup_r+0x9a>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b730:	d003      	beq.n	800b73a <__swsetup_r+0x9a>
 800b732:	4621      	mov	r1, r4
 800b734:	4630      	mov	r0, r6
 800b736:	f000 fa09 	bl	800bb4c <__smakebuf_r>
 800b73a:	89a0      	ldrh	r0, [r4, #12]
 800b73c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b740:	f010 0301 	ands.w	r3, r0, #1
 800b744:	d00a      	beq.n	800b75c <__swsetup_r+0xbc>
 800b746:	2300      	movs	r3, #0
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	6963      	ldr	r3, [r4, #20]
 800b74c:	425b      	negs	r3, r3
 800b74e:	61a3      	str	r3, [r4, #24]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	b943      	cbnz	r3, 800b766 <__swsetup_r+0xc6>
 800b754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b758:	d1ba      	bne.n	800b6d0 <__swsetup_r+0x30>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	0781      	lsls	r1, r0, #30
 800b75e:	bf58      	it	pl
 800b760:	6963      	ldrpl	r3, [r4, #20]
 800b762:	60a3      	str	r3, [r4, #8]
 800b764:	e7f4      	b.n	800b750 <__swsetup_r+0xb0>
 800b766:	2000      	movs	r0, #0
 800b768:	e7f7      	b.n	800b75a <__swsetup_r+0xba>
 800b76a:	bf00      	nop
 800b76c:	24000120 	.word	0x24000120
 800b770:	0800c040 	.word	0x0800c040
 800b774:	0800c060 	.word	0x0800c060
 800b778:	0800c020 	.word	0x0800c020

0800b77c <abort>:
 800b77c:	b508      	push	{r3, lr}
 800b77e:	2006      	movs	r0, #6
 800b780:	f000 fa58 	bl	800bc34 <raise>
 800b784:	2001      	movs	r0, #1
 800b786:	f7f5 ffc1 	bl	800170c <_exit>
	...

0800b78c <__sflush_r>:
 800b78c:	898a      	ldrh	r2, [r1, #12]
 800b78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b792:	4605      	mov	r5, r0
 800b794:	0710      	lsls	r0, r2, #28
 800b796:	460c      	mov	r4, r1
 800b798:	d458      	bmi.n	800b84c <__sflush_r+0xc0>
 800b79a:	684b      	ldr	r3, [r1, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dc05      	bgt.n	800b7ac <__sflush_r+0x20>
 800b7a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	dc02      	bgt.n	800b7ac <__sflush_r+0x20>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7ae:	2e00      	cmp	r6, #0
 800b7b0:	d0f9      	beq.n	800b7a6 <__sflush_r+0x1a>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7b8:	682f      	ldr	r7, [r5, #0]
 800b7ba:	602b      	str	r3, [r5, #0]
 800b7bc:	d032      	beq.n	800b824 <__sflush_r+0x98>
 800b7be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	075a      	lsls	r2, r3, #29
 800b7c4:	d505      	bpl.n	800b7d2 <__sflush_r+0x46>
 800b7c6:	6863      	ldr	r3, [r4, #4]
 800b7c8:	1ac0      	subs	r0, r0, r3
 800b7ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7cc:	b10b      	cbz	r3, 800b7d2 <__sflush_r+0x46>
 800b7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7d0:	1ac0      	subs	r0, r0, r3
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d8:	6a21      	ldr	r1, [r4, #32]
 800b7da:	4628      	mov	r0, r5
 800b7dc:	47b0      	blx	r6
 800b7de:	1c43      	adds	r3, r0, #1
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	d106      	bne.n	800b7f2 <__sflush_r+0x66>
 800b7e4:	6829      	ldr	r1, [r5, #0]
 800b7e6:	291d      	cmp	r1, #29
 800b7e8:	d82c      	bhi.n	800b844 <__sflush_r+0xb8>
 800b7ea:	4a2a      	ldr	r2, [pc, #168]	; (800b894 <__sflush_r+0x108>)
 800b7ec:	40ca      	lsrs	r2, r1
 800b7ee:	07d6      	lsls	r6, r2, #31
 800b7f0:	d528      	bpl.n	800b844 <__sflush_r+0xb8>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	6062      	str	r2, [r4, #4]
 800b7f6:	04d9      	lsls	r1, r3, #19
 800b7f8:	6922      	ldr	r2, [r4, #16]
 800b7fa:	6022      	str	r2, [r4, #0]
 800b7fc:	d504      	bpl.n	800b808 <__sflush_r+0x7c>
 800b7fe:	1c42      	adds	r2, r0, #1
 800b800:	d101      	bne.n	800b806 <__sflush_r+0x7a>
 800b802:	682b      	ldr	r3, [r5, #0]
 800b804:	b903      	cbnz	r3, 800b808 <__sflush_r+0x7c>
 800b806:	6560      	str	r0, [r4, #84]	; 0x54
 800b808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b80a:	602f      	str	r7, [r5, #0]
 800b80c:	2900      	cmp	r1, #0
 800b80e:	d0ca      	beq.n	800b7a6 <__sflush_r+0x1a>
 800b810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b814:	4299      	cmp	r1, r3
 800b816:	d002      	beq.n	800b81e <__sflush_r+0x92>
 800b818:	4628      	mov	r0, r5
 800b81a:	f7ff fb11 	bl	800ae40 <_free_r>
 800b81e:	2000      	movs	r0, #0
 800b820:	6360      	str	r0, [r4, #52]	; 0x34
 800b822:	e7c1      	b.n	800b7a8 <__sflush_r+0x1c>
 800b824:	6a21      	ldr	r1, [r4, #32]
 800b826:	2301      	movs	r3, #1
 800b828:	4628      	mov	r0, r5
 800b82a:	47b0      	blx	r6
 800b82c:	1c41      	adds	r1, r0, #1
 800b82e:	d1c7      	bne.n	800b7c0 <__sflush_r+0x34>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0c4      	beq.n	800b7c0 <__sflush_r+0x34>
 800b836:	2b1d      	cmp	r3, #29
 800b838:	d001      	beq.n	800b83e <__sflush_r+0xb2>
 800b83a:	2b16      	cmp	r3, #22
 800b83c:	d101      	bne.n	800b842 <__sflush_r+0xb6>
 800b83e:	602f      	str	r7, [r5, #0]
 800b840:	e7b1      	b.n	800b7a6 <__sflush_r+0x1a>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	e7ad      	b.n	800b7a8 <__sflush_r+0x1c>
 800b84c:	690f      	ldr	r7, [r1, #16]
 800b84e:	2f00      	cmp	r7, #0
 800b850:	d0a9      	beq.n	800b7a6 <__sflush_r+0x1a>
 800b852:	0793      	lsls	r3, r2, #30
 800b854:	680e      	ldr	r6, [r1, #0]
 800b856:	bf08      	it	eq
 800b858:	694b      	ldreq	r3, [r1, #20]
 800b85a:	600f      	str	r7, [r1, #0]
 800b85c:	bf18      	it	ne
 800b85e:	2300      	movne	r3, #0
 800b860:	eba6 0807 	sub.w	r8, r6, r7
 800b864:	608b      	str	r3, [r1, #8]
 800b866:	f1b8 0f00 	cmp.w	r8, #0
 800b86a:	dd9c      	ble.n	800b7a6 <__sflush_r+0x1a>
 800b86c:	6a21      	ldr	r1, [r4, #32]
 800b86e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b870:	4643      	mov	r3, r8
 800b872:	463a      	mov	r2, r7
 800b874:	4628      	mov	r0, r5
 800b876:	47b0      	blx	r6
 800b878:	2800      	cmp	r0, #0
 800b87a:	dc06      	bgt.n	800b88a <__sflush_r+0xfe>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b882:	81a3      	strh	r3, [r4, #12]
 800b884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b888:	e78e      	b.n	800b7a8 <__sflush_r+0x1c>
 800b88a:	4407      	add	r7, r0
 800b88c:	eba8 0800 	sub.w	r8, r8, r0
 800b890:	e7e9      	b.n	800b866 <__sflush_r+0xda>
 800b892:	bf00      	nop
 800b894:	20400001 	.word	0x20400001

0800b898 <_fflush_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	690b      	ldr	r3, [r1, #16]
 800b89c:	4605      	mov	r5, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	b913      	cbnz	r3, 800b8a8 <_fflush_r+0x10>
 800b8a2:	2500      	movs	r5, #0
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	b118      	cbz	r0, 800b8b2 <_fflush_r+0x1a>
 800b8aa:	6983      	ldr	r3, [r0, #24]
 800b8ac:	b90b      	cbnz	r3, 800b8b2 <_fflush_r+0x1a>
 800b8ae:	f000 f887 	bl	800b9c0 <__sinit>
 800b8b2:	4b14      	ldr	r3, [pc, #80]	; (800b904 <_fflush_r+0x6c>)
 800b8b4:	429c      	cmp	r4, r3
 800b8b6:	d11b      	bne.n	800b8f0 <_fflush_r+0x58>
 800b8b8:	686c      	ldr	r4, [r5, #4]
 800b8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0ef      	beq.n	800b8a2 <_fflush_r+0xa>
 800b8c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8c4:	07d0      	lsls	r0, r2, #31
 800b8c6:	d404      	bmi.n	800b8d2 <_fflush_r+0x3a>
 800b8c8:	0599      	lsls	r1, r3, #22
 800b8ca:	d402      	bmi.n	800b8d2 <_fflush_r+0x3a>
 800b8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ce:	f000 f915 	bl	800bafc <__retarget_lock_acquire_recursive>
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f7ff ff59 	bl	800b78c <__sflush_r>
 800b8da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8dc:	07da      	lsls	r2, r3, #31
 800b8de:	4605      	mov	r5, r0
 800b8e0:	d4e0      	bmi.n	800b8a4 <_fflush_r+0xc>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	059b      	lsls	r3, r3, #22
 800b8e6:	d4dd      	bmi.n	800b8a4 <_fflush_r+0xc>
 800b8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ea:	f000 f908 	bl	800bafe <__retarget_lock_release_recursive>
 800b8ee:	e7d9      	b.n	800b8a4 <_fflush_r+0xc>
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <_fflush_r+0x70>)
 800b8f2:	429c      	cmp	r4, r3
 800b8f4:	d101      	bne.n	800b8fa <_fflush_r+0x62>
 800b8f6:	68ac      	ldr	r4, [r5, #8]
 800b8f8:	e7df      	b.n	800b8ba <_fflush_r+0x22>
 800b8fa:	4b04      	ldr	r3, [pc, #16]	; (800b90c <_fflush_r+0x74>)
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	bf08      	it	eq
 800b900:	68ec      	ldreq	r4, [r5, #12]
 800b902:	e7da      	b.n	800b8ba <_fflush_r+0x22>
 800b904:	0800c040 	.word	0x0800c040
 800b908:	0800c060 	.word	0x0800c060
 800b90c:	0800c020 	.word	0x0800c020

0800b910 <std>:
 800b910:	2300      	movs	r3, #0
 800b912:	b510      	push	{r4, lr}
 800b914:	4604      	mov	r4, r0
 800b916:	e9c0 3300 	strd	r3, r3, [r0]
 800b91a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b91e:	6083      	str	r3, [r0, #8]
 800b920:	8181      	strh	r1, [r0, #12]
 800b922:	6643      	str	r3, [r0, #100]	; 0x64
 800b924:	81c2      	strh	r2, [r0, #14]
 800b926:	6183      	str	r3, [r0, #24]
 800b928:	4619      	mov	r1, r3
 800b92a:	2208      	movs	r2, #8
 800b92c:	305c      	adds	r0, #92	; 0x5c
 800b92e:	f7ff f95f 	bl	800abf0 <memset>
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <std+0x38>)
 800b934:	6263      	str	r3, [r4, #36]	; 0x24
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x3c>)
 800b938:	62a3      	str	r3, [r4, #40]	; 0x28
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x40>)
 800b93c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <std+0x44>)
 800b940:	6224      	str	r4, [r4, #32]
 800b942:	6323      	str	r3, [r4, #48]	; 0x30
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	0800bc6d 	.word	0x0800bc6d
 800b94c:	0800bc8f 	.word	0x0800bc8f
 800b950:	0800bcc7 	.word	0x0800bcc7
 800b954:	0800bceb 	.word	0x0800bceb

0800b958 <_cleanup_r>:
 800b958:	4901      	ldr	r1, [pc, #4]	; (800b960 <_cleanup_r+0x8>)
 800b95a:	f000 b8af 	b.w	800babc <_fwalk_reent>
 800b95e:	bf00      	nop
 800b960:	0800b899 	.word	0x0800b899

0800b964 <__sfmoreglue>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	2268      	movs	r2, #104	; 0x68
 800b968:	1e4d      	subs	r5, r1, #1
 800b96a:	4355      	muls	r5, r2
 800b96c:	460e      	mov	r6, r1
 800b96e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b972:	f7ff fad1 	bl	800af18 <_malloc_r>
 800b976:	4604      	mov	r4, r0
 800b978:	b140      	cbz	r0, 800b98c <__sfmoreglue+0x28>
 800b97a:	2100      	movs	r1, #0
 800b97c:	e9c0 1600 	strd	r1, r6, [r0]
 800b980:	300c      	adds	r0, #12
 800b982:	60a0      	str	r0, [r4, #8]
 800b984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b988:	f7ff f932 	bl	800abf0 <memset>
 800b98c:	4620      	mov	r0, r4
 800b98e:	bd70      	pop	{r4, r5, r6, pc}

0800b990 <__sfp_lock_acquire>:
 800b990:	4801      	ldr	r0, [pc, #4]	; (800b998 <__sfp_lock_acquire+0x8>)
 800b992:	f000 b8b3 	b.w	800bafc <__retarget_lock_acquire_recursive>
 800b996:	bf00      	nop
 800b998:	240247a9 	.word	0x240247a9

0800b99c <__sfp_lock_release>:
 800b99c:	4801      	ldr	r0, [pc, #4]	; (800b9a4 <__sfp_lock_release+0x8>)
 800b99e:	f000 b8ae 	b.w	800bafe <__retarget_lock_release_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	240247a9 	.word	0x240247a9

0800b9a8 <__sinit_lock_acquire>:
 800b9a8:	4801      	ldr	r0, [pc, #4]	; (800b9b0 <__sinit_lock_acquire+0x8>)
 800b9aa:	f000 b8a7 	b.w	800bafc <__retarget_lock_acquire_recursive>
 800b9ae:	bf00      	nop
 800b9b0:	240247aa 	.word	0x240247aa

0800b9b4 <__sinit_lock_release>:
 800b9b4:	4801      	ldr	r0, [pc, #4]	; (800b9bc <__sinit_lock_release+0x8>)
 800b9b6:	f000 b8a2 	b.w	800bafe <__retarget_lock_release_recursive>
 800b9ba:	bf00      	nop
 800b9bc:	240247aa 	.word	0x240247aa

0800b9c0 <__sinit>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	f7ff fff0 	bl	800b9a8 <__sinit_lock_acquire>
 800b9c8:	69a3      	ldr	r3, [r4, #24]
 800b9ca:	b11b      	cbz	r3, 800b9d4 <__sinit+0x14>
 800b9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d0:	f7ff bff0 	b.w	800b9b4 <__sinit_lock_release>
 800b9d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9d8:	6523      	str	r3, [r4, #80]	; 0x50
 800b9da:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <__sinit+0x68>)
 800b9dc:	4a13      	ldr	r2, [pc, #76]	; (800ba2c <__sinit+0x6c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9e2:	42a3      	cmp	r3, r4
 800b9e4:	bf04      	itt	eq
 800b9e6:	2301      	moveq	r3, #1
 800b9e8:	61a3      	streq	r3, [r4, #24]
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 f820 	bl	800ba30 <__sfp>
 800b9f0:	6060      	str	r0, [r4, #4]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f81c 	bl	800ba30 <__sfp>
 800b9f8:	60a0      	str	r0, [r4, #8]
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 f818 	bl	800ba30 <__sfp>
 800ba00:	2200      	movs	r2, #0
 800ba02:	60e0      	str	r0, [r4, #12]
 800ba04:	2104      	movs	r1, #4
 800ba06:	6860      	ldr	r0, [r4, #4]
 800ba08:	f7ff ff82 	bl	800b910 <std>
 800ba0c:	68a0      	ldr	r0, [r4, #8]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	2109      	movs	r1, #9
 800ba12:	f7ff ff7d 	bl	800b910 <std>
 800ba16:	68e0      	ldr	r0, [r4, #12]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	2112      	movs	r1, #18
 800ba1c:	f7ff ff78 	bl	800b910 <std>
 800ba20:	2301      	movs	r3, #1
 800ba22:	61a3      	str	r3, [r4, #24]
 800ba24:	e7d2      	b.n	800b9cc <__sinit+0xc>
 800ba26:	bf00      	nop
 800ba28:	0800be38 	.word	0x0800be38
 800ba2c:	0800b959 	.word	0x0800b959

0800ba30 <__sfp>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	4607      	mov	r7, r0
 800ba34:	f7ff ffac 	bl	800b990 <__sfp_lock_acquire>
 800ba38:	4b1e      	ldr	r3, [pc, #120]	; (800bab4 <__sfp+0x84>)
 800ba3a:	681e      	ldr	r6, [r3, #0]
 800ba3c:	69b3      	ldr	r3, [r6, #24]
 800ba3e:	b913      	cbnz	r3, 800ba46 <__sfp+0x16>
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7ff ffbd 	bl	800b9c0 <__sinit>
 800ba46:	3648      	adds	r6, #72	; 0x48
 800ba48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	d503      	bpl.n	800ba58 <__sfp+0x28>
 800ba50:	6833      	ldr	r3, [r6, #0]
 800ba52:	b30b      	cbz	r3, 800ba98 <__sfp+0x68>
 800ba54:	6836      	ldr	r6, [r6, #0]
 800ba56:	e7f7      	b.n	800ba48 <__sfp+0x18>
 800ba58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba5c:	b9d5      	cbnz	r5, 800ba94 <__sfp+0x64>
 800ba5e:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <__sfp+0x88>)
 800ba60:	60e3      	str	r3, [r4, #12]
 800ba62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba66:	6665      	str	r5, [r4, #100]	; 0x64
 800ba68:	f000 f847 	bl	800bafa <__retarget_lock_init_recursive>
 800ba6c:	f7ff ff96 	bl	800b99c <__sfp_lock_release>
 800ba70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba78:	6025      	str	r5, [r4, #0]
 800ba7a:	61a5      	str	r5, [r4, #24]
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba84:	f7ff f8b4 	bl	800abf0 <memset>
 800ba88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba90:	4620      	mov	r0, r4
 800ba92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba94:	3468      	adds	r4, #104	; 0x68
 800ba96:	e7d9      	b.n	800ba4c <__sfp+0x1c>
 800ba98:	2104      	movs	r1, #4
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	f7ff ff62 	bl	800b964 <__sfmoreglue>
 800baa0:	4604      	mov	r4, r0
 800baa2:	6030      	str	r0, [r6, #0]
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d1d5      	bne.n	800ba54 <__sfp+0x24>
 800baa8:	f7ff ff78 	bl	800b99c <__sfp_lock_release>
 800baac:	230c      	movs	r3, #12
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	e7ee      	b.n	800ba90 <__sfp+0x60>
 800bab2:	bf00      	nop
 800bab4:	0800be38 	.word	0x0800be38
 800bab8:	ffff0001 	.word	0xffff0001

0800babc <_fwalk_reent>:
 800babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac0:	4606      	mov	r6, r0
 800bac2:	4688      	mov	r8, r1
 800bac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bac8:	2700      	movs	r7, #0
 800baca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bace:	f1b9 0901 	subs.w	r9, r9, #1
 800bad2:	d505      	bpl.n	800bae0 <_fwalk_reent+0x24>
 800bad4:	6824      	ldr	r4, [r4, #0]
 800bad6:	2c00      	cmp	r4, #0
 800bad8:	d1f7      	bne.n	800baca <_fwalk_reent+0xe>
 800bada:	4638      	mov	r0, r7
 800badc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae0:	89ab      	ldrh	r3, [r5, #12]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d907      	bls.n	800baf6 <_fwalk_reent+0x3a>
 800bae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baea:	3301      	adds	r3, #1
 800baec:	d003      	beq.n	800baf6 <_fwalk_reent+0x3a>
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	47c0      	blx	r8
 800baf4:	4307      	orrs	r7, r0
 800baf6:	3568      	adds	r5, #104	; 0x68
 800baf8:	e7e9      	b.n	800bace <_fwalk_reent+0x12>

0800bafa <__retarget_lock_init_recursive>:
 800bafa:	4770      	bx	lr

0800bafc <__retarget_lock_acquire_recursive>:
 800bafc:	4770      	bx	lr

0800bafe <__retarget_lock_release_recursive>:
 800bafe:	4770      	bx	lr

0800bb00 <__swhatbuf_r>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	460e      	mov	r6, r1
 800bb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	b096      	sub	sp, #88	; 0x58
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	461d      	mov	r5, r3
 800bb10:	da08      	bge.n	800bb24 <__swhatbuf_r+0x24>
 800bb12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	602a      	str	r2, [r5, #0]
 800bb1a:	061a      	lsls	r2, r3, #24
 800bb1c:	d410      	bmi.n	800bb40 <__swhatbuf_r+0x40>
 800bb1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb22:	e00e      	b.n	800bb42 <__swhatbuf_r+0x42>
 800bb24:	466a      	mov	r2, sp
 800bb26:	f000 f907 	bl	800bd38 <_fstat_r>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	dbf1      	blt.n	800bb12 <__swhatbuf_r+0x12>
 800bb2e:	9a01      	ldr	r2, [sp, #4]
 800bb30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb38:	425a      	negs	r2, r3
 800bb3a:	415a      	adcs	r2, r3
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	e7ee      	b.n	800bb1e <__swhatbuf_r+0x1e>
 800bb40:	2340      	movs	r3, #64	; 0x40
 800bb42:	2000      	movs	r0, #0
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	b016      	add	sp, #88	; 0x58
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb4c <__smakebuf_r>:
 800bb4c:	898b      	ldrh	r3, [r1, #12]
 800bb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb50:	079d      	lsls	r5, r3, #30
 800bb52:	4606      	mov	r6, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	d507      	bpl.n	800bb68 <__smakebuf_r+0x1c>
 800bb58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	2301      	movs	r3, #1
 800bb62:	6163      	str	r3, [r4, #20]
 800bb64:	b002      	add	sp, #8
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	ab01      	add	r3, sp, #4
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f7ff ffc8 	bl	800bb00 <__swhatbuf_r>
 800bb70:	9900      	ldr	r1, [sp, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff f9cf 	bl	800af18 <_malloc_r>
 800bb7a:	b948      	cbnz	r0, 800bb90 <__smakebuf_r+0x44>
 800bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb80:	059a      	lsls	r2, r3, #22
 800bb82:	d4ef      	bmi.n	800bb64 <__smakebuf_r+0x18>
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	e7e3      	b.n	800bb58 <__smakebuf_r+0xc>
 800bb90:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <__smakebuf_r+0x7c>)
 800bb92:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	6020      	str	r0, [r4, #0]
 800bb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb9c:	81a3      	strh	r3, [r4, #12]
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	6163      	str	r3, [r4, #20]
 800bba2:	9b01      	ldr	r3, [sp, #4]
 800bba4:	6120      	str	r0, [r4, #16]
 800bba6:	b15b      	cbz	r3, 800bbc0 <__smakebuf_r+0x74>
 800bba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbac:	4630      	mov	r0, r6
 800bbae:	f000 f8d5 	bl	800bd5c <_isatty_r>
 800bbb2:	b128      	cbz	r0, 800bbc0 <__smakebuf_r+0x74>
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	81a3      	strh	r3, [r4, #12]
 800bbc0:	89a0      	ldrh	r0, [r4, #12]
 800bbc2:	4305      	orrs	r5, r0
 800bbc4:	81a5      	strh	r5, [r4, #12]
 800bbc6:	e7cd      	b.n	800bb64 <__smakebuf_r+0x18>
 800bbc8:	0800b959 	.word	0x0800b959

0800bbcc <__malloc_lock>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	; (800bbd4 <__malloc_lock+0x8>)
 800bbce:	f7ff bf95 	b.w	800bafc <__retarget_lock_acquire_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	240247a8 	.word	0x240247a8

0800bbd8 <__malloc_unlock>:
 800bbd8:	4801      	ldr	r0, [pc, #4]	; (800bbe0 <__malloc_unlock+0x8>)
 800bbda:	f7ff bf90 	b.w	800bafe <__retarget_lock_release_recursive>
 800bbde:	bf00      	nop
 800bbe0:	240247a8 	.word	0x240247a8

0800bbe4 <_raise_r>:
 800bbe4:	291f      	cmp	r1, #31
 800bbe6:	b538      	push	{r3, r4, r5, lr}
 800bbe8:	4604      	mov	r4, r0
 800bbea:	460d      	mov	r5, r1
 800bbec:	d904      	bls.n	800bbf8 <_raise_r+0x14>
 800bbee:	2316      	movs	r3, #22
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbfa:	b112      	cbz	r2, 800bc02 <_raise_r+0x1e>
 800bbfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc00:	b94b      	cbnz	r3, 800bc16 <_raise_r+0x32>
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 f830 	bl	800bc68 <_getpid_r>
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc12:	f000 b817 	b.w	800bc44 <_kill_r>
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d00a      	beq.n	800bc30 <_raise_r+0x4c>
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	d103      	bne.n	800bc26 <_raise_r+0x42>
 800bc1e:	2316      	movs	r3, #22
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	2001      	movs	r0, #1
 800bc24:	e7e7      	b.n	800bbf6 <_raise_r+0x12>
 800bc26:	2400      	movs	r4, #0
 800bc28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	4798      	blx	r3
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7e0      	b.n	800bbf6 <_raise_r+0x12>

0800bc34 <raise>:
 800bc34:	4b02      	ldr	r3, [pc, #8]	; (800bc40 <raise+0xc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f7ff bfd3 	b.w	800bbe4 <_raise_r>
 800bc3e:	bf00      	nop
 800bc40:	24000120 	.word	0x24000120

0800bc44 <_kill_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	; (800bc64 <_kill_r+0x20>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	f7f5 fd4b 	bl	80016ec <_kill>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d102      	bne.n	800bc60 <_kill_r+0x1c>
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	b103      	cbz	r3, 800bc60 <_kill_r+0x1c>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	240247ac 	.word	0x240247ac

0800bc68 <_getpid_r>:
 800bc68:	f7f5 bd38 	b.w	80016dc <_getpid>

0800bc6c <__sread>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc74:	f000 f894 	bl	800bda0 <_read_r>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	bfab      	itete	ge
 800bc7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc7e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc80:	181b      	addge	r3, r3, r0
 800bc82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc86:	bfac      	ite	ge
 800bc88:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc8a:	81a3      	strhlt	r3, [r4, #12]
 800bc8c:	bd10      	pop	{r4, pc}

0800bc8e <__swrite>:
 800bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc92:	461f      	mov	r7, r3
 800bc94:	898b      	ldrh	r3, [r1, #12]
 800bc96:	05db      	lsls	r3, r3, #23
 800bc98:	4605      	mov	r5, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	d505      	bpl.n	800bcac <__swrite+0x1e>
 800bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca4:	2302      	movs	r3, #2
 800bca6:	2200      	movs	r2, #0
 800bca8:	f000 f868 	bl	800bd7c <_lseek_r>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	4632      	mov	r2, r6
 800bcba:	463b      	mov	r3, r7
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	f000 b817 	b.w	800bcf4 <_write_r>

0800bcc6 <__sseek>:
 800bcc6:	b510      	push	{r4, lr}
 800bcc8:	460c      	mov	r4, r1
 800bcca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcce:	f000 f855 	bl	800bd7c <_lseek_r>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	bf15      	itete	ne
 800bcd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bce2:	81a3      	strheq	r3, [r4, #12]
 800bce4:	bf18      	it	ne
 800bce6:	81a3      	strhne	r3, [r4, #12]
 800bce8:	bd10      	pop	{r4, pc}

0800bcea <__sclose>:
 800bcea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcee:	f000 b813 	b.w	800bd18 <_close_r>
	...

0800bcf4 <_write_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_write_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f5 fd29 	bl	800175a <_write>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_write_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_write_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	240247ac 	.word	0x240247ac

0800bd18 <_close_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d06      	ldr	r5, [pc, #24]	; (800bd34 <_close_r+0x1c>)
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4604      	mov	r4, r0
 800bd20:	4608      	mov	r0, r1
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	f7f5 fd35 	bl	8001792 <_close>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_close_r+0x1a>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_close_r+0x1a>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	240247ac 	.word	0x240247ac

0800bd38 <_fstat_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d07      	ldr	r5, [pc, #28]	; (800bd58 <_fstat_r+0x20>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4604      	mov	r4, r0
 800bd40:	4608      	mov	r0, r1
 800bd42:	4611      	mov	r1, r2
 800bd44:	602b      	str	r3, [r5, #0]
 800bd46:	f7f5 fd30 	bl	80017aa <_fstat>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	d102      	bne.n	800bd54 <_fstat_r+0x1c>
 800bd4e:	682b      	ldr	r3, [r5, #0]
 800bd50:	b103      	cbz	r3, 800bd54 <_fstat_r+0x1c>
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	bd38      	pop	{r3, r4, r5, pc}
 800bd56:	bf00      	nop
 800bd58:	240247ac 	.word	0x240247ac

0800bd5c <_isatty_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d06      	ldr	r5, [pc, #24]	; (800bd78 <_isatty_r+0x1c>)
 800bd60:	2300      	movs	r3, #0
 800bd62:	4604      	mov	r4, r0
 800bd64:	4608      	mov	r0, r1
 800bd66:	602b      	str	r3, [r5, #0]
 800bd68:	f7f5 fd2f 	bl	80017ca <_isatty>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d102      	bne.n	800bd76 <_isatty_r+0x1a>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	b103      	cbz	r3, 800bd76 <_isatty_r+0x1a>
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	240247ac 	.word	0x240247ac

0800bd7c <_lseek_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_lseek_r+0x20>)
 800bd80:	4604      	mov	r4, r0
 800bd82:	4608      	mov	r0, r1
 800bd84:	4611      	mov	r1, r2
 800bd86:	2200      	movs	r2, #0
 800bd88:	602a      	str	r2, [r5, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	f7f5 fd28 	bl	80017e0 <_lseek>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_lseek_r+0x1e>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_lseek_r+0x1e>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	240247ac 	.word	0x240247ac

0800bda0 <_read_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d07      	ldr	r5, [pc, #28]	; (800bdc0 <_read_r+0x20>)
 800bda4:	4604      	mov	r4, r0
 800bda6:	4608      	mov	r0, r1
 800bda8:	4611      	mov	r1, r2
 800bdaa:	2200      	movs	r2, #0
 800bdac:	602a      	str	r2, [r5, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	f7f5 fcb6 	bl	8001720 <_read>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d102      	bne.n	800bdbe <_read_r+0x1e>
 800bdb8:	682b      	ldr	r3, [r5, #0]
 800bdba:	b103      	cbz	r3, 800bdbe <_read_r+0x1e>
 800bdbc:	6023      	str	r3, [r4, #0]
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	240247ac 	.word	0x240247ac

0800bdc4 <_init>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr

0800bdd0 <_fini>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	bf00      	nop
 800bdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd6:	bc08      	pop	{r3}
 800bdd8:	469e      	mov	lr, r3
 800bdda:	4770      	bx	lr
