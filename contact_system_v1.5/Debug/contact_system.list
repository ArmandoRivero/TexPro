
contact_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5f8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cbe0  0800cbe0  0001cbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cbe4  0800cbe4  0001cbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  24000000  0800cbe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000c7f8  24000204  0800cdec  00020204  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400c9fc  0800cdec  0002c9fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cca2  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003bb5  00000000  00000000  0003ced4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016c8  00000000  00000000  00040a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001520  00000000  00000000  00042158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036dfa  00000000  00000000  00043678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d1a7  00000000  00000000  0007a472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ee47  00000000  00000000  00097619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e6460  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006bb0  00000000  00000000  001e64b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000204 	.word	0x24000204
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c8b0 	.word	0x0800c8b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000208 	.word	0x24000208
 800030c:	0800c8b0 	.word	0x0800c8b0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	expDuration_us = 6*(int)(exposureVal/60);
 80003da:	4bb3      	ldr	r3, [pc, #716]	; (80006a8 <main+0x2d8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4ab3      	ldr	r2, [pc, #716]	; (80006ac <main+0x2dc>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	441a      	add	r2, r3
 80003e6:	1152      	asrs	r2, r2, #5
 80003e8:	17db      	asrs	r3, r3, #31
 80003ea:	1ad2      	subs	r2, r2, r3
 80003ec:	4613      	mov	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4413      	add	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	461a      	mov	r2, r3
 80003f6:	4bae      	ldr	r3, [pc, #696]	; (80006b0 <main+0x2e0>)
 80003f8:	601a      	str	r2, [r3, #0]

	uint8_t singlePx_value[TOTAL_PIXELS*2]; //*2 since the USB 8 bit at a time
	unsigned int organizeDataToSend = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f642 028c 	movw	r2, #10380	; 0x288c
 8000400:	443a      	add	r2, r7
 8000402:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f001 fe8a 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 fd6c 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 ff1e 	bl	800124c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000410:	f000 fdd8 	bl	8000fc4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000414:	f000 fe2e 	bl	8001074 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000418:	f00a fa00 	bl	800a81c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800041c:	f000 fe78 	bl	8001110 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000420:	f000 fec4 	bl	80011ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	/* Configuring AD9826 through SPI*/
	MACRO_AD9826_CLR_SCLK
 8000424:	4ba3      	ldr	r3, [pc, #652]	; (80006b4 <main+0x2e4>)
 8000426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1,(uint8_t *)&reg_AD9826_config, 1, HAL_MAX_DELAY);
 800042c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000430:	2201      	movs	r2, #1
 8000432:	49a1      	ldr	r1, [pc, #644]	; (80006b8 <main+0x2e8>)
 8000434:	48a1      	ldr	r0, [pc, #644]	; (80006bc <main+0x2ec>)
 8000436:	f005 fda3 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 800043a:	4b9e      	ldr	r3, [pc, #632]	; (80006b4 <main+0x2e4>)
 800043c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000440:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 8000442:	4b9c      	ldr	r3, [pc, #624]	; (80006b4 <main+0x2e4>)
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_MUXconfig, 1, HAL_MAX_DELAY);
 800044a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800044e:	2201      	movs	r2, #1
 8000450:	499b      	ldr	r1, [pc, #620]	; (80006c0 <main+0x2f0>)
 8000452:	489a      	ldr	r0, [pc, #616]	; (80006bc <main+0x2ec>)
 8000454:	f005 fd94 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000458:	4b96      	ldr	r3, [pc, #600]	; (80006b4 <main+0x2e4>)
 800045a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800045e:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 8000460:	4b94      	ldr	r3, [pc, #592]	; (80006b4 <main+0x2e4>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 8000468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800046c:	2201      	movs	r2, #1
 800046e:	4995      	ldr	r1, [pc, #596]	; (80006c4 <main+0x2f4>)
 8000470:	4892      	ldr	r0, [pc, #584]	; (80006bc <main+0x2ec>)
 8000472:	f005 fd85 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000476:	4b8f      	ldr	r3, [pc, #572]	; (80006b4 <main+0x2e4>)
 8000478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047c:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 800047e:	4b8d      	ldr	r3, [pc, #564]	; (80006b4 <main+0x2e4>)
 8000480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000484:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 8000486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800048a:	2201      	movs	r2, #1
 800048c:	498e      	ldr	r1, [pc, #568]	; (80006c8 <main+0x2f8>)
 800048e:	488b      	ldr	r0, [pc, #556]	; (80006bc <main+0x2ec>)
 8000490:	f005 fd76 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000494:	4b87      	ldr	r3, [pc, #540]	; (80006b4 <main+0x2e4>)
 8000496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800049a:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 800049c:	4b85      	ldr	r3, [pc, #532]	; (80006b4 <main+0x2e4>)
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 80004a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004a8:	2201      	movs	r2, #1
 80004aa:	4988      	ldr	r1, [pc, #544]	; (80006cc <main+0x2fc>)
 80004ac:	4883      	ldr	r0, [pc, #524]	; (80006bc <main+0x2ec>)
 80004ae:	f005 fd67 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004b2:	4b80      	ldr	r3, [pc, #512]	; (80006b4 <main+0x2e4>)
 80004b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004b8:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004ba:	4b7e      	ldr	r3, [pc, #504]	; (80006b4 <main+0x2e4>)
 80004bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004c6:	2201      	movs	r2, #1
 80004c8:	4981      	ldr	r1, [pc, #516]	; (80006d0 <main+0x300>)
 80004ca:	487c      	ldr	r0, [pc, #496]	; (80006bc <main+0x2ec>)
 80004cc:	f005 fd58 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004d0:	4b78      	ldr	r3, [pc, #480]	; (80006b4 <main+0x2e4>)
 80004d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d6:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004d8:	4b76      	ldr	r3, [pc, #472]	; (80006b4 <main+0x2e4>)
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 80004e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004e4:	2201      	movs	r2, #1
 80004e6:	497b      	ldr	r1, [pc, #492]	; (80006d4 <main+0x304>)
 80004e8:	4874      	ldr	r0, [pc, #464]	; (80006bc <main+0x2ec>)
 80004ea:	f005 fd49 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004ee:	4b71      	ldr	r3, [pc, #452]	; (80006b4 <main+0x2e4>)
 80004f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004f4:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004f6:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <main+0x2e4>)
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fc:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000502:	2201      	movs	r2, #1
 8000504:	4974      	ldr	r1, [pc, #464]	; (80006d8 <main+0x308>)
 8000506:	486d      	ldr	r0, [pc, #436]	; (80006bc <main+0x2ec>)
 8000508:	f005 fd3a 	bl	8005f80 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 800050c:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <main+0x2e4>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	619a      	str	r2, [r3, #24]


	//HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
	HAL_TIM_Base_Start_IT(&htim4);	 	// Start timer 4
 8000514:	4871      	ldr	r0, [pc, #452]	; (80006dc <main+0x30c>)
 8000516:	f006 f865 	bl	80065e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		// tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
		token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 800051a:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <main+0x310>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4870      	ldr	r0, [pc, #448]	; (80006e4 <main+0x314>)
 8000522:	f00a ff35 	bl	800b390 <strtok>
 8000526:	4603      	mov	r3, r0
 8000528:	4a6f      	ldr	r2, [pc, #444]	; (80006e8 <main+0x318>)
 800052a:	6013      	str	r3, [r2, #0]
		if (token != NULL)
 800052c:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <main+0x318>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	f000 83f4 	beq.w	8000d1e <main+0x94e>
		{
			if(strcmp(token,strCMD_1) == 0)
 8000536:	4b6c      	ldr	r3, [pc, #432]	; (80006e8 <main+0x318>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	496c      	ldr	r1, [pc, #432]	; (80006ec <main+0x31c>)
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fee7 	bl	8000310 <strcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d113      	bne.n	8000570 <main+0x1a0>
			{
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always after receiving
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	2100      	movs	r1, #0
 800054c:	4865      	ldr	r0, [pc, #404]	; (80006e4 <main+0x314>)
 800054e:	f00a fef7 	bl	800b340 <memset>

				enableSampleTimerFlag = 1;
 8000552:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <main+0x320>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
 8000558:	4866      	ldr	r0, [pc, #408]	; (80006f4 <main+0x324>)
 800055a:	f006 f843 	bl	80065e4 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim3);	  // Start timer 3
 800055e:	4866      	ldr	r0, [pc, #408]	; (80006f8 <main+0x328>)
 8000560:	f006 f840 	bl	80065e4 <HAL_TIM_Base_Start_IT>

				MACRO_LED_YELLOW_SET
 8000564:	4b65      	ldr	r3, [pc, #404]	; (80006fc <main+0x32c>)
 8000566:	2202      	movs	r2, #2
 8000568:	619a      	str	r2, [r3, #24]
				Led_cnt = 0;
 800056a:	4b65      	ldr	r3, [pc, #404]	; (8000700 <main+0x330>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
				//        GPIOE->BSRR = GPIO_PIN_1;  // On-board Yellow LED Set to "1"
			}
			if(strcmp(token,strCMD_2) == 0)
 8000570:	4b5d      	ldr	r3, [pc, #372]	; (80006e8 <main+0x318>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4963      	ldr	r1, [pc, #396]	; (8000704 <main+0x334>)
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff feca 	bl	8000310 <strcmp>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d137      	bne.n	80005f2 <main+0x222>
			{
				token = strtok(NULL,tokenSeparator);
 8000582:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <main+0x310>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	2000      	movs	r0, #0
 800058a:	f00a ff01 	bl	800b390 <strtok>
 800058e:	4603      	mov	r3, r0
 8000590:	4a55      	ldr	r2, [pc, #340]	; (80006e8 <main+0x318>)
 8000592:	6013      	str	r3, [r2, #0]
				if(strcmp(token,strCMD_2_1) == 0)
 8000594:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <main+0x318>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	495b      	ldr	r1, [pc, #364]	; (8000708 <main+0x338>)
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff feb8 	bl	8000310 <strcmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d120      	bne.n	80005e8 <main+0x218>
				{
					token = strtok(NULL,tokenSeparator);
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <main+0x310>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2000      	movs	r0, #0
 80005ae:	f00a feef 	bl	800b390 <strtok>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a4c      	ldr	r2, [pc, #304]	; (80006e8 <main+0x318>)
 80005b6:	6013      	str	r3, [r2, #0]

					exposureVal = atoi(token);
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <main+0x318>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f00a fe83 	bl	800b2c8 <atoi>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <main+0x2d8>)
 80005c6:	6013      	str	r3, [r2, #0]
					expDuration_us = 6*(int)(exposureVal/15);
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <main+0x2d8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a37      	ldr	r2, [pc, #220]	; (80006ac <main+0x2dc>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	441a      	add	r2, r3
 80005d4:	10d2      	asrs	r2, r2, #3
 80005d6:	17db      	asrs	r3, r3, #31
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <main+0x2e0>)
 80005e6:	601a      	str	r2, [r3, #0]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	2100      	movs	r1, #0
 80005ec:	483d      	ldr	r0, [pc, #244]	; (80006e4 <main+0x314>)
 80005ee:	f00a fea7 	bl	800b340 <memset>
			}

			if(strcmp(token,strCMD_3) == 0)
 80005f2:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <main+0x318>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4945      	ldr	r1, [pc, #276]	; (800070c <main+0x33c>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe89 	bl	8000310 <strcmp>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d137      	bne.n	8000674 <main+0x2a4>
			{
				token = strtok(NULL,tokenSeparator);
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <main+0x310>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	2000      	movs	r0, #0
 800060c:	f00a fec0 	bl	800b390 <strtok>
 8000610:	4603      	mov	r3, r0
 8000612:	4a35      	ldr	r2, [pc, #212]	; (80006e8 <main+0x318>)
 8000614:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <main+0x318>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f00a fe54 	bl	800b2c8 <atoi>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <main+0x340>)
 8000626:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <main+0x340>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b3f      	cmp	r3, #63	; 0x3f
 800062e:	d81c      	bhi.n	800066a <main+0x29a>
				{
					reg_AD9826_redPGA &= 0xFFC0;  // clear only gain bits
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <main+0x2f4>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000638:	4013      	ands	r3, r2
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <main+0x2f4>)
 800063c:	6013      	str	r3, [r2, #0]
					reg_AD9826_redPGA |= tokenVal;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <main+0x2f4>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <main+0x340>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4313      	orrs	r3, r2
 8000648:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <main+0x2f4>)
 800064a:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0x2e4>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000658:	2201      	movs	r2, #1
 800065a:	491a      	ldr	r1, [pc, #104]	; (80006c4 <main+0x2f4>)
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0x2ec>)
 800065e:	f005 fc8f 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <main+0x2e4>)
 8000664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000668:	619a      	str	r2, [r3, #24]

					//          msgVCP_len = sprintf(msgVCP, "RPGA %d\n", tokenVal);
					//          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	2100      	movs	r1, #0
 800066e:	481d      	ldr	r0, [pc, #116]	; (80006e4 <main+0x314>)
 8000670:	f00a fe66 	bl	800b340 <memset>
			}

			if(strcmp(token,strCMD_4) == 0)
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x318>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4926      	ldr	r1, [pc, #152]	; (8000714 <main+0x344>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe48 	bl	8000310 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d170      	bne.n	8000768 <main+0x398>
			{
				token = strtok(NULL,tokenSeparator);
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <main+0x310>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2000      	movs	r0, #0
 800068e:	f00a fe7f 	bl	800b390 <strtok>
 8000692:	4603      	mov	r3, r0
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <main+0x318>)
 8000696:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main+0x318>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f00a fe13 	bl	800b2c8 <atoi>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	e037      	b.n	8000718 <main+0x348>
 80006a8:	2400009c 	.word	0x2400009c
 80006ac:	88888889 	.word	0x88888889
 80006b0:	24000bac 	.word	0x24000bac
 80006b4:	58020c00 	.word	0x58020c00
 80006b8:	0800c980 	.word	0x0800c980
 80006bc:	24000220 	.word	0x24000220
 80006c0:	0800c984 	.word	0x0800c984
 80006c4:	2400000c 	.word	0x2400000c
 80006c8:	24000010 	.word	0x24000010
 80006cc:	24000014 	.word	0x24000014
 80006d0:	24000018 	.word	0x24000018
 80006d4:	2400001c 	.word	0x2400001c
 80006d8:	24000020 	.word	0x24000020
 80006dc:	24000340 	.word	0x24000340
 80006e0:	24000024 	.word	0x24000024
 80006e4:	2400038c 	.word	0x2400038c
 80006e8:	24000b60 	.word	0x24000b60
 80006ec:	2400002c 	.word	0x2400002c
 80006f0:	24000b70 	.word	0x24000b70
 80006f4:	240002a8 	.word	0x240002a8
 80006f8:	240002f4 	.word	0x240002f4
 80006fc:	58021000 	.word	0x58021000
 8000700:	24000b98 	.word	0x24000b98
 8000704:	2400003c 	.word	0x2400003c
 8000708:	24000040 	.word	0x24000040
 800070c:	24000044 	.word	0x24000044
 8000710:	24000ba8 	.word	0x24000ba8
 8000714:	2400004c 	.word	0x2400004c
 8000718:	4ba5      	ldr	r3, [pc, #660]	; (80009b0 <main+0x5e0>)
 800071a:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 800071c:	4ba4      	ldr	r3, [pc, #656]	; (80009b0 <main+0x5e0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b3f      	cmp	r3, #63	; 0x3f
 8000722:	d81c      	bhi.n	800075e <main+0x38e>
				{
					reg_AD9826_greenPGA &= 0xFFC0;  // clear only gain bits
 8000724:	4ba3      	ldr	r3, [pc, #652]	; (80009b4 <main+0x5e4>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800072c:	4013      	ands	r3, r2
 800072e:	4aa1      	ldr	r2, [pc, #644]	; (80009b4 <main+0x5e4>)
 8000730:	6013      	str	r3, [r2, #0]
					reg_AD9826_greenPGA |= tokenVal;
 8000732:	4ba0      	ldr	r3, [pc, #640]	; (80009b4 <main+0x5e4>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b9e      	ldr	r3, [pc, #632]	; (80009b0 <main+0x5e0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4313      	orrs	r3, r2
 800073c:	4a9d      	ldr	r2, [pc, #628]	; (80009b4 <main+0x5e4>)
 800073e:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000740:	4b9d      	ldr	r3, [pc, #628]	; (80009b8 <main+0x5e8>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 8000748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800074c:	2201      	movs	r2, #1
 800074e:	4999      	ldr	r1, [pc, #612]	; (80009b4 <main+0x5e4>)
 8000750:	489a      	ldr	r0, [pc, #616]	; (80009bc <main+0x5ec>)
 8000752:	f005 fc15 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000756:	4b98      	ldr	r3, [pc, #608]	; (80009b8 <main+0x5e8>)
 8000758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075c:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 800075e:	2240      	movs	r2, #64	; 0x40
 8000760:	2100      	movs	r1, #0
 8000762:	4897      	ldr	r0, [pc, #604]	; (80009c0 <main+0x5f0>)
 8000764:	f00a fdec 	bl	800b340 <memset>
			}

			if(strcmp(token,strCMD_5) == 0)
 8000768:	4b96      	ldr	r3, [pc, #600]	; (80009c4 <main+0x5f4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4996      	ldr	r1, [pc, #600]	; (80009c8 <main+0x5f8>)
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fdce 	bl	8000310 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d137      	bne.n	80007ea <main+0x41a>
			{
				token = strtok(NULL,tokenSeparator);
 800077a:	4b94      	ldr	r3, [pc, #592]	; (80009cc <main+0x5fc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	2000      	movs	r0, #0
 8000782:	f00a fe05 	bl	800b390 <strtok>
 8000786:	4603      	mov	r3, r0
 8000788:	4a8e      	ldr	r2, [pc, #568]	; (80009c4 <main+0x5f4>)
 800078a:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800078c:	4b8d      	ldr	r3, [pc, #564]	; (80009c4 <main+0x5f4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f00a fd99 	bl	800b2c8 <atoi>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <main+0x5e0>)
 800079c:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 800079e:	4b84      	ldr	r3, [pc, #528]	; (80009b0 <main+0x5e0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b3f      	cmp	r3, #63	; 0x3f
 80007a4:	d81c      	bhi.n	80007e0 <main+0x410>
				{
					reg_AD9826_bluePGA &= 0xFFC0;  // clear only gain bits
 80007a6:	4b8a      	ldr	r3, [pc, #552]	; (80009d0 <main+0x600>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80007ae:	4013      	ands	r3, r2
 80007b0:	4a87      	ldr	r2, [pc, #540]	; (80009d0 <main+0x600>)
 80007b2:	6013      	str	r3, [r2, #0]
					reg_AD9826_bluePGA |= tokenVal;
 80007b4:	4b86      	ldr	r3, [pc, #536]	; (80009d0 <main+0x600>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <main+0x5e0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4313      	orrs	r3, r2
 80007be:	4a84      	ldr	r2, [pc, #528]	; (80009d0 <main+0x600>)
 80007c0:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <main+0x5e8>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ce:	2201      	movs	r2, #1
 80007d0:	497f      	ldr	r1, [pc, #508]	; (80009d0 <main+0x600>)
 80007d2:	487a      	ldr	r0, [pc, #488]	; (80009bc <main+0x5ec>)
 80007d4:	f005 fbd4 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 80007d8:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <main+0x5e8>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	2100      	movs	r1, #0
 80007e4:	4876      	ldr	r0, [pc, #472]	; (80009c0 <main+0x5f0>)
 80007e6:	f00a fdab 	bl	800b340 <memset>
			}

			if(strcmp(token,strCMD_6) == 0)
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <main+0x5f4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4979      	ldr	r1, [pc, #484]	; (80009d4 <main+0x604>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd8d 	bl	8000310 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d136      	bne.n	800086a <main+0x49a>
			{
				token = strtok(NULL,tokenSeparator);
 80007fc:	4b73      	ldr	r3, [pc, #460]	; (80009cc <main+0x5fc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	2000      	movs	r0, #0
 8000804:	f00a fdc4 	bl	800b390 <strtok>
 8000808:	4603      	mov	r3, r0
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <main+0x5f4>)
 800080c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <main+0x5f4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f00a fd58 	bl	800b2c8 <atoi>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <main+0x5e0>)
 800081e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 8000820:	4b63      	ldr	r3, [pc, #396]	; (80009b0 <main+0x5e0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d81b      	bhi.n	8000860 <main+0x490>
				{
					reg_AD9826_redOffset &= 0xFF00;  // clear only gain bits
 8000828:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x608>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000830:	4a69      	ldr	r2, [pc, #420]	; (80009d8 <main+0x608>)
 8000832:	6013      	str	r3, [r2, #0]
					reg_AD9826_redOffset |= tokenVal;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <main+0x608>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <main+0x5e0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4313      	orrs	r3, r2
 800083e:	4a66      	ldr	r2, [pc, #408]	; (80009d8 <main+0x608>)
 8000840:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000842:	4b5d      	ldr	r3, [pc, #372]	; (80009b8 <main+0x5e8>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000848:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 800084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084e:	2201      	movs	r2, #1
 8000850:	4961      	ldr	r1, [pc, #388]	; (80009d8 <main+0x608>)
 8000852:	485a      	ldr	r0, [pc, #360]	; (80009bc <main+0x5ec>)
 8000854:	f005 fb94 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000858:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <main+0x5e8>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	2100      	movs	r1, #0
 8000864:	4856      	ldr	r0, [pc, #344]	; (80009c0 <main+0x5f0>)
 8000866:	f00a fd6b 	bl	800b340 <memset>
			}
			if(strcmp(token,strCMD_7) == 0)
 800086a:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <main+0x5f4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	495b      	ldr	r1, [pc, #364]	; (80009dc <main+0x60c>)
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd4d 	bl	8000310 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d136      	bne.n	80008ea <main+0x51a>
			{
				token = strtok(NULL,tokenSeparator);
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <main+0x5fc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	2000      	movs	r0, #0
 8000884:	f00a fd84 	bl	800b390 <strtok>
 8000888:	4603      	mov	r3, r0
 800088a:	4a4e      	ldr	r2, [pc, #312]	; (80009c4 <main+0x5f4>)
 800088c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800088e:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <main+0x5f4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f00a fd18 	bl	800b2c8 <atoi>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <main+0x5e0>)
 800089e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 80008a0:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <main+0x5e0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d81b      	bhi.n	80008e0 <main+0x510>
				{
					reg_AD9826_greenOffset &= 0xFF00;  // clear only gain bits
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <main+0x610>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80008b0:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <main+0x610>)
 80008b2:	6013      	str	r3, [r2, #0]
					reg_AD9826_greenOffset |= tokenVal;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <main+0x610>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <main+0x5e0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4313      	orrs	r3, r2
 80008be:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <main+0x610>)
 80008c0:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <main+0x5e8>)
 80008c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c8:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ce:	2201      	movs	r2, #1
 80008d0:	4943      	ldr	r1, [pc, #268]	; (80009e0 <main+0x610>)
 80008d2:	483a      	ldr	r0, [pc, #232]	; (80009bc <main+0x5ec>)
 80008d4:	f005 fb54 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <main+0x5e8>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	2100      	movs	r1, #0
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <main+0x5f0>)
 80008e6:	f00a fd2b 	bl	800b340 <memset>
			}
			if(strcmp(token,strCMD_8) == 0)
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <main+0x5f4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	493d      	ldr	r1, [pc, #244]	; (80009e4 <main+0x614>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fd0d 	bl	8000310 <strcmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d136      	bne.n	800096a <main+0x59a>
			{
				token = strtok(NULL,tokenSeparator);
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <main+0x5fc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	2000      	movs	r0, #0
 8000904:	f00a fd44 	bl	800b390 <strtok>
 8000908:	4603      	mov	r3, r0
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <main+0x5f4>)
 800090c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <main+0x5f4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f00a fcd8 	bl	800b2c8 <atoi>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <main+0x5e0>)
 800091e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <main+0x5e0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d81b      	bhi.n	8000960 <main+0x590>
				{
					reg_AD9826_blueOffset &= 0xFF00;  // clear only gain bits
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <main+0x618>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <main+0x618>)
 8000932:	6013      	str	r3, [r2, #0]
					reg_AD9826_blueOffset |= tokenVal;
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <main+0x618>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <main+0x5e0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4313      	orrs	r3, r2
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <main+0x618>)
 8000940:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x5e8>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000948:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094e:	2201      	movs	r2, #1
 8000950:	4925      	ldr	r1, [pc, #148]	; (80009e8 <main+0x618>)
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <main+0x5ec>)
 8000954:	f005 fb14 	bl	8005f80 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x5e8>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000960:	2240      	movs	r2, #64	; 0x40
 8000962:	2100      	movs	r1, #0
 8000964:	4816      	ldr	r0, [pc, #88]	; (80009c0 <main+0x5f0>)
 8000966:	f00a fceb 	bl	800b340 <memset>
			}


			if(strcmp(token,strCMD_9) == 0)
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <main+0x5f4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <main+0x61c>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fccd 	bl	8000310 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d146      	bne.n	8000a0a <main+0x63a>
			{
				token = strtok(NULL,tokenSeparator);
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <main+0x5fc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	2000      	movs	r0, #0
 8000984:	f00a fd04 	bl	800b390 <strtok>
 8000988:	4603      	mov	r3, r0
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <main+0x5f4>)
 800098c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <main+0x5f4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f00a fc98 	bl	800b2c8 <atoi>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <main+0x5e0>)
 800099e:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <main+0x5e0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d127      	bne.n	80009f8 <main+0x628>
				{
					MACRO_CIS_LED_RED_SET
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main+0x620>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	e022      	b.n	80009f4 <main+0x624>
 80009ae:	bf00      	nop
 80009b0:	24000ba8 	.word	0x24000ba8
 80009b4:	24000010 	.word	0x24000010
 80009b8:	58020c00 	.word	0x58020c00
 80009bc:	24000220 	.word	0x24000220
 80009c0:	2400038c 	.word	0x2400038c
 80009c4:	24000b60 	.word	0x24000b60
 80009c8:	24000054 	.word	0x24000054
 80009cc:	24000024 	.word	0x24000024
 80009d0:	24000014 	.word	0x24000014
 80009d4:	2400005c 	.word	0x2400005c
 80009d8:	24000018 	.word	0x24000018
 80009dc:	24000064 	.word	0x24000064
 80009e0:	2400001c 	.word	0x2400001c
 80009e4:	2400006c 	.word	0x2400006c
 80009e8:	24000020 	.word	0x24000020
 80009ec:	24000074 	.word	0x24000074
 80009f0:	58021000 	.word	0x58021000
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	e003      	b.n	8000a00 <main+0x630>
				}
				else
				{
					MACRO_CIS_LED_RED_CLR
 80009f8:	4b98      	ldr	r3, [pc, #608]	; (8000c5c <main+0x88c>)
 80009fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009fe:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	2100      	movs	r1, #0
 8000a04:	4896      	ldr	r0, [pc, #600]	; (8000c60 <main+0x890>)
 8000a06:	f00a fc9b 	bl	800b340 <memset>
			}
			if(strcmp(token,strCMD_10) == 0)
 8000a0a:	4b96      	ldr	r3, [pc, #600]	; (8000c64 <main+0x894>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4996      	ldr	r1, [pc, #600]	; (8000c68 <main+0x898>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc7d 	bl	8000310 <strcmp>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d122      	bne.n	8000a62 <main+0x692>
			{
				token = strtok(NULL,tokenSeparator);
 8000a1c:	4b93      	ldr	r3, [pc, #588]	; (8000c6c <main+0x89c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	f00a fcb4 	bl	800b390 <strtok>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a8e      	ldr	r2, [pc, #568]	; (8000c64 <main+0x894>)
 8000a2c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000a2e:	4b8d      	ldr	r3, [pc, #564]	; (8000c64 <main+0x894>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00a fc48 	bl	800b2c8 <atoi>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b8c      	ldr	r3, [pc, #560]	; (8000c70 <main+0x8a0>)
 8000a3e:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 8000a40:	4b8b      	ldr	r3, [pc, #556]	; (8000c70 <main+0x8a0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d103      	bne.n	8000a50 <main+0x680>
				{
					MACRO_CIS_LED_GREEN_SET
 8000a48:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <main+0x88c>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	e003      	b.n	8000a58 <main+0x688>
				}
				else
				{
					MACRO_CIS_LED_GREEN_CLR
 8000a50:	4b82      	ldr	r3, [pc, #520]	; (8000c5c <main+0x88c>)
 8000a52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a56:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4880      	ldr	r0, [pc, #512]	; (8000c60 <main+0x890>)
 8000a5e:	f00a fc6f 	bl	800b340 <memset>
			}
			if(strcmp(token,strCMD_11) == 0)
 8000a62:	4b80      	ldr	r3, [pc, #512]	; (8000c64 <main+0x894>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4983      	ldr	r1, [pc, #524]	; (8000c74 <main+0x8a4>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc51 	bl	8000310 <strcmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d122      	bne.n	8000aba <main+0x6ea>
			{
				token = strtok(NULL,tokenSeparator);
 8000a74:	4b7d      	ldr	r3, [pc, #500]	; (8000c6c <main+0x89c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f00a fc88 	bl	800b390 <strtok>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a78      	ldr	r2, [pc, #480]	; (8000c64 <main+0x894>)
 8000a84:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000a86:	4b77      	ldr	r3, [pc, #476]	; (8000c64 <main+0x894>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00a fc1c 	bl	800b2c8 <atoi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <main+0x8a0>)
 8000a96:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 8000a98:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <main+0x8a0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <main+0x6d8>
				{
					MACRO_CIS_LED_BLUE_SET
 8000aa0:	4b6e      	ldr	r3, [pc, #440]	; (8000c5c <main+0x88c>)
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	e003      	b.n	8000ab0 <main+0x6e0>
				}
				else
				{
					MACRO_CIS_LED_BLUE_CLR
 8000aa8:	4b6c      	ldr	r3, [pc, #432]	; (8000c5c <main+0x88c>)
 8000aaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aae:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000ab0:	2240      	movs	r2, #64	; 0x40
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	486a      	ldr	r0, [pc, #424]	; (8000c60 <main+0x890>)
 8000ab6:	f00a fc43 	bl	800b340 <memset>
			}

			// Configure the LED RED duration
			if(strcmp(token,strCMD_12) == 0)
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <main+0x894>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	496e      	ldr	r1, [pc, #440]	; (8000c78 <main+0x8a8>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc25 	bl	8000310 <strcmp>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d144      	bne.n	8000b56 <main+0x786>
			{
				token = strtok(NULL,tokenSeparator);
 8000acc:	4b67      	ldr	r3, [pc, #412]	; (8000c6c <main+0x89c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f00a fc5c 	bl	800b390 <strtok>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a62      	ldr	r2, [pc, #392]	; (8000c64 <main+0x894>)
 8000adc:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <main+0x894>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00a fbf0 	bl	800b2c8 <atoi>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <main+0x8a0>)
 8000aee:	601a      	str	r2, [r3, #0]

				if(tokenVal > 0)
 8000af0:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <main+0x8a0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d015      	beq.n	8000b24 <main+0x754>
				{
					ledExpDuration_R = tokenVal;
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <main+0x8a0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a5f      	ldr	r2, [pc, #380]	; (8000c7c <main+0x8ac>)
 8000afe:	6013      	str	r3, [r2, #0]
					msgVCP_len = sprintf(msgVCP, "CIS LED_R %d\n", ledExpDuration_R);
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <main+0x8ac>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	495e      	ldr	r1, [pc, #376]	; (8000c80 <main+0x8b0>)
 8000b08:	485e      	ldr	r0, [pc, #376]	; (8000c84 <main+0x8b4>)
 8000b0a:	f00a fc21 	bl	800b350 <siprintf>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <main+0x8b8>)
 8000b12:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000b14:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <main+0x8b8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4859      	ldr	r0, [pc, #356]	; (8000c84 <main+0x8b4>)
 8000b1e:	f009 ff53 	bl	800a9c8 <CDC_Transmit_HS>
 8000b22:	e013      	b.n	8000b4c <main+0x77c>
				}
				else
				{
					ledExpDuration_R = 0;
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <main+0x8ac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
					msgVCP_len = sprintf(msgVCP, "-CIS LED_R %d\n", ledExpDuration_B);
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <main+0x8bc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4957      	ldr	r1, [pc, #348]	; (8000c90 <main+0x8c0>)
 8000b32:	4854      	ldr	r0, [pc, #336]	; (8000c84 <main+0x8b4>)
 8000b34:	f00a fc0c 	bl	800b350 <siprintf>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a53      	ldr	r2, [pc, #332]	; (8000c88 <main+0x8b8>)
 8000b3c:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000b3e:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <main+0x8b8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	484f      	ldr	r0, [pc, #316]	; (8000c84 <main+0x8b4>)
 8000b48:	f009 ff3e 	bl	800a9c8 <CDC_Transmit_HS>
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000b4c:	2240      	movs	r2, #64	; 0x40
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4843      	ldr	r0, [pc, #268]	; (8000c60 <main+0x890>)
 8000b52:	f00a fbf5 	bl	800b340 <memset>
			}
			// Configure the LED GREEN duration
			if(strcmp(token,strCMD_13) == 0)
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <main+0x894>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	494e      	ldr	r1, [pc, #312]	; (8000c94 <main+0x8c4>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fbd7 	bl	8000310 <strcmp>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d144      	bne.n	8000bf2 <main+0x822>
			{
				token = strtok(NULL,tokenSeparator);
 8000b68:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <main+0x89c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f00a fc0e 	bl	800b390 <strtok>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <main+0x894>)
 8000b78:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <main+0x894>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00a fba2 	bl	800b2c8 <atoi>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <main+0x8a0>)
 8000b8a:	601a      	str	r2, [r3, #0]
				if(tokenVal > 0)
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <main+0x8a0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d015      	beq.n	8000bc0 <main+0x7f0>
				{
					ledExpDuration_G = tokenVal;
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <main+0x8a0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <main+0x8c8>)
 8000b9a:	6013      	str	r3, [r2, #0]
					msgVCP_len = sprintf(msgVCP, "CIS LED_G %d\n", ledExpDuration_G);
 8000b9c:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <main+0x8c8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	493e      	ldr	r1, [pc, #248]	; (8000c9c <main+0x8cc>)
 8000ba4:	4837      	ldr	r0, [pc, #220]	; (8000c84 <main+0x8b4>)
 8000ba6:	f00a fbd3 	bl	800b350 <siprintf>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <main+0x8b8>)
 8000bae:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <main+0x8b8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <main+0x8b4>)
 8000bba:	f009 ff05 	bl	800a9c8 <CDC_Transmit_HS>
 8000bbe:	e013      	b.n	8000be8 <main+0x818>
				}
				else
				{
					ledExpDuration_G = 0;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <main+0x8c8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
					msgVCP_len = sprintf(msgVCP, "-CIS LED_G %d\n", ledExpDuration_B);
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <main+0x8bc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4934      	ldr	r1, [pc, #208]	; (8000ca0 <main+0x8d0>)
 8000bce:	482d      	ldr	r0, [pc, #180]	; (8000c84 <main+0x8b4>)
 8000bd0:	f00a fbbe 	bl	800b350 <siprintf>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <main+0x8b8>)
 8000bd8:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <main+0x8b8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	4828      	ldr	r0, [pc, #160]	; (8000c84 <main+0x8b4>)
 8000be4:	f009 fef0 	bl	800a9c8 <CDC_Transmit_HS>
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	2100      	movs	r1, #0
 8000bec:	481c      	ldr	r0, [pc, #112]	; (8000c60 <main+0x890>)
 8000bee:	f00a fba7 	bl	800b340 <memset>
			}
			// Configure the LED BLUE duration
			if(strcmp(token,strCMD_14) == 0)
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <main+0x894>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	492b      	ldr	r1, [pc, #172]	; (8000ca4 <main+0x8d4>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fb89 	bl	8000310 <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d16c      	bne.n	8000cde <main+0x90e>
			{
				token = strtok(NULL,tokenSeparator);
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <main+0x89c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f00a fbc0 	bl	800b390 <strtok>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <main+0x894>)
 8000c14:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <main+0x894>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f00a fb54 	bl	800b2c8 <atoi>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <main+0x8a0>)
 8000c26:	601a      	str	r2, [r3, #0]
				if(tokenVal > 0)
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <main+0x8a0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d03d      	beq.n	8000cac <main+0x8dc>
				{
					ledExpDuration_B = tokenVal;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <main+0x8a0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <main+0x8bc>)
 8000c36:	6013      	str	r3, [r2, #0]
					msgVCP_len = sprintf(msgVCP, "CIS LED_B %d\n", ledExpDuration_B);
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <main+0x8bc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	491a      	ldr	r1, [pc, #104]	; (8000ca8 <main+0x8d8>)
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <main+0x8b4>)
 8000c42:	f00a fb85 	bl	800b350 <siprintf>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <main+0x8b8>)
 8000c4a:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <main+0x8b8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4619      	mov	r1, r3
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <main+0x8b4>)
 8000c56:	f009 feb7 	bl	800a9c8 <CDC_Transmit_HS>
 8000c5a:	e03b      	b.n	8000cd4 <main+0x904>
 8000c5c:	58021000 	.word	0x58021000
 8000c60:	2400038c 	.word	0x2400038c
 8000c64:	24000b60 	.word	0x24000b60
 8000c68:	2400007c 	.word	0x2400007c
 8000c6c:	24000024 	.word	0x24000024
 8000c70:	24000ba8 	.word	0x24000ba8
 8000c74:	24000088 	.word	0x24000088
 8000c78:	24000090 	.word	0x24000090
 8000c7c:	24000b64 	.word	0x24000b64
 8000c80:	0800c8cc 	.word	0x0800c8cc
 8000c84:	24000774 	.word	0x24000774
 8000c88:	24000b5c 	.word	0x24000b5c
 8000c8c:	24000b6c 	.word	0x24000b6c
 8000c90:	0800c8dc 	.word	0x0800c8dc
 8000c94:	24000094 	.word	0x24000094
 8000c98:	24000b68 	.word	0x24000b68
 8000c9c:	0800c8ec 	.word	0x0800c8ec
 8000ca0:	0800c8fc 	.word	0x0800c8fc
 8000ca4:	24000098 	.word	0x24000098
 8000ca8:	0800c90c 	.word	0x0800c90c
				}
				else
				{
					ledExpDuration_B = 0;
 8000cac:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <main+0xad4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
					msgVCP_len = sprintf(msgVCP, "-CIS LED_B %d\n", ledExpDuration_B);
 8000cb2:	4b7c      	ldr	r3, [pc, #496]	; (8000ea4 <main+0xad4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	497b      	ldr	r1, [pc, #492]	; (8000ea8 <main+0xad8>)
 8000cba:	487c      	ldr	r0, [pc, #496]	; (8000eac <main+0xadc>)
 8000cbc:	f00a fb48 	bl	800b350 <siprintf>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <main+0xae0>)
 8000cc4:	6013      	str	r3, [r2, #0]
					CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000cc6:	4b7a      	ldr	r3, [pc, #488]	; (8000eb0 <main+0xae0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4877      	ldr	r0, [pc, #476]	; (8000eac <main+0xadc>)
 8000cd0:	f009 fe7a 	bl	800a9c8 <CDC_Transmit_HS>
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4876      	ldr	r0, [pc, #472]	; (8000eb4 <main+0xae4>)
 8000cda:	f00a fb31 	bl	800b340 <memset>





			if(strcmp(token,strCMD_ver) == 0)
 8000cde:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <main+0xae8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4976      	ldr	r1, [pc, #472]	; (8000ebc <main+0xaec>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb13 	bl	8000310 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d116      	bne.n	8000d1e <main+0x94e>
			{
				msgVCP_len = sprintf(msgVCP, "Ver: %d.%d\n", codeVer, codeVerTest);
 8000cf0:	4b73      	ldr	r3, [pc, #460]	; (8000ec0 <main+0xaf0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b73      	ldr	r3, [pc, #460]	; (8000ec4 <main+0xaf4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4973      	ldr	r1, [pc, #460]	; (8000ec8 <main+0xaf8>)
 8000cfa:	486c      	ldr	r0, [pc, #432]	; (8000eac <main+0xadc>)
 8000cfc:	f00a fb28 	bl	800b350 <siprintf>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a6b      	ldr	r2, [pc, #428]	; (8000eb0 <main+0xae0>)
 8000d04:	6013      	str	r3, [r2, #0]
				CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000d06:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <main+0xae0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4867      	ldr	r0, [pc, #412]	; (8000eac <main+0xadc>)
 8000d10:	f009 fe5a 	bl	800a9c8 <CDC_Transmit_HS>
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	2100      	movs	r1, #0
 8000d18:	4866      	ldr	r0, [pc, #408]	; (8000eb4 <main+0xae4>)
 8000d1a:	f00a fb11 	bl	800b340 <memset>

		}



		if(send_data_main)
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <main+0xafc>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f43f abf9 	beq.w	800051a <main+0x14a>
		{
			MACRO_LED_YELLOW_CLR
 8000d28:	4b69      	ldr	r3, [pc, #420]	; (8000ed0 <main+0xb00>)
 8000d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d2e:	619a      	str	r2, [r3, #24]
			//      GPIOE->BSRR = (uint32_t)GPIO_PIN_1 << 16U; // On-board Yellow LED Set to "0"

			HAL_TIM_Base_Stop_IT(&htim2);
 8000d30:	4868      	ldr	r0, [pc, #416]	; (8000ed4 <main+0xb04>)
 8000d32:	f005 fcdd 	bl	80066f0 <HAL_TIM_Base_Stop_IT>
			organizeDataToSend = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f642 028c 	movw	r2, #10380	; 0x288c
 8000d3c:	443a      	add	r2, r7
 8000d3e:	6013      	str	r3, [r2, #0]
			idxUSB = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f642 0288 	movw	r2, #10376	; 0x2888
 8000d46:	443a      	add	r2, r7
 8000d48:	6013      	str	r3, [r2, #0]
			idx = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f642 0284 	movw	r2, #10372	; 0x2884
 8000d50:	443a      	add	r2, r7
 8000d52:	6013      	str	r3, [r2, #0]


			while(organizeDataToSend == 0)
 8000d54:	e08e      	b.n	8000e74 <main+0xaa4>
			{
				//-CH1 (red)
				singlePx_value[idxUSB]   = reg_High[idx];
 8000d56:	4a60      	ldr	r2, [pc, #384]	; (8000ed8 <main+0xb08>)
 8000d58:	f642 0384 	movw	r3, #10372	; 0x2884
 8000d5c:	443b      	add	r3, r7
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8000d6a:	f6a3 028c 	subw	r2, r3, #2188	; 0x88c
 8000d6e:	f642 0388 	movw	r3, #10376	; 0x2888
 8000d72:	443b      	add	r3, r7
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	460a      	mov	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
				singlePx_value[idxUSB+1] = reg_Low[idx];
 8000d7c:	4a57      	ldr	r2, [pc, #348]	; (8000edc <main+0xb0c>)
 8000d7e:	f642 0384 	movw	r3, #10372	; 0x2884
 8000d82:	443b      	add	r3, r7
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d8a:	f642 0388 	movw	r3, #10376	; 0x2888
 8000d8e:	443b      	add	r3, r7
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2d1      	uxtb	r1, r2
 8000d96:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000d9a:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000d9e:	54d1      	strb	r1, [r2, r3]
				//-CH2 (Green)
				singlePx_value[idxUSB+2] = reg_High[idx+1];
 8000da0:	f642 0384 	movw	r3, #10372	; 0x2884
 8000da4:	443b      	add	r3, r7
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a4b      	ldr	r2, [pc, #300]	; (8000ed8 <main+0xb08>)
 8000dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db0:	f642 0388 	movw	r3, #10376	; 0x2888
 8000db4:	443b      	add	r3, r7
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3302      	adds	r3, #2
 8000dba:	b2d1      	uxtb	r1, r2
 8000dbc:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000dc0:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000dc4:	54d1      	strb	r1, [r2, r3]
				singlePx_value[idxUSB+3] = reg_Low[idx+1];
 8000dc6:	f642 0384 	movw	r3, #10372	; 0x2884
 8000dca:	443b      	add	r3, r7
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a42      	ldr	r2, [pc, #264]	; (8000edc <main+0xb0c>)
 8000dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dd6:	f642 0388 	movw	r3, #10376	; 0x2888
 8000dda:	443b      	add	r3, r7
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3303      	adds	r3, #3
 8000de0:	b2d1      	uxtb	r1, r2
 8000de2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000de6:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000dea:	54d1      	strb	r1, [r2, r3]
				//-CH3 (Blue)
				singlePx_value[idxUSB+4] = reg_High[idx+2];
 8000dec:	f642 0384 	movw	r3, #10372	; 0x2884
 8000df0:	443b      	add	r3, r7
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3302      	adds	r3, #2
 8000df6:	4a38      	ldr	r2, [pc, #224]	; (8000ed8 <main+0xb08>)
 8000df8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfc:	f642 0388 	movw	r3, #10376	; 0x2888
 8000e00:	443b      	add	r3, r7
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3304      	adds	r3, #4
 8000e06:	b2d1      	uxtb	r1, r2
 8000e08:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000e0c:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000e10:	54d1      	strb	r1, [r2, r3]
				singlePx_value[idxUSB+5] = reg_Low[idx+2];
 8000e12:	f642 0384 	movw	r3, #10372	; 0x2884
 8000e16:	443b      	add	r3, r7
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <main+0xb0c>)
 8000e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e22:	f642 0388 	movw	r3, #10376	; 0x2888
 8000e26:	443b      	add	r3, r7
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	b2d1      	uxtb	r1, r2
 8000e2e:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000e32:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000e36:	54d1      	strb	r1, [r2, r3]

				idxUSB = idxUSB + 6;
 8000e38:	f642 0388 	movw	r3, #10376	; 0x2888
 8000e3c:	443b      	add	r3, r7
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3306      	adds	r3, #6
 8000e42:	f642 0288 	movw	r2, #10376	; 0x2888
 8000e46:	443a      	add	r2, r7
 8000e48:	6013      	str	r3, [r2, #0]
				idx    = idx + 3;
 8000e4a:	f642 0384 	movw	r3, #10372	; 0x2884
 8000e4e:	443b      	add	r3, r7
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3303      	adds	r3, #3
 8000e54:	f642 0284 	movw	r2, #10372	; 0x2884
 8000e58:	443a      	add	r2, r7
 8000e5a:	6013      	str	r3, [r2, #0]

				if(idx >= TOTAL_PIXELS)
 8000e5c:	f642 0384 	movw	r3, #10372	; 0x2884
 8000e60:	443b      	add	r3, r7
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 8000e68:	db04      	blt.n	8000e74 <main+0xaa4>
				{
					organizeDataToSend = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f642 028c 	movw	r2, #10380	; 0x288c
 8000e70:	443a      	add	r2, r7
 8000e72:	6013      	str	r3, [r2, #0]
			while(organizeDataToSend == 0)
 8000e74:	f642 038c 	movw	r3, #10380	; 0x288c
 8000e78:	443b      	add	r3, r7
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f43f af6a 	beq.w	8000d56 <main+0x986>
				}

			}
			//singlePx_value[TOTAL_PIXELS - 2] = (uint8_t) "\r";
			//singlePx_value[TOTAL_PIXELS - 1] = (uint8_t) "\n";
			__NOP();
 8000e82:	bf00      	nop
			CDC_Transmit_HS(singlePx_value, TOTAL_PIXELS * 2);
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <main+0xb10>)
 8000e86:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000e8a:	f103 0310 	add.w	r3, r3, #16
 8000e8e:	443b      	add	r3, r7
 8000e90:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000e94:	4618      	mov	r0, r3
 8000e96:	f009 fd97 	bl	800a9c8 <CDC_Transmit_HS>
			//CDC_Transmit_HS((uint8_t *) "\r\n", 1);
			//HAL_TIM_Base_Start_IT(&htim2);
			/*HAL_TIM_Base_Stop_IT(&htim2);   // Stop interrupt of TIM2

			 */
			send_data_main = 0;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <main+0xafc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
		token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000ea0:	f7ff bb3b 	b.w	800051a <main+0x14a>
 8000ea4:	24000b6c 	.word	0x24000b6c
 8000ea8:	0800c91c 	.word	0x0800c91c
 8000eac:	24000774 	.word	0x24000774
 8000eb0:	24000b5c 	.word	0x24000b5c
 8000eb4:	2400038c 	.word	0x2400038c
 8000eb8:	24000b60 	.word	0x24000b60
 8000ebc:	24000028 	.word	0x24000028
 8000ec0:	24000000 	.word	0x24000000
 8000ec4:	24000004 	.word	0x24000004
 8000ec8:	0800c92c 	.word	0x0800c92c
 8000ecc:	24000b74 	.word	0x24000b74
 8000ed0:	58021000 	.word	0x58021000
 8000ed4:	240002a8 	.word	0x240002a8
 8000ed8:	24000bb8 	.word	0x24000bb8
 8000edc:	24005cb8 	.word	0x24005cb8
 8000ee0:	ffffd774 	.word	0xffffd774

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09c      	sub	sp, #112	; 0x70
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	224c      	movs	r2, #76	; 0x4c
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f00a fa24 	bl	800b340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2220      	movs	r2, #32
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fa1e 	bl	800b340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f002 ff7f 	bl	8003e08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f26:	bf00      	nop
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <SystemClock_Config+0xdc>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f34:	d1f8      	bne.n	8000f28 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f36:	2321      	movs	r3, #33	; 0x21
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000f50:	2344      	movs	r3, #68	; 0x44
 8000f52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f60:	230c      	movs	r3, #12
 8000f62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ff92 	bl	8003e9c <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f7e:	f000 fde9 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	233f      	movs	r3, #63	; 0x3f
 8000f84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2303      	movs	r3, #3
 8000f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f96:	2340      	movs	r3, #64	; 0x40
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fb25 	bl	80045f8 <HAL_RCC_ClockConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fb4:	f000 fdce 	bl	8001b54 <Error_Handler>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3770      	adds	r7, #112	; 0x70
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024800 	.word	0x58024800

08000fc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <MX_SPI1_Init+0xac>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fdc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_SPI1_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_SPI1_Init+0xa8>)
 8000ff2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ff6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_SPI1_Init+0xa8>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_SPI1_Init+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_SPI1_Init+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_SPI1_Init+0xa8>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_SPI1_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI1_Init+0xa8>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_SPI1_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_SPI1_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI1_Init+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_SPI1_Init+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_SPI1_Init+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_SPI1_Init+0xa8>)
 8001040:	2200      	movs	r2, #0
 8001042:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_SPI1_Init+0xa8>)
 8001046:	2200      	movs	r2, #0
 8001048:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_SPI1_Init+0xa8>)
 800104c:	2200      	movs	r2, #0
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_SPI1_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_SPI1_Init+0xa8>)
 8001058:	f004 fe8c 	bl	8005d74 <HAL_SPI_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001062:	f000 fd77 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	24000220 	.word	0x24000220
 8001070:	40013000 	.word	0x40013000

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM2_Init+0x98>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1375;
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_TIM2_Init+0x98>)
 800109c:	f240 525f 	movw	r2, #1375	; 0x55f
 80010a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM2_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_TIM2_Init+0x98>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_TIM2_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_TIM2_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_TIM2_Init+0x98>)
 80010bc:	f005 fa3b 	bl	8006536 <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010c6:	f000 fd45 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_TIM2_Init+0x98>)
 80010d8:	f005 fc58 	bl	800698c <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010e2:	f000 fd37 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_TIM2_Init+0x98>)
 80010f4:	f005 feae 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010fe:	f000 fd29 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240002a8 	.word	0x240002a8

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MX_TIM3_Init+0x98>)
 8001132:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001136:	f44f 7289 	mov.w	r2, #274	; 0x112
 800113a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM3_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM3_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001156:	f005 f9ee 	bl	8006536 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 fcf8 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM3_Init+0x94>)
 8001172:	f005 fc0b 	bl	800698c <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 fcea 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM3_Init+0x94>)
 800118e:	f005 fe61 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 fcdc 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	240002f4 	.word	0x240002f4
 80011a8:	40000400 	.word	0x40000400

080011ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_TIM4_Init+0x98>)
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <MX_TIM4_Init+0x9c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1375;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_TIM4_Init+0x98>)
 80011d2:	f240 525f 	movw	r2, #1375	; 0x55f
 80011d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_TIM4_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM4_Init+0x98>)
 80011e0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_TIM4_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM4_Init+0x98>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MX_TIM4_Init+0x98>)
 80011f4:	f005 f99f 	bl	8006536 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80011fe:	f000 fca9 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_TIM4_Init+0x98>)
 8001210:	f005 fbbc 	bl	800698c <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800121a:	f000 fc9b 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_TIM4_Init+0x98>)
 800122c:	f005 fe12 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001236:	f000 fc8d 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000340 	.word	0x24000340
 8001248:	40000800 	.word	0x40000800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4bc1      	ldr	r3, [pc, #772]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4abf      	ldr	r2, [pc, #764]	; (8001568 <MX_GPIO_Init+0x31c>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4bbd      	ldr	r3, [pc, #756]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001280:	4bb9      	ldr	r3, [pc, #740]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	4ab8      	ldr	r2, [pc, #736]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001290:	4bb5      	ldr	r3, [pc, #724]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129e:	4bb2      	ldr	r3, [pc, #712]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	4ab0      	ldr	r2, [pc, #704]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012a6:	f043 0320 	orr.w	r3, r3, #32
 80012aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ae:	4bae      	ldr	r3, [pc, #696]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	f003 0320 	and.w	r3, r3, #32
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012bc:	4baa      	ldr	r3, [pc, #680]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	4aa9      	ldr	r2, [pc, #676]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012cc:	4ba6      	ldr	r3, [pc, #664]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	4aa1      	ldr	r2, [pc, #644]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ea:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b9b      	ldr	r3, [pc, #620]	; (8001568 <MX_GPIO_Init+0x31c>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	4a9a      	ldr	r2, [pc, #616]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001308:	4b97      	ldr	r3, [pc, #604]	; (8001568 <MX_GPIO_Init+0x31c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001316:	4b94      	ldr	r3, [pc, #592]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a92      	ldr	r2, [pc, #584]	; (8001568 <MX_GPIO_Init+0x31c>)
 800131e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b90      	ldr	r3, [pc, #576]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	4a8b      	ldr	r2, [pc, #556]	; (8001568 <MX_GPIO_Init+0x31c>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001344:	4b88      	ldr	r3, [pc, #544]	; (8001568 <MX_GPIO_Init+0x31c>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_GREEN_Pin|debug_out_Pin|DRV_RED_Pin|DRV_BLUE_Pin
 8001352:	2200      	movs	r2, #0
 8001354:	213e      	movs	r1, #62	; 0x3e
 8001356:	4885      	ldr	r0, [pc, #532]	; (800156c <MX_GPIO_Init+0x320>)
 8001358:	f001 fa4e 	bl	80027f8 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEST_PIN_Pin|PIN_TEST1_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001362:	4883      	ldr	r0, [pc, #524]	; (8001570 <MX_GPIO_Init+0x324>)
 8001364:	f001 fa48 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f244 0101 	movw	r1, #16385	; 0x4001
 800136e:	4881      	ldr	r0, [pc, #516]	; (8001574 <MX_GPIO_Init+0x328>)
 8001370:	f001 fa42 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2102      	movs	r1, #2
 8001378:	487f      	ldr	r0, [pc, #508]	; (8001578 <MX_GPIO_Init+0x32c>)
 800137a:	f001 fa3d 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001384:	487d      	ldr	r0, [pc, #500]	; (800157c <MX_GPIO_Init+0x330>)
 8001386:	f001 fa37 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001390:	487a      	ldr	r0, [pc, #488]	; (800157c <MX_GPIO_Init+0x330>)
 8001392:	f001 fa31 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV_GREEN_Pin debug_out_Pin DRV_RED_Pin DRV_BLUE_Pin
                           LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DRV_GREEN_Pin|debug_out_Pin|DRV_RED_Pin|DRV_BLUE_Pin
 8001396:	233e      	movs	r3, #62	; 0x3e
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	486f      	ldr	r0, [pc, #444]	; (800156c <MX_GPIO_Init+0x320>)
 80013ae:	f001 f87b 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80013b2:	f249 53c1 	movw	r3, #38337	; 0x95c1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4869      	ldr	r0, [pc, #420]	; (800156c <MX_GPIO_Init+0x320>)
 80013c8:	f001 f86e 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin ENCODER_B_Pin ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ENCODER_B_Pin|ENCODER_Z_Pin;
 80013cc:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4867      	ldr	r0, [pc, #412]	; (8001580 <MX_GPIO_Init+0x334>)
 80013e2:	f001 f861 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF8
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013e6:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	485d      	ldr	r0, [pc, #372]	; (8001570 <MX_GPIO_Init+0x324>)
 80013fc:	f001 f854 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_PIN_Pin PIN_TEST1_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin|PIN_TEST1_Pin;
 8001400:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4855      	ldr	r0, [pc, #340]	; (8001570 <MX_GPIO_Init+0x324>)
 800141a:	f001 f845 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800141e:	f641 03cd 	movw	r3, #6349	; 0x18cd
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4853      	ldr	r0, [pc, #332]	; (8001580 <MX_GPIO_Init+0x334>)
 8001434:	f001 f838 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001438:	2302      	movs	r3, #2
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	484b      	ldr	r0, [pc, #300]	; (8001580 <MX_GPIO_Init+0x334>)
 8001454:	f001 f828 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8001458:	f248 13d9 	movw	r3, #33241	; 0x81d9
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4845      	ldr	r0, [pc, #276]	; (8001584 <MX_GPIO_Init+0x338>)
 800146e:	f001 f81b 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001472:	2306      	movs	r3, #6
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001482:	230b      	movs	r3, #11
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	483d      	ldr	r0, [pc, #244]	; (8001584 <MX_GPIO_Init+0x338>)
 800148e:	f001 f80b 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001492:	2330      	movs	r3, #48	; 0x30
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a2:	230b      	movs	r3, #11
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4834      	ldr	r0, [pc, #208]	; (8001580 <MX_GPIO_Init+0x334>)
 80014ae:	f000 fffb 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80014b2:	f244 0301 	movw	r3, #16385	; 0x4001
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	; (8001574 <MX_GPIO_Init+0x328>)
 80014cc:	f000 ffec 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB15 PB4 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80014d0:	f649 7316 	movw	r3, #40726	; 0x9f16
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_GPIO_Init+0x328>)
 80014e6:	f000 ffdf 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 PG4
                           PG5 PG6 PG8 PG9
                           PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80014ea:	f248 737d 	movw	r3, #34685	; 0x877d
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	481e      	ldr	r0, [pc, #120]	; (8001578 <MX_GPIO_Init+0x32c>)
 8001500:	f000 ffd2 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_TEST2_Pin */
  GPIO_InitStruct.Pin = PIN_TEST2_Pin;
 8001504:	2302      	movs	r3, #2
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PIN_TEST2_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <MX_GPIO_Init+0x32c>)
 800151c:	f000 ffc4 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D4_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D4_Pin|D3_Pin;
 8001520:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_GPIO_Init+0x320>)
 8001536:	f000 ffb7 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154c:	230b      	movs	r3, #11
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_GPIO_Init+0x328>)
 8001558:	f000 ffa6 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	e010      	b.n	8001588 <MX_GPIO_Init+0x33c>
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
 800156c:	58021000 	.word	0x58021000
 8001570:	58021400 	.word	0x58021400
 8001574:	58020400 	.word	0x58020400
 8001578:	58021800 	.word	0x58021800
 800157c:	58020c00 	.word	0x58020c00
 8001580:	58020800 	.word	0x58020800
 8001584:	58020000 	.word	0x58020000
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001592:	2307      	movs	r3, #7
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4837      	ldr	r0, [pc, #220]	; (800167c <MX_GPIO_Init+0x430>)
 800159e:	f000 ff83 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin SP_Pin CDSCLK2_Pin ADCCLK_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin
 80015a2:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4830      	ldr	r0, [pc, #192]	; (800167c <MX_GPIO_Init+0x430>)
 80015bc:	f000 ff74 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80015c0:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4829      	ldr	r0, [pc, #164]	; (800167c <MX_GPIO_Init+0x430>)
 80015d6:	f000 ff67 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4824      	ldr	r0, [pc, #144]	; (8001680 <MX_GPIO_Init+0x434>)
 80015f0:	f000 ff5a 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80015f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	481e      	ldr	r0, [pc, #120]	; (8001684 <MX_GPIO_Init+0x438>)
 800160c:	f000 ff4c 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001610:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001622:	230b      	movs	r3, #11
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_GPIO_Init+0x434>)
 800162e:	f000 ff3b 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D5_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D5_Pin;
 8001632:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <MX_GPIO_Init+0x434>)
 8001648:	f000 ff2e 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin;
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <MX_GPIO_Init+0x43c>)
 8001660:	f000 ff22 	bl	80024a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2017      	movs	r0, #23
 800166a:	f000 fee8 	bl	800243e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800166e:	2017      	movs	r0, #23
 8001670:	f000 feff 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	; 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	58020c00 	.word	0x58020c00
 8001680:	58021800 	.word	0x58021800
 8001684:	58020800 	.word	0x58020800
 8001688:	58020400 	.word	0x58020400

0800168c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (pin PC8)
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800169c:	d11a      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x48>
	{
		encoder_tick++;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016a6:	6013      	str	r3, [r2, #0]
		if(encoder_tick == (unsigned int)(encoder_distance/encoder_resolution))
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80016aa:	edd3 6a00 	vldr	s13, [r3]
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016bc:	ee17 2a90 	vmov	r2, s15
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d105      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x48>
		{
			encoder_tick= 0;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
			get_image = 1;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_GPIO_EXTI_Callback+0x60>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
			// Test pin (PF7)
			// odr = GPIOF->ODR;
			// GPIOF->BSRR = ((odr & GPIO_PIN_7) << 16U) | (~odr & GPIO_PIN_7);
		}
	}
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	24000b78 	.word	0x24000b78
 80016e4:	24000b84 	.word	0x24000b84
 80016e8:	24000b80 	.word	0x24000b80
 80016ec:	24000b7c 	.word	0x24000b7c

080016f0 <HAL_TIM_PeriodElapsedCallback>:



//-Tick every 10[uS]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a7d      	ldr	r2, [pc, #500]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	f040 8175 	bne.w	80019ec <HAL_TIM_PeriodElapsedCallback+0x2fc>
	{
		if(enableSampleTimerFlag==1)
 8001702:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	f040 8170 	bne.w	80019ec <HAL_TIM_PeriodElapsedCallback+0x2fc>
		{
			//---ADC_Clk: To generate a 50KHz frequency (ADCCLK - pin PD13)
			odr = GPIOD->ODR;
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001712:	6013      	str	r3, [r2, #0]
			GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	43db      	mvns	r3, r3
 8001724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001728:	4973      	ldr	r1, [pc, #460]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800172a:	4313      	orrs	r3, r2
 800172c:	618b      	str	r3, [r1, #24]
			//    odr = GPIOD->ODR;
			//    GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);


			//---Toggle CDSCLK2 and CP_Clk: To generate the frequency for the ADC Sampling  and the readout (CDSCLK2 and CP_Clk - pin PD12)
			if(Tim2_tick == 0)
 800172e:	4b74      	ldr	r3, [pc, #464]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0x4e>
			{
				MACRO_CIS_CLR_CPCLK;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173c:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
			}
			if (Led_cnt == 4 && flag_en_CIS_LED == 0)
 800173e:	4b71      	ldr	r3, [pc, #452]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d113      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001746:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x7e>
			{
				flag_en_CIS_LED = 1;
 8001750:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001752:	2201      	movs	r2, #1
 8001754:	801a      	strh	r2, [r3, #0]
				// store LED duration in counter for timer
				cnt_red = ledExpDuration_R;
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6d      	ldr	r2, [pc, #436]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800175c:	6013      	str	r3, [r2, #0]
				cnt_green = ledExpDuration_G;
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001764:	6013      	str	r3, [r2, #0]
				cnt_blue = ledExpDuration_B;
 8001766:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6d      	ldr	r2, [pc, #436]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800176c:	6013      	str	r3, [r2, #0]
			}
			// The CP clock is always 6 ticks (4 at low level, 2 at high level) non symetrical clock
			// since this signal is used for the AFE as CDSCLK2
			if (Tim2_tick == 5)
 800176e:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10c      	bne.n	8001790 <HAL_TIM_PeriodElapsedCallback+0xa0>
			{
				MACRO_CIS_SET_CPCLK;
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = GPIO_PIN_12;                  // CP_Clk set to 1
				Tim2_tick = 0;
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
				CP_cnt++;
 8001784:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a66      	ldr	r2, [pc, #408]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e004      	b.n	800179a <HAL_TIM_PeriodElapsedCallback+0xaa>
			}
			else
			{
				Tim2_tick++;
 8001790:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001798:	6013      	str	r3, [r2, #0]
			}
			Led_cnt++;
 800179a:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a58      	ldr	r2, [pc, #352]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80017a2:	6013      	str	r3, [r2, #0]

			//---CIS SP signal to set exposure duration (SP_CIS - pin PD11)
			// sensor starts acquiring immediately at the tick=2 of the timer counter
			// The Integration time is defined by the 'expDuration_us' variable
			// there is no reading of the data from the sensor between these two pulses
			if(tick_SP == 2 || tick_SP == (expDuration_us+2) )
 80017a4:	4b60      	ldr	r3, [pc, #384]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d007      	beq.n	80017bc <HAL_TIM_PeriodElapsedCallback+0xcc>
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3302      	adds	r3, #2
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d104      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0xd6>
			{
				MACRO_CIS_SET_SP;
 80017bc:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80017be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c2:	619a      	str	r2, [r3, #24]
 80017c4:	e00f      	b.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
				//GPIOD->BSRR = GPIO_PIN_11;              // SP_CIS Set to 1
			}
			else if(tick_SP == 7 || tick_SP == (expDuration_us+7) )
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d007      	beq.n	80017de <HAL_TIM_PeriodElapsedCallback+0xee>
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3307      	adds	r3, #7
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d103      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				MACRO_CIS_CLR_SP;
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80017e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e4:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_11 << 16U; // SP_CIS Set to 0
			}

			if(tick_SP == (expDuration_us+2) )
 80017e6:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3302      	adds	r3, #2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d102      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x10c>
			{
				CP_cnt=0;
 80017f6:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
			}

			tick_SP++;
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a49      	ldr	r2, [pc, #292]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001804:	6013      	str	r3, [r2, #0]




			// read all ports
			if ( (CP_cnt > INATIVE_PIXELS) && (CP_cnt <= INATIVE_PIXELS + EFFECTIVE_PIXELS + 100) ) // 100 is an exageration value of
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b28      	cmp	r3, #40	; 0x28
 800180c:	f240 80d3 	bls.w	80019b6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f240 724c 	movw	r2, #1868	; 0x74c
 8001818:	4293      	cmp	r3, r2
 800181a:	f200 80cc 	bhi.w	80019b6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				// oversampling never reach due to next loop control
			{
				// D0: pin PG12
				ADC_B0 = (GPIOG->IDR >> 12) & 0x01;
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	0b1b      	lsrs	r3, r3, #12
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800182a:	6013      	str	r3, [r2, #0]
				// D1: pin PE9
				ADC_B1 = (GPIOE->IDR >> 9) & 0x01;
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	0a5b      	lsrs	r3, r3, #9
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001838:	6013      	str	r3, [r2, #0]
				// D2: pin PE11
				ADC_B2 = (GPIOE->IDR >> 11) & 0x01;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001846:	6013      	str	r3, [r2, #0]
				// D3: pin PE14
				ADC_B3 = (GPIOE->IDR >> 14) & 0x01;
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	0b9b      	lsrs	r3, r3, #14
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001854:	6013      	str	r3, [r2, #0]
				// D4: pin PE13
				ADC_B4 = (GPIOE->IDR >> 13) & 0x01;
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	0b5b      	lsrs	r3, r3, #13
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	4a39      	ldr	r2, [pc, #228]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001862:	6013      	str	r3, [r2, #0]
				// D5: pin PG14
				ADC_B5 = (GPIOG->IDR >> 14) & 0x01;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	0b9b      	lsrs	r3, r3, #14
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	4a37      	ldr	r2, [pc, #220]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001870:	6013      	str	r3, [r2, #0]
				// D6: pin PB6
				ADC_B6 = (GPIOB->IDR >> 6) & 0x01;
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	4a35      	ldr	r2, [pc, #212]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800187e:	6013      	str	r3, [r2, #0]
				// D7: pin PB7
				ADC_B7 = (GPIOB->IDR >> 7) & 0x01;
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	09db      	lsrs	r3, r3, #7
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800188c:	6013      	str	r3, [r2, #0]

				if(alternateByte == 1)
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d168      	bne.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x278>
				{
					reg_Low[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	005a      	lsls	r2, r3, #1
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	431a      	orrs	r2, r3
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	431a      	orrs	r2, r3
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	019b      	lsls	r3, r3, #6
 80018c8:	ea42 0103 	orr.w	r1, r2, r3
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	01da      	lsls	r2, r3, #7
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	4922      	ldr	r1, [pc, #136]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					i++;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018e6:	6013      	str	r3, [r2, #0]
					alternateByte = 0;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e062      	b.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x2c6>
 80018f0:	240002a8 	.word	0x240002a8
 80018f4:	24000b70 	.word	0x24000b70
 80018f8:	58020c00 	.word	0x58020c00
 80018fc:	24000b88 	.word	0x24000b88
 8001900:	24000b90 	.word	0x24000b90
 8001904:	24000b98 	.word	0x24000b98
 8001908:	24000b72 	.word	0x24000b72
 800190c:	24000b64 	.word	0x24000b64
 8001910:	24000b9c 	.word	0x24000b9c
 8001914:	24000b68 	.word	0x24000b68
 8001918:	24000ba0 	.word	0x24000ba0
 800191c:	24000b6c 	.word	0x24000b6c
 8001920:	24000ba4 	.word	0x24000ba4
 8001924:	24000b8c 	.word	0x24000b8c
 8001928:	24000b94 	.word	0x24000b94
 800192c:	24000bac 	.word	0x24000bac
 8001930:	58021800 	.word	0x58021800
 8001934:	2400adb8 	.word	0x2400adb8
 8001938:	58021000 	.word	0x58021000
 800193c:	2400adbc 	.word	0x2400adbc
 8001940:	2400adc0 	.word	0x2400adc0
 8001944:	2400adc4 	.word	0x2400adc4
 8001948:	2400adc8 	.word	0x2400adc8
 800194c:	2400adcc 	.word	0x2400adcc
 8001950:	58020400 	.word	0x58020400
 8001954:	2400add0 	.word	0x2400add0
 8001958:	2400add4 	.word	0x2400add4
 800195c:	24000bb4 	.word	0x24000bb4
 8001960:	24000bb0 	.word	0x24000bb0
 8001964:	24005cb8 	.word	0x24005cb8
				}
				else
				{
					reg_High[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	431a      	orrs	r2, r3
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	431a      	orrs	r2, r3
 800197c:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	431a      	orrs	r2, r3
 8001984:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	431a      	orrs	r2, r3
 800198c:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	431a      	orrs	r2, r3
 8001994:	4b5a      	ldr	r3, [pc, #360]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	ea42 0103 	orr.w	r1, r2, r3
 800199e:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	01da      	lsls	r2, r3, #7
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4958      	ldr	r1, [pc, #352]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					alternateByte = 1;
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
				}
			}

			if (i == TOTAL_PIXELS)//CP_cnt == (INATIVE_PIXELS + EFFECTIVE_PIXELS+1+1) ) // one oversample cycle added
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 80019be:	d115      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback+0x2fc>
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 80019c0:	4854      	ldr	r0, [pc, #336]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80019c2:	f004 fe95 	bl	80066f0 <HAL_TIM_Base_Stop_IT>

				MACRO_CIS_CLR_CPCLK;
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80019c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019cc:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
				send_data_main = 1;
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
				enableSampleTimerFlag = 0;
 80019d4:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
				CP_cnt = 0;
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
				tick_SP = 0;
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
				i = 0;
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//Tik every 1uS (led exposure is in uS)
	if(htim == &htim3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d15e      	bne.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x3c2>
	{
		if(flag_en_CIS_LED)
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d059      	beq.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x3c2>
//			{
//				MACRO_LED_GREEN_CLR
//				toggleLEDonBoard_G = 1;
//			}

		  if(cnt_red==0  && cnt_green==0 && cnt_blue==0 )
 80019fe:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x332>
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x332>
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x332>
		  {
		    flag_en_CIS_LED = 0;
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
		    HAL_TIM_Base_Stop_IT(&htim3); // stop timer 3
 8001a1c:	4843      	ldr	r0, [pc, #268]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001a1e:	f004 fe67 	bl	80066f0 <HAL_TIM_Base_Stop_IT>
		  }

			if(cnt_red != 0)
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x34c>
			{
				MACRO_CIS_LED_RED_SET
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	619a      	str	r2, [r3, #24]
				cnt_red--;
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x35c>
			}
			else
			{
			  MACRO_LED_RED_SET
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a42:	619a      	str	r2, [r3, #24]
				MACRO_CIS_LED_RED_CLR
 8001a44:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a4a:	619a      	str	r2, [r3, #24]
			}

			if(cnt_green != 0)
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x376>
			{
				MACRO_CIS_LED_GREEN_SET
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a56:	2204      	movs	r2, #4
 8001a58:	619a      	str	r2, [r3, #24]
				cnt_green--;
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e003      	b.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x37e>
			}
			else
			{
				MACRO_CIS_LED_GREEN_CLR
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a6c:	619a      	str	r2, [r3, #24]
			}

			if(cnt_blue != 0)
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x398>
			{
				MACRO_CIS_LED_BLUE_SET
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a78:	2220      	movs	r2, #32
 8001a7a:	619a      	str	r2, [r3, #24]
				cnt_blue--;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	4a2e      	ldr	r2, [pc, #184]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e003      	b.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x3a0>
			}
			else
			{
				MACRO_CIS_LED_BLUE_CLR
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a8e:	619a      	str	r2, [r3, #24]
			}



			odr = GPIOE->ODR;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001a96:	6013      	str	r3, [r2, #0]
			GPIOE->BSRR = ((odr & GPIO_PIN_3) << 16U) | (~odr & GPIO_PIN_3);
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	4924      	ldr	r1, [pc, #144]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	618b      	str	r3, [r1, #24]
		}
	}

	// Blink led as Keep Alive signal
	if(htim == &htim4)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d112      	bne.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
	{
		if (toggleLEDonBoard == 1)
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x3e2>
		{
				MACRO_LED_RED_CLR
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac8:	619a      	str	r2, [r3, #24]
				toggleLEDonBoard = 0;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    {
        odr = GPIOD->ODR;
        GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);
    }
	 */
}
 8001ad0:	e006      	b.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
			MACRO_LED_RED_CLR
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad8:	619a      	str	r2, [r3, #24]
			toggleLEDonBoard = 1;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2400adbc 	.word	0x2400adbc
 8001aec:	2400adb8 	.word	0x2400adb8
 8001af0:	2400adc0 	.word	0x2400adc0
 8001af4:	2400adc4 	.word	0x2400adc4
 8001af8:	2400adc8 	.word	0x2400adc8
 8001afc:	2400adcc 	.word	0x2400adcc
 8001b00:	2400add0 	.word	0x2400add0
 8001b04:	2400add4 	.word	0x2400add4
 8001b08:	24000bb0 	.word	0x24000bb0
 8001b0c:	24000bb8 	.word	0x24000bb8
 8001b10:	24000bb4 	.word	0x24000bb4
 8001b14:	240002a8 	.word	0x240002a8
 8001b18:	58020c00 	.word	0x58020c00
 8001b1c:	24000b74 	.word	0x24000b74
 8001b20:	24000b70 	.word	0x24000b70
 8001b24:	24000b8c 	.word	0x24000b8c
 8001b28:	24000b94 	.word	0x24000b94
 8001b2c:	240002f4 	.word	0x240002f4
 8001b30:	24000b72 	.word	0x24000b72
 8001b34:	24000b9c 	.word	0x24000b9c
 8001b38:	24000ba0 	.word	0x24000ba0
 8001b3c:	24000ba4 	.word	0x24000ba4
 8001b40:	58021000 	.word	0x58021000
 8001b44:	58020400 	.word	0x58020400
 8001b48:	24000b88 	.word	0x24000b88
 8001b4c:	24000340 	.word	0x24000340
 8001b50:	24000008 	.word	0x24000008

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x30>)
 8001b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x30>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x30>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58024400 	.word	0x58024400

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0b8      	sub	sp, #224	; 0xe0
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	22b4      	movs	r2, #180	; 0xb4
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f009 fbc3 	bl	800b340 <memset>
  if(hspi->Instance==SPI1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_SPI_MspInit+0x104>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d165      	bne.n	8001c90 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bce:	f107 0318 	add.w	r3, r7, #24
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 f870 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001bde:	f7ff ffb9 	bl	8001b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be8:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_SPI_MspInit+0x108>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c54:	2305      	movs	r3, #5
 8001c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <HAL_SPI_MspInit+0x10c>)
 8001c62:	f000 fc21 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c66:	2320      	movs	r3, #32
 8001c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c7e:	2305      	movs	r3, #5
 8001c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <HAL_SPI_MspInit+0x110>)
 8001c8c:	f000 fc0c 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	37e0      	adds	r7, #224	; 0xe0
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40013000 	.word	0x40013000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020000 	.word	0x58020000
 8001ca4:	58020400 	.word	0x58020400

08001ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d117      	bne.n	8001cea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	201c      	movs	r0, #28
 8001cde:	f000 fbae 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce2:	201c      	movs	r0, #28
 8001ce4:	f000 fbc5 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ce8:	e038      	b.n	8001d5c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_MspInit+0xc0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d117      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	201d      	movs	r0, #29
 8001d18:	f000 fb91 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d1c:	201d      	movs	r0, #29
 8001d1e:	f000 fba8 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8001d22:	e01b      	b.n	8001d5c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d116      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_TIM_Base_MspInit+0xbc>)
 8001d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	201e      	movs	r0, #30
 8001d52:	f000 fb74 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d56:	201e      	movs	r0, #30
 8001d58:	f000 fb8b 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58024400 	.word	0x58024400
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 fa20 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001dc8:	2080      	movs	r0, #128	; 0x80
 8001dca:	f000 fd2e 	bl	800282a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001dce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dd2:	f000 fd2a 	bl	800282a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM2_IRQHandler+0x10>)
 8001de2:	f004 fcb4 	bl	800674e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	240002a8 	.word	0x240002a8

08001df0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <TIM3_IRQHandler+0x10>)
 8001df6:	f004 fcaa 	bl	800674e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	240002f4 	.word	0x240002f4

08001e04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM4_IRQHandler+0x10>)
 8001e0a:	f004 fca0 	bl	800674e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000340 	.word	0x24000340

08001e18 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <OTG_HS_IRQHandler+0x10>)
 8001e1e:	f000 fe75 	bl	8002b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2400c2c0 	.word	0x2400c2c0

08001e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_kill>:

int _kill(int pid, int sig)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e46:	f009 fa43 	bl	800b2d0 <__errno>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2216      	movs	r2, #22
 8001e4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_exit>:

void _exit (int status)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ffe7 	bl	8001e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e6e:	e7fe      	b.n	8001e6e <_exit+0x12>

08001e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e00a      	b.n	8001e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e82:	f3af 8000 	nop.w
 8001e86:	4601      	mov	r1, r0
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	60ba      	str	r2, [r7, #8]
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf0      	blt.n	8001e82 <_read+0x12>
	}

return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e009      	b.n	8001ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf1      	blt.n	8001ebc <_write+0x12>
	}
	return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_close>:

int _close(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_isatty>:

int _isatty(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return 1;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f009 f9a8 	bl	800b2d0 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	24050000 	.word	0x24050000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	2400add8 	.word	0x2400add8
 8001fb4:	2400ca00 	.word	0x2400ca00

08001fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <SystemInit+0xf0>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <SystemInit+0xf0>)
 8001fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fce:	4b37      	ldr	r3, [pc, #220]	; (80020ac <SystemInit+0xf4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d807      	bhi.n	8001fea <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <SystemInit+0xf4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 030f 	bic.w	r3, r3, #15
 8001fe2:	4a32      	ldr	r2, [pc, #200]	; (80020ac <SystemInit+0xf4>)
 8001fe4:	f043 0307 	orr.w	r3, r3, #7
 8001fe8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <SystemInit+0xf8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <SystemInit+0xf8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <SystemInit+0xf8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <SystemInit+0xf8>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	492b      	ldr	r1, [pc, #172]	; (80020b0 <SystemInit+0xf8>)
 8002002:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <SystemInit+0xfc>)
 8002004:	4013      	ands	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <SystemInit+0xf4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <SystemInit+0xf4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 030f 	bic.w	r3, r3, #15
 800201c:	4a23      	ldr	r2, [pc, #140]	; (80020ac <SystemInit+0xf4>)
 800201e:	f043 0307 	orr.w	r3, r3, #7
 8002022:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <SystemInit+0xf8>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <SystemInit+0xf8>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <SystemInit+0xf8>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <SystemInit+0xf8>)
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <SystemInit+0x100>)
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <SystemInit+0xf8>)
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <SystemInit+0x104>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <SystemInit+0xf8>)
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <SystemInit+0x108>)
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <SystemInit+0xf8>)
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <SystemInit+0xf8>)
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <SystemInit+0x108>)
 8002052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <SystemInit+0xf8>)
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <SystemInit+0xf8>)
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <SystemInit+0x108>)
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <SystemInit+0xf8>)
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <SystemInit+0xf8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <SystemInit+0xf8>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <SystemInit+0xf8>)
 8002074:	2200      	movs	r2, #0
 8002076:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <SystemInit+0xf8>)
 800207a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <SystemInit+0xf8>)
 8002080:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8002084:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <SystemInit+0xf8>)
 800208a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800208e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002090:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <SystemInit+0x10c>)
 8002094:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002098:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00
 80020ac:	52002000 	.word	0x52002000
 80020b0:	58024400 	.word	0x58024400
 80020b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80020b8:	02020200 	.word	0x02020200
 80020bc:	01ff0000 	.word	0x01ff0000
 80020c0:	01010280 	.word	0x01010280
 80020c4:	52004000 	.word	0x52004000

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020cc:	f7ff ff74 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f009 f8f1 	bl	800b2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7fe f969 	bl	80003d0 <main>
  bx  lr
 80020fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002100:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002104:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002108:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 800210c:	0800cbe8 	.word	0x0800cbe8
  ldr r2, =_sbss
 8002110:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 8002114:	2400c9fc 	.word	0x2400c9fc

08002118 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC3_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002122:	2003      	movs	r0, #3
 8002124:	f000 f980 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002128:	f002 fc1c 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_Init+0x68>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	4913      	ldr	r1, [pc, #76]	; (8002188 <HAL_Init+0x6c>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_Init+0x68>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <HAL_Init+0x6c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_Init+0x70>)
 800215e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_Init+0x74>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f814 	bl	8002194 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e002      	b.n	800217c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002176:	f7ff fcf3 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	0800c988 	.word	0x0800c988
 800218c:	240000a4 	.word	0x240000a4
 8002190:	240000a0 	.word	0x240000a0

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_InitTick+0x60>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e021      	b.n	80021ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_InitTick+0x64>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_InitTick+0x60>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f965 	bl	800248e <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f000 f92f 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x68>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	240000ac 	.word	0x240000ac
 80021f8:	240000a0 	.word	0x240000a0
 80021fc:	240000a8 	.word	0x240000a8

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	240000ac 	.word	0x240000ac
 8002224:	2400addc 	.word	0x2400addc

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2400addc 	.word	0x2400addc

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	240000ac 	.word	0x240000ac

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <__NVIC_SetPriorityGrouping+0x40>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x40>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	05fa0000 	.word	0x05fa0000

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff29 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff40 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff90 	bl	800237c <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5f 	bl	8002328 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff33 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa4 	bl	80023e4 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024b6:	4b86      	ldr	r3, [pc, #536]	; (80026d0 <HAL_GPIO_Init+0x228>)
 80024b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024ba:	e18c      	b.n	80027d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 817e 	beq.w	80027d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d005      	beq.n	80024ec <HAL_GPIO_Init+0x44>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d130      	bne.n	800254e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002522:	2201      	movs	r2, #1
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 0201 	and.w	r2, r3, #1
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b03      	cmp	r3, #3
 8002558:	d017      	beq.n	800258a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d123      	bne.n	80025de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	69b9      	ldr	r1, [r7, #24]
 80025da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0203 	and.w	r2, r3, #3
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80d8 	beq.w	80027d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_GPIO_Init+0x22c>)
 8002622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002626:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_GPIO_Init+0x22c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_GPIO_Init+0x22c>)
 8002632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <HAL_GPIO_Init+0x230>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_GPIO_Init+0x234>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d04a      	beq.n	8002700 <HAL_GPIO_Init+0x258>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_GPIO_Init+0x238>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02b      	beq.n	80026ca <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_GPIO_Init+0x23c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x240>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a19      	ldr	r2, [pc, #100]	; (80026ec <HAL_GPIO_Init+0x244>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x216>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_GPIO_Init+0x248>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x212>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_GPIO_Init+0x24c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_GPIO_Init+0x250>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x20a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_GPIO_Init+0x254>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x206>
 80026aa:	2309      	movs	r3, #9
 80026ac:	e029      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026ae:	230a      	movs	r3, #10
 80026b0:	e027      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e025      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e023      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e021      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026be:	2304      	movs	r3, #4
 80026c0:	e01f      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e01d      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e01b      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e019      	b.n	8002702 <HAL_GPIO_Init+0x25a>
 80026ce:	bf00      	nop
 80026d0:	58000080 	.word	0x58000080
 80026d4:	58024400 	.word	0x58024400
 80026d8:	58000400 	.word	0x58000400
 80026dc:	58020000 	.word	0x58020000
 80026e0:	58020400 	.word	0x58020400
 80026e4:	58020800 	.word	0x58020800
 80026e8:	58020c00 	.word	0x58020c00
 80026ec:	58021000 	.word	0x58021000
 80026f0:	58021400 	.word	0x58021400
 80026f4:	58021800 	.word	0x58021800
 80026f8:	58021c00 	.word	0x58021c00
 80026fc:	58022400 	.word	0x58022400
 8002700:	2300      	movs	r3, #0
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002712:	4938      	ldr	r1, [pc, #224]	; (80027f4 <HAL_GPIO_Init+0x34c>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f ae6b 	bne.w	80024bc <HAL_GPIO_Init+0x14>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	58000400 	.word	0x58000400

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff1b 	bl	800168c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002860:	b08f      	sub	sp, #60	; 0x3c
 8002862:	af0a      	add	r7, sp, #40	; 0x28
 8002864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e116      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f008 f9e4 	bl	800ac58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fcab 	bl	800720a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	687e      	ldr	r6, [r7, #4]
 80028bc:	466d      	mov	r5, sp
 80028be:	f106 0410 	add.w	r4, r6, #16
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d2:	1d33      	adds	r3, r6, #4
 80028d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	f004 fb76 	bl	8006fc8 <USB_CoreInit>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0d7      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fc99 	bl	800722c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e04a      	b.n	8002996 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333d      	adds	r3, #61	; 0x3d
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	b298      	uxth	r0, r3
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	4602      	mov	r2, r0
 800293e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3340      	adds	r3, #64	; 0x40
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334c      	adds	r3, #76	; 0x4c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3354      	adds	r3, #84	; 0x54
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3af      	bcc.n	8002900 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e044      	b.n	8002a30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b5      	bcc.n	80029a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	687e      	ldr	r6, [r7, #4]
 8002a42:	466d      	mov	r5, sp
 8002a44:	f106 0410 	add.w	r4, r6, #16
 8002a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a58:	1d33      	adds	r3, r6, #4
 8002a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5c:	6838      	ldr	r0, [r7, #0]
 8002a5e:	f004 fc31 	bl	80072c4 <USB_DevInit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e014      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f001 f98b 	bl	8003da8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fd7f 	bl	800859a <USB_DevDisconnect>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_Start+0x1c>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e020      	b.n	8002b04 <HAL_PCD_Start+0x5e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d109      	bne.n	8002ae6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 fb7c 	bl	80071e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fd2f 	bl	8008558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08d      	sub	sp, #52	; 0x34
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f005 fded 	bl	8008702 <USB_GetMode>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 84b7 	bne.w	800349e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 fd51 	bl	80085dc <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 84ad 	beq.w	800349c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fd3e 	bl	80085dc <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 0202 	and.w	r2, r2, #2
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 fd2c 	bl	80085dc <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d161      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0210 	bic.w	r2, r2, #16
 8002b9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	0c5b      	lsrs	r3, r3, #17
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d124      	bne.n	8002c14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d035      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	6a38      	ldr	r0, [r7, #32]
 8002bea:	f005 fb63 	bl	80082b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfa:	441a      	add	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0c:	441a      	add	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	621a      	str	r2, [r3, #32]
 8002c12:	e016      	b.n	8002c42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	0c5b      	lsrs	r3, r3, #17
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d110      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c26:	2208      	movs	r2, #8
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6a38      	ldr	r0, [r7, #32]
 8002c2c:	f005 fb42 	bl	80082b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3c:	441a      	add	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0210 	orr.w	r2, r2, #16
 8002c50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fcc0 	bl	80085dc <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c66:	f040 80a7 	bne.w	8002db8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f005 fcc5 	bl	8008602 <USB_ReadDevAllOutEpInterrupt>
 8002c78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c7a:	e099      	b.n	8002db0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 808e 	beq.w	8002da4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 fce9 	bl	800866a <USB_ReadDevOutEPInterrupt>
 8002c98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 feef 	bl	8003a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 ffc5 	bl	8003c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d030      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d109      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	78db      	ldrb	r3, [r3, #3]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f008 f8a4 	bl	800aea0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2302      	movs	r3, #2
 8002d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2320      	movs	r3, #32
 8002d84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3301      	adds	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f af62 	bne.w	8002c7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 fc0d 	bl	80085dc <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dcc:	f040 80db 	bne.w	8002f86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 fc2e 	bl	8008636 <USB_ReadDevAllInEpInterrupt>
 8002dda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002de0:	e0cd      	b.n	8002f7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80c2 	beq.w	8002f72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f005 fc54 	bl	80086a6 <USB_ReadDevInEPInterrupt>
 8002dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d057      	beq.n	8002eba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69f9      	ldr	r1, [r7, #28]
 8002e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d132      	bne.n	8002eae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334c      	adds	r3, #76	; 0x4c
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4403      	add	r3, r0
 8002e68:	3348      	adds	r3, #72	; 0x48
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4419      	add	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4403      	add	r3, r0
 8002e7c:	334c      	adds	r3, #76	; 0x4c
 8002e7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d113      	bne.n	8002eae <HAL_PCD_IRQHandler+0x3a2>
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3354      	adds	r3, #84	; 0x54
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d108      	bne.n	8002eae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	f005 fc5d 	bl	8008768 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f007 ff6e 	bl	800ad96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eec:	461a      	mov	r2, r3
 8002eee:	2310      	movs	r3, #16
 8002ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2340      	movs	r3, #64	; 0x40
 8002f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d023      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1a:	6a38      	ldr	r0, [r7, #32]
 8002f1c:	f004 fb30 	bl	8007580 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f007 ffbb 	bl	800aec4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fd08 	bl	8003982 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	3301      	adds	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af2e 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fb26 	bl	80085dc <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9a:	d122      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 ff13 	bl	8003df0 <HAL_PCDEx_LPM_Callback>
 8002fca:	e002      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f007 ff59 	bl	800ae84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f005 faf8 	bl	80085dc <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff6:	d112      	bne.n	800301e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f007 ff15 	bl	800ae38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f005 fada 	bl	80085dc <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003032:	d121      	bne.n	8003078 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003042:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d111      	bne.n	8003072 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	f003 020f 	and.w	r2, r3, #15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003068:	2101      	movs	r1, #1
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fec0 	bl	8003df0 <HAL_PCDEx_LPM_Callback>
 8003070:	e002      	b.n	8003078 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f007 fee0 	bl	800ae38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f005 faad 	bl	80085dc <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	f040 80b7 	bne.w	80031fe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fa68 	bl	8007580 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b4:	e046      	b.n	8003144 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	440a      	add	r2, r1
 8003114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800311c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	440a      	add	r2, r1
 8003134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800313c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	3301      	adds	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314a:	429a      	cmp	r2, r3
 800314c:	d3b3      	bcc.n	80030b6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003160:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f043 030b 	orr.w	r3, r3, #11
 800317e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003190:	f043 030b 	orr.w	r3, r3, #11
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	e015      	b.n	80031c4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	4619      	mov	r1, r3
 80031a8:	f242 032b 	movw	r3, #8235	; 0x202b
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031be:	f043 030b 	orr.w	r3, r3, #11
 80031c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031e8:	461a      	mov	r2, r3
 80031ea:	f005 fabd 	bl	8008768 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f005 f9ea 	bl	80085dc <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003212:	d124      	bne.n	800325e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f005 fa81 	bl	8008720 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 fa29 	bl	800767a <USB_GetDevSpeed>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	f001 fd10 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8003238:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4620      	mov	r0, r4
 8003244:	f003 ff2e 	bl	80070a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f007 fdcc 	bl	800ade6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800325c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f005 f9ba 	bl	80085dc <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d10a      	bne.n	8003288 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f007 fda9 	bl	800adca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f002 0208 	and.w	r2, r2, #8
 8003286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f005 f9a5 	bl	80085dc <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d122      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a8:	2301      	movs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
 80032ac:	e014      	b.n	80032d8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb27 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3e5      	bcc.n	80032ae <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 f978 	bl	80085dc <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f6:	d13b      	bne.n	8003370 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	e02b      	b.n	8003356 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3340      	adds	r3, #64	; 0x40
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d115      	bne.n	8003350 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003324:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	da12      	bge.n	8003350 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	333f      	adds	r3, #63	; 0x3f
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fae8 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	3301      	adds	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	429a      	cmp	r2, r3
 800335e:	d3ce      	bcc.n	80032fe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800336e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 f931 	bl	80085dc <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003384:	d155      	bne.n	8003432 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003386:	2301      	movs	r3, #1
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	e045      	b.n	8003418 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d12e      	bne.n	8003412 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da2b      	bge.n	8003412 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d121      	bne.n	8003412 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340e:	6053      	str	r3, [r2, #4]
            break;
 8003410:	e007      	b.n	8003422 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	429a      	cmp	r2, r3
 8003420:	d3b4      	bcc.n	800338c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f005 f8d0 	bl	80085dc <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d10a      	bne.n	800345e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f007 fd4d 	bl	800aee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f005 f8ba 	bl	80085dc <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d115      	bne.n	800349e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f007 fd3d 	bl	800af04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e000      	b.n	800349e <HAL_PCD_IRQHandler+0x992>
      return;
 800349c:	bf00      	nop
    }
  }
}
 800349e:	3734      	adds	r7, #52	; 0x34
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}

080034a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_SetAddress+0x1a>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e013      	b.n	80034e6 <HAL_PCD_SetAddress+0x42>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f005 f818 	bl	800850c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	461a      	mov	r2, r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	70fb      	strb	r3, [r7, #3]
 8003500:	460b      	mov	r3, r1
 8003502:	803b      	strh	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0f      	bge.n	8003534 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3338      	adds	r3, #56	; 0x38
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00f      	b.n	8003554 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003560:	883a      	ldrh	r2, [r7, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	78ba      	ldrb	r2, [r7, #2]
 800356a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800357e:	78bb      	ldrb	r3, [r7, #2]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d102      	bne.n	800358a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_EP_Open+0xaa>
 8003594:	2302      	movs	r3, #2
 8003596:	e00e      	b.n	80035b6 <HAL_PCD_EP_Open+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f88c 	bl	80076c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035b4:	7afb      	ldrb	r3, [r7, #11]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da0f      	bge.n	80035f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3338      	adds	r3, #56	; 0x38
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	705a      	strb	r2, [r3, #1]
 80035f0:	e00f      	b.n	8003612 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_PCD_EP_Close+0x6e>
 8003628:	2302      	movs	r3, #2
 800362a:	e00e      	b.n	800364a <HAL_PCD_EP_Close+0x8c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f004 f8ca 	bl	80077d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	b2da      	uxtb	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	f004 fbb1 	bl	8007e2c <USB_EP0StartXfer>
 80036ca:	e008      	b.n	80036de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	f004 f957 	bl	800798c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	460b      	mov	r3, r1
 8003726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	3338      	adds	r3, #56	; 0x38
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2200      	movs	r2, #0
 8003750:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003758:	7afb      	ldrb	r3, [r7, #11]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	b2da      	uxtb	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	6979      	ldr	r1, [r7, #20]
 800378a:	f004 fb4f 	bl	8007e2c <USB_EP0StartXfer>
 800378e:	e008      	b.n	80037a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6979      	ldr	r1, [r7, #20]
 800379e:	f004 f8f5 	bl	800798c <USB_EPStartXfer>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d901      	bls.n	80037ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e050      	b.n	800386c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0f      	bge.n	80037f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3338      	adds	r3, #56	; 0x38
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
 80037f0:	e00d      	b.n	800380e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_PCD_EP_SetStall+0x82>
 800382a:	2302      	movs	r3, #2
 800382c:	e01e      	b.n	800386c <HAL_PCD_EP_SetStall+0xc0>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 fd91 	bl	8008364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	b2d9      	uxtb	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800385c:	461a      	mov	r2, r3
 800385e:	f004 ff83 	bl	8008768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d901      	bls.n	8003892 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e042      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da0f      	bge.n	80038ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3338      	adds	r3, #56	; 0x38
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	705a      	strb	r2, [r3, #1]
 80038b8:	e00f      	b.n	80038da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_EP_ClrStall+0x86>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e00e      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f004 fd99 	bl	8008440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800392c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da0c      	bge.n	800394e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3338      	adds	r3, #56	; 0x38
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00c      	b.n	8003968 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 fbb8 	bl	80080e4 <USB_EPStopXfer>
 8003974:	4603      	mov	r3, r0
 8003976:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003978:	7afb      	ldrb	r3, [r7, #11]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	; 0x28
 8003986:	af02      	add	r7, sp, #8
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3338      	adds	r3, #56	; 0x38
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d901      	bls.n	80039ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06c      	b.n	8003a94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3303      	adds	r3, #3
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039de:	e02b      	b.n	8003a38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d902      	bls.n	80039fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3303      	adds	r3, #3
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6919      	ldr	r1, [r3, #16]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f004 fc0c 	bl	8008238 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d809      	bhi.n	8003a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d203      	bcs.n	8003a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1be      	bne.n	80039e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d811      	bhi.n	8003a92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2201      	movs	r2, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8e:	4013      	ands	r3, r2
 8003a90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	333c      	adds	r3, #60	; 0x3c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d17b      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a61      	ldr	r2, [pc, #388]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f240 80b9 	bls.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80b3 	beq.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e0a7      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2320      	movs	r3, #32
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e098      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d90f      	bls.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e07e      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f004 fdde 	bl	8008768 <USB_EP0_OutStart>
 8003bac:	e006      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f007 f8cc 	bl	800ad60 <HAL_PCD_DataOutStageCallback>
 8003bc8:	e046      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d124      	bne.n	8003c1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e032      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f007 f8a3 	bl	800ad60 <HAL_PCD_DataOutStageCallback>
 8003c1a:	e01d      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d114      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c44:	461a      	mov	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f004 fd8e 	bl	8008768 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f007 f884 	bl	800ad60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a
 8003c68:	4f54310a 	.word	0x4f54310a

08003c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	333c      	adds	r3, #60	; 0x3c
 8003c84:	3304      	adds	r3, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90e      	bls.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f007 f83b 	bl	800ad3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90c      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f004 fd40 	bl	8008768 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4f54300a 	.word	0x4f54300a

08003cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	0419      	lsls	r1, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
 8003d24:	e028      	b.n	8003d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e00d      	b.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	3340      	adds	r3, #64	; 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3ec      	bcc.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	0418      	lsls	r0, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	3340      	adds	r3, #64	; 0x40
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_PCDEx_ActivateLPM+0x44>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	10000003 	.word	0x10000003

08003df0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_PWREx_ConfigSupply+0x70>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d00a      	beq.n	8003e32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_PWREx_ConfigSupply+0x70>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d001      	beq.n	8003e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e01f      	b.n	8003e6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e01d      	b.n	8003e6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_PWREx_ConfigSupply+0x70>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f023 0207 	bic.w	r2, r3, #7
 8003e3a:	490f      	ldr	r1, [pc, #60]	; (8003e78 <HAL_PWREx_ConfigSupply+0x70>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e42:	f7fe f9f1 	bl	8002228 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e48:	e009      	b.n	8003e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e4a:	f7fe f9ed 	bl	8002228 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e58:	d901      	bls.n	8003e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e007      	b.n	8003e6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_PWREx_ConfigSupply+0x70>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	58024800 	.word	0x58024800

08003e7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	60d3      	str	r3, [r2, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	58024800 	.word	0x58024800

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e39d      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8087 	beq.w	8003fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebc:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec6:	4b86      	ldr	r3, [pc, #536]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d007      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x46>
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	2b18      	cmp	r3, #24
 8003ed6:	d110      	bne.n	8003efa <HAL_RCC_OscConfig+0x5e>
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d06c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x12c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d168      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e377      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x76>
 8003f04:	4b76      	ldr	r3, [pc, #472]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a75      	ldr	r2, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e02e      	b.n	8003f70 <HAL_RCC_OscConfig+0xd4>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f1a:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xd4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0xbc>
 8003f3e:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a67      	ldr	r2, [pc, #412]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xd4>
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a60      	ldr	r2, [pc, #384]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5d      	ldr	r2, [pc, #372]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe f956 	bl	8002228 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fe f952 	bl	8002228 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e32b      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe4>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f942 	bl	8002228 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fe f93e 	bl	8002228 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e317      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x10c>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 808c 	beq.w	80040f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_RCC_OscConfig+0x162>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2b18      	cmp	r3, #24
 8003ff2:	d137      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c8>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d132      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x17a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e2e9      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0219 	bic.w	r2, r3, #25
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	492f      	ldr	r1, [pc, #188]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004028:	f7fe f8fe 	bl	8002228 <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe f8fa 	bl	8002228 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e2d3      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4920      	ldr	r1, [pc, #128]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004062:	e045      	b.n	80040f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d026      	beq.n	80040ba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 0219 	bic.w	r2, r3, #25
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4919      	ldr	r1, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fe f8d3 	bl	8002228 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe f8cf 	bl	8002228 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e2a8      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	490b      	ldr	r1, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
 80040b8:	e01a      	b.n	80040f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x244>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fe f8af 	bl	8002228 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fe f8ab 	bl	8002228 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d903      	bls.n	80040e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e284      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
 80040e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e4:	4b96      	ldr	r3, [pc, #600]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d06a      	beq.n	80041d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fc:	4b90      	ldr	r3, [pc, #576]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004104:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004106:	4b8e      	ldr	r3, [pc, #568]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d007      	beq.n	8004122 <HAL_RCC_OscConfig+0x286>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b18      	cmp	r3, #24
 8004116:	d11b      	bne.n	8004150 <HAL_RCC_OscConfig+0x2b4>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d116      	bne.n	8004150 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004122:	4b87      	ldr	r3, [pc, #540]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_RCC_OscConfig+0x29e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e257      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800413a:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	497d      	ldr	r1, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800414e:	e040      	b.n	80041d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004158:	4b79      	ldr	r3, [pc, #484]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a78      	ldr	r2, [pc, #480]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe f860 	bl	8002228 <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800416c:	f7fe f85c 	bl	8002228 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e235      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800417e:	4b70      	ldr	r3, [pc, #448]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800418a:	4b6d      	ldr	r3, [pc, #436]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	4969      	ldr	r1, [pc, #420]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	60cb      	str	r3, [r1, #12]
 800419e:	e018      	b.n	80041d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a66      	ldr	r2, [pc, #408]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fe f83c 	bl	8002228 <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041b4:	f7fe f838 	bl	8002228 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e211      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041c6:	4b5e      	ldr	r3, [pc, #376]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d019      	beq.n	800421a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	4a55      	ldr	r2, [pc, #340]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fe f819 	bl	8002228 <HAL_GetTick>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe f815 	bl	8002228 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1ee      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800420c:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x35e>
 8004218:	e018      	b.n	800424c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421a:	4b49      	ldr	r3, [pc, #292]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800421c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421e:	4a48      	ldr	r2, [pc, #288]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd ffff 	bl	8002228 <HAL_GetTick>
 800422a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422e:	f7fd fffb 	bl	8002228 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1d4      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d036      	beq.n	80042c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d019      	beq.n	8004294 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004260:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a36      	ldr	r2, [pc, #216]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800426a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800426c:	f7fd ffdc 	bl	8002228 <HAL_GetTick>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004274:	f7fd ffd8 	bl	8002228 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1b1      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x3d8>
 8004292:	e018      	b.n	80042c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a29      	ldr	r2, [pc, #164]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800429a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042a0:	f7fd ffc2 	bl	8002228 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042a8:	f7fd ffbe 	bl	8002228 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e197      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ba:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8086 	beq.w	80043e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x4a8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_RCC_OscConfig+0x4a8>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e0:	f7fd ffa2 	bl	8002228 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd ff9e 	bl	8002228 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e177      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_RCC_OscConfig+0x4a8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x480>
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e032      	b.n	8004382 <HAL_RCC_OscConfig+0x4e6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <HAL_RCC_OscConfig+0x4ac>
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a05      	ldr	r2, [pc, #20]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a02      	ldr	r2, [pc, #8]	; (8004340 <HAL_RCC_OscConfig+0x4a4>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e021      	b.n	8004382 <HAL_RCC_OscConfig+0x4e6>
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	58024800 	.word	0x58024800
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d10c      	bne.n	800436a <HAL_RCC_OscConfig+0x4ce>
 8004350:	4b83      	ldr	r3, [pc, #524]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a82      	ldr	r2, [pc, #520]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	4b80      	ldr	r3, [pc, #512]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a7f      	ldr	r2, [pc, #508]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	e00b      	b.n	8004382 <HAL_RCC_OscConfig+0x4e6>
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a79      	ldr	r2, [pc, #484]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d015      	beq.n	80043b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fd ff4d 	bl	8002228 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd ff49 	bl	8002228 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e120      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043a8:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RCC_OscConfig+0x4f6>
 80043b4:	e014      	b.n	80043e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd ff37 	bl	8002228 <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fd ff33 	bl	8002228 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e10a      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043d4:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ee      	bne.n	80043be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80ff 	beq.w	80045e8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043ea:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f2:	2b18      	cmp	r3, #24
 80043f4:	f000 80ba 	beq.w	800456c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f040 8095 	bne.w	800452c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a56      	ldr	r2, [pc, #344]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fd ff0b 	bl	8002228 <HAL_GetTick>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fd ff07 	bl	8002228 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0e0      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004434:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x6c8>)
 800443a:	4013      	ands	r3, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	430a      	orrs	r2, r1
 8004448:	4945      	ldr	r1, [pc, #276]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	628b      	str	r3, [r1, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	3b01      	subs	r3, #1
 8004454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	3b01      	subs	r3, #1
 800445e:	025b      	lsls	r3, r3, #9
 8004460:	b29b      	uxth	r3, r3
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	3b01      	subs	r3, #1
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	3b01      	subs	r3, #1
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800447e:	4938      	ldr	r1, [pc, #224]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004484:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a35      	ldr	r2, [pc, #212]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCC_OscConfig+0x6cc>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800449c:	00d2      	lsls	r2, r2, #3
 800449e:	4930      	ldr	r1, [pc, #192]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	f023 020c 	bic.w	r2, r3, #12
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	492b      	ldr	r1, [pc, #172]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	f023 0202 	bic.w	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4927      	ldr	r1, [pc, #156]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fe90 	bl	8002228 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fe8c 	bl	8002228 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e065      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x670>
 800452a:	e05d      	b.n	80045e8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd fe76 	bl	8002228 <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fe72 	bl	8002228 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04b      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCC_OscConfig+0x6c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a4>
 800455e:	e043      	b.n	80045e8 <HAL_RCC_OscConfig+0x74c>
 8004560:	58024400 	.word	0x58024400
 8004564:	fffffc0c 	.word	0xfffffc0c
 8004568:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x758>)
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_OscConfig+0x758>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b01      	cmp	r3, #1
 800457e:	d031      	beq.n	80045e4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f003 0203 	and.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d12a      	bne.n	80045e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d122      	bne.n	80045e4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11a      	bne.n	80045e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d111      	bne.n	80045e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d108      	bne.n	80045e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3730      	adds	r7, #48	; 0x30
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400

080045f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e19c      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b8a      	ldr	r3, [pc, #552]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d910      	bls.n	800463c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b87      	ldr	r3, [pc, #540]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 020f 	bic.w	r2, r3, #15
 8004622:	4985      	ldr	r1, [pc, #532]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b83      	ldr	r3, [pc, #524]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e184      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004654:	429a      	cmp	r2, r3
 8004656:	d908      	bls.n	800466a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004658:	4b78      	ldr	r3, [pc, #480]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4975      	ldr	r1, [pc, #468]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004666:	4313      	orrs	r3, r2
 8004668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004682:	429a      	cmp	r2, r3
 8004684:	d908      	bls.n	8004698 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	496a      	ldr	r1, [pc, #424]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004694:	4313      	orrs	r3, r2
 8004696:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	4b64      	ldr	r3, [pc, #400]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d908      	bls.n	80046c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046b4:	4b61      	ldr	r3, [pc, #388]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	495e      	ldr	r1, [pc, #376]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046de:	429a      	cmp	r2, r3
 80046e0:	d908      	bls.n	80046f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046e2:	4b56      	ldr	r3, [pc, #344]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4953      	ldr	r1, [pc, #332]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	429a      	cmp	r2, r3
 800470e:	d908      	bls.n	8004722 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f023 020f 	bic.w	r2, r3, #15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4947      	ldr	r1, [pc, #284]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800471e:	4313      	orrs	r3, r2
 8004720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d055      	beq.n	80047da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800472e:	4b43      	ldr	r3, [pc, #268]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4940      	ldr	r1, [pc, #256]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800473c:	4313      	orrs	r3, r2
 800473e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d107      	bne.n	8004758 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004748:	4b3c      	ldr	r3, [pc, #240]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d121      	bne.n	8004798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0f6      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d107      	bne.n	8004770 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004760:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d115      	bne.n	8004798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0ea      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0de      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d6      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004798:	4b28      	ldr	r3, [pc, #160]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f023 0207 	bic.w	r2, r3, #7
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4925      	ldr	r1, [pc, #148]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fd fd3d 	bl	8002228 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b2:	f7fd fd39 	bl	8002228 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0be      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d1eb      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d208      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f023 020f 	bic.w	r2, r3, #15
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	490e      	ldr	r1, [pc, #56]	; (800483c <HAL_RCC_ClockConfig+0x244>)
 8004804:	4313      	orrs	r3, r2
 8004806:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d214      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 020f 	bic.w	r2, r3, #15
 800481e:	4906      	ldr	r1, [pc, #24]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_RCC_ClockConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e086      	b.n	8004946 <HAL_RCC_ClockConfig+0x34e>
 8004838:	52002000 	.word	0x52002000
 800483c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004858:	429a      	cmp	r2, r3
 800485a:	d208      	bcs.n	800486e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	4939      	ldr	r1, [pc, #228]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 800486a:	4313      	orrs	r3, r2
 800486c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	4b34      	ldr	r3, [pc, #208]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004886:	429a      	cmp	r2, r3
 8004888:	d208      	bcs.n	800489c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	492e      	ldr	r1, [pc, #184]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 8004898:	4313      	orrs	r3, r2
 800489a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d208      	bcs.n	80048ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	4922      	ldr	r1, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d208      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4917      	ldr	r1, [pc, #92]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048f8:	f000 f834 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	4912      	ldr	r1, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x35c>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <HAL_RCC_ClockConfig+0x358>)
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <HAL_RCC_ClockConfig+0x35c>)
 8004920:	5cd3      	ldrb	r3, [r2, r3]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x360>)
 800492e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x364>)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_ClockConfig+0x368>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fc2a 	bl	8002194 <HAL_InitTick>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	58024400 	.word	0x58024400
 8004954:	0800c988 	.word	0x0800c988
 8004958:	240000a4 	.word	0x240000a4
 800495c:	240000a0 	.word	0x240000a0
 8004960:	240000a8 	.word	0x240000a8

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4bb3      	ldr	r3, [pc, #716]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004972:	2b18      	cmp	r3, #24
 8004974:	f200 8155 	bhi.w	8004c22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_RCC_GetSysClockFreq+0x1c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049e5 	.word	0x080049e5
 8004984:	08004c23 	.word	0x08004c23
 8004988:	08004c23 	.word	0x08004c23
 800498c:	08004c23 	.word	0x08004c23
 8004990:	08004c23 	.word	0x08004c23
 8004994:	08004c23 	.word	0x08004c23
 8004998:	08004c23 	.word	0x08004c23
 800499c:	08004c23 	.word	0x08004c23
 80049a0:	08004a0b 	.word	0x08004a0b
 80049a4:	08004c23 	.word	0x08004c23
 80049a8:	08004c23 	.word	0x08004c23
 80049ac:	08004c23 	.word	0x08004c23
 80049b0:	08004c23 	.word	0x08004c23
 80049b4:	08004c23 	.word	0x08004c23
 80049b8:	08004c23 	.word	0x08004c23
 80049bc:	08004c23 	.word	0x08004c23
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004c23 	.word	0x08004c23
 80049c8:	08004c23 	.word	0x08004c23
 80049cc:	08004c23 	.word	0x08004c23
 80049d0:	08004c23 	.word	0x08004c23
 80049d4:	08004c23 	.word	0x08004c23
 80049d8:	08004c23 	.word	0x08004c23
 80049dc:	08004c23 	.word	0x08004c23
 80049e0:	08004a17 	.word	0x08004a17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e4:	4b94      	ldr	r3, [pc, #592]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049f0:	4b91      	ldr	r3, [pc, #580]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	08db      	lsrs	r3, r3, #3
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	4a90      	ldr	r2, [pc, #576]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a02:	e111      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a04:	4b8d      	ldr	r3, [pc, #564]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a06:	61bb      	str	r3, [r7, #24]
    break;
 8004a08:	e10e      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a0c:	61bb      	str	r3, [r7, #24]
    break;
 8004a0e:	e10b      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a10:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a12:	61bb      	str	r3, [r7, #24]
    break;
 8004a14:	e108      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a16:	4b88      	ldr	r3, [pc, #544]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a20:	4b85      	ldr	r3, [pc, #532]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a2c:	4b82      	ldr	r3, [pc, #520]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a36:	4b80      	ldr	r3, [pc, #512]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80e1 	beq.w	8004c1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f000 8083 	beq.w	8004b68 <HAL_RCC_GetSysClockFreq+0x204>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	f200 80a1 	bhi.w	8004bac <HAL_RCC_GetSysClockFreq+0x248>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x114>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d056      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a76:	e099      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a78:	4b6f      	ldr	r3, [pc, #444]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02d      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a84:	4b6c      	ldr	r3, [pc, #432]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	4a6b      	ldr	r2, [pc, #428]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ac2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ade:	e087      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b22:	e065      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	e043      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004baa:	e021      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	0a5b      	lsrs	r3, r3, #9
 8004bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c14:	ee17 3a90 	vmov	r3, s15
 8004c18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c1a:	e005      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    break;
 8004c20:	e002      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c24:	61bb      	str	r3, [r7, #24]
    break;
 8004c26:	bf00      	nop
  }

  return sysclockfreq;
 8004c28:	69bb      	ldr	r3, [r7, #24]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3724      	adds	r7, #36	; 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	58024400 	.word	0x58024400
 8004c3c:	03d09000 	.word	0x03d09000
 8004c40:	003d0900 	.word	0x003d0900
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	46000000 	.word	0x46000000
 8004c4c:	4c742400 	.word	0x4c742400
 8004c50:	4a742400 	.word	0x4a742400
 8004c54:	4af42400 	.word	0x4af42400

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c5e:	f7ff fe81 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004c62:	4602      	mov	r2, r0
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	490f      	ldr	r1, [pc, #60]	; (8004cac <HAL_RCC_GetHCLKFreq+0x54>)
 8004c70:	5ccb      	ldrb	r3, [r1, r3]
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_GetHCLKFreq+0x54>)
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	0800c988 	.word	0x0800c988
 8004cb0:	240000a4 	.word	0x240000a4
 8004cb4:	240000a0 	.word	0x240000a0

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d03f      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cdc:	d02a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce2:	d824      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cee:	d81e      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cfa:	e018      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4ba4      	ldr	r3, [pc, #656]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4aa3      	ldr	r2, [pc, #652]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d08:	e015      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fecb 	bl	8005aac <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d1a:	e00c      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3324      	adds	r3, #36	; 0x24
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ff74 	bl	8005c10 <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d2c:	e003      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
      break;
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d3c:	4b94      	ldr	r3, [pc, #592]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	4991      	ldr	r1, [pc, #580]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d4e:	e001      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d03d      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d826      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d85 	.word	0x08004d85
 8004d74:	08004d93 	.word	0x08004d93
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004dbd 	.word	0x08004dbd
 8004d80:	08004dbd 	.word	0x08004dbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b82      	ldr	r3, [pc, #520]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4a81      	ldr	r2, [pc, #516]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d90:	e015      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fe87 	bl	8005aac <RCCEx_PLL2_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004da2:	e00c      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3324      	adds	r3, #36	; 0x24
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff30 	bl	8005c10 <RCCEx_PLL3_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004db4:	e003      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dba:	e000      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc4:	4b72      	ldr	r3, [pc, #456]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	f023 0207 	bic.w	r2, r3, #7
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	496f      	ldr	r1, [pc, #444]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d051      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004df2:	d036      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004df4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004df8:	d830      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dfe:	d032      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004e00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e04:	d82a      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e0a:	d02e      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e10:	d824      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e16:	d018      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1c:	d81e      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e26:	d007      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004e28:	e018      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2a:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a58      	ldr	r2, [pc, #352]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e36:	e019      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fe34 	bl	8005aac <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e48:	e010      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fedd 	bl	8005c10 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e007      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e60:	e004      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e80:	4943      	ldr	r1, [pc, #268]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	658b      	str	r3, [r1, #88]	; 0x58
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d051      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e9e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ea2:	d036      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ea8:	d830      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004eaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eae:	d032      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eb4:	d82a      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eba:	d02e      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ec0:	d824      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ec6:	d018      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ecc:	d81e      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004ed2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed6:	d007      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004ed8:	e018      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ee6:	e019      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fddc 	bl	8005aac <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ef8:	e010      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3324      	adds	r3, #36	; 0x24
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fe85 	bl	8005c10 <RCCEx_PLL3_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f0a:	e007      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f22:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f30:	4917      	ldr	r1, [pc, #92]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	658b      	str	r3, [r1, #88]	; 0x58
 8004f36:	e001      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d035      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d01c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d817      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d00c      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d813      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d019      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d10f      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f70:	e011      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd97 	bl	8005aac <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
      break;
 8004f88:	e005      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f9c:	4ba3      	ldr	r3, [pc, #652]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	49a0      	ldr	r1, [pc, #640]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d047      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc8:	d030      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fce:	d82a      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fd4:	d02c      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fda:	d824      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe0:	d018      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe6:	d81e      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff0:	d007      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ff2:	e018      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff4:	4b8d      	ldr	r3, [pc, #564]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a8c      	ldr	r2, [pc, #560]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005000:	e017      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3304      	adds	r3, #4
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fd4f 	bl	8005aac <RCCEx_PLL2_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005012:	e00e      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3324      	adds	r3, #36	; 0x24
 8005018:	2100      	movs	r1, #0
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fdf8 	bl	8005c10 <RCCEx_PLL3_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005024:	e005      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
      break;
 800502a:	e002      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005038:	4b7c      	ldr	r3, [pc, #496]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	4979      	ldr	r1, [pc, #484]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005046:	4313      	orrs	r3, r2
 8005048:	650b      	str	r3, [r1, #80]	; 0x50
 800504a:	e001      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d049      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d02e      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506a:	d828      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x406>
 800506c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005070:	d02a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005076:	d822      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800507c:	d026      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800507e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005082:	d81c      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005088:	d010      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800508a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800508e:	d816      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01d      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d111      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fd03 	bl	8005aac <RCCEx_PLL2_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050aa:	e012      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fdac 	bl	8005c10 <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050bc:	e009      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      break;
 80050c2:	e006      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050c4:	bf00      	nop
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80050d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050d8:	4b54      	ldr	r3, [pc, #336]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	4951      	ldr	r1, [pc, #324]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	650b      	str	r3, [r1, #80]	; 0x50
 80050ea:	e001      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d04b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005106:	d02e      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510c:	d828      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d02a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d822      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800511a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800511e:	d026      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005124:	d81c      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800512a:	d010      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800512c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005130:	d816      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01d      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800513a:	d111      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fcb2 	bl	8005aac <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800514c:	e012      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fd5b 	bl	8005c10 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005166:	bf00      	nop
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800517a:	4b2c      	ldr	r3, [pc, #176]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005188:	4928      	ldr	r1, [pc, #160]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800518a:	4313      	orrs	r3, r2
 800518c:	658b      	str	r3, [r1, #88]	; 0x58
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02f      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a8:	d00e      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80051aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ae:	d814      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x522>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80051b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b8:	d10f      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051c6:	e00c      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fc6c 	bl	8005aac <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
      break;
 80051de:	e000      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80051e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f4:	490d      	ldr	r1, [pc, #52]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	650b      	str	r3, [r1, #80]	; 0x50
 80051fa:	e001      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d034      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	2b03      	cmp	r3, #3
 8005212:	d81d      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005257 	.word	0x08005257
 8005220:	08005231 	.word	0x08005231
 8005224:	0800523f 	.word	0x0800523f
 8005228:	08005257 	.word	0x08005257
 800522c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4bb1      	ldr	r3, [pc, #708]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4ab0      	ldr	r2, [pc, #704]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800523c:	e00c      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2102      	movs	r1, #2
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fc31 	bl	8005aac <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800524e:	e003      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
      break;
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800525e:	4ba6      	ldr	r3, [pc, #664]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	49a3      	ldr	r1, [pc, #652]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800526c:	4313      	orrs	r3, r2
 800526e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005270:	e001      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8086 	beq.w	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005284:	4b9d      	ldr	r3, [pc, #628]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a9c      	ldr	r2, [pc, #624]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005290:	f7fc ffca 	bl	8002228 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005296:	e009      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fc ffc6 	bl	8002228 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d902      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	75fb      	strb	r3, [r7, #23]
        break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ac:	4b93      	ldr	r3, [pc, #588]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d166      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052be:	4b8e      	ldr	r3, [pc, #568]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c8:	4053      	eors	r3, r2
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d013      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052d2:	4b89      	ldr	r3, [pc, #548]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052dc:	4b86      	ldr	r3, [pc, #536]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	4a85      	ldr	r2, [pc, #532]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e8:	4b83      	ldr	r3, [pc, #524]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	4a82      	ldr	r2, [pc, #520]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052f4:	4a80      	ldr	r2, [pc, #512]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d115      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fc ff8f 	bl	8002228 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530c:	e00b      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fc ff8b 	bl	8002228 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d902      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	75fb      	strb	r3, [r7, #23]
            break;
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005326:	4b74      	ldr	r3, [pc, #464]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ed      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d126      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005346:	d10d      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005348:	4b6b      	ldr	r3, [pc, #428]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005356:	0919      	lsrs	r1, r3, #4
 8005358:	4b69      	ldr	r3, [pc, #420]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800535a:	400b      	ands	r3, r1
 800535c:	4966      	ldr	r1, [pc, #408]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]
 8005362:	e005      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005364:	4b64      	ldr	r3, [pc, #400]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	4a63      	ldr	r2, [pc, #396]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800536a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800536e:	6113      	str	r3, [r2, #16]
 8005370:	4b61      	ldr	r3, [pc, #388]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800537a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537e:	495e      	ldr	r1, [pc, #376]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005380:	4313      	orrs	r3, r2
 8005382:	670b      	str	r3, [r1, #112]	; 0x70
 8005384:	e004      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	75bb      	strb	r3, [r7, #22]
 800538a:	e001      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d07e      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	2b28      	cmp	r3, #40	; 0x28
 80053a2:	d867      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	0800547b 	.word	0x0800547b
 80053b0:	08005475 	.word	0x08005475
 80053b4:	08005475 	.word	0x08005475
 80053b8:	08005475 	.word	0x08005475
 80053bc:	08005475 	.word	0x08005475
 80053c0:	08005475 	.word	0x08005475
 80053c4:	08005475 	.word	0x08005475
 80053c8:	08005475 	.word	0x08005475
 80053cc:	08005451 	.word	0x08005451
 80053d0:	08005475 	.word	0x08005475
 80053d4:	08005475 	.word	0x08005475
 80053d8:	08005475 	.word	0x08005475
 80053dc:	08005475 	.word	0x08005475
 80053e0:	08005475 	.word	0x08005475
 80053e4:	08005475 	.word	0x08005475
 80053e8:	08005475 	.word	0x08005475
 80053ec:	08005463 	.word	0x08005463
 80053f0:	08005475 	.word	0x08005475
 80053f4:	08005475 	.word	0x08005475
 80053f8:	08005475 	.word	0x08005475
 80053fc:	08005475 	.word	0x08005475
 8005400:	08005475 	.word	0x08005475
 8005404:	08005475 	.word	0x08005475
 8005408:	08005475 	.word	0x08005475
 800540c:	0800547b 	.word	0x0800547b
 8005410:	08005475 	.word	0x08005475
 8005414:	08005475 	.word	0x08005475
 8005418:	08005475 	.word	0x08005475
 800541c:	08005475 	.word	0x08005475
 8005420:	08005475 	.word	0x08005475
 8005424:	08005475 	.word	0x08005475
 8005428:	08005475 	.word	0x08005475
 800542c:	0800547b 	.word	0x0800547b
 8005430:	08005475 	.word	0x08005475
 8005434:	08005475 	.word	0x08005475
 8005438:	08005475 	.word	0x08005475
 800543c:	08005475 	.word	0x08005475
 8005440:	08005475 	.word	0x08005475
 8005444:	08005475 	.word	0x08005475
 8005448:	08005475 	.word	0x08005475
 800544c:	0800547b 	.word	0x0800547b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb28 	bl	8005aac <RCCEx_PLL2_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005460:	e00c      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fbd1 	bl	8005c10 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
      break;
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800547a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	491a      	ldr	r1, [pc, #104]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005490:	4313      	orrs	r3, r2
 8005492:	654b      	str	r3, [r1, #84]	; 0x54
 8005494:	e001      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d03e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d820      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	08005505 	.word	0x08005505
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054df 	.word	0x080054df
 80054c0:	08005505 	.word	0x08005505
 80054c4:	08005505 	.word	0x08005505
 80054c8:	08005505 	.word	0x08005505
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 faea 	bl	8005aac <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054dc:	e013      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3324      	adds	r3, #36	; 0x24
 80054e2:	2101      	movs	r1, #1
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fb93 	bl	8005c10 <RCCEx_PLL3_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054ee:	e00a      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
      break;
 80054f4:	e007      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
 80054fc:	58024800 	.word	0x58024800
 8005500:	00ffffcf 	.word	0x00ffffcf
      break;
 8005504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800550c:	4b9f      	ldr	r3, [pc, #636]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f023 0207 	bic.w	r2, r3, #7
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	499c      	ldr	r1, [pc, #624]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800551a:	4313      	orrs	r3, r2
 800551c:	654b      	str	r3, [r1, #84]	; 0x54
 800551e:	e001      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d039      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005536:	2b05      	cmp	r3, #5
 8005538:	d820      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005583 	.word	0x08005583
 8005544:	08005559 	.word	0x08005559
 8005548:	0800556b 	.word	0x0800556b
 800554c:	08005583 	.word	0x08005583
 8005550:	08005583 	.word	0x08005583
 8005554:	08005583 	.word	0x08005583
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f000 faa4 	bl	8005aac <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005568:	e00c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3324      	adds	r3, #36	; 0x24
 800556e:	2101      	movs	r1, #1
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fb4d 	bl	8005c10 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800557a:	e003      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
      break;
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558a:	4b80      	ldr	r3, [pc, #512]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	497c      	ldr	r1, [pc, #496]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800559a:	4313      	orrs	r3, r2
 800559c:	658b      	str	r3, [r1, #88]	; 0x58
 800559e:	e001      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d04b      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ba:	d02e      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c0:	d828      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d02a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d822      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d2:	d026      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80055d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d8:	d81c      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055de:	d010      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80055e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e4:	d816      	bhi.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01d      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80055ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ee:	d111      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa58 	bl	8005aac <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005600:	e012      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	; 0x24
 8005606:	2102      	movs	r1, #2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fb01 	bl	8005c10 <RCCEx_PLL3_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005612:	e009      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
      break;
 8005618:	e006      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800561a:	bf00      	nop
 800561c:	e004      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562e:	4b57      	ldr	r3, [pc, #348]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	4953      	ldr	r1, [pc, #332]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	654b      	str	r3, [r1, #84]	; 0x54
 8005642:	e001      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d04b      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800565e:	d02e      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005660:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005664:	d828      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d02a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005670:	d822      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005676:	d026      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800567c:	d81c      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800567e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005682:	d010      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005688:	d816      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01d      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d111      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa06 	bl	8005aac <RCCEx_PLL2_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056a4:	e012      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3324      	adds	r3, #36	; 0x24
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 faaf 	bl	8005c10 <RCCEx_PLL3_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
      break;
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056be:	bf00      	nop
 80056c0:	e004      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056c2:	bf00      	nop
 80056c4:	e002      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e0:	492a      	ldr	r1, [pc, #168]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	658b      	str	r3, [r1, #88]	; 0x58
 80056e6:	e001      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d04d      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005702:	d02e      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005704:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005708:	d828      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d02a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005714:	d822      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005716:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800571a:	d026      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800571c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005720:	d81c      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005726:	d010      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572c:	d816      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01d      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005736:	d111      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9b4 	bl	8005aac <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005748:	e012      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3324      	adds	r3, #36	; 0x24
 800574e:	2102      	movs	r1, #2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fa5d 	bl	8005c10 <RCCEx_PLL3_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800575a:	e009      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
      break;
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005762:	bf00      	nop
 8005764:	e004      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800576e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005784:	4901      	ldr	r1, [pc, #4]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	658b      	str	r3, [r1, #88]	; 0x58
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800578c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d018      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d10a      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3324      	adds	r3, #36	; 0x24
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fa2d 	bl	8005c10 <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80057c0:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057cc:	4987      	ldr	r1, [pc, #540]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e8:	d10a      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	2102      	movs	r1, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fa0d 	bl	8005c10 <RCCEx_PLL3_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005800:	4b7a      	ldr	r3, [pc, #488]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580e:	4977      	ldr	r1, [pc, #476]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005810:	4313      	orrs	r3, r2
 8005812:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d034      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800582a:	d01d      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800582c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005830:	d817      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583a:	d009      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800583c:	e011      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f931 	bl	8005aac <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800584e:	e00c      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f9da 	bl	8005c10 <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
      break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587e:	495b      	ldr	r1, [pc, #364]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005880:	4313      	orrs	r3, r2
 8005882:	658b      	str	r3, [r1, #88]	; 0x58
 8005884:	e001      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d033      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058a0:	d01c      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80058a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058a6:	d816      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80058a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ac:	d003      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80058ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058b2:	d007      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80058b4:	e00f      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b6:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80058c2:	e00c      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	2101      	movs	r1, #1
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f9a0 	bl	8005c10 <RCCEx_PLL3_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80058d4:	e003      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
      break;
 80058da:	e000      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80058dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058e4:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f2:	493e      	ldr	r1, [pc, #248]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	654b      	str	r3, [r1, #84]	; 0x54
 80058f8:	e001      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d029      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005916:	d007      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005918:	e00f      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591a:	4b34      	ldr	r3, [pc, #208]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a33      	ldr	r2, [pc, #204]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005926:	e00b      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f8bc 	bl	8005aac <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005938:	e002      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
      break;
 800593e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	4926      	ldr	r1, [pc, #152]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005954:	4313      	orrs	r3, r2
 8005956:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005958:	e001      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3324      	adds	r3, #36	; 0x24
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f94d 	bl	8005c10 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d033      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005994:	d017      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800599a:	d811      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800599c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a0:	d013      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80059a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a6:	d80b      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80059ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b0:	d106      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b2:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4a0d      	ldr	r2, [pc, #52]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059be:	e007      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75fb      	strb	r3, [r7, #23]
      break;
 80059c4:	e004      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80059c6:	bf00      	nop
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80059ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e2:	4902      	ldr	r1, [pc, #8]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	654b      	str	r3, [r1, #84]	; 0x54
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a00:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0c:	4926      	ldr	r1, [pc, #152]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2a:	491f      	ldr	r1, [pc, #124]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00d      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a46:	6113      	str	r3, [r2, #16]
 8005a48:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a52:	4915      	ldr	r1, [pc, #84]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da08      	bge.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8c:	4906      	ldr	r1, [pc, #24]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a92:	7dbb      	ldrb	r3, [r7, #22]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	58024400 	.word	0x58024400

08005aac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aba:	4b53      	ldr	r3, [pc, #332]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d101      	bne.n	8005aca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e099      	b.n	8005bfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005aca:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a4e      	ldr	r2, [pc, #312]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fc fba7 	bl	8002228 <HAL_GetTick>
 8005ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ade:	f7fc fba3 	bl	8002228 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e086      	b.n	8005bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	493f      	ldr	r1, [pc, #252]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	025b      	lsls	r3, r3, #9
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b40:	4931      	ldr	r1, [pc, #196]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b46:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	492d      	ldr	r1, [pc, #180]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b58:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f023 0220 	bic.w	r2, r3, #32
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	4928      	ldr	r1, [pc, #160]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b6a:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	f023 0310 	bic.w	r3, r3, #16
 8005b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <RCCEx_PLL2_Config+0x160>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	69d2      	ldr	r2, [r2, #28]
 8005b82:	00d2      	lsls	r2, r2, #3
 8005b84:	4920      	ldr	r1, [pc, #128]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b90:	f043 0310 	orr.w	r3, r3, #16
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba8:	e00f      	b.n	8005bca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bbc:	e005      	b.n	8005bca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd6:	f7fc fb27 	bl	8002228 <HAL_GetTick>
 8005bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bdc:	e008      	b.n	8005bf0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005bde:	f7fc fb23 	bl	8002228 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e006      	b.n	8005bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <RCCEx_PLL2_Config+0x15c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	ffff0007 	.word	0xffff0007

08005c10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c1e:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d101      	bne.n	8005c2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e099      	b.n	8005d62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c2e:	4b4f      	ldr	r3, [pc, #316]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4e      	ldr	r2, [pc, #312]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3a:	f7fc faf5 	bl	8002228 <HAL_GetTick>
 8005c3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c40:	e008      	b.n	8005c54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c42:	f7fc faf1 	bl	8002228 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e086      	b.n	8005d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c54:	4b45      	ldr	r3, [pc, #276]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f0      	bne.n	8005c42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c60:	4b42      	ldr	r3, [pc, #264]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	051b      	lsls	r3, r3, #20
 8005c6e:	493f      	ldr	r1, [pc, #252]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	628b      	str	r3, [r1, #40]	; 0x28
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	025b      	lsls	r3, r3, #9
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ca4:	4931      	ldr	r1, [pc, #196]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005caa:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	492d      	ldr	r1, [pc, #180]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	4928      	ldr	r1, [pc, #160]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cce:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <RCCEx_PLL3_Config+0x160>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	69d2      	ldr	r2, [r2, #28]
 8005ce6:	00d2      	lsls	r2, r2, #3
 8005ce8:	4920      	ldr	r1, [pc, #128]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cee:	4b1f      	ldr	r3, [pc, #124]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d0c:	e00f      	b.n	8005d2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a14      	ldr	r2, [pc, #80]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d20:	e005      	b.n	8005d2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a0e      	ldr	r2, [pc, #56]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3a:	f7fc fa75 	bl	8002228 <HAL_GetTick>
 8005d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d40:	e008      	b.n	8005d54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d42:	f7fc fa71 	bl	8002228 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e006      	b.n	8005d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <RCCEx_PLL3_Config+0x15c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	ffff0007 	.word	0xffff0007

08005d74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0f1      	b.n	8005f6a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a78      	ldr	r2, [pc, #480]	; (8005f74 <HAL_SPI_Init+0x200>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00f      	beq.n	8005db6 <HAL_SPI_Init+0x42>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a77      	ldr	r2, [pc, #476]	; (8005f78 <HAL_SPI_Init+0x204>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00a      	beq.n	8005db6 <HAL_SPI_Init+0x42>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <HAL_SPI_Init+0x208>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d005      	beq.n	8005db6 <HAL_SPI_Init+0x42>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d901      	bls.n	8005db6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0d9      	b.n	8005f6a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fba2 	bl	8006500 <SPI_GetPacketSize>
 8005dbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6c      	ldr	r2, [pc, #432]	; (8005f74 <HAL_SPI_Init+0x200>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00c      	beq.n	8005de2 <HAL_SPI_Init+0x6e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6a      	ldr	r2, [pc, #424]	; (8005f78 <HAL_SPI_Init+0x204>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_SPI_Init+0x6e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a69      	ldr	r2, [pc, #420]	; (8005f7c <HAL_SPI_Init+0x208>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d002      	beq.n	8005de2 <HAL_SPI_Init+0x6e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d811      	bhi.n	8005e06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005de6:	4a63      	ldr	r2, [pc, #396]	; (8005f74 <HAL_SPI_Init+0x200>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a61      	ldr	r2, [pc, #388]	; (8005f78 <HAL_SPI_Init+0x204>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_SPI_Init+0x8c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a60      	ldr	r2, [pc, #384]	; (8005f7c <HAL_SPI_Init+0x208>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d104      	bne.n	8005e0a <HAL_SPI_Init+0x96>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d901      	bls.n	8005e0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0af      	b.n	8005f6a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb feb8 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005e46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e50:	d119      	bne.n	8005e86 <HAL_SPI_Init+0x112>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5a:	d103      	bne.n	8005e64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10c      	bne.n	8005e86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e74:	d107      	bne.n	8005e86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e98:	ea42 0103 	orr.w	r1, r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee6:	ea42 0103 	orr.w	r1, r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d113      	bne.n	8005f26 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40013000 	.word	0x40013000
 8005f78:	40003800 	.word	0x40003800
 8005f7c:	40003c00 	.word	0x40003c00

08005f80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3320      	adds	r3, #32
 8005f96:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_SPI_Transmit+0x2a>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e1d7      	b.n	800635a <HAL_SPI_Transmit+0x3da>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb2:	f7fc f939 	bl	8002228 <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d007      	beq.n	8005fd4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005fd0:	7efb      	ldrb	r3, [r7, #27]
 8005fd2:	e1c2      	b.n	800635a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SPI_Transmit+0x60>
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005fec:	7efb      	ldrb	r3, [r7, #27]
 8005fee:	e1b4      	b.n	800635a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006040:	d107      	bne.n	8006052 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	4b96      	ldr	r3, [pc, #600]	; (80062b4 <HAL_SPI_Transmit+0x334>)
 800605a:	4013      	ands	r3, r2
 800605c:	88f9      	ldrh	r1, [r7, #6]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	430b      	orrs	r3, r1
 8006064:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607e:	d107      	bne.n	8006090 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d947      	bls.n	8006128 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006098:	e03f      	b.n	800611a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d114      	bne.n	80060d2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060d0:	e023      	b.n	800611a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d2:	f7fc f8a9 	bl	8002228 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d803      	bhi.n	80060ea <HAL_SPI_Transmit+0x16a>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Transmit+0x170>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d114      	bne.n	800611a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f937 	bl	8006364 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e11f      	b.n	800635a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1b9      	bne.n	800609a <HAL_SPI_Transmit+0x11a>
 8006126:	e0f2      	b.n	800630e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b07      	cmp	r3, #7
 800612e:	f240 80e7 	bls.w	8006300 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006132:	e05d      	b.n	80061f0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d132      	bne.n	80061a8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d918      	bls.n	8006180 <HAL_SPI_Transmit+0x200>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d014      	beq.n	8006180 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b02      	subs	r3, #2
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800617e:	e037      	b.n	80061f0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061a6:	e023      	b.n	80061f0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a8:	f7fc f83e 	bl	8002228 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_Transmit+0x240>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x246>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d114      	bne.n	80061f0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f8cc 	bl	8006364 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0b4      	b.n	800635a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d19b      	bne.n	8006134 <HAL_SPI_Transmit+0x1b4>
 80061fc:	e087      	b.n	800630e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b02      	cmp	r3, #2
 800620a:	d155      	bne.n	80062b8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b03      	cmp	r3, #3
 8006216:	d918      	bls.n	800624a <HAL_SPI_Transmit+0x2ca>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d914      	bls.n	800624a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b04      	subs	r3, #4
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006248:	e05a      	b.n	8006300 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d917      	bls.n	8006286 <HAL_SPI_Transmit+0x306>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d013      	beq.n	8006286 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626c:	1c9a      	adds	r2, r3, #2
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b02      	subs	r3, #2
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006284:	e03c      	b.n	8006300 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3320      	adds	r3, #32
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80062b0:	e026      	b.n	8006300 <HAL_SPI_Transmit+0x380>
 80062b2:	bf00      	nop
 80062b4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b8:	f7fb ffb6 	bl	8002228 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d803      	bhi.n	80062d0 <HAL_SPI_Transmit+0x350>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ce:	d102      	bne.n	80062d6 <HAL_SPI_Transmit+0x356>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d114      	bne.n	8006300 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f844 	bl	8006364 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e02c      	b.n	800635a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	f47f af78 	bne.w	80061fe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	2108      	movs	r1, #8
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8c3 	bl	80064a4 <SPI_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f815 	bl	8006364 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006358:	7efb      	ldrb	r3, [r7, #27]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0210 	orr.w	r2, r2, #16
 8006392:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6919      	ldr	r1, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b3c      	ldr	r3, [pc, #240]	; (80064a0 <SPI_CloseTransfer+0x13c>)
 80063b0:	400b      	ands	r3, r1
 80063b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d014      	beq.n	80063fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0220 	orr.w	r2, r2, #32
 80063f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b03      	cmp	r3, #3
 8006404:	d014      	beq.n	8006430 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00f      	beq.n	800645a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	f043 0201 	orr.w	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006458:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00f      	beq.n	8006484 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	f043 0208 	orr.w	r2, r3, #8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006482:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	fffffc90 	.word	0xfffffc90

080064a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064b4:	e010      	b.n	80064d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b6:	f7fb feb7 	bl	8002228 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d803      	bhi.n	80064ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d102      	bne.n	80064d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e00f      	b.n	80064f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d0df      	beq.n	80064b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3307      	adds	r3, #7
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	fb02 f303 	mul.w	r3, r2, r3
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e049      	b.n	80065dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fb fba3 	bl	8001ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fb29 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d001      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e05e      	b.n	80066ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2b      	ldr	r2, [pc, #172]	; (80066c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02c      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d027      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <HAL_TIM_Base_Start_IT+0xe8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <HAL_TIM_Base_Start_IT+0xec>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01d      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a24      	ldr	r2, [pc, #144]	; (80066d4 <HAL_TIM_Base_Start_IT+0xf0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a23      	ldr	r2, [pc, #140]	; (80066d8 <HAL_TIM_Base_Start_IT+0xf4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a21      	ldr	r2, [pc, #132]	; (80066dc <HAL_TIM_Base_Start_IT+0xf8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <HAL_TIM_Base_Start_IT+0xfc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <HAL_TIM_Base_Start_IT+0x100>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x94>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIM_Base_Start_IT+0x104>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d115      	bne.n	80066a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HAL_TIM_Base_Start_IT+0x108>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b06      	cmp	r3, #6
 8006688:	d015      	beq.n	80066b6 <HAL_TIM_Base_Start_IT+0xd2>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d011      	beq.n	80066b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0201 	orr.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a2:	e008      	b.n	80066b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e000      	b.n	80066b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40001800 	.word	0x40001800
 80066e0:	40014000 	.word	0x40014000
 80066e4:	4000e000 	.word	0x4000e000
 80066e8:	4000e400 	.word	0x4000e400
 80066ec:	00010007 	.word	0x00010007

080066f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10f      	bne.n	8006738 <HAL_TIM_Base_Stop_IT+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	f240 4344 	movw	r3, #1092	; 0x444
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d107      	bne.n	8006738 <HAL_TIM_Base_Stop_IT+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b02      	cmp	r3, #2
 8006762:	d122      	bne.n	80067aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d11b      	bne.n	80067aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f06f 0202 	mvn.w	r2, #2
 800677a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f9fd 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 8006796:	e005      	b.n	80067a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f9ef 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa00 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d122      	bne.n	80067fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d11b      	bne.n	80067fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f06f 0204 	mvn.w	r2, #4
 80067ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9d3 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 80067ea:	e005      	b.n	80067f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f9c5 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9d6 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b08      	cmp	r3, #8
 800680a:	d122      	bne.n	8006852 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b08      	cmp	r3, #8
 8006818:	d11b      	bne.n	8006852 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0208 	mvn.w	r2, #8
 8006822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9a9 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 800683e:	e005      	b.n	800684c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f99b 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f9ac 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b10      	cmp	r3, #16
 800685e:	d122      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b10      	cmp	r3, #16
 800686c:	d11b      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f06f 0210 	mvn.w	r2, #16
 8006876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2208      	movs	r2, #8
 800687c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f97f 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 8006892:	e005      	b.n	80068a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f971 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f982 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10e      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d107      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0201 	mvn.w	r2, #1
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fa ff0f 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	2b80      	cmp	r3, #128	; 0x80
 80068de:	d10e      	bne.n	80068fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d107      	bne.n	80068fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb51 	bl	8006fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690c:	d10e      	bne.n	800692c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d107      	bne.n	800692c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fb44 	bl	8006fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f930 	bl	8006bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b20      	cmp	r3, #32
 8006964:	d10e      	bne.n	8006984 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b20      	cmp	r3, #32
 8006972:	d107      	bne.n	8006984 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0220 	mvn.w	r2, #32
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fb04 	bl	8006f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_ConfigClockSource+0x1c>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0dc      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x1d6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4b6a      	ldr	r3, [pc, #424]	; (8006b6c <HAL_TIM_ConfigClockSource+0x1e0>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a64      	ldr	r2, [pc, #400]	; (8006b70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	f000 80a9 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 80069e4:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f200 80ae 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 80069ec:	4a61      	ldr	r2, [pc, #388]	; (8006b74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	f000 80a1 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 80069f4:	4a5f      	ldr	r2, [pc, #380]	; (8006b74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	f200 80a6 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 80069fc:	4a5e      	ldr	r2, [pc, #376]	; (8006b78 <HAL_TIM_ConfigClockSource+0x1ec>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f000 8099 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a04:	4a5c      	ldr	r2, [pc, #368]	; (8006b78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	f200 809e 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a10:	f000 8091 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a18:	f200 8096 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a20:	f000 8089 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a28:	f200 808e 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a30:	d03e      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x124>
 8006a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a36:	f200 8087 	bhi.w	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	f000 8086 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1c2>
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d87f      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a48:	2b70      	cmp	r3, #112	; 0x70
 8006a4a:	d01a      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0xf6>
 8006a4c:	2b70      	cmp	r3, #112	; 0x70
 8006a4e:	d87b      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a50:	2b60      	cmp	r3, #96	; 0x60
 8006a52:	d050      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x16a>
 8006a54:	2b60      	cmp	r3, #96	; 0x60
 8006a56:	d877      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a58:	2b50      	cmp	r3, #80	; 0x50
 8006a5a:	d03c      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x14a>
 8006a5c:	2b50      	cmp	r3, #80	; 0x50
 8006a5e:	d873      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d058      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x18a>
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d86f      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a68:	2b30      	cmp	r3, #48	; 0x30
 8006a6a:	d064      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a6c:	2b30      	cmp	r3, #48	; 0x30
 8006a6e:	d86b      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d060      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d867      	bhi.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d05c      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d05a      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x1aa>
 8006a80:	e062      	b.n	8006b48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6899      	ldr	r1, [r3, #8]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f000 f9bf 	bl	8006e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	609a      	str	r2, [r3, #8]
      break;
 8006aae:	e04f      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6899      	ldr	r1, [r3, #8]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f000 f9a8 	bl	8006e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ad2:	609a      	str	r2, [r3, #8]
      break;
 8006ad4:	e03c      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 f918 	bl	8006d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2150      	movs	r1, #80	; 0x50
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f972 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006af4:	e02c      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 f937 	bl	8006d76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2160      	movs	r1, #96	; 0x60
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f962 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b14:	e01c      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6859      	ldr	r1, [r3, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f000 f8f8 	bl	8006d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2140      	movs	r1, #64	; 0x40
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f952 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b34:	e00c      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f000 f949 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b46:	e003      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4c:	e000      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	ffceff88 	.word	0xffceff88
 8006b70:	00100040 	.word	0x00100040
 8006b74:	00100030 	.word	0x00100030
 8006b78:	00100020 	.word	0x00100020

08006b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a44      	ldr	r2, [pc, #272]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a41      	ldr	r2, [pc, #260]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a40      	ldr	r2, [pc, #256]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a3f      	ldr	r2, [pc, #252]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a3e      	ldr	r2, [pc, #248]	; (8006d00 <TIM_Base_SetConfig+0x134>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a33      	ldr	r2, [pc, #204]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d027      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d023      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a30      	ldr	r2, [pc, #192]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01f      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2f      	ldr	r2, [pc, #188]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01b      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2e      	ldr	r2, [pc, #184]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d017      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2d      	ldr	r2, [pc, #180]	; (8006d00 <TIM_Base_SetConfig+0x134>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2c      	ldr	r2, [pc, #176]	; (8006d04 <TIM_Base_SetConfig+0x138>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2b      	ldr	r2, [pc, #172]	; (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <TIM_Base_SetConfig+0x140>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <TIM_Base_SetConfig+0x144>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0xaa>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a28      	ldr	r2, [pc, #160]	; (8006d14 <TIM_Base_SetConfig+0x148>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_Base_SetConfig+0x108>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <TIM_Base_SetConfig+0x134>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_Base_SetConfig+0x108>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <TIM_Base_SetConfig+0x138>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_Base_SetConfig+0x108>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_Base_SetConfig+0x108>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a0f      	ldr	r2, [pc, #60]	; (8006d0c <TIM_Base_SetConfig+0x140>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d103      	bne.n	8006cdc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40010400 	.word	0x40010400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	4000e000 	.word	0x4000e000
 8006d14:	4000e400 	.word	0x4000e400

08006d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f023 030a 	bic.w	r3, r3, #10
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b087      	sub	sp, #28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0210 	bic.w	r2, r3, #16
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	031b      	lsls	r3, r3, #12
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <TIM_ITRx_SetConfig+0x38>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f043 0307 	orr.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	ffcfff8f 	.word	0xffcfff8f

08006e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	021a      	lsls	r2, r3, #8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e077      	b.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a35      	ldr	r2, [pc, #212]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a34      	ldr	r2, [pc, #208]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d108      	bne.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a25      	ldr	r2, [pc, #148]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d02c      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d027      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d022      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d01d      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1f      	ldr	r2, [pc, #124]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d018      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00e      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1a      	ldr	r2, [pc, #104]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10c      	bne.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40001800 	.word	0x40001800
 8006f80:	40014000 	.word	0x40014000
 8006f84:	4000e000 	.word	0x4000e000
 8006f88:	4000e400 	.word	0x4000e400

08006f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc8:	b084      	sub	sp, #16
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	f107 001c 	add.w	r0, r7, #28
 8006fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d120      	bne.n	8007022 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	4b2a      	ldr	r3, [pc, #168]	; (800709c <USB_CoreInit+0xd4>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007006:	2b01      	cmp	r3, #1
 8007008:	d105      	bne.n	8007016 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fc04 	bl	8008824 <USB_CoreReset>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	e01a      	b.n	8007058 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fbf8 	bl	8008824 <USB_CoreReset>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
 800704a:	e005      	b.n	8007058 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	2b01      	cmp	r3, #1
 800705c:	d116      	bne.n	800708c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800706c:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <USB_CoreInit+0xd8>)
 800706e:	4313      	orrs	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0206 	orr.w	r2, r3, #6
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f043 0220 	orr.w	r2, r3, #32
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007098:	b004      	add	sp, #16
 800709a:	4770      	bx	lr
 800709c:	ffbdffbf 	.word	0xffbdffbf
 80070a0:	03ee0000 	.word	0x03ee0000

080070a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d165      	bne.n	8007184 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4a41      	ldr	r2, [pc, #260]	; (80071c0 <USB_SetTurnaroundTime+0x11c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d906      	bls.n	80070ce <USB_SetTurnaroundTime+0x2a>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a40      	ldr	r2, [pc, #256]	; (80071c4 <USB_SetTurnaroundTime+0x120>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d202      	bcs.n	80070ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070c8:	230f      	movs	r3, #15
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e062      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4a3c      	ldr	r2, [pc, #240]	; (80071c4 <USB_SetTurnaroundTime+0x120>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d306      	bcc.n	80070e4 <USB_SetTurnaroundTime+0x40>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4a3b      	ldr	r2, [pc, #236]	; (80071c8 <USB_SetTurnaroundTime+0x124>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d202      	bcs.n	80070e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070de:	230e      	movs	r3, #14
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	e057      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4a38      	ldr	r2, [pc, #224]	; (80071c8 <USB_SetTurnaroundTime+0x124>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d306      	bcc.n	80070fa <USB_SetTurnaroundTime+0x56>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4a37      	ldr	r2, [pc, #220]	; (80071cc <USB_SetTurnaroundTime+0x128>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d202      	bcs.n	80070fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070f4:	230d      	movs	r3, #13
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e04c      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a33      	ldr	r2, [pc, #204]	; (80071cc <USB_SetTurnaroundTime+0x128>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d306      	bcc.n	8007110 <USB_SetTurnaroundTime+0x6c>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4a32      	ldr	r2, [pc, #200]	; (80071d0 <USB_SetTurnaroundTime+0x12c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d802      	bhi.n	8007110 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800710a:	230c      	movs	r3, #12
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e041      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4a2f      	ldr	r2, [pc, #188]	; (80071d0 <USB_SetTurnaroundTime+0x12c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d906      	bls.n	8007126 <USB_SetTurnaroundTime+0x82>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a2e      	ldr	r2, [pc, #184]	; (80071d4 <USB_SetTurnaroundTime+0x130>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d802      	bhi.n	8007126 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007120:	230b      	movs	r3, #11
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e036      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <USB_SetTurnaroundTime+0x130>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d906      	bls.n	800713c <USB_SetTurnaroundTime+0x98>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a29      	ldr	r2, [pc, #164]	; (80071d8 <USB_SetTurnaroundTime+0x134>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d802      	bhi.n	800713c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007136:	230a      	movs	r3, #10
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e02b      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4a26      	ldr	r2, [pc, #152]	; (80071d8 <USB_SetTurnaroundTime+0x134>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d906      	bls.n	8007152 <USB_SetTurnaroundTime+0xae>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a25      	ldr	r2, [pc, #148]	; (80071dc <USB_SetTurnaroundTime+0x138>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d202      	bcs.n	8007152 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800714c:	2309      	movs	r3, #9
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e020      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <USB_SetTurnaroundTime+0x138>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d306      	bcc.n	8007168 <USB_SetTurnaroundTime+0xc4>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <USB_SetTurnaroundTime+0x13c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d802      	bhi.n	8007168 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007162:	2308      	movs	r3, #8
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e015      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <USB_SetTurnaroundTime+0x13c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d906      	bls.n	800717e <USB_SetTurnaroundTime+0xda>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <USB_SetTurnaroundTime+0x140>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d202      	bcs.n	800717e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007178:	2307      	movs	r3, #7
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e00a      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800717e:	2306      	movs	r3, #6
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e007      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d102      	bne.n	8007190 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800718a:	2309      	movs	r3, #9
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e001      	b.n	8007194 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007190:	2309      	movs	r3, #9
 8007192:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	029b      	lsls	r3, r3, #10
 80071a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	00d8acbf 	.word	0x00d8acbf
 80071c4:	00e4e1c0 	.word	0x00e4e1c0
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	01067380 	.word	0x01067380
 80071d0:	011a499f 	.word	0x011a499f
 80071d4:	01312cff 	.word	0x01312cff
 80071d8:	014ca43f 	.word	0x014ca43f
 80071dc:	016e3600 	.word	0x016e3600
 80071e0:	01a6ab1f 	.word	0x01a6ab1f
 80071e4:	01e84800 	.word	0x01e84800

080071e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d115      	bne.n	800727a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800725a:	2001      	movs	r0, #1
 800725c:	f7fa fff0 	bl	8002240 <HAL_Delay>
      ms++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fa4b 	bl	8008702 <USB_GetMode>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d01e      	beq.n	80072b0 <USB_SetCurrentMode+0x84>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b31      	cmp	r3, #49	; 0x31
 8007276:	d9f0      	bls.n	800725a <USB_SetCurrentMode+0x2e>
 8007278:	e01a      	b.n	80072b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d115      	bne.n	80072ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800728c:	2001      	movs	r0, #1
 800728e:	f7fa ffd7 	bl	8002240 <HAL_Delay>
      ms++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fa32 	bl	8008702 <USB_GetMode>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USB_SetCurrentMode+0x84>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b31      	cmp	r3, #49	; 0x31
 80072a8:	d9f0      	bls.n	800728c <USB_SetCurrentMode+0x60>
 80072aa:	e001      	b.n	80072b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e005      	b.n	80072bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b32      	cmp	r3, #50	; 0x32
 80072b4:	d101      	bne.n	80072ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072c4:	b084      	sub	sp, #16
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	e009      	b.n	80072f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3340      	adds	r3, #64	; 0x40
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	2200      	movs	r2, #0
 80072f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3301      	adds	r3, #1
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b0e      	cmp	r3, #14
 80072fc:	d9f2      	bls.n	80072e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d11c      	bne.n	800733e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007312:	f043 0302 	orr.w	r3, r3, #2
 8007316:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e005      	b.n	800734a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	4619      	mov	r1, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007364:	461a      	mov	r2, r3
 8007366:	680b      	ldr	r3, [r1, #0]
 8007368:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10c      	bne.n	800738a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007376:	2100      	movs	r1, #0
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f965 	bl	8007648 <USB_SetDevSpeed>
 800737e:	e008      	b.n	8007392 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007380:	2101      	movs	r1, #1
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f960 	bl	8007648 <USB_SetDevSpeed>
 8007388:	e003      	b.n	8007392 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800738a:	2103      	movs	r1, #3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f95b 	bl	8007648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007392:	2110      	movs	r1, #16
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f8f3 	bl	8007580 <USB_FlushTxFifo>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f91f 	bl	80075e8 <USB_FlushRxFifo>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	461a      	mov	r2, r3
 80073c8:	2300      	movs	r3, #0
 80073ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	461a      	mov	r2, r3
 80073d4:	2300      	movs	r3, #0
 80073d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	e043      	b.n	8007466 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d118      	bne.n	8007428 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e013      	b.n	800743a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741e:	461a      	mov	r2, r3
 8007420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e008      	b.n	800743a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	461a      	mov	r2, r3
 8007436:	2300      	movs	r3, #0
 8007438:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	2300      	movs	r3, #0
 800744a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	461a      	mov	r2, r3
 800745a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800745e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	429a      	cmp	r2, r3
 800746c:	d3b7      	bcc.n	80073de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	e043      	b.n	80074fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800748a:	d118      	bne.n	80074be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	461a      	mov	r2, r3
 80074a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e013      	b.n	80074d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b4:	461a      	mov	r2, r3
 80074b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e008      	b.n	80074d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	461a      	mov	r2, r3
 80074cc:	2300      	movs	r3, #0
 80074ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3301      	adds	r3, #1
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d3b7      	bcc.n	8007474 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007516:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007524:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	d105      	bne.n	8007538 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f043 0210 	orr.w	r2, r3, #16
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <USB_DevInit+0x2b4>)
 800753e:	4313      	orrs	r3, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f043 0208 	orr.w	r2, r3, #8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d105      	bne.n	8007568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <USB_DevInit+0x2b8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007574:	b004      	add	sp, #16
 8007576:	4770      	bx	lr
 8007578:	803c3800 	.word	0x803c3800
 800757c:	40000004 	.word	0x40000004

08007580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <USB_FlushTxFifo+0x64>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e01b      	b.n	80075d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	daf2      	bge.n	800758e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	019b      	lsls	r3, r3, #6
 80075b0:	f043 0220 	orr.w	r2, r3, #32
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <USB_FlushTxFifo+0x64>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e006      	b.n	80075d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d0f0      	beq.n	80075b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	00030d40 	.word	0x00030d40

080075e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a11      	ldr	r2, [pc, #68]	; (8007644 <USB_FlushRxFifo+0x5c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d901      	bls.n	8007606 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e018      	b.n	8007638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	daf2      	bge.n	80075f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2210      	movs	r2, #16
 8007616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <USB_FlushRxFifo+0x5c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e006      	b.n	8007638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b10      	cmp	r3, #16
 8007634:	d0f0      	beq.n	8007618 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	00030d40 	.word	0x00030d40

08007648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007668:	4313      	orrs	r3, r2
 800766a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e00a      	b.n	80076b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d002      	beq.n	80076ac <USB_GetDevSpeed+0x32>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d102      	bne.n	80076b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076ac:	2302      	movs	r3, #2
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	e001      	b.n	80076b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076b2:	230f      	movs	r3, #15
 80076b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d139      	bne.n	8007754 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fe:	4313      	orrs	r3, r2
 8007700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d153      	bne.n	80077c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	791b      	ldrb	r3, [r3, #4]
 8007732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800773c:	431a      	orrs	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0159      	lsls	r1, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	440b      	add	r3, r1
 8007746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774a:	4619      	mov	r1, r3
 800774c:	4b20      	ldr	r3, [pc, #128]	; (80077d0 <USB_ActivateEndpoint+0x10c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]
 8007752:	e035      	b.n	80077c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	2101      	movs	r1, #1
 8007766:	fa01 f303 	lsl.w	r3, r1, r3
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	68f9      	ldr	r1, [r7, #12]
 800776e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007772:	4313      	orrs	r3, r2
 8007774:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d119      	bne.n	80077c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	791b      	ldrb	r3, [r3, #4]
 80077a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077a8:	430b      	orrs	r3, r1
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	0159      	lsls	r1, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	440b      	add	r3, r1
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	4619      	mov	r1, r3
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <USB_ActivateEndpoint+0x10c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	10008000 	.word	0x10008000

080077d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d161      	bne.n	80078b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007806:	d11f      	bne.n	8007848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007868:	4013      	ands	r3, r2
 800786a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800788c:	4013      	ands	r3, r2
 800788e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	0159      	lsls	r1, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b35      	ldr	r3, [pc, #212]	; (8007984 <USB_DeactivateEndpoint+0x1b0>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
 80078b2:	e060      	b.n	8007976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ca:	d11f      	bne.n	800790c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800790a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	43db      	mvns	r3, r3
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800792c:	4013      	ands	r3, r2
 800792e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f303 	lsl.w	r3, r1, r3
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	43db      	mvns	r3, r3
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007950:	4013      	ands	r3, r2
 8007952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	0159      	lsls	r1, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	440b      	add	r3, r1
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	4619      	mov	r1, r3
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <USB_DeactivateEndpoint+0x1b4>)
 8007972:	4013      	ands	r3, r2
 8007974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	ec337800 	.word	0xec337800
 8007988:	eff37800 	.word	0xeff37800

0800798c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f040 8163 	bne.w	8007c74 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d132      	bne.n	8007a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	0159      	lsls	r1, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	440b      	add	r3, r1
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	4619      	mov	r1, r3
 80079d2:	4ba5      	ldr	r3, [pc, #660]	; (8007c68 <USB_EPStartXfer+0x2dc>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	0159      	lsls	r1, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	440b      	add	r3, r1
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a12:	4619      	mov	r1, r3
 8007a14:	4b95      	ldr	r3, [pc, #596]	; (8007c6c <USB_EPStartXfer+0x2e0>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	610b      	str	r3, [r1, #16]
 8007a1a:	e074      	b.n	8007b06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	0159      	lsls	r1, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	440b      	add	r3, r1
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	4619      	mov	r1, r3
 8007a38:	4b8c      	ldr	r3, [pc, #560]	; (8007c6c <USB_EPStartXfer+0x2e0>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	0159      	lsls	r1, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	440b      	add	r3, r1
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4b83      	ldr	r3, [pc, #524]	; (8007c68 <USB_EPStartXfer+0x2dc>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	440b      	add	r3, r1
 8007a78:	1e59      	subs	r1, r3, #1
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a84:	4b7a      	ldr	r3, [pc, #488]	; (8007c70 <USB_EPStartXfer+0x2e4>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	0148      	lsls	r0, r1, #5
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	4401      	add	r1, r0
 8007a90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a94:	4313      	orrs	r3, r2
 8007a96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aae:	69b9      	ldr	r1, [r7, #24]
 8007ab0:	0148      	lsls	r0, r1, #5
 8007ab2:	69f9      	ldr	r1, [r7, #28]
 8007ab4:	4401      	add	r1, r0
 8007ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aba:	4313      	orrs	r3, r2
 8007abc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d11f      	bne.n	8007b06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d14b      	bne.n	8007ba4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	461a      	mov	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	791b      	ldrb	r3, [r3, #4]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d128      	bne.n	8007b82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d110      	bne.n	8007b62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e00f      	b.n	8007b82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e137      	b.n	8007e14 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d015      	beq.n	8007bf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 811f 	beq.w	8007e14 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	2101      	movs	r1, #1
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	69f9      	ldr	r1, [r7, #28]
 8007bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8007bf6:	e10d      	b.n	8007e14 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d110      	bne.n	8007c2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e00f      	b.n	8007c4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	b298      	uxth	r0, r3
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 faea 	bl	8008238 <USB_WritePacket>
 8007c64:	e0d6      	b.n	8007e14 <USB_EPStartXfer+0x488>
 8007c66:	bf00      	nop
 8007c68:	e007ffff 	.word	0xe007ffff
 8007c6c:	fff80000 	.word	0xfff80000
 8007c70:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	0159      	lsls	r1, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4b63      	ldr	r3, [pc, #396]	; (8007e20 <USB_EPStartXfer+0x494>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	0159      	lsls	r1, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	440b      	add	r3, r1
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4b5c      	ldr	r3, [pc, #368]	; (8007e24 <USB_EPStartXfer+0x498>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d123      	bne.n	8007d08 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cd6:	69b9      	ldr	r1, [r7, #24]
 8007cd8:	0148      	lsls	r0, r1, #5
 8007cda:	69f9      	ldr	r1, [r7, #28]
 8007cdc:	4401      	add	r1, r0
 8007cde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d04:	6113      	str	r3, [r2, #16]
 8007d06:	e037      	b.n	8007d78 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	8afa      	ldrh	r2, [r7, #22]
 8007d24:	fb03 f202 	mul.w	r2, r3, r2
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	8afb      	ldrh	r3, [r7, #22]
 8007d3c:	04d9      	lsls	r1, r3, #19
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <USB_EPStartXfer+0x49c>)
 8007d40:	400b      	ands	r3, r1
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	0148      	lsls	r0, r1, #5
 8007d46:	69f9      	ldr	r1, [r7, #28]
 8007d48:	4401      	add	r1, r0
 8007d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d68:	69b9      	ldr	r1, [r7, #24]
 8007d6a:	0148      	lsls	r0, r1, #5
 8007d6c:	69f9      	ldr	r1, [r7, #28]
 8007d6e:	4401      	add	r1, r0
 8007d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d74:	4313      	orrs	r3, r2
 8007d76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d10d      	bne.n	8007d9a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6919      	ldr	r1, [r3, #16]
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d96:	460a      	mov	r2, r1
 8007d98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d128      	bne.n	8007df4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d110      	bne.n	8007dd4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	e00f      	b.n	8007df4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	fff80000 	.word	0xfff80000
 8007e24:	e007ffff 	.word	0xe007ffff
 8007e28:	1ff80000 	.word	0x1ff80000

08007e2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	f040 80ce 	bne.w	8007fea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d132      	bne.n	8007ebc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	0159      	lsls	r1, r3, #5
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	440b      	add	r3, r1
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	4619      	mov	r1, r3
 8007e72:	4b9a      	ldr	r3, [pc, #616]	; (80080dc <USB_EP0StartXfer+0x2b0>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	0159      	lsls	r1, r3, #5
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	440b      	add	r3, r1
 8007eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4b8a      	ldr	r3, [pc, #552]	; (80080e0 <USB_EP0StartXfer+0x2b4>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	610b      	str	r3, [r1, #16]
 8007eba:	e04e      	b.n	8007f5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	0159      	lsls	r1, r3, #5
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	440b      	add	r3, r1
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <USB_EP0StartXfer+0x2b4>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	0159      	lsls	r1, r3, #5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	440b      	add	r3, r1
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4b78      	ldr	r3, [pc, #480]	; (80080dc <USB_EP0StartXfer+0x2b0>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d903      	bls.n	8007f14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f4a:	6939      	ldr	r1, [r7, #16]
 8007f4c:	0148      	lsls	r0, r1, #5
 8007f4e:	6979      	ldr	r1, [r7, #20]
 8007f50:	4401      	add	r1, r0
 8007f52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f56:	4313      	orrs	r3, r2
 8007f58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d11e      	bne.n	8007f9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	0151      	lsls	r1, r2, #5
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	440a      	add	r2, r1
 8007f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e097      	b.n	80080ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8083 	beq.w	80080ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	2101      	movs	r1, #1
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	634b      	str	r3, [r1, #52]	; 0x34
 8007fe8:	e071      	b.n	80080ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	0159      	lsls	r1, r3, #5
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	4619      	mov	r1, r3
 8008006:	4b36      	ldr	r3, [pc, #216]	; (80080e0 <USB_EP0StartXfer+0x2b4>)
 8008008:	4013      	ands	r3, r2
 800800a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	0159      	lsls	r1, r3, #5
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	440b      	add	r3, r1
 8008022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008026:	4619      	mov	r1, r3
 8008028:	4b2c      	ldr	r3, [pc, #176]	; (80080dc <USB_EP0StartXfer+0x2b0>)
 800802a:	4013      	ands	r3, r2
 800802c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	440a      	add	r2, r1
 800805c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807c:	6939      	ldr	r1, [r7, #16]
 800807e:	0148      	lsls	r0, r1, #5
 8008080:	6979      	ldr	r1, [r7, #20]
 8008082:	4401      	add	r1, r0
 8008084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008088:	4313      	orrs	r3, r2
 800808a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d10d      	bne.n	80080ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6919      	ldr	r1, [r3, #16]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	460a      	mov	r2, r1
 80080ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	e007ffff 	.word	0xe007ffff
 80080e0:	fff80000 	.word	0xfff80000

080080e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d14a      	bne.n	8008198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811a:	f040 8086 	bne.w	800822a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	7812      	ldrb	r2, [r2, #0]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008172:	4293      	cmp	r3, r2
 8008174:	d902      	bls.n	800817c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	75fb      	strb	r3, [r7, #23]
          break;
 800817a:	e056      	b.n	800822a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008194:	d0e7      	beq.n	8008166 <USB_EPStopXfer+0x82>
 8008196:	e048      	b.n	800822a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b0:	d13b      	bne.n	800822a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f242 7210 	movw	r2, #10000	; 0x2710
 8008206:	4293      	cmp	r3, r2
 8008208:	d902      	bls.n	8008210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
          break;
 800820e:	e00c      	b.n	800822a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008228:	d0e7      	beq.n	80081fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
}
 800822c:	4618      	mov	r0, r3
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	71fb      	strb	r3, [r7, #7]
 800824a:	4613      	mov	r3, r2
 800824c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d123      	bne.n	80082a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800825e:	88bb      	ldrh	r3, [r7, #4]
 8008260:	3303      	adds	r3, #3
 8008262:	089b      	lsrs	r3, r3, #2
 8008264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008266:	2300      	movs	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	e018      	b.n	800829e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	031a      	lsls	r2, r3, #12
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4413      	add	r3, r2
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	461a      	mov	r2, r3
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	3301      	adds	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	3301      	adds	r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	3301      	adds	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	3301      	adds	r3, #1
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d3e2      	bcc.n	800826c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b08b      	sub	sp, #44	; 0x2c
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	089b      	lsrs	r3, r3, #2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082da:	2300      	movs	r3, #0
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	e014      	b.n	800830a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	3301      	adds	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	3301      	adds	r3, #1
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	3301      	adds	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	3301      	adds	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	3301      	adds	r3, #1
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	429a      	cmp	r2, r3
 8008310:	d3e6      	bcc.n	80082e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01e      	beq.n	8008356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008322:	461a      	mov	r2, r3
 8008324:	f107 0310 	add.w	r3, r7, #16
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	701a      	strb	r2, [r3, #0]
      i++;
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	3301      	adds	r3, #1
 8008342:	623b      	str	r3, [r7, #32]
      pDest++;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800834a:	8bfb      	ldrh	r3, [r7, #30]
 800834c:	3b01      	subs	r3, #1
 800834e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008350:	8bfb      	ldrh	r3, [r7, #30]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1ea      	bne.n	800832c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008358:	4618      	mov	r0, r3
 800835a:	372c      	adds	r7, #44	; 0x2c
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d12c      	bne.n	80083da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	db12      	blt.n	80083b8 <USB_EPSetStall+0x54>
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	e02b      	b.n	8008432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	db12      	blt.n	8008412 <USB_EPSetStall+0xae>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00f      	beq.n	8008412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d128      	bne.n	80084ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800847a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d003      	beq.n	800848c <USB_EPClearStall+0x4c>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	791b      	ldrb	r3, [r3, #4]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d138      	bne.n	80084fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e027      	b.n	80084fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d003      	beq.n	80084de <USB_EPClearStall+0x9e>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d10f      	bne.n	80084fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800852a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800852e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008540:	68f9      	ldr	r1, [r7, #12]
 8008542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008546:	4313      	orrs	r3, r2
 8008548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008586:	f023 0302 	bic.w	r3, r3, #2
 800858a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800859a:	b480      	push	{r7}
 800859c:	b085      	sub	sp, #20
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085b4:	f023 0303 	bic.w	r3, r3, #3
 80085b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c8:	f043 0302 	orr.w	r3, r3, #2
 80085cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4013      	ands	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	4013      	ands	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	0c1b      	lsrs	r3, r3, #16
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	4013      	ands	r3, r2
 8008658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	b29b      	uxth	r3, r3
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4013      	ands	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008698:	68bb      	ldr	r3, [r7, #8]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b087      	sub	sp, #28
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	01db      	lsls	r3, r3, #7
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4013      	ands	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086f4:	68bb      	ldr	r3, [r7, #8]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0301 	and.w	r3, r3, #1
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	4619      	mov	r1, r3
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <USB_ActivateSetup+0x44>)
 800873e:	4013      	ands	r3, r2
 8008740:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	fffff800 	.word	0xfffff800

08008768 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	460b      	mov	r3, r1
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	333c      	adds	r3, #60	; 0x3c
 800877e:	3304      	adds	r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4a26      	ldr	r2, [pc, #152]	; (8008820 <USB_EP0_OutStart+0xb8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d90a      	bls.n	80087a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879c:	d101      	bne.n	80087a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	e037      	b.n	8008812 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	461a      	mov	r2, r3
 80087aa:	2300      	movs	r3, #0
 80087ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d0:	f043 0318 	orr.w	r3, r3, #24
 80087d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10f      	bne.n	8008810 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800880e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	4f54300a 	.word	0x4f54300a

08008824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4a13      	ldr	r2, [pc, #76]	; (8008888 <USB_CoreReset+0x64>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e01b      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	daf2      	bge.n	8008830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <USB_CoreReset+0x64>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d901      	bls.n	800886c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e006      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d0f0      	beq.n	800885a <USB_CoreReset+0x36>

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	00030d40 	.word	0x00030d40

0800888c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008898:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800889c:	f002 fcd0 	bl	800b240 <USBD_static_malloc>
 80088a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32b0      	adds	r2, #176	; 0xb0
 80088b2:	2100      	movs	r1, #0
 80088b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80088b8:	2302      	movs	r3, #2
 80088ba:	e0d4      	b.n	8008a66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80088bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088c0:	2100      	movs	r1, #0
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f002 fd3c 	bl	800b340 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	32b0      	adds	r2, #176	; 0xb0
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	32b0      	adds	r2, #176	; 0xb0
 80088e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7c1b      	ldrb	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d138      	bne.n	8008966 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088f4:	4b5e      	ldr	r3, [pc, #376]	; (8008a70 <USBD_CDC_Init+0x1e4>)
 80088f6:	7819      	ldrb	r1, [r3, #0]
 80088f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088fc:	2202      	movs	r2, #2
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f002 fb7b 	bl	800affa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008904:	4b5a      	ldr	r3, [pc, #360]	; (8008a70 <USBD_CDC_Init+0x1e4>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 020f 	and.w	r2, r3, #15
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	3324      	adds	r3, #36	; 0x24
 800891a:	2201      	movs	r2, #1
 800891c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800891e:	4b55      	ldr	r3, [pc, #340]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 8008920:	7819      	ldrb	r1, [r3, #0]
 8008922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008926:	2202      	movs	r2, #2
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f002 fb66 	bl	800affa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800892e:	4b51      	ldr	r3, [pc, #324]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	f003 020f 	and.w	r2, r3, #15
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008946:	2201      	movs	r2, #1
 8008948:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800894a:	4b4b      	ldr	r3, [pc, #300]	; (8008a78 <USBD_CDC_Init+0x1ec>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 020f 	and.w	r2, r3, #15
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	3326      	adds	r3, #38	; 0x26
 8008960:	2210      	movs	r2, #16
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e035      	b.n	80089d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008966:	4b42      	ldr	r3, [pc, #264]	; (8008a70 <USBD_CDC_Init+0x1e4>)
 8008968:	7819      	ldrb	r1, [r3, #0]
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	2202      	movs	r2, #2
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f002 fb43 	bl	800affa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008974:	4b3e      	ldr	r3, [pc, #248]	; (8008a70 <USBD_CDC_Init+0x1e4>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	2201      	movs	r2, #1
 800898c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800898e:	4b39      	ldr	r3, [pc, #228]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 8008990:	7819      	ldrb	r1, [r3, #0]
 8008992:	2340      	movs	r3, #64	; 0x40
 8008994:	2202      	movs	r2, #2
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 fb2f 	bl	800affa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800899c:	4b35      	ldr	r3, [pc, #212]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089b4:	2201      	movs	r2, #1
 80089b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089b8:	4b2f      	ldr	r3, [pc, #188]	; (8008a78 <USBD_CDC_Init+0x1ec>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 020f 	and.w	r2, r3, #15
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	3326      	adds	r3, #38	; 0x26
 80089ce:	2210      	movs	r2, #16
 80089d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089d2:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <USBD_CDC_Init+0x1ec>)
 80089d4:	7819      	ldrb	r1, [r3, #0]
 80089d6:	2308      	movs	r3, #8
 80089d8:	2203      	movs	r2, #3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 fb0d 	bl	800affa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <USBD_CDC_Init+0x1ec>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	3324      	adds	r3, #36	; 0x24
 80089f6:	2201      	movs	r2, #1
 80089f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	33b0      	adds	r3, #176	; 0xb0
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a30:	2302      	movs	r3, #2
 8008a32:	e018      	b.n	8008a66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7c1b      	ldrb	r3, [r3, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 8008a3e:	7819      	ldrb	r1, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f002 fbc4 	bl	800b1d8 <USBD_LL_PrepareReceive>
 8008a50:	e008      	b.n	8008a64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <USBD_CDC_Init+0x1e8>)
 8008a54:	7819      	ldrb	r1, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 fbba 	bl	800b1d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	24000137 	.word	0x24000137
 8008a74:	24000138 	.word	0x24000138
 8008a78:	24000139 	.word	0x24000139

08008a7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a88:	4b3a      	ldr	r3, [pc, #232]	; (8008b74 <USBD_CDC_DeInit+0xf8>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f002 fad9 	bl	800b046 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a94:	4b37      	ldr	r3, [pc, #220]	; (8008b74 <USBD_CDC_DeInit+0xf8>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3324      	adds	r3, #36	; 0x24
 8008aaa:	2200      	movs	r2, #0
 8008aac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008aae:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <USBD_CDC_DeInit+0xfc>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f002 fac6 	bl	800b046 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008aba:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <USBD_CDC_DeInit+0xfc>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 020f 	and.w	r2, r3, #15
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ad6:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <USBD_CDC_DeInit+0x100>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 fab2 	bl	800b046 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008ae2:	4b26      	ldr	r3, [pc, #152]	; (8008b7c <USBD_CDC_DeInit+0x100>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	f003 020f 	and.w	r2, r3, #15
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	3324      	adds	r3, #36	; 0x24
 8008af8:	2200      	movs	r2, #0
 8008afa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008afc:	4b1f      	ldr	r3, [pc, #124]	; (8008b7c <USBD_CDC_DeInit+0x100>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	3326      	adds	r3, #38	; 0x26
 8008b12:	2200      	movs	r2, #0
 8008b14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	32b0      	adds	r2, #176	; 0xb0
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01f      	beq.n	8008b68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	33b0      	adds	r3, #176	; 0xb0
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	32b0      	adds	r2, #176	; 0xb0
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 fb86 	bl	800b25c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32b0      	adds	r2, #176	; 0xb0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	24000137 	.word	0x24000137
 8008b78:	24000138 	.word	0x24000138
 8008b7c:	24000139 	.word	0x24000139

08008b80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	32b0      	adds	r2, #176	; 0xb0
 8008b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e0bf      	b.n	8008d30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d050      	beq.n	8008c5e <USBD_CDC_Setup+0xde>
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	f040 80af 	bne.w	8008d20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88db      	ldrh	r3, [r3, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d03a      	beq.n	8008c40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	da1b      	bge.n	8008c0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	33b0      	adds	r3, #176	; 0xb0
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	88d2      	ldrh	r2, [r2, #6]
 8008bf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	88db      	ldrh	r3, [r3, #6]
 8008bf6:	2b07      	cmp	r3, #7
 8008bf8:	bf28      	it	cs
 8008bfa:	2307      	movcs	r3, #7
 8008bfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	89fa      	ldrh	r2, [r7, #14]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fd89 	bl	800a71c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c0a:	e090      	b.n	8008d2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	785a      	ldrb	r2, [r3, #1]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	2b3f      	cmp	r3, #63	; 0x3f
 8008c1c:	d803      	bhi.n	8008c26 <USBD_CDC_Setup+0xa6>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	e000      	b.n	8008c28 <USBD_CDC_Setup+0xa8>
 8008c26:	2240      	movs	r2, #64	; 0x40
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c2e:	6939      	ldr	r1, [r7, #16]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c36:	461a      	mov	r2, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fd9b 	bl	800a774 <USBD_CtlPrepareRx>
      break;
 8008c3e:	e076      	b.n	8008d2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	33b0      	adds	r3, #176	; 0xb0
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	7850      	ldrb	r0, [r2, #1]
 8008c56:	2200      	movs	r2, #0
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4798      	blx	r3
      break;
 8008c5c:	e067      	b.n	8008d2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b0b      	cmp	r3, #11
 8008c64:	d851      	bhi.n	8008d0a <USBD_CDC_Setup+0x18a>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <USBD_CDC_Setup+0xec>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c9d 	.word	0x08008c9d
 8008c70:	08008d19 	.word	0x08008d19
 8008c74:	08008d0b 	.word	0x08008d0b
 8008c78:	08008d0b 	.word	0x08008d0b
 8008c7c:	08008d0b 	.word	0x08008d0b
 8008c80:	08008d0b 	.word	0x08008d0b
 8008c84:	08008d0b 	.word	0x08008d0b
 8008c88:	08008d0b 	.word	0x08008d0b
 8008c8c:	08008d0b 	.word	0x08008d0b
 8008c90:	08008d0b 	.word	0x08008d0b
 8008c94:	08008cc7 	.word	0x08008cc7
 8008c98:	08008cf1 	.word	0x08008cf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d107      	bne.n	8008cb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ca8:	f107 030a 	add.w	r3, r7, #10
 8008cac:	2202      	movs	r2, #2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fd33 	bl	800a71c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cb6:	e032      	b.n	8008d1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 fcbd 	bl	800a63a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc4:	e02b      	b.n	8008d1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d107      	bne.n	8008ce2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cd2:	f107 030d 	add.w	r3, r7, #13
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fd1e 	bl	800a71c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ce0:	e01d      	b.n	8008d1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 fca8 	bl	800a63a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cea:	2303      	movs	r3, #3
 8008cec:	75fb      	strb	r3, [r7, #23]
          break;
 8008cee:	e016      	b.n	8008d1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d00f      	beq.n	8008d1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 fc9b 	bl	800a63a <USBD_CtlError>
            ret = USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d08:	e008      	b.n	8008d1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 fc94 	bl	800a63a <USBD_CtlError>
          ret = USBD_FAIL;
 8008d12:	2303      	movs	r3, #3
 8008d14:	75fb      	strb	r3, [r7, #23]
          break;
 8008d16:	e002      	b.n	8008d1e <USBD_CDC_Setup+0x19e>
          break;
 8008d18:	bf00      	nop
 8008d1a:	e008      	b.n	8008d2e <USBD_CDC_Setup+0x1ae>
          break;
 8008d1c:	bf00      	nop
      }
      break;
 8008d1e:	e006      	b.n	8008d2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fc89 	bl	800a63a <USBD_CtlError>
      ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	32b0      	adds	r2, #176	; 0xb0
 8008d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e065      	b.n	8008e2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	32b0      	adds	r2, #176	; 0xb0
 8008d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	3318      	adds	r3, #24
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02f      	beq.n	8008dec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3318      	adds	r3, #24
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	f003 010f 	and.w	r1, r3, #15
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	460b      	mov	r3, r1
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	440b      	add	r3, r1
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4403      	add	r3, r0
 8008db4:	3348      	adds	r3, #72	; 0x48
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d112      	bne.n	8008dec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3318      	adds	r3, #24
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dde:	78f9      	ldrb	r1, [r7, #3]
 8008de0:	2300      	movs	r3, #0
 8008de2:	2200      	movs	r2, #0
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f002 f9d6 	bl	800b196 <USBD_LL_Transmit>
 8008dea:	e01f      	b.n	8008e2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	33b0      	adds	r3, #176	; 0xb0
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d010      	beq.n	8008e2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	33b0      	adds	r3, #176	; 0xb0
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	32b0      	adds	r2, #176	; 0xb0
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	32b0      	adds	r2, #176	; 0xb0
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01a      	b.n	8008e9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f002 f9d4 	bl	800b21a <USBD_LL_GetRxDataSize>
 8008e72:	4602      	mov	r2, r0
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	33b0      	adds	r3, #176	; 0xb0
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	32b0      	adds	r2, #176	; 0xb0
 8008eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e025      	b.n	8008f14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	33b0      	adds	r3, #176	; 0xb0
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01a      	beq.n	8008f12 <USBD_CDC_EP0_RxReady+0x6c>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ee2:	2bff      	cmp	r3, #255	; 0xff
 8008ee4:	d015      	beq.n	8008f12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	33b0      	adds	r3, #176	; 0xb0
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008efe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f06:	b292      	uxth	r2, r2
 8008f08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	22ff      	movs	r2, #255	; 0xff
 8008f0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f24:	2182      	movs	r1, #130	; 0x82
 8008f26:	4818      	ldr	r0, [pc, #96]	; (8008f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f28:	f000 fd4f 	bl	80099ca <USBD_GetEpDesc>
 8008f2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4815      	ldr	r0, [pc, #84]	; (8008f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f32:	f000 fd4a 	bl	80099ca <USBD_GetEpDesc>
 8008f36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f38:	2181      	movs	r1, #129	; 0x81
 8008f3a:	4813      	ldr	r0, [pc, #76]	; (8008f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f3c:	f000 fd45 	bl	80099ca <USBD_GetEpDesc>
 8008f40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d006      	beq.n	8008f62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f5c:	711a      	strb	r2, [r3, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d006      	beq.n	8008f76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f70:	711a      	strb	r2, [r3, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2243      	movs	r2, #67	; 0x43
 8008f7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	240000f4 	.word	0x240000f4

08008f8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f94:	2182      	movs	r1, #130	; 0x82
 8008f96:	4818      	ldr	r0, [pc, #96]	; (8008ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f98:	f000 fd17 	bl	80099ca <USBD_GetEpDesc>
 8008f9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4815      	ldr	r0, [pc, #84]	; (8008ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fa2:	f000 fd12 	bl	80099ca <USBD_GetEpDesc>
 8008fa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fa8:	2181      	movs	r1, #129	; 0x81
 8008faa:	4813      	ldr	r0, [pc, #76]	; (8008ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fac:	f000 fd0d 	bl	80099ca <USBD_GetEpDesc>
 8008fb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2210      	movs	r2, #16
 8008fbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	711a      	strb	r2, [r3, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f042 0202 	orr.w	r2, r2, #2
 8008fd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d006      	beq.n	8008fe6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	711a      	strb	r2, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f042 0202 	orr.w	r2, r2, #2
 8008fe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2243      	movs	r2, #67	; 0x43
 8008fea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	240000f4 	.word	0x240000f4

08008ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009004:	2182      	movs	r1, #130	; 0x82
 8009006:	4818      	ldr	r0, [pc, #96]	; (8009068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009008:	f000 fcdf 	bl	80099ca <USBD_GetEpDesc>
 800900c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800900e:	2101      	movs	r1, #1
 8009010:	4815      	ldr	r0, [pc, #84]	; (8009068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009012:	f000 fcda 	bl	80099ca <USBD_GetEpDesc>
 8009016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009018:	2181      	movs	r1, #129	; 0x81
 800901a:	4813      	ldr	r0, [pc, #76]	; (8009068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800901c:	f000 fcd5 	bl	80099ca <USBD_GetEpDesc>
 8009020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2210      	movs	r2, #16
 800902c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	2200      	movs	r2, #0
 8009038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800903c:	711a      	strb	r2, [r3, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d006      	beq.n	8009056 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009050:	711a      	strb	r2, [r3, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2243      	movs	r2, #67	; 0x43
 800905a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	240000f4 	.word	0x240000f4

0800906c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	220a      	movs	r2, #10
 8009078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	240000b0 	.word	0x240000b0

0800908c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	e009      	b.n	80090b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	33b0      	adds	r3, #176	; 0xb0
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	32b0      	adds	r2, #176	; 0xb0
 80090d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e008      	b.n	80090f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	371c      	adds	r7, #28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	32b0      	adds	r2, #176	; 0xb0
 8009118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e004      	b.n	8009132 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
	...

08009140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	32b0      	adds	r2, #176	; 0xb0
 8009152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009156:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	32b0      	adds	r2, #176	; 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800916e:	2303      	movs	r3, #3
 8009170:	e025      	b.n	80091be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009178:	2b00      	cmp	r3, #0
 800917a:	d11f      	bne.n	80091bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2201      	movs	r2, #1
 8009180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009184:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <USBD_CDC_TransmitPacket+0x88>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4403      	add	r3, r0
 800919e:	3318      	adds	r3, #24
 80091a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80091a2:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <USBD_CDC_TransmitPacket+0x88>)
 80091a4:	7819      	ldrb	r1, [r3, #0]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 ffef 	bl	800b196 <USBD_LL_Transmit>

    ret = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	24000137 	.word	0x24000137

080091cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32b0      	adds	r2, #176	; 0xb0
 80091de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	32b0      	adds	r2, #176	; 0xb0
 80091ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e018      	b.n	800922c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7c1b      	ldrb	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <USBD_CDC_ReceivePacket+0x68>)
 8009204:	7819      	ldrb	r1, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800920c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 ffe1 	bl	800b1d8 <USBD_LL_PrepareReceive>
 8009216:	e008      	b.n	800922a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009218:	4b06      	ldr	r3, [pc, #24]	; (8009234 <USBD_CDC_ReceivePacket+0x68>)
 800921a:	7819      	ldrb	r1, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009222:	2340      	movs	r3, #64	; 0x40
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 ffd7 	bl	800b1d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	24000138 	.word	0x24000138

08009238 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	e01f      	b.n	8009290 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	79fa      	ldrb	r2, [r7, #7]
 8009282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f001 fe4b 	bl	800af20 <USBD_LL_Init>
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e025      	b.n	80092fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	32ae      	adds	r2, #174	; 0xae
 80092c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	32ae      	adds	r2, #174	; 0xae
 80092d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	f107 020e 	add.w	r2, r7, #14
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	4602      	mov	r2, r0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fe59 	bl	800afc4 <USBD_LL_Start>
 8009312:	4603      	mov	r3, r0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d009      	beq.n	8009360 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	4611      	mov	r1, r2
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009390:	2303      	movs	r3, #3
 8009392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f908 	bl	800a5c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093c4:	461a      	mov	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093d2:	f003 031f 	and.w	r3, r3, #31
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d01a      	beq.n	8009410 <USBD_LL_SetupStage+0x72>
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d822      	bhi.n	8009424 <USBD_LL_SetupStage+0x86>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <USBD_LL_SetupStage+0x4a>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00a      	beq.n	80093fc <USBD_LL_SetupStage+0x5e>
 80093e6:	e01d      	b.n	8009424 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fb5f 	bl	8009ab4 <USBD_StdDevReq>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]
      break;
 80093fa:	e020      	b.n	800943e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fbc7 	bl	8009b98 <USBD_StdItfReq>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]
      break;
 800940e:	e016      	b.n	800943e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fc29 	bl	8009c70 <USBD_StdEPReq>
 800941e:	4603      	mov	r3, r0
 8009420:	73fb      	strb	r3, [r7, #15]
      break;
 8009422:	e00c      	b.n	800943e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800942a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800942e:	b2db      	uxtb	r3, r3
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fe26 	bl	800b084 <USBD_LL_StallEP>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]
      break;
 800943c:	bf00      	nop
  }

  return ret;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	460b      	mov	r3, r1
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d16e      	bne.n	800953e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009466:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800946e:	2b03      	cmp	r3, #3
 8009470:	f040 8098 	bne.w	80095a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	429a      	cmp	r2, r3
 800947e:	d913      	bls.n	80094a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	1ad2      	subs	r2, r2, r3
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	4293      	cmp	r3, r2
 8009498:	bf28      	it	cs
 800949a:	4613      	movcs	r3, r2
 800949c:	461a      	mov	r2, r3
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f001 f984 	bl	800a7ae <USBD_CtlContinueRx>
 80094a6:	e07d      	b.n	80095a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d014      	beq.n	80094e0 <USBD_LL_DataOutStage+0x98>
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d81d      	bhi.n	80094f6 <USBD_LL_DataOutStage+0xae>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <USBD_LL_DataOutStage+0x7c>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d003      	beq.n	80094ca <USBD_LL_DataOutStage+0x82>
 80094c2:	e018      	b.n	80094f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75bb      	strb	r3, [r7, #22]
            break;
 80094c8:	e018      	b.n	80094fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	4619      	mov	r1, r3
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fa5e 	bl	8009996 <USBD_CoreFindIF>
 80094da:	4603      	mov	r3, r0
 80094dc:	75bb      	strb	r3, [r7, #22]
            break;
 80094de:	e00d      	b.n	80094fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	4619      	mov	r1, r3
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fa60 	bl	80099b0 <USBD_CoreFindEP>
 80094f0:	4603      	mov	r3, r0
 80094f2:	75bb      	strb	r3, [r7, #22]
            break;
 80094f4:	e002      	b.n	80094fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	75bb      	strb	r3, [r7, #22]
            break;
 80094fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094fc:	7dbb      	ldrb	r3, [r7, #22]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d119      	bne.n	8009536 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b03      	cmp	r3, #3
 800950c:	d113      	bne.n	8009536 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800950e:	7dba      	ldrb	r2, [r7, #22]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	32ae      	adds	r2, #174	; 0xae
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800951e:	7dba      	ldrb	r2, [r7, #22]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009526:	7dba      	ldrb	r2, [r7, #22]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	32ae      	adds	r2, #174	; 0xae
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f001 f94a 	bl	800a7d0 <USBD_CtlSendStatus>
 800953c:	e032      	b.n	80095a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009544:	b2db      	uxtb	r3, r3
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 fa31 	bl	80099b0 <USBD_CoreFindEP>
 800954e:	4603      	mov	r3, r0
 8009550:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009552:	7dbb      	ldrb	r3, [r7, #22]
 8009554:	2bff      	cmp	r3, #255	; 0xff
 8009556:	d025      	beq.n	80095a4 <USBD_LL_DataOutStage+0x15c>
 8009558:	7dbb      	ldrb	r3, [r7, #22]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d122      	bne.n	80095a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b03      	cmp	r3, #3
 8009568:	d117      	bne.n	800959a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800956a:	7dba      	ldrb	r2, [r7, #22]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	32ae      	adds	r2, #174	; 0xae
 8009570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00f      	beq.n	800959a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800957a:	7dba      	ldrb	r2, [r7, #22]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009582:	7dba      	ldrb	r2, [r7, #22]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	32ae      	adds	r2, #174	; 0xae
 8009588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	7afa      	ldrb	r2, [r7, #11]
 8009590:	4611      	mov	r1, r2
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	e000      	b.n	80095a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b086      	sub	sp, #24
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	460b      	mov	r3, r1
 80095b8:	607a      	str	r2, [r7, #4]
 80095ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d16f      	bne.n	80096a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3314      	adds	r3, #20
 80095c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d15a      	bne.n	8009688 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d914      	bls.n	8009608 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	1ad2      	subs	r2, r2, r3
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	461a      	mov	r2, r3
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f001 f8ac 	bl	800a752 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fa:	2300      	movs	r3, #0
 80095fc:	2200      	movs	r2, #0
 80095fe:	2100      	movs	r1, #0
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f001 fde9 	bl	800b1d8 <USBD_LL_PrepareReceive>
 8009606:	e03f      	b.n	8009688 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	429a      	cmp	r2, r3
 8009612:	d11c      	bne.n	800964e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800961c:	429a      	cmp	r2, r3
 800961e:	d316      	bcc.n	800964e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800962a:	429a      	cmp	r2, r3
 800962c:	d20f      	bcs.n	800964e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800962e:	2200      	movs	r2, #0
 8009630:	2100      	movs	r1, #0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f001 f88d 	bl	800a752 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009640:	2300      	movs	r3, #0
 8009642:	2200      	movs	r2, #0
 8009644:	2100      	movs	r1, #0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f001 fdc6 	bl	800b1d8 <USBD_LL_PrepareReceive>
 800964c:	e01c      	b.n	8009688 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b03      	cmp	r3, #3
 8009658:	d10f      	bne.n	800967a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800967a:	2180      	movs	r1, #128	; 0x80
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 fd01 	bl	800b084 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 f8b7 	bl	800a7f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d03a      	beq.n	8009708 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fe42 	bl	800931c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096a0:	e032      	b.n	8009708 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096a2:	7afb      	ldrb	r3, [r7, #11]
 80096a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f97f 	bl	80099b0 <USBD_CoreFindEP>
 80096b2:	4603      	mov	r3, r0
 80096b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2bff      	cmp	r3, #255	; 0xff
 80096ba:	d025      	beq.n	8009708 <USBD_LL_DataInStage+0x15a>
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d122      	bne.n	8009708 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d11c      	bne.n	8009708 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096ce:	7dfa      	ldrb	r2, [r7, #23]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	32ae      	adds	r2, #174	; 0xae
 80096d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d014      	beq.n	8009708 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096de:	7dfa      	ldrb	r2, [r7, #23]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096e6:	7dfa      	ldrb	r2, [r7, #23]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	32ae      	adds	r2, #174	; 0xae
 80096ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	7afa      	ldrb	r2, [r7, #11]
 80096f4:	4611      	mov	r1, r2
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096fe:	7dbb      	ldrb	r3, [r7, #22]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009704:	7dbb      	ldrb	r3, [r7, #22]
 8009706:	e000      	b.n	800970a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d014      	beq.n	8009778 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00e      	beq.n	8009778 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6852      	ldr	r2, [r2, #4]
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	4611      	mov	r1, r2
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 fc3b 	bl	800affa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2240      	movs	r2, #64	; 0x40
 8009790:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009794:	2340      	movs	r3, #64	; 0x40
 8009796:	2200      	movs	r2, #0
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fc2d 	bl	800affa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2240      	movs	r2, #64	; 0x40
 80097aa:	621a      	str	r2, [r3, #32]

  return ret;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	78fa      	ldrb	r2, [r7, #3]
 80097c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2204      	movs	r2, #4
 80097f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b04      	cmp	r3, #4
 8009814:	d106      	bne.n	8009824 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800981c:	b2da      	uxtb	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d110      	bne.n	8009868 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	32ae      	adds	r2, #174	; 0xae
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009890:	2303      	movs	r3, #3
 8009892:	e01c      	b.n	80098ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b03      	cmp	r3, #3
 800989e:	d115      	bne.n	80098cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	32ae      	adds	r2, #174	; 0xae
 80098aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	32ae      	adds	r2, #174	; 0xae
 80098be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	4611      	mov	r1, r2
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	32ae      	adds	r2, #174	; 0xae
 80098ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e01c      	b.n	8009932 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b03      	cmp	r3, #3
 8009902:	d115      	bne.n	8009930 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	32ae      	adds	r2, #174	; 0xae
 800990e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	32ae      	adds	r2, #174	; 0xae
 8009922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	4611      	mov	r1, r2
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800993a:	b480      	push	{r7}
 800993c:	b083      	sub	sp, #12
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6852      	ldr	r2, [r2, #4]
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	4611      	mov	r1, r2
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099be:	4618      	mov	r0, r3
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	885b      	ldrh	r3, [r3, #2]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d920      	bls.n	8009a34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099fa:	e013      	b.n	8009a24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099fc:	f107 030a 	add.w	r3, r7, #10
 8009a00:	4619      	mov	r1, r3
 8009a02:	6978      	ldr	r0, [r7, #20]
 8009a04:	f000 f81b 	bl	8009a3e <USBD_GetNextDesc>
 8009a08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d108      	bne.n	8009a24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	789b      	ldrb	r3, [r3, #2]
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d008      	beq.n	8009a32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	885b      	ldrh	r3, [r3, #2]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	897b      	ldrh	r3, [r7, #10]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d8e5      	bhi.n	80099fc <USBD_GetEpDesc+0x32>
 8009a30:	e000      	b.n	8009a34 <USBD_GetEpDesc+0x6a>
          break;
 8009a32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a34:	693b      	ldr	r3, [r7, #16]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	881a      	ldrh	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4413      	add	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a96:	8a3b      	ldrh	r3, [r7, #16]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	b21a      	sxth	r2, r3
 8009a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	371c      	adds	r7, #28
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	d005      	beq.n	8009ada <USBD_StdDevReq+0x26>
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d857      	bhi.n	8009b82 <USBD_StdDevReq+0xce>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00f      	beq.n	8009af6 <USBD_StdDevReq+0x42>
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d153      	bne.n	8009b82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	32ae      	adds	r2, #174	; 0xae
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	4798      	blx	r3
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
      break;
 8009af4:	e04a      	b.n	8009b8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	d83b      	bhi.n	8009b76 <USBD_StdDevReq+0xc2>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <USBD_StdDevReq+0x50>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009b6d 	.word	0x08009b6d
 8009b0c:	08009b77 	.word	0x08009b77
 8009b10:	08009b63 	.word	0x08009b63
 8009b14:	08009b77 	.word	0x08009b77
 8009b18:	08009b37 	.word	0x08009b37
 8009b1c:	08009b2d 	.word	0x08009b2d
 8009b20:	08009b77 	.word	0x08009b77
 8009b24:	08009b4f 	.word	0x08009b4f
 8009b28:	08009b41 	.word	0x08009b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa3c 	bl	8009fac <USBD_GetDescriptor>
          break;
 8009b34:	e024      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fba1 	bl	800a280 <USBD_SetAddress>
          break;
 8009b3e:	e01f      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fbe0 	bl	800a308 <USBD_SetConfig>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009b4c:	e018      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fc83 	bl	800a45c <USBD_GetConfig>
          break;
 8009b56:	e013      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fcb4 	bl	800a4c8 <USBD_GetStatus>
          break;
 8009b60:	e00e      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fce3 	bl	800a530 <USBD_SetFeature>
          break;
 8009b6a:	e009      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fd07 	bl	800a582 <USBD_ClrFeature>
          break;
 8009b74:	e004      	b.n	8009b80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fd5e 	bl	800a63a <USBD_CtlError>
          break;
 8009b7e:	bf00      	nop
      }
      break;
 8009b80:	e004      	b.n	8009b8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fd58 	bl	800a63a <USBD_CtlError>
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop

08009b98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bae:	2b40      	cmp	r3, #64	; 0x40
 8009bb0:	d005      	beq.n	8009bbe <USBD_StdItfReq+0x26>
 8009bb2:	2b40      	cmp	r3, #64	; 0x40
 8009bb4:	d852      	bhi.n	8009c5c <USBD_StdItfReq+0xc4>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <USBD_StdItfReq+0x26>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d14e      	bne.n	8009c5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d840      	bhi.n	8009c4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	889b      	ldrh	r3, [r3, #4]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d836      	bhi.n	8009c44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	889b      	ldrh	r3, [r3, #4]
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fed9 	bl	8009996 <USBD_CoreFindIF>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2bff      	cmp	r3, #255	; 0xff
 8009bec:	d01d      	beq.n	8009c2a <USBD_StdItfReq+0x92>
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d11a      	bne.n	8009c2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bf4:	7bba      	ldrb	r2, [r7, #14]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32ae      	adds	r2, #174	; 0xae
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00f      	beq.n	8009c24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c04:	7bba      	ldrb	r2, [r7, #14]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c0c:	7bba      	ldrb	r2, [r7, #14]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	32ae      	adds	r2, #174	; 0xae
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	4798      	blx	r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c22:	e004      	b.n	8009c2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c24:	2303      	movs	r3, #3
 8009c26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c28:	e001      	b.n	8009c2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	88db      	ldrh	r3, [r3, #6]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d110      	bne.n	8009c58 <USBD_StdItfReq+0xc0>
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10d      	bne.n	8009c58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fdc7 	bl	800a7d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c42:	e009      	b.n	8009c58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fcf7 	bl	800a63a <USBD_CtlError>
          break;
 8009c4c:	e004      	b.n	8009c58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fcf2 	bl	800a63a <USBD_CtlError>
          break;
 8009c56:	e000      	b.n	8009c5a <USBD_StdItfReq+0xc2>
          break;
 8009c58:	bf00      	nop
      }
      break;
 8009c5a:	e004      	b.n	8009c66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fceb 	bl	800a63a <USBD_CtlError>
      break;
 8009c64:	bf00      	nop
  }

  return ret;
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	889b      	ldrh	r3, [r3, #4]
 8009c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c8c:	2b40      	cmp	r3, #64	; 0x40
 8009c8e:	d007      	beq.n	8009ca0 <USBD_StdEPReq+0x30>
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	f200 817f 	bhi.w	8009f94 <USBD_StdEPReq+0x324>
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d02a      	beq.n	8009cf0 <USBD_StdEPReq+0x80>
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	f040 817a 	bne.w	8009f94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff fe83 	bl	80099b0 <USBD_CoreFindEP>
 8009caa:	4603      	mov	r3, r0
 8009cac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cae:	7b7b      	ldrb	r3, [r7, #13]
 8009cb0:	2bff      	cmp	r3, #255	; 0xff
 8009cb2:	f000 8174 	beq.w	8009f9e <USBD_StdEPReq+0x32e>
 8009cb6:	7b7b      	ldrb	r3, [r7, #13]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f040 8170 	bne.w	8009f9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cbe:	7b7a      	ldrb	r2, [r7, #13]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cc6:	7b7a      	ldrb	r2, [r7, #13]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	32ae      	adds	r2, #174	; 0xae
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8163 	beq.w	8009f9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009cd8:	7b7a      	ldrb	r2, [r7, #13]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	32ae      	adds	r2, #174	; 0xae
 8009cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	4798      	blx	r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cee:	e156      	b.n	8009f9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d008      	beq.n	8009d0a <USBD_StdEPReq+0x9a>
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	f300 8145 	bgt.w	8009f88 <USBD_StdEPReq+0x318>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 809b 	beq.w	8009e3a <USBD_StdEPReq+0x1ca>
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d03c      	beq.n	8009d82 <USBD_StdEPReq+0x112>
 8009d08:	e13e      	b.n	8009f88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d002      	beq.n	8009d1c <USBD_StdEPReq+0xac>
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d016      	beq.n	8009d48 <USBD_StdEPReq+0xd8>
 8009d1a:	e02c      	b.n	8009d76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <USBD_StdEPReq+0xce>
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b80      	cmp	r3, #128	; 0x80
 8009d26:	d00a      	beq.n	8009d3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 f9a9 	bl	800b084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d32:	2180      	movs	r1, #128	; 0x80
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 f9a5 	bl	800b084 <USBD_LL_StallEP>
 8009d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d3c:	e020      	b.n	8009d80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fc7a 	bl	800a63a <USBD_CtlError>
              break;
 8009d46:	e01b      	b.n	8009d80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	885b      	ldrh	r3, [r3, #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10e      	bne.n	8009d6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00b      	beq.n	8009d6e <USBD_StdEPReq+0xfe>
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b80      	cmp	r3, #128	; 0x80
 8009d5a:	d008      	beq.n	8009d6e <USBD_StdEPReq+0xfe>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	88db      	ldrh	r3, [r3, #6]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f98b 	bl	800b084 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fd2e 	bl	800a7d0 <USBD_CtlSendStatus>

              break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fc5e 	bl	800a63a <USBD_CtlError>
              break;
 8009d7e:	bf00      	nop
          }
          break;
 8009d80:	e107      	b.n	8009f92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d002      	beq.n	8009d94 <USBD_StdEPReq+0x124>
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d016      	beq.n	8009dc0 <USBD_StdEPReq+0x150>
 8009d92:	e04b      	b.n	8009e2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00d      	beq.n	8009db6 <USBD_StdEPReq+0x146>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b80      	cmp	r3, #128	; 0x80
 8009d9e:	d00a      	beq.n	8009db6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f96d 	bl	800b084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009daa:	2180      	movs	r1, #128	; 0x80
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f969 	bl	800b084 <USBD_LL_StallEP>
 8009db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009db4:	e040      	b.n	8009e38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fc3e 	bl	800a63a <USBD_CtlError>
              break;
 8009dbe:	e03b      	b.n	8009e38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	885b      	ldrh	r3, [r3, #2]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d136      	bne.n	8009e36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 f973 	bl	800b0c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fcf7 	bl	800a7d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff fde2 	bl	80099b0 <USBD_CoreFindEP>
 8009dec:	4603      	mov	r3, r0
 8009dee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df0:	7b7b      	ldrb	r3, [r7, #13]
 8009df2:	2bff      	cmp	r3, #255	; 0xff
 8009df4:	d01f      	beq.n	8009e36 <USBD_StdEPReq+0x1c6>
 8009df6:	7b7b      	ldrb	r3, [r7, #13]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d11c      	bne.n	8009e36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009dfc:	7b7a      	ldrb	r2, [r7, #13]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e04:	7b7a      	ldrb	r2, [r7, #13]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	32ae      	adds	r2, #174	; 0xae
 8009e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d010      	beq.n	8009e36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e14:	7b7a      	ldrb	r2, [r7, #13]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	32ae      	adds	r2, #174	; 0xae
 8009e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e2a:	e004      	b.n	8009e36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fc03 	bl	800a63a <USBD_CtlError>
              break;
 8009e34:	e000      	b.n	8009e38 <USBD_StdEPReq+0x1c8>
              break;
 8009e36:	bf00      	nop
          }
          break;
 8009e38:	e0ab      	b.n	8009f92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d002      	beq.n	8009e4c <USBD_StdEPReq+0x1dc>
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d032      	beq.n	8009eb0 <USBD_StdEPReq+0x240>
 8009e4a:	e097      	b.n	8009f7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <USBD_StdEPReq+0x1f2>
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	2b80      	cmp	r3, #128	; 0x80
 8009e56:	d004      	beq.n	8009e62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fbed 	bl	800a63a <USBD_CtlError>
                break;
 8009e60:	e091      	b.n	8009f86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da0b      	bge.n	8009e82 <USBD_StdEPReq+0x212>
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	3310      	adds	r3, #16
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	3304      	adds	r3, #4
 8009e80:	e00b      	b.n	8009e9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	4413      	add	r3, r2
 8009e98:	3304      	adds	r3, #4
 8009e9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fc37 	bl	800a71c <USBD_CtlSendData>
              break;
 8009eae:	e06a      	b.n	8009f86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	da11      	bge.n	8009edc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	f003 020f 	and.w	r2, r3, #15
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	3324      	adds	r3, #36	; 0x24
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d117      	bne.n	8009f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fbb0 	bl	800a63a <USBD_CtlError>
                  break;
 8009eda:	e054      	b.n	8009f86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	f003 020f 	and.w	r2, r3, #15
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb9d 	bl	800a63a <USBD_CtlError>
                  break;
 8009f00:	e041      	b.n	8009f86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da0b      	bge.n	8009f22 <USBD_StdEPReq+0x2b2>
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	3310      	adds	r3, #16
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	3304      	adds	r3, #4
 8009f20:	e00b      	b.n	8009f3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	4413      	add	r3, r2
 8009f38:	3304      	adds	r3, #4
 8009f3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <USBD_StdEPReq+0x2d8>
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	2b80      	cmp	r3, #128	; 0x80
 8009f46:	d103      	bne.n	8009f50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e00e      	b.n	8009f6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f8d3 	bl	800b100 <USBD_LL_IsStallEP>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2201      	movs	r2, #1
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	e002      	b.n	8009f6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2202      	movs	r2, #2
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fbd1 	bl	800a71c <USBD_CtlSendData>
              break;
 8009f7a:	e004      	b.n	8009f86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb5b 	bl	800a63a <USBD_CtlError>
              break;
 8009f84:	bf00      	nop
          }
          break;
 8009f86:	e004      	b.n	8009f92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fb55 	bl	800a63a <USBD_CtlError>
          break;
 8009f90:	bf00      	nop
      }
      break;
 8009f92:	e005      	b.n	8009fa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fb4f 	bl	800a63a <USBD_CtlError>
      break;
 8009f9c:	e000      	b.n	8009fa0 <USBD_StdEPReq+0x330>
      break;
 8009f9e:	bf00      	nop
  }

  return ret;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	885b      	ldrh	r3, [r3, #2]
 8009fc6:	0a1b      	lsrs	r3, r3, #8
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b06      	cmp	r3, #6
 8009fce:	f200 8128 	bhi.w	800a222 <USBD_GetDescriptor+0x276>
 8009fd2:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <USBD_GetDescriptor+0x2c>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009ff5 	.word	0x08009ff5
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	0800a04d 	.word	0x0800a04d
 8009fe4:	0800a223 	.word	0x0800a223
 8009fe8:	0800a223 	.word	0x0800a223
 8009fec:	0800a1c3 	.word	0x0800a1c3
 8009ff0:	0800a1ef 	.word	0x0800a1ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	7c12      	ldrb	r2, [r2, #16]
 800a000:	f107 0108 	add.w	r1, r7, #8
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
 800a008:	60f8      	str	r0, [r7, #12]
      break;
 800a00a:	e112      	b.n	800a232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7c1b      	ldrb	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10d      	bne.n	800a030 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	f107 0208 	add.w	r2, r7, #8
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	2202      	movs	r2, #2
 800a02c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a02e:	e100      	b.n	800a232 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f107 0208 	add.w	r2, r7, #8
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3301      	adds	r3, #1
 800a046:	2202      	movs	r2, #2
 800a048:	701a      	strb	r2, [r3, #0]
      break;
 800a04a:	e0f2      	b.n	800a232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	885b      	ldrh	r3, [r3, #2]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b05      	cmp	r3, #5
 800a054:	f200 80ac 	bhi.w	800a1b0 <USBD_GetDescriptor+0x204>
 800a058:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <USBD_GetDescriptor+0xb4>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a079 	.word	0x0800a079
 800a064:	0800a0ad 	.word	0x0800a0ad
 800a068:	0800a0e1 	.word	0x0800a0e1
 800a06c:	0800a115 	.word	0x0800a115
 800a070:	0800a149 	.word	0x0800a149
 800a074:	0800a17d 	.word	0x0800a17d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7c12      	ldrb	r2, [r2, #16]
 800a090:	f107 0108 	add.w	r1, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09a:	e091      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 facb 	bl	800a63a <USBD_CtlError>
            err++;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0aa:	e089      	b.n	800a1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e077      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fab1 	bl	800a63a <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e06f      	b.n	800a1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	7c12      	ldrb	r2, [r2, #16]
 800a0f8:	f107 0108 	add.w	r1, r7, #8
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a102:	e05d      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa97 	bl	800a63a <USBD_CtlError>
            err++;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	3301      	adds	r3, #1
 800a110:	72fb      	strb	r3, [r7, #11]
          break;
 800a112:	e055      	b.n	800a1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7c12      	ldrb	r2, [r2, #16]
 800a12c:	f107 0108 	add.w	r1, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a136:	e043      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa7d 	bl	800a63a <USBD_CtlError>
            err++;
 800a140:	7afb      	ldrb	r3, [r7, #11]
 800a142:	3301      	adds	r3, #1
 800a144:	72fb      	strb	r3, [r7, #11]
          break;
 800a146:	e03b      	b.n	800a1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7c12      	ldrb	r2, [r2, #16]
 800a160:	f107 0108 	add.w	r1, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16a:	e029      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa63 	bl	800a63a <USBD_CtlError>
            err++;
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	3301      	adds	r3, #1
 800a178:	72fb      	strb	r3, [r7, #11]
          break;
 800a17a:	e021      	b.n	800a1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7c12      	ldrb	r2, [r2, #16]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
 800a19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19e:	e00f      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa49 	bl	800a63a <USBD_CtlError>
            err++;
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ae:	e007      	b.n	800a1c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa41 	bl	800a63a <USBD_CtlError>
          err++;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1be:	bf00      	nop
      }
      break;
 800a1c0:	e037      	b.n	800a232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7c1b      	ldrb	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d2:	f107 0208 	add.w	r2, r7, #8
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	4798      	blx	r3
 800a1da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1dc:	e029      	b.n	800a232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa2a 	bl	800a63a <USBD_CtlError>
        err++;
 800a1e6:	7afb      	ldrb	r3, [r7, #11]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ec:	e021      	b.n	800a232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	7c1b      	ldrb	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10d      	bne.n	800a212 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	f107 0208 	add.w	r2, r7, #8
 800a202:	4610      	mov	r0, r2
 800a204:	4798      	blx	r3
 800a206:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3301      	adds	r3, #1
 800a20c:	2207      	movs	r2, #7
 800a20e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a210:	e00f      	b.n	800a232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa10 	bl	800a63a <USBD_CtlError>
        err++;
 800a21a:	7afb      	ldrb	r3, [r7, #11]
 800a21c:	3301      	adds	r3, #1
 800a21e:	72fb      	strb	r3, [r7, #11]
      break;
 800a220:	e007      	b.n	800a232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fa08 	bl	800a63a <USBD_CtlError>
      err++;
 800a22a:	7afb      	ldrb	r3, [r7, #11]
 800a22c:	3301      	adds	r3, #1
 800a22e:	72fb      	strb	r3, [r7, #11]
      break;
 800a230:	bf00      	nop
  }

  if (err != 0U)
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11e      	bne.n	800a276 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d016      	beq.n	800a26e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a240:	893b      	ldrh	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00e      	beq.n	800a264 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	88da      	ldrh	r2, [r3, #6]
 800a24a:	893b      	ldrh	r3, [r7, #8]
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bf28      	it	cs
 800a250:	4613      	movcs	r3, r2
 800a252:	b29b      	uxth	r3, r3
 800a254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a256:	893b      	ldrh	r3, [r7, #8]
 800a258:	461a      	mov	r2, r3
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa5d 	bl	800a71c <USBD_CtlSendData>
 800a262:	e009      	b.n	800a278 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f9e7 	bl	800a63a <USBD_CtlError>
 800a26c:	e004      	b.n	800a278 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 faae 	bl	800a7d0 <USBD_CtlSendStatus>
 800a274:	e000      	b.n	800a278 <USBD_GetDescriptor+0x2cc>
    return;
 800a276:	bf00      	nop
  }
}
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop

0800a280 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	889b      	ldrh	r3, [r3, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d131      	bne.n	800a2f6 <USBD_SetAddress+0x76>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d12d      	bne.n	800a2f6 <USBD_SetAddress+0x76>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	885b      	ldrh	r3, [r3, #2]
 800a29e:	2b7f      	cmp	r3, #127	; 0x7f
 800a2a0:	d829      	bhi.n	800a2f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d104      	bne.n	800a2c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f9bc 	bl	800a63a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c2:	e01d      	b.n	800a300 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7bfa      	ldrb	r2, [r7, #15]
 800a2c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 ff41 	bl	800b158 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa7a 	bl	800a7d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ea:	e009      	b.n	800a300 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f4:	e004      	b.n	800a300 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f99e 	bl	800a63a <USBD_CtlError>
  }
}
 800a2fe:	bf00      	nop
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	4b4e      	ldr	r3, [pc, #312]	; (800a458 <USBD_SetConfig+0x150>)
 800a31e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a320:	4b4d      	ldr	r3, [pc, #308]	; (800a458 <USBD_SetConfig+0x150>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d905      	bls.n	800a334 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f985 	bl	800a63a <USBD_CtlError>
    return USBD_FAIL;
 800a330:	2303      	movs	r3, #3
 800a332:	e08c      	b.n	800a44e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d002      	beq.n	800a346 <USBD_SetConfig+0x3e>
 800a340:	2b03      	cmp	r3, #3
 800a342:	d029      	beq.n	800a398 <USBD_SetConfig+0x90>
 800a344:	e075      	b.n	800a432 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a346:	4b44      	ldr	r3, [pc, #272]	; (800a458 <USBD_SetConfig+0x150>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d020      	beq.n	800a390 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a34e:	4b42      	ldr	r3, [pc, #264]	; (800a458 <USBD_SetConfig+0x150>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a358:	4b3f      	ldr	r3, [pc, #252]	; (800a458 <USBD_SetConfig+0x150>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7fe ffe7 	bl	8009332 <USBD_SetClassConfig>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d008      	beq.n	800a380 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f962 	bl	800a63a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2202      	movs	r2, #2
 800a37a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a37e:	e065      	b.n	800a44c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fa25 	bl	800a7d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2203      	movs	r2, #3
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a38e:	e05d      	b.n	800a44c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fa1d 	bl	800a7d0 <USBD_CtlSendStatus>
      break;
 800a396:	e059      	b.n	800a44c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a398:	4b2f      	ldr	r3, [pc, #188]	; (800a458 <USBD_SetConfig+0x150>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d112      	bne.n	800a3c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3a8:	4b2b      	ldr	r3, [pc, #172]	; (800a458 <USBD_SetConfig+0x150>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b2:	4b29      	ldr	r3, [pc, #164]	; (800a458 <USBD_SetConfig+0x150>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7fe ffd6 	bl	800936a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa06 	bl	800a7d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3c4:	e042      	b.n	800a44c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3c6:	4b24      	ldr	r3, [pc, #144]	; (800a458 <USBD_SetConfig+0x150>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d02a      	beq.n	800a42a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7fe ffc4 	bl	800936a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3e2:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <USBD_SetConfig+0x150>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <USBD_SetConfig+0x150>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7fe ff9d 	bl	8009332 <USBD_SetClassConfig>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00f      	beq.n	800a422 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f918 	bl	800a63a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7fe ffa9 	bl	800936a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a420:	e014      	b.n	800a44c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9d4 	bl	800a7d0 <USBD_CtlSendStatus>
      break;
 800a428:	e010      	b.n	800a44c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f9d0 	bl	800a7d0 <USBD_CtlSendStatus>
      break;
 800a430:	e00c      	b.n	800a44c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f900 	bl	800a63a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a43a:	4b07      	ldr	r3, [pc, #28]	; (800a458 <USBD_SetConfig+0x150>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7fe ff92 	bl	800936a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a446:	2303      	movs	r3, #3
 800a448:	73fb      	strb	r3, [r7, #15]
      break;
 800a44a:	bf00      	nop
  }

  return ret;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	2400ade0 	.word	0x2400ade0

0800a45c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	88db      	ldrh	r3, [r3, #6]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d004      	beq.n	800a478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f8e2 	bl	800a63a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a476:	e023      	b.n	800a4c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	dc02      	bgt.n	800a48a <USBD_GetConfig+0x2e>
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc03      	bgt.n	800a490 <USBD_GetConfig+0x34>
 800a488:	e015      	b.n	800a4b6 <USBD_GetConfig+0x5a>
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d00b      	beq.n	800a4a6 <USBD_GetConfig+0x4a>
 800a48e:	e012      	b.n	800a4b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3308      	adds	r3, #8
 800a49a:	2201      	movs	r2, #1
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f93c 	bl	800a71c <USBD_CtlSendData>
        break;
 800a4a4:	e00c      	b.n	800a4c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f934 	bl	800a71c <USBD_CtlSendData>
        break;
 800a4b4:	e004      	b.n	800a4c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f8be 	bl	800a63a <USBD_CtlError>
        break;
 800a4be:	bf00      	nop
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d81e      	bhi.n	800a51e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	88db      	ldrh	r3, [r3, #6]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d004      	beq.n	800a4f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f8a5 	bl	800a63a <USBD_CtlError>
        break;
 800a4f0:	e01a      	b.n	800a528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f043 0202 	orr.w	r2, r3, #2
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	330c      	adds	r3, #12
 800a512:	2202      	movs	r2, #2
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f900 	bl	800a71c <USBD_CtlSendData>
      break;
 800a51c:	e004      	b.n	800a528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f88a 	bl	800a63a <USBD_CtlError>
      break;
 800a526:	bf00      	nop
  }
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	885b      	ldrh	r3, [r3, #2]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d107      	bne.n	800a552 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f940 	bl	800a7d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a550:	e013      	b.n	800a57a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	885b      	ldrh	r3, [r3, #2]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d10b      	bne.n	800a572 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	889b      	ldrh	r3, [r3, #4]
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	b29b      	uxth	r3, r3
 800a562:	b2da      	uxtb	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f930 	bl	800a7d0 <USBD_CtlSendStatus>
}
 800a570:	e003      	b.n	800a57a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f860 	bl	800a63a <USBD_CtlError>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a592:	b2db      	uxtb	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	2b02      	cmp	r3, #2
 800a598:	d80b      	bhi.n	800a5b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	885b      	ldrh	r3, [r3, #2]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d10c      	bne.n	800a5bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f910 	bl	800a7d0 <USBD_CtlSendStatus>
      }
      break;
 800a5b0:	e004      	b.n	800a5bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f840 	bl	800a63a <USBD_CtlError>
      break;
 800a5ba:	e000      	b.n	800a5be <USBD_ClrFeature+0x3c>
      break;
 800a5bc:	bf00      	nop
  }
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	781a      	ldrb	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff fa41 	bl	8009a78 <SWAPBYTE>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3301      	adds	r3, #1
 800a602:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff fa34 	bl	8009a78 <SWAPBYTE>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fa27 	bl	8009a78 <SWAPBYTE>
 800a62a:	4603      	mov	r3, r0
 800a62c:	461a      	mov	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	80da      	strh	r2, [r3, #6]
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a644:	2180      	movs	r1, #128	; 0x80
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fd1c 	bl	800b084 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fd18 	bl	800b084 <USBD_LL_StallEP>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d036      	beq.n	800a6e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a676:	6938      	ldr	r0, [r7, #16]
 800a678:	f000 f836 	bl	800a6e8 <USBD_GetLen>
 800a67c:	4603      	mov	r3, r0
 800a67e:	3301      	adds	r3, #1
 800a680:	b29b      	uxth	r3, r3
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	b29a      	uxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	4413      	add	r3, r2
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	7812      	ldrb	r2, [r2, #0]
 800a694:	701a      	strb	r2, [r3, #0]
  idx++;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	3301      	adds	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6ac:	e013      	b.n	800a6d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	7812      	ldrb	r2, [r2, #0]
 800a6b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]
    idx++;
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e7      	bne.n	800a6ae <USBD_GetString+0x52>
 800a6de:	e000      	b.n	800a6e2 <USBD_GetString+0x86>
    return;
 800a6e0:	bf00      	nop
  }
}
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6f8:	e005      	b.n	800a706 <USBD_GetLen+0x1e>
  {
    len++;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	3301      	adds	r3, #1
 800a704:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f5      	bne.n	800a6fa <USBD_GetLen+0x12>
  }

  return len;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 fd27 	bl	800b196 <USBD_LL_Transmit>

  return USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	2100      	movs	r1, #0
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fd16 	bl	800b196 <USBD_LL_Transmit>

  return USBD_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2203      	movs	r2, #3
 800a784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fd1a 	bl	800b1d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	2100      	movs	r1, #0
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 fd09 	bl	800b1d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2204      	movs	r2, #4
 800a7dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fcd5 	bl	800b196 <USBD_LL_Transmit>

  return USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2205      	movs	r2, #5
 800a802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a806:	2300      	movs	r3, #0
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fce3 	bl	800b1d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a820:	2201      	movs	r2, #1
 800a822:	4913      	ldr	r1, [pc, #76]	; (800a870 <MX_USB_DEVICE_Init+0x54>)
 800a824:	4813      	ldr	r0, [pc, #76]	; (800a874 <MX_USB_DEVICE_Init+0x58>)
 800a826:	f7fe fd07 	bl	8009238 <USBD_Init>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a830:	f7f7 f990 	bl	8001b54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a834:	4910      	ldr	r1, [pc, #64]	; (800a878 <MX_USB_DEVICE_Init+0x5c>)
 800a836:	480f      	ldr	r0, [pc, #60]	; (800a874 <MX_USB_DEVICE_Init+0x58>)
 800a838:	f7fe fd2e 	bl	8009298 <USBD_RegisterClass>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a842:	f7f7 f987 	bl	8001b54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a846:	490d      	ldr	r1, [pc, #52]	; (800a87c <MX_USB_DEVICE_Init+0x60>)
 800a848:	480a      	ldr	r0, [pc, #40]	; (800a874 <MX_USB_DEVICE_Init+0x58>)
 800a84a:	f7fe fc1f 	bl	800908c <USBD_CDC_RegisterInterface>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a854:	f7f7 f97e 	bl	8001b54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a858:	4806      	ldr	r0, [pc, #24]	; (800a874 <MX_USB_DEVICE_Init+0x58>)
 800a85a:	f7fe fd53 	bl	8009304 <USBD_Start>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a864:	f7f7 f976 	bl	8001b54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a868:	f7f9 fb08 	bl	8003e7c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a86c:	bf00      	nop
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	24000150 	.word	0x24000150
 800a874:	2400ade4 	.word	0x2400ade4
 800a878:	240000bc 	.word	0x240000bc
 800a87c:	2400013c 	.word	0x2400013c

0800a880 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a884:	2200      	movs	r2, #0
 800a886:	4905      	ldr	r1, [pc, #20]	; (800a89c <CDC_Init_HS+0x1c>)
 800a888:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <CDC_Init_HS+0x20>)
 800a88a:	f7fe fc19 	bl	80090c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a88e:	4905      	ldr	r1, [pc, #20]	; (800a8a4 <CDC_Init_HS+0x24>)
 800a890:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <CDC_Init_HS+0x20>)
 800a892:	f7fe fc37 	bl	8009104 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a896:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	2400b8c0 	.word	0x2400b8c0
 800a8a0:	2400ade4 	.word	0x2400ade4
 800a8a4:	2400b0c0 	.word	0x2400b0c0

0800a8a8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a8ac:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b23      	cmp	r3, #35	; 0x23
 800a8cc:	d84a      	bhi.n	800a964 <CDC_Control_HS+0xac>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <CDC_Control_HS+0x1c>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a965 	.word	0x0800a965
 800a8d8:	0800a965 	.word	0x0800a965
 800a8dc:	0800a965 	.word	0x0800a965
 800a8e0:	0800a965 	.word	0x0800a965
 800a8e4:	0800a965 	.word	0x0800a965
 800a8e8:	0800a965 	.word	0x0800a965
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a965 	.word	0x0800a965
 800a8f4:	0800a965 	.word	0x0800a965
 800a8f8:	0800a965 	.word	0x0800a965
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a965 	.word	0x0800a965
 800a908:	0800a965 	.word	0x0800a965
 800a90c:	0800a965 	.word	0x0800a965
 800a910:	0800a965 	.word	0x0800a965
 800a914:	0800a965 	.word	0x0800a965
 800a918:	0800a965 	.word	0x0800a965
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a965 	.word	0x0800a965
 800a924:	0800a965 	.word	0x0800a965
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a965 	.word	0x0800a965
 800a930:	0800a965 	.word	0x0800a965
 800a934:	0800a965 	.word	0x0800a965
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	0800a965 	.word	0x0800a965
 800a940:	0800a965 	.word	0x0800a965
 800a944:	0800a965 	.word	0x0800a965
 800a948:	0800a965 	.word	0x0800a965
 800a94c:	0800a965 	.word	0x0800a965
 800a950:	0800a965 	.word	0x0800a965
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a965 	.word	0x0800a965
 800a95c:	0800a965 	.word	0x0800a965
 800a960:	0800a965 	.word	0x0800a965
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a964:	bf00      	nop
  }

  return (USBD_OK);
 800a966:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	480f      	ldr	r0, [pc, #60]	; (800a9c0 <CDC_Receive_HS+0x4c>)
 800a982:	f7fe fbbf 	bl	8009104 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a986:	480e      	ldr	r0, [pc, #56]	; (800a9c0 <CDC_Receive_HS+0x4c>)
 800a988:	f7fe fc20 	bl	80091cc <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 800a98c:	2240      	movs	r2, #64	; 0x40
 800a98e:	2100      	movs	r1, #0
 800a990:	480c      	ldr	r0, [pc, #48]	; (800a9c4 <CDC_Receive_HS+0x50>)
 800a992:	f000 fcd5 	bl	800b340 <memset>
  uint8_t len = (uint8_t)*Len;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <CDC_Receive_HS+0x50>)
 800a9a4:	f000 fcbe 	bl	800b324 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fcc6 	bl	800b340 <memset>

  return (USBD_OK);
 800a9b4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	2400ade4 	.word	0x2400ade4
 800a9c4:	2400038c 	.word	0x2400038c

0800a9c8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a9d8:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <CDC_Transmit_HS+0x48>)
 800a9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e00b      	b.n	800aa06 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a9ee:	887b      	ldrh	r3, [r7, #2]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4806      	ldr	r0, [pc, #24]	; (800aa10 <CDC_Transmit_HS+0x48>)
 800a9f6:	f7fe fb63 	bl	80090c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <CDC_Transmit_HS+0x48>)
 800a9fc:	f7fe fba0 	bl	8009140 <USBD_CDC_TransmitPacket>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	2400ade4 	.word	0x2400ade4

0800aa14 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800aa26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	371c      	adds	r7, #28
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
	...

0800aa38 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2212      	movs	r2, #18
 800aa48:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800aa4a:	4b03      	ldr	r3, [pc, #12]	; (800aa58 <USBD_HS_DeviceDescriptor+0x20>)
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	2400016c 	.word	0x2400016c

0800aa5c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa6e:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	24000180 	.word	0x24000180

0800aa80 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d105      	bne.n	800aa9e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	4907      	ldr	r1, [pc, #28]	; (800aab4 <USBD_HS_ProductStrDescriptor+0x34>)
 800aa96:	4808      	ldr	r0, [pc, #32]	; (800aab8 <USBD_HS_ProductStrDescriptor+0x38>)
 800aa98:	f7ff fde0 	bl	800a65c <USBD_GetString>
 800aa9c:	e004      	b.n	800aaa8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4904      	ldr	r1, [pc, #16]	; (800aab4 <USBD_HS_ProductStrDescriptor+0x34>)
 800aaa2:	4805      	ldr	r0, [pc, #20]	; (800aab8 <USBD_HS_ProductStrDescriptor+0x38>)
 800aaa4:	f7ff fdda 	bl	800a65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaa8:	4b02      	ldr	r3, [pc, #8]	; (800aab4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	2400c0c0 	.word	0x2400c0c0
 800aab8:	0800c938 	.word	0x0800c938

0800aabc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	4603      	mov	r3, r0
 800aac4:	6039      	str	r1, [r7, #0]
 800aac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	4904      	ldr	r1, [pc, #16]	; (800aadc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800aacc:	4804      	ldr	r0, [pc, #16]	; (800aae0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800aace:	f7ff fdc5 	bl	800a65c <USBD_GetString>
  return USBD_StrDesc;
 800aad2:	4b02      	ldr	r3, [pc, #8]	; (800aadc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	2400c0c0 	.word	0x2400c0c0
 800aae0:	0800c950 	.word	0x0800c950

0800aae4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	221a      	movs	r2, #26
 800aaf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaf6:	f000 f843 	bl	800ab80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aafa:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	24000184 	.word	0x24000184

0800ab08 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4907      	ldr	r1, [pc, #28]	; (800ab3c <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab1e:	4808      	ldr	r0, [pc, #32]	; (800ab40 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab20:	f7ff fd9c 	bl	800a65c <USBD_GetString>
 800ab24:	e004      	b.n	800ab30 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4904      	ldr	r1, [pc, #16]	; (800ab3c <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab2a:	4805      	ldr	r0, [pc, #20]	; (800ab40 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab2c:	f7ff fd96 	bl	800a65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab30:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2400c0c0 	.word	0x2400c0c0
 800ab40:	0800c964 	.word	0x0800c964

0800ab44 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d105      	bne.n	800ab62 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	4907      	ldr	r1, [pc, #28]	; (800ab78 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab5a:	4808      	ldr	r0, [pc, #32]	; (800ab7c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab5c:	f7ff fd7e 	bl	800a65c <USBD_GetString>
 800ab60:	e004      	b.n	800ab6c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4904      	ldr	r1, [pc, #16]	; (800ab78 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab66:	4805      	ldr	r0, [pc, #20]	; (800ab7c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab68:	f7ff fd78 	bl	800a65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab6c:	4b02      	ldr	r3, [pc, #8]	; (800ab78 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	2400c0c0 	.word	0x2400c0c0
 800ab7c:	0800c970 	.word	0x0800c970

0800ab80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <Get_SerialNum+0x44>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab8c:	4b0e      	ldr	r3, [pc, #56]	; (800abc8 <Get_SerialNum+0x48>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab92:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <Get_SerialNum+0x4c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aba6:	2208      	movs	r2, #8
 800aba8:	4909      	ldr	r1, [pc, #36]	; (800abd0 <Get_SerialNum+0x50>)
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f814 	bl	800abd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abb0:	2204      	movs	r2, #4
 800abb2:	4908      	ldr	r1, [pc, #32]	; (800abd4 <Get_SerialNum+0x54>)
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f000 f80f 	bl	800abd8 <IntToUnicode>
  }
}
 800abba:	bf00      	nop
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	1ff1e800 	.word	0x1ff1e800
 800abc8:	1ff1e804 	.word	0x1ff1e804
 800abcc:	1ff1e808 	.word	0x1ff1e808
 800abd0:	24000186 	.word	0x24000186
 800abd4:	24000196 	.word	0x24000196

0800abd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	4613      	mov	r3, r2
 800abe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abea:	2300      	movs	r3, #0
 800abec:	75fb      	strb	r3, [r7, #23]
 800abee:	e027      	b.n	800ac40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	0f1b      	lsrs	r3, r3, #28
 800abf4:	2b09      	cmp	r3, #9
 800abf6:	d80b      	bhi.n	800ac10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	0f1b      	lsrs	r3, r3, #28
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4619      	mov	r1, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	440b      	add	r3, r1
 800ac08:	3230      	adds	r2, #48	; 0x30
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	701a      	strb	r2, [r3, #0]
 800ac0e:	e00a      	b.n	800ac26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	0f1b      	lsrs	r3, r3, #28
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	440b      	add	r3, r1
 800ac20:	3237      	adds	r2, #55	; 0x37
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	3301      	adds	r3, #1
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	4413      	add	r3, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	75fb      	strb	r3, [r7, #23]
 800ac40:	7dfa      	ldrb	r2, [r7, #23]
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d3d3      	bcc.n	800abf0 <IntToUnicode+0x18>
  }
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
	...

0800ac58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b0b6      	sub	sp, #216	; 0xd8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	605a      	str	r2, [r3, #4]
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	60da      	str	r2, [r3, #12]
 800ac6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac70:	f107 0310 	add.w	r3, r7, #16
 800ac74:	22b4      	movs	r2, #180	; 0xb4
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fb61 	bl	800b340 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a2b      	ldr	r2, [pc, #172]	; (800ad30 <HAL_PCD_MspInit+0xd8>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d14e      	bne.n	800ad26 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ac88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ac8e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800ac92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac96:	f107 0310 	add.w	r3, r7, #16
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fa f80c 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800aca6:	f7f6 ff55 	bl	8001b54 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800acaa:	f7f9 f8e7 	bl	8003e7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acae:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800acb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acb4:	4a1f      	ldr	r2, [pc, #124]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acbe:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800acc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800accc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd4:	2302      	movs	r3, #2
 800acd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ace0:	2300      	movs	r3, #0
 800ace2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ace6:	230a      	movs	r3, #10
 800ace8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800acec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4811      	ldr	r0, [pc, #68]	; (800ad38 <HAL_PCD_MspInit+0xe0>)
 800acf4:	f7f7 fbd8 	bl	80024a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800acf8:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800acfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800acfe:	4a0d      	ldr	r2, [pc, #52]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800ad00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <HAL_PCD_MspInit+0xdc>)
 800ad0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ad0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad12:	60bb      	str	r3, [r7, #8]
 800ad14:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ad16:	2200      	movs	r2, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	204d      	movs	r0, #77	; 0x4d
 800ad1c:	f7f7 fb8f 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ad20:	204d      	movs	r0, #77	; 0x4d
 800ad22:	f7f7 fba6 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ad26:	bf00      	nop
 800ad28:	37d8      	adds	r7, #216	; 0xd8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	40040000 	.word	0x40040000
 800ad34:	58024400 	.word	0x58024400
 800ad38:	58020000 	.word	0x58020000

0800ad3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f7fe fb23 	bl	800939e <USBD_LL_SetupStage>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad72:	78fa      	ldrb	r2, [r7, #3]
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	4613      	mov	r3, r2
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	78fb      	ldrb	r3, [r7, #3]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f7fe fb5d 	bl	8009448 <USBD_LL_DataOutStage>
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ada8:	78fa      	ldrb	r2, [r7, #3]
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	334c      	adds	r3, #76	; 0x4c
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	4619      	mov	r1, r3
 800adbe:	f7fe fbf6 	bl	80095ae <USBD_LL_DataInStage>
}
 800adc2:	bf00      	nop
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800add8:	4618      	mov	r0, r3
 800adda:	f7fe fd2a 	bl	8009832 <USBD_LL_SOF>
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adee:	2301      	movs	r3, #1
 800adf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
 800adfe:	e008      	b.n	800ae12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d102      	bne.n	800ae0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
 800ae0c:	e001      	b.n	800ae12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae0e:	f7f6 fea1 	bl	8001b54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae18:	7bfa      	ldrb	r2, [r7, #15]
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fcca 	bl	80097b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe fc72 	bl	8009712 <USBD_LL_Reset>
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
	...

0800ae38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fcc5 	bl	80097d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6812      	ldr	r2, [r2, #0]
 800ae5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae5e:	f043 0301 	orr.w	r3, r3, #1
 800ae62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae6c:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <HAL_PCD_SuspendCallback+0x48>)
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	4a03      	ldr	r2, [pc, #12]	; (800ae80 <HAL_PCD_SuspendCallback+0x48>)
 800ae72:	f043 0306 	orr.w	r3, r3, #6
 800ae76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	e000ed00 	.word	0xe000ed00

0800ae84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe fcb5 	bl	8009802 <USBD_LL_Resume>
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeb2:	78fa      	ldrb	r2, [r7, #3]
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe fd0d 	bl	80098d6 <USBD_LL_IsoOUTIncomplete>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fcc9 	bl	8009872 <USBD_LL_IsoINIncomplete>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fd1f 	bl	800993a <USBD_LL_DevConnected>
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fd1c 	bl	8009950 <USBD_LL_DevDisconnected>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d140      	bne.n	800afb2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800af30:	4a22      	ldr	r2, [pc, #136]	; (800afbc <USBD_LL_Init+0x9c>)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a20      	ldr	r2, [pc, #128]	; (800afbc <USBD_LL_Init+0x9c>)
 800af3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800af40:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <USBD_LL_Init+0x9c>)
 800af42:	4a1f      	ldr	r2, [pc, #124]	; (800afc0 <USBD_LL_Init+0xa0>)
 800af44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800af46:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <USBD_LL_Init+0x9c>)
 800af48:	2209      	movs	r2, #9
 800af4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800af4c:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <USBD_LL_Init+0x9c>)
 800af4e:	2202      	movs	r2, #2
 800af50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <USBD_LL_Init+0x9c>)
 800af54:	2200      	movs	r2, #0
 800af56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800af58:	4b18      	ldr	r3, [pc, #96]	; (800afbc <USBD_LL_Init+0x9c>)
 800af5a:	2202      	movs	r2, #2
 800af5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800af5e:	4b17      	ldr	r3, [pc, #92]	; (800afbc <USBD_LL_Init+0x9c>)
 800af60:	2200      	movs	r2, #0
 800af62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <USBD_LL_Init+0x9c>)
 800af66:	2200      	movs	r2, #0
 800af68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800af6a:	4b14      	ldr	r3, [pc, #80]	; (800afbc <USBD_LL_Init+0x9c>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800af70:	4b12      	ldr	r3, [pc, #72]	; (800afbc <USBD_LL_Init+0x9c>)
 800af72:	2200      	movs	r2, #0
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800af76:	4b11      	ldr	r3, [pc, #68]	; (800afbc <USBD_LL_Init+0x9c>)
 800af78:	2200      	movs	r2, #0
 800af7a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800af7c:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <USBD_LL_Init+0x9c>)
 800af7e:	2200      	movs	r2, #0
 800af80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800af82:	480e      	ldr	r0, [pc, #56]	; (800afbc <USBD_LL_Init+0x9c>)
 800af84:	f7f7 fc6b 	bl	800285e <HAL_PCD_Init>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800af8e:	f7f6 fde1 	bl	8001b54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800af92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af96:	4809      	ldr	r0, [pc, #36]	; (800afbc <USBD_LL_Init+0x9c>)
 800af98:	f7f8 fef5 	bl	8003d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800af9c:	2280      	movs	r2, #128	; 0x80
 800af9e:	2100      	movs	r1, #0
 800afa0:	4806      	ldr	r0, [pc, #24]	; (800afbc <USBD_LL_Init+0x9c>)
 800afa2:	f7f8 fea9 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800afa6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800afaa:	2101      	movs	r1, #1
 800afac:	4803      	ldr	r0, [pc, #12]	; (800afbc <USBD_LL_Init+0x9c>)
 800afae:	f7f8 fea3 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	2400c2c0 	.word	0x2400c2c0
 800afc0:	40040000 	.word	0x40040000

0800afc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afda:	4618      	mov	r0, r3
 800afdc:	f7f7 fd63 	bl	8002aa6 <HAL_PCD_Start>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f942 	bl	800b270 <USBD_Get_USB_Status>
 800afec:	4603      	mov	r3, r0
 800afee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	461a      	mov	r2, r3
 800b008:	4603      	mov	r3, r0
 800b00a:	70fb      	strb	r3, [r7, #3]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70bb      	strb	r3, [r7, #2]
 800b010:	4613      	mov	r3, r2
 800b012:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b022:	78bb      	ldrb	r3, [r7, #2]
 800b024:	883a      	ldrh	r2, [r7, #0]
 800b026:	78f9      	ldrb	r1, [r7, #3]
 800b028:	f7f8 fa61 	bl	80034ee <HAL_PCD_EP_Open>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f91c 	bl	800b270 <USBD_Get_USB_Status>
 800b038:	4603      	mov	r3, r0
 800b03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b060:	78fa      	ldrb	r2, [r7, #3]
 800b062:	4611      	mov	r1, r2
 800b064:	4618      	mov	r0, r3
 800b066:	f7f8 faaa 	bl	80035be <HAL_PCD_EP_Close>
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	4618      	mov	r0, r3
 800b072:	f000 f8fd 	bl	800b270 <USBD_Get_USB_Status>
 800b076:	4603      	mov	r3, r0
 800b078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b09e:	78fa      	ldrb	r2, [r7, #3]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7f8 fb82 	bl	80037ac <HAL_PCD_EP_SetStall>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 f8de 	bl	800b270 <USBD_Get_USB_Status>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f8 fbc7 	bl	8003874 <HAL_PCD_EP_ClrStall>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 f8bf 	bl	800b270 <USBD_Get_USB_Status>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b112:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	da0b      	bge.n	800b134 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b11c:	78fb      	ldrb	r3, [r7, #3]
 800b11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	4613      	mov	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	440b      	add	r3, r1
 800b12e:	333e      	adds	r3, #62	; 0x3e
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	e00b      	b.n	800b14c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b13a:	68f9      	ldr	r1, [r7, #12]
 800b13c:	4613      	mov	r3, r2
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	440b      	add	r3, r1
 800b146:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b14a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7f8 f994 	bl	80034a4 <HAL_PCD_SetAddress>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	4618      	mov	r0, r3
 800b184:	f000 f874 	bl	800b270 <USBD_Get_USB_Status>
 800b188:	4603      	mov	r3, r0
 800b18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b086      	sub	sp, #24
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1b4:	7af9      	ldrb	r1, [r7, #11]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	f7f8 faad 	bl	8003718 <HAL_PCD_EP_Transmit>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 f853 	bl	800b270 <USBD_Get_USB_Status>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1f6:	7af9      	ldrb	r1, [r7, #11]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	f7f8 fa29 	bl	8003652 <HAL_PCD_EP_Receive>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f832 	bl	800b270 <USBD_Get_USB_Status>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b210:	7dbb      	ldrb	r3, [r7, #22]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b22c:	78fa      	ldrb	r2, [r7, #3]
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7f8 fa59 	bl	80036e8 <HAL_PCD_EP_GetRxCount>
 800b236:	4603      	mov	r3, r0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b248:	4b03      	ldr	r3, [pc, #12]	; (800b258 <USBD_static_malloc+0x18>)
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	2400c7cc 	.word	0x2400c7cc

0800b25c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]

}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d817      	bhi.n	800b2b4 <USBD_Get_USB_Status+0x44>
 800b284:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <USBD_Get_USB_Status+0x1c>)
 800b286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28a:	bf00      	nop
 800b28c:	0800b29d 	.word	0x0800b29d
 800b290:	0800b2a3 	.word	0x0800b2a3
 800b294:	0800b2a9 	.word	0x0800b2a9
 800b298:	0800b2af 	.word	0x0800b2af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a0:	e00b      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a6:	e008      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ac:	e005      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b2:	e002      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b8:	bf00      	nop
  }
  return usb_status;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <atoi>:
 800b2c8:	220a      	movs	r2, #10
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f000 b93e 	b.w	800b54c <strtol>

0800b2d0 <__errno>:
 800b2d0:	4b01      	ldr	r3, [pc, #4]	; (800b2d8 <__errno+0x8>)
 800b2d2:	6818      	ldr	r0, [r3, #0]
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	240001a0 	.word	0x240001a0

0800b2dc <__libc_init_array>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4d0d      	ldr	r5, [pc, #52]	; (800b314 <__libc_init_array+0x38>)
 800b2e0:	4c0d      	ldr	r4, [pc, #52]	; (800b318 <__libc_init_array+0x3c>)
 800b2e2:	1b64      	subs	r4, r4, r5
 800b2e4:	10a4      	asrs	r4, r4, #2
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	42a6      	cmp	r6, r4
 800b2ea:	d109      	bne.n	800b300 <__libc_init_array+0x24>
 800b2ec:	4d0b      	ldr	r5, [pc, #44]	; (800b31c <__libc_init_array+0x40>)
 800b2ee:	4c0c      	ldr	r4, [pc, #48]	; (800b320 <__libc_init_array+0x44>)
 800b2f0:	f001 fade 	bl	800c8b0 <_init>
 800b2f4:	1b64      	subs	r4, r4, r5
 800b2f6:	10a4      	asrs	r4, r4, #2
 800b2f8:	2600      	movs	r6, #0
 800b2fa:	42a6      	cmp	r6, r4
 800b2fc:	d105      	bne.n	800b30a <__libc_init_array+0x2e>
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	f855 3b04 	ldr.w	r3, [r5], #4
 800b304:	4798      	blx	r3
 800b306:	3601      	adds	r6, #1
 800b308:	e7ee      	b.n	800b2e8 <__libc_init_array+0xc>
 800b30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b30e:	4798      	blx	r3
 800b310:	3601      	adds	r6, #1
 800b312:	e7f2      	b.n	800b2fa <__libc_init_array+0x1e>
 800b314:	0800cbe0 	.word	0x0800cbe0
 800b318:	0800cbe0 	.word	0x0800cbe0
 800b31c:	0800cbe0 	.word	0x0800cbe0
 800b320:	0800cbe4 	.word	0x0800cbe4

0800b324 <memcpy>:
 800b324:	440a      	add	r2, r1
 800b326:	4291      	cmp	r1, r2
 800b328:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b32c:	d100      	bne.n	800b330 <memcpy+0xc>
 800b32e:	4770      	bx	lr
 800b330:	b510      	push	{r4, lr}
 800b332:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b33a:	4291      	cmp	r1, r2
 800b33c:	d1f9      	bne.n	800b332 <memcpy+0xe>
 800b33e:	bd10      	pop	{r4, pc}

0800b340 <memset>:
 800b340:	4402      	add	r2, r0
 800b342:	4603      	mov	r3, r0
 800b344:	4293      	cmp	r3, r2
 800b346:	d100      	bne.n	800b34a <memset+0xa>
 800b348:	4770      	bx	lr
 800b34a:	f803 1b01 	strb.w	r1, [r3], #1
 800b34e:	e7f9      	b.n	800b344 <memset+0x4>

0800b350 <siprintf>:
 800b350:	b40e      	push	{r1, r2, r3}
 800b352:	b500      	push	{lr}
 800b354:	b09c      	sub	sp, #112	; 0x70
 800b356:	ab1d      	add	r3, sp, #116	; 0x74
 800b358:	9002      	str	r0, [sp, #8]
 800b35a:	9006      	str	r0, [sp, #24]
 800b35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b360:	4809      	ldr	r0, [pc, #36]	; (800b388 <siprintf+0x38>)
 800b362:	9107      	str	r1, [sp, #28]
 800b364:	9104      	str	r1, [sp, #16]
 800b366:	4909      	ldr	r1, [pc, #36]	; (800b38c <siprintf+0x3c>)
 800b368:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36c:	9105      	str	r1, [sp, #20]
 800b36e:	6800      	ldr	r0, [r0, #0]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	a902      	add	r1, sp, #8
 800b374:	f000 fa68 	bl	800b848 <_svfiprintf_r>
 800b378:	9b02      	ldr	r3, [sp, #8]
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	b01c      	add	sp, #112	; 0x70
 800b380:	f85d eb04 	ldr.w	lr, [sp], #4
 800b384:	b003      	add	sp, #12
 800b386:	4770      	bx	lr
 800b388:	240001a0 	.word	0x240001a0
 800b38c:	ffff0208 	.word	0xffff0208

0800b390 <strtok>:
 800b390:	4b16      	ldr	r3, [pc, #88]	; (800b3ec <strtok+0x5c>)
 800b392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b398:	4605      	mov	r5, r0
 800b39a:	b9fc      	cbnz	r4, 800b3dc <strtok+0x4c>
 800b39c:	2050      	movs	r0, #80	; 0x50
 800b39e:	9101      	str	r1, [sp, #4]
 800b3a0:	f000 f90e 	bl	800b5c0 <malloc>
 800b3a4:	9901      	ldr	r1, [sp, #4]
 800b3a6:	65b0      	str	r0, [r6, #88]	; 0x58
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	b920      	cbnz	r0, 800b3b6 <strtok+0x26>
 800b3ac:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <strtok+0x60>)
 800b3ae:	4811      	ldr	r0, [pc, #68]	; (800b3f4 <strtok+0x64>)
 800b3b0:	2157      	movs	r1, #87	; 0x57
 800b3b2:	f000 f8d5 	bl	800b560 <__assert_func>
 800b3b6:	e9c0 4400 	strd	r4, r4, [r0]
 800b3ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b3c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b3c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b3ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b3ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b3d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b3d6:	6184      	str	r4, [r0, #24]
 800b3d8:	7704      	strb	r4, [r0, #28]
 800b3da:	6244      	str	r4, [r0, #36]	; 0x24
 800b3dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	b002      	add	sp, #8
 800b3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3e8:	f000 b806 	b.w	800b3f8 <__strtok_r>
 800b3ec:	240001a0 	.word	0x240001a0
 800b3f0:	0800c99c 	.word	0x0800c99c
 800b3f4:	0800c9b3 	.word	0x0800c9b3

0800b3f8 <__strtok_r>:
 800b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fa:	b908      	cbnz	r0, 800b400 <__strtok_r+0x8>
 800b3fc:	6810      	ldr	r0, [r2, #0]
 800b3fe:	b188      	cbz	r0, 800b424 <__strtok_r+0x2c>
 800b400:	4604      	mov	r4, r0
 800b402:	4620      	mov	r0, r4
 800b404:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b408:	460f      	mov	r7, r1
 800b40a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b40e:	b91e      	cbnz	r6, 800b418 <__strtok_r+0x20>
 800b410:	b965      	cbnz	r5, 800b42c <__strtok_r+0x34>
 800b412:	6015      	str	r5, [r2, #0]
 800b414:	4628      	mov	r0, r5
 800b416:	e005      	b.n	800b424 <__strtok_r+0x2c>
 800b418:	42b5      	cmp	r5, r6
 800b41a:	d1f6      	bne.n	800b40a <__strtok_r+0x12>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f0      	bne.n	800b402 <__strtok_r+0xa>
 800b420:	6014      	str	r4, [r2, #0]
 800b422:	7003      	strb	r3, [r0, #0]
 800b424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b426:	461c      	mov	r4, r3
 800b428:	e00c      	b.n	800b444 <__strtok_r+0x4c>
 800b42a:	b915      	cbnz	r5, 800b432 <__strtok_r+0x3a>
 800b42c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b430:	460e      	mov	r6, r1
 800b432:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b436:	42ab      	cmp	r3, r5
 800b438:	d1f7      	bne.n	800b42a <__strtok_r+0x32>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0f3      	beq.n	800b426 <__strtok_r+0x2e>
 800b43e:	2300      	movs	r3, #0
 800b440:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b444:	6014      	str	r4, [r2, #0]
 800b446:	e7ed      	b.n	800b424 <__strtok_r+0x2c>

0800b448 <_strtol_l.constprop.0>:
 800b448:	2b01      	cmp	r3, #1
 800b44a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44e:	d001      	beq.n	800b454 <_strtol_l.constprop.0+0xc>
 800b450:	2b24      	cmp	r3, #36	; 0x24
 800b452:	d906      	bls.n	800b462 <_strtol_l.constprop.0+0x1a>
 800b454:	f7ff ff3c 	bl	800b2d0 <__errno>
 800b458:	2316      	movs	r3, #22
 800b45a:	6003      	str	r3, [r0, #0]
 800b45c:	2000      	movs	r0, #0
 800b45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b462:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b548 <_strtol_l.constprop.0+0x100>
 800b466:	460d      	mov	r5, r1
 800b468:	462e      	mov	r6, r5
 800b46a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b46e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b472:	f017 0708 	ands.w	r7, r7, #8
 800b476:	d1f7      	bne.n	800b468 <_strtol_l.constprop.0+0x20>
 800b478:	2c2d      	cmp	r4, #45	; 0x2d
 800b47a:	d132      	bne.n	800b4e2 <_strtol_l.constprop.0+0x9a>
 800b47c:	782c      	ldrb	r4, [r5, #0]
 800b47e:	2701      	movs	r7, #1
 800b480:	1cb5      	adds	r5, r6, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d05b      	beq.n	800b53e <_strtol_l.constprop.0+0xf6>
 800b486:	2b10      	cmp	r3, #16
 800b488:	d109      	bne.n	800b49e <_strtol_l.constprop.0+0x56>
 800b48a:	2c30      	cmp	r4, #48	; 0x30
 800b48c:	d107      	bne.n	800b49e <_strtol_l.constprop.0+0x56>
 800b48e:	782c      	ldrb	r4, [r5, #0]
 800b490:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b494:	2c58      	cmp	r4, #88	; 0x58
 800b496:	d14d      	bne.n	800b534 <_strtol_l.constprop.0+0xec>
 800b498:	786c      	ldrb	r4, [r5, #1]
 800b49a:	2310      	movs	r3, #16
 800b49c:	3502      	adds	r5, #2
 800b49e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b4a6:	f04f 0c00 	mov.w	ip, #0
 800b4aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4ae:	4666      	mov	r6, ip
 800b4b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b4b8:	f1be 0f09 	cmp.w	lr, #9
 800b4bc:	d816      	bhi.n	800b4ec <_strtol_l.constprop.0+0xa4>
 800b4be:	4674      	mov	r4, lr
 800b4c0:	42a3      	cmp	r3, r4
 800b4c2:	dd24      	ble.n	800b50e <_strtol_l.constprop.0+0xc6>
 800b4c4:	f1bc 0f00 	cmp.w	ip, #0
 800b4c8:	db1e      	blt.n	800b508 <_strtol_l.constprop.0+0xc0>
 800b4ca:	45b1      	cmp	r9, r6
 800b4cc:	d31c      	bcc.n	800b508 <_strtol_l.constprop.0+0xc0>
 800b4ce:	d101      	bne.n	800b4d4 <_strtol_l.constprop.0+0x8c>
 800b4d0:	45a2      	cmp	sl, r4
 800b4d2:	db19      	blt.n	800b508 <_strtol_l.constprop.0+0xc0>
 800b4d4:	fb06 4603 	mla	r6, r6, r3, r4
 800b4d8:	f04f 0c01 	mov.w	ip, #1
 800b4dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4e0:	e7e8      	b.n	800b4b4 <_strtol_l.constprop.0+0x6c>
 800b4e2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4e4:	bf04      	itt	eq
 800b4e6:	782c      	ldrbeq	r4, [r5, #0]
 800b4e8:	1cb5      	addeq	r5, r6, #2
 800b4ea:	e7ca      	b.n	800b482 <_strtol_l.constprop.0+0x3a>
 800b4ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b4f0:	f1be 0f19 	cmp.w	lr, #25
 800b4f4:	d801      	bhi.n	800b4fa <_strtol_l.constprop.0+0xb2>
 800b4f6:	3c37      	subs	r4, #55	; 0x37
 800b4f8:	e7e2      	b.n	800b4c0 <_strtol_l.constprop.0+0x78>
 800b4fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b4fe:	f1be 0f19 	cmp.w	lr, #25
 800b502:	d804      	bhi.n	800b50e <_strtol_l.constprop.0+0xc6>
 800b504:	3c57      	subs	r4, #87	; 0x57
 800b506:	e7db      	b.n	800b4c0 <_strtol_l.constprop.0+0x78>
 800b508:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b50c:	e7e6      	b.n	800b4dc <_strtol_l.constprop.0+0x94>
 800b50e:	f1bc 0f00 	cmp.w	ip, #0
 800b512:	da05      	bge.n	800b520 <_strtol_l.constprop.0+0xd8>
 800b514:	2322      	movs	r3, #34	; 0x22
 800b516:	6003      	str	r3, [r0, #0]
 800b518:	4646      	mov	r6, r8
 800b51a:	b942      	cbnz	r2, 800b52e <_strtol_l.constprop.0+0xe6>
 800b51c:	4630      	mov	r0, r6
 800b51e:	e79e      	b.n	800b45e <_strtol_l.constprop.0+0x16>
 800b520:	b107      	cbz	r7, 800b524 <_strtol_l.constprop.0+0xdc>
 800b522:	4276      	negs	r6, r6
 800b524:	2a00      	cmp	r2, #0
 800b526:	d0f9      	beq.n	800b51c <_strtol_l.constprop.0+0xd4>
 800b528:	f1bc 0f00 	cmp.w	ip, #0
 800b52c:	d000      	beq.n	800b530 <_strtol_l.constprop.0+0xe8>
 800b52e:	1e69      	subs	r1, r5, #1
 800b530:	6011      	str	r1, [r2, #0]
 800b532:	e7f3      	b.n	800b51c <_strtol_l.constprop.0+0xd4>
 800b534:	2430      	movs	r4, #48	; 0x30
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1b1      	bne.n	800b49e <_strtol_l.constprop.0+0x56>
 800b53a:	2308      	movs	r3, #8
 800b53c:	e7af      	b.n	800b49e <_strtol_l.constprop.0+0x56>
 800b53e:	2c30      	cmp	r4, #48	; 0x30
 800b540:	d0a5      	beq.n	800b48e <_strtol_l.constprop.0+0x46>
 800b542:	230a      	movs	r3, #10
 800b544:	e7ab      	b.n	800b49e <_strtol_l.constprop.0+0x56>
 800b546:	bf00      	nop
 800b548:	0800ca4d 	.word	0x0800ca4d

0800b54c <strtol>:
 800b54c:	4613      	mov	r3, r2
 800b54e:	460a      	mov	r2, r1
 800b550:	4601      	mov	r1, r0
 800b552:	4802      	ldr	r0, [pc, #8]	; (800b55c <strtol+0x10>)
 800b554:	6800      	ldr	r0, [r0, #0]
 800b556:	f7ff bf77 	b.w	800b448 <_strtol_l.constprop.0>
 800b55a:	bf00      	nop
 800b55c:	240001a0 	.word	0x240001a0

0800b560 <__assert_func>:
 800b560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b562:	4614      	mov	r4, r2
 800b564:	461a      	mov	r2, r3
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <__assert_func+0x2c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4605      	mov	r5, r0
 800b56c:	68d8      	ldr	r0, [r3, #12]
 800b56e:	b14c      	cbz	r4, 800b584 <__assert_func+0x24>
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <__assert_func+0x30>)
 800b572:	9100      	str	r1, [sp, #0]
 800b574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b578:	4906      	ldr	r1, [pc, #24]	; (800b594 <__assert_func+0x34>)
 800b57a:	462b      	mov	r3, r5
 800b57c:	f000 f80e 	bl	800b59c <fiprintf>
 800b580:	f000 fe20 	bl	800c1c4 <abort>
 800b584:	4b04      	ldr	r3, [pc, #16]	; (800b598 <__assert_func+0x38>)
 800b586:	461c      	mov	r4, r3
 800b588:	e7f3      	b.n	800b572 <__assert_func+0x12>
 800b58a:	bf00      	nop
 800b58c:	240001a0 	.word	0x240001a0
 800b590:	0800ca10 	.word	0x0800ca10
 800b594:	0800ca1d 	.word	0x0800ca1d
 800b598:	0800ca4b 	.word	0x0800ca4b

0800b59c <fiprintf>:
 800b59c:	b40e      	push	{r1, r2, r3}
 800b59e:	b503      	push	{r0, r1, lr}
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	4805      	ldr	r0, [pc, #20]	; (800b5bc <fiprintf+0x20>)
 800b5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	f000 fa75 	bl	800ba9c <_vfiprintf_r>
 800b5b2:	b002      	add	sp, #8
 800b5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5b8:	b003      	add	sp, #12
 800b5ba:	4770      	bx	lr
 800b5bc:	240001a0 	.word	0x240001a0

0800b5c0 <malloc>:
 800b5c0:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <malloc+0xc>)
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	6818      	ldr	r0, [r3, #0]
 800b5c6:	f000 b86f 	b.w	800b6a8 <_malloc_r>
 800b5ca:	bf00      	nop
 800b5cc:	240001a0 	.word	0x240001a0

0800b5d0 <_free_r>:
 800b5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d044      	beq.n	800b660 <_free_r+0x90>
 800b5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5da:	9001      	str	r0, [sp, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f1a1 0404 	sub.w	r4, r1, #4
 800b5e2:	bfb8      	it	lt
 800b5e4:	18e4      	addlt	r4, r4, r3
 800b5e6:	f001 f82f 	bl	800c648 <__malloc_lock>
 800b5ea:	4a1e      	ldr	r2, [pc, #120]	; (800b664 <_free_r+0x94>)
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	b933      	cbnz	r3, 800b600 <_free_r+0x30>
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	6014      	str	r4, [r2, #0]
 800b5f6:	b003      	add	sp, #12
 800b5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5fc:	f001 b82a 	b.w	800c654 <__malloc_unlock>
 800b600:	42a3      	cmp	r3, r4
 800b602:	d908      	bls.n	800b616 <_free_r+0x46>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf01      	itttt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	1949      	addeq	r1, r1, r5
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	e7ed      	b.n	800b5f2 <_free_r+0x22>
 800b616:	461a      	mov	r2, r3
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	b10b      	cbz	r3, 800b620 <_free_r+0x50>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d9fa      	bls.n	800b616 <_free_r+0x46>
 800b620:	6811      	ldr	r1, [r2, #0]
 800b622:	1855      	adds	r5, r2, r1
 800b624:	42a5      	cmp	r5, r4
 800b626:	d10b      	bne.n	800b640 <_free_r+0x70>
 800b628:	6824      	ldr	r4, [r4, #0]
 800b62a:	4421      	add	r1, r4
 800b62c:	1854      	adds	r4, r2, r1
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	d1e0      	bne.n	800b5f6 <_free_r+0x26>
 800b634:	681c      	ldr	r4, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	6053      	str	r3, [r2, #4]
 800b63a:	4421      	add	r1, r4
 800b63c:	6011      	str	r1, [r2, #0]
 800b63e:	e7da      	b.n	800b5f6 <_free_r+0x26>
 800b640:	d902      	bls.n	800b648 <_free_r+0x78>
 800b642:	230c      	movs	r3, #12
 800b644:	6003      	str	r3, [r0, #0]
 800b646:	e7d6      	b.n	800b5f6 <_free_r+0x26>
 800b648:	6825      	ldr	r5, [r4, #0]
 800b64a:	1961      	adds	r1, r4, r5
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf04      	itt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	bf04      	itt	eq
 800b658:	1949      	addeq	r1, r1, r5
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	6054      	str	r4, [r2, #4]
 800b65e:	e7ca      	b.n	800b5f6 <_free_r+0x26>
 800b660:	b003      	add	sp, #12
 800b662:	bd30      	pop	{r4, r5, pc}
 800b664:	2400c9ec 	.word	0x2400c9ec

0800b668 <sbrk_aligned>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4e0e      	ldr	r6, [pc, #56]	; (800b6a4 <sbrk_aligned+0x3c>)
 800b66c:	460c      	mov	r4, r1
 800b66e:	6831      	ldr	r1, [r6, #0]
 800b670:	4605      	mov	r5, r0
 800b672:	b911      	cbnz	r1, 800b67a <sbrk_aligned+0x12>
 800b674:	f000 fcd6 	bl	800c024 <_sbrk_r>
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 fcd1 	bl	800c024 <_sbrk_r>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d00a      	beq.n	800b69c <sbrk_aligned+0x34>
 800b686:	1cc4      	adds	r4, r0, #3
 800b688:	f024 0403 	bic.w	r4, r4, #3
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d007      	beq.n	800b6a0 <sbrk_aligned+0x38>
 800b690:	1a21      	subs	r1, r4, r0
 800b692:	4628      	mov	r0, r5
 800b694:	f000 fcc6 	bl	800c024 <_sbrk_r>
 800b698:	3001      	adds	r0, #1
 800b69a:	d101      	bne.n	800b6a0 <sbrk_aligned+0x38>
 800b69c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	2400c9f0 	.word	0x2400c9f0

0800b6a8 <_malloc_r>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	1ccd      	adds	r5, r1, #3
 800b6ae:	f025 0503 	bic.w	r5, r5, #3
 800b6b2:	3508      	adds	r5, #8
 800b6b4:	2d0c      	cmp	r5, #12
 800b6b6:	bf38      	it	cc
 800b6b8:	250c      	movcc	r5, #12
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	4607      	mov	r7, r0
 800b6be:	db01      	blt.n	800b6c4 <_malloc_r+0x1c>
 800b6c0:	42a9      	cmp	r1, r5
 800b6c2:	d905      	bls.n	800b6d0 <_malloc_r+0x28>
 800b6c4:	230c      	movs	r3, #12
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d0:	4e2e      	ldr	r6, [pc, #184]	; (800b78c <_malloc_r+0xe4>)
 800b6d2:	f000 ffb9 	bl	800c648 <__malloc_lock>
 800b6d6:	6833      	ldr	r3, [r6, #0]
 800b6d8:	461c      	mov	r4, r3
 800b6da:	bb34      	cbnz	r4, 800b72a <_malloc_r+0x82>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f7ff ffc2 	bl	800b668 <sbrk_aligned>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	d14d      	bne.n	800b786 <_malloc_r+0xde>
 800b6ea:	6834      	ldr	r4, [r6, #0]
 800b6ec:	4626      	mov	r6, r4
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d140      	bne.n	800b774 <_malloc_r+0xcc>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	eb04 0803 	add.w	r8, r4, r3
 800b6fc:	f000 fc92 	bl	800c024 <_sbrk_r>
 800b700:	4580      	cmp	r8, r0
 800b702:	d13a      	bne.n	800b77a <_malloc_r+0xd2>
 800b704:	6821      	ldr	r1, [r4, #0]
 800b706:	3503      	adds	r5, #3
 800b708:	1a6d      	subs	r5, r5, r1
 800b70a:	f025 0503 	bic.w	r5, r5, #3
 800b70e:	3508      	adds	r5, #8
 800b710:	2d0c      	cmp	r5, #12
 800b712:	bf38      	it	cc
 800b714:	250c      	movcc	r5, #12
 800b716:	4629      	mov	r1, r5
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ffa5 	bl	800b668 <sbrk_aligned>
 800b71e:	3001      	adds	r0, #1
 800b720:	d02b      	beq.n	800b77a <_malloc_r+0xd2>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	442b      	add	r3, r5
 800b726:	6023      	str	r3, [r4, #0]
 800b728:	e00e      	b.n	800b748 <_malloc_r+0xa0>
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	1b52      	subs	r2, r2, r5
 800b72e:	d41e      	bmi.n	800b76e <_malloc_r+0xc6>
 800b730:	2a0b      	cmp	r2, #11
 800b732:	d916      	bls.n	800b762 <_malloc_r+0xba>
 800b734:	1961      	adds	r1, r4, r5
 800b736:	42a3      	cmp	r3, r4
 800b738:	6025      	str	r5, [r4, #0]
 800b73a:	bf18      	it	ne
 800b73c:	6059      	strne	r1, [r3, #4]
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	bf08      	it	eq
 800b742:	6031      	streq	r1, [r6, #0]
 800b744:	5162      	str	r2, [r4, r5]
 800b746:	604b      	str	r3, [r1, #4]
 800b748:	4638      	mov	r0, r7
 800b74a:	f104 060b 	add.w	r6, r4, #11
 800b74e:	f000 ff81 	bl	800c654 <__malloc_unlock>
 800b752:	f026 0607 	bic.w	r6, r6, #7
 800b756:	1d23      	adds	r3, r4, #4
 800b758:	1af2      	subs	r2, r6, r3
 800b75a:	d0b6      	beq.n	800b6ca <_malloc_r+0x22>
 800b75c:	1b9b      	subs	r3, r3, r6
 800b75e:	50a3      	str	r3, [r4, r2]
 800b760:	e7b3      	b.n	800b6ca <_malloc_r+0x22>
 800b762:	6862      	ldr	r2, [r4, #4]
 800b764:	42a3      	cmp	r3, r4
 800b766:	bf0c      	ite	eq
 800b768:	6032      	streq	r2, [r6, #0]
 800b76a:	605a      	strne	r2, [r3, #4]
 800b76c:	e7ec      	b.n	800b748 <_malloc_r+0xa0>
 800b76e:	4623      	mov	r3, r4
 800b770:	6864      	ldr	r4, [r4, #4]
 800b772:	e7b2      	b.n	800b6da <_malloc_r+0x32>
 800b774:	4634      	mov	r4, r6
 800b776:	6876      	ldr	r6, [r6, #4]
 800b778:	e7b9      	b.n	800b6ee <_malloc_r+0x46>
 800b77a:	230c      	movs	r3, #12
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	4638      	mov	r0, r7
 800b780:	f000 ff68 	bl	800c654 <__malloc_unlock>
 800b784:	e7a1      	b.n	800b6ca <_malloc_r+0x22>
 800b786:	6025      	str	r5, [r4, #0]
 800b788:	e7de      	b.n	800b748 <_malloc_r+0xa0>
 800b78a:	bf00      	nop
 800b78c:	2400c9ec 	.word	0x2400c9ec

0800b790 <__ssputs_r>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	688e      	ldr	r6, [r1, #8]
 800b796:	429e      	cmp	r6, r3
 800b798:	4682      	mov	sl, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	4690      	mov	r8, r2
 800b79e:	461f      	mov	r7, r3
 800b7a0:	d838      	bhi.n	800b814 <__ssputs_r+0x84>
 800b7a2:	898a      	ldrh	r2, [r1, #12]
 800b7a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7a8:	d032      	beq.n	800b810 <__ssputs_r+0x80>
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	6909      	ldr	r1, [r1, #16]
 800b7ae:	eba5 0901 	sub.w	r9, r5, r1
 800b7b2:	6965      	ldr	r5, [r4, #20]
 800b7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7bc:	3301      	adds	r3, #1
 800b7be:	444b      	add	r3, r9
 800b7c0:	106d      	asrs	r5, r5, #1
 800b7c2:	429d      	cmp	r5, r3
 800b7c4:	bf38      	it	cc
 800b7c6:	461d      	movcc	r5, r3
 800b7c8:	0553      	lsls	r3, r2, #21
 800b7ca:	d531      	bpl.n	800b830 <__ssputs_r+0xa0>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7ff ff6b 	bl	800b6a8 <_malloc_r>
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	b950      	cbnz	r0, 800b7ec <__ssputs_r+0x5c>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	f8ca 3000 	str.w	r3, [sl]
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ec:	6921      	ldr	r1, [r4, #16]
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	f7ff fd98 	bl	800b324 <memcpy>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	6126      	str	r6, [r4, #16]
 800b802:	6165      	str	r5, [r4, #20]
 800b804:	444e      	add	r6, r9
 800b806:	eba5 0509 	sub.w	r5, r5, r9
 800b80a:	6026      	str	r6, [r4, #0]
 800b80c:	60a5      	str	r5, [r4, #8]
 800b80e:	463e      	mov	r6, r7
 800b810:	42be      	cmp	r6, r7
 800b812:	d900      	bls.n	800b816 <__ssputs_r+0x86>
 800b814:	463e      	mov	r6, r7
 800b816:	6820      	ldr	r0, [r4, #0]
 800b818:	4632      	mov	r2, r6
 800b81a:	4641      	mov	r1, r8
 800b81c:	f000 fefa 	bl	800c614 <memmove>
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	1b9b      	subs	r3, r3, r6
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	4433      	add	r3, r6
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	2000      	movs	r0, #0
 800b82e:	e7db      	b.n	800b7e8 <__ssputs_r+0x58>
 800b830:	462a      	mov	r2, r5
 800b832:	f000 ff15 	bl	800c660 <_realloc_r>
 800b836:	4606      	mov	r6, r0
 800b838:	2800      	cmp	r0, #0
 800b83a:	d1e1      	bne.n	800b800 <__ssputs_r+0x70>
 800b83c:	6921      	ldr	r1, [r4, #16]
 800b83e:	4650      	mov	r0, sl
 800b840:	f7ff fec6 	bl	800b5d0 <_free_r>
 800b844:	e7c7      	b.n	800b7d6 <__ssputs_r+0x46>
	...

0800b848 <_svfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	4698      	mov	r8, r3
 800b84e:	898b      	ldrh	r3, [r1, #12]
 800b850:	061b      	lsls	r3, r3, #24
 800b852:	b09d      	sub	sp, #116	; 0x74
 800b854:	4607      	mov	r7, r0
 800b856:	460d      	mov	r5, r1
 800b858:	4614      	mov	r4, r2
 800b85a:	d50e      	bpl.n	800b87a <_svfiprintf_r+0x32>
 800b85c:	690b      	ldr	r3, [r1, #16]
 800b85e:	b963      	cbnz	r3, 800b87a <_svfiprintf_r+0x32>
 800b860:	2140      	movs	r1, #64	; 0x40
 800b862:	f7ff ff21 	bl	800b6a8 <_malloc_r>
 800b866:	6028      	str	r0, [r5, #0]
 800b868:	6128      	str	r0, [r5, #16]
 800b86a:	b920      	cbnz	r0, 800b876 <_svfiprintf_r+0x2e>
 800b86c:	230c      	movs	r3, #12
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b874:	e0d1      	b.n	800ba1a <_svfiprintf_r+0x1d2>
 800b876:	2340      	movs	r3, #64	; 0x40
 800b878:	616b      	str	r3, [r5, #20]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9309      	str	r3, [sp, #36]	; 0x24
 800b87e:	2320      	movs	r3, #32
 800b880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b884:	f8cd 800c 	str.w	r8, [sp, #12]
 800b888:	2330      	movs	r3, #48	; 0x30
 800b88a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba34 <_svfiprintf_r+0x1ec>
 800b88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b892:	f04f 0901 	mov.w	r9, #1
 800b896:	4623      	mov	r3, r4
 800b898:	469a      	mov	sl, r3
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	b10a      	cbz	r2, 800b8a4 <_svfiprintf_r+0x5c>
 800b8a0:	2a25      	cmp	r2, #37	; 0x25
 800b8a2:	d1f9      	bne.n	800b898 <_svfiprintf_r+0x50>
 800b8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a8:	d00b      	beq.n	800b8c2 <_svfiprintf_r+0x7a>
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff ff6d 	bl	800b790 <__ssputs_r>
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	f000 80aa 	beq.w	800ba10 <_svfiprintf_r+0x1c8>
 800b8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8be:	445a      	add	r2, fp
 800b8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 80a2 	beq.w	800ba10 <_svfiprintf_r+0x1c8>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d6:	f10a 0a01 	add.w	sl, sl, #1
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	9307      	str	r3, [sp, #28]
 800b8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e4:	4654      	mov	r4, sl
 800b8e6:	2205      	movs	r2, #5
 800b8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ec:	4851      	ldr	r0, [pc, #324]	; (800ba34 <_svfiprintf_r+0x1ec>)
 800b8ee:	f7f4 fd1f 	bl	8000330 <memchr>
 800b8f2:	9a04      	ldr	r2, [sp, #16]
 800b8f4:	b9d8      	cbnz	r0, 800b92e <_svfiprintf_r+0xe6>
 800b8f6:	06d0      	lsls	r0, r2, #27
 800b8f8:	bf44      	itt	mi
 800b8fa:	2320      	movmi	r3, #32
 800b8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b900:	0711      	lsls	r1, r2, #28
 800b902:	bf44      	itt	mi
 800b904:	232b      	movmi	r3, #43	; 0x2b
 800b906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90a:	f89a 3000 	ldrb.w	r3, [sl]
 800b90e:	2b2a      	cmp	r3, #42	; 0x2a
 800b910:	d015      	beq.n	800b93e <_svfiprintf_r+0xf6>
 800b912:	9a07      	ldr	r2, [sp, #28]
 800b914:	4654      	mov	r4, sl
 800b916:	2000      	movs	r0, #0
 800b918:	f04f 0c0a 	mov.w	ip, #10
 800b91c:	4621      	mov	r1, r4
 800b91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b922:	3b30      	subs	r3, #48	; 0x30
 800b924:	2b09      	cmp	r3, #9
 800b926:	d94e      	bls.n	800b9c6 <_svfiprintf_r+0x17e>
 800b928:	b1b0      	cbz	r0, 800b958 <_svfiprintf_r+0x110>
 800b92a:	9207      	str	r2, [sp, #28]
 800b92c:	e014      	b.n	800b958 <_svfiprintf_r+0x110>
 800b92e:	eba0 0308 	sub.w	r3, r0, r8
 800b932:	fa09 f303 	lsl.w	r3, r9, r3
 800b936:	4313      	orrs	r3, r2
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	46a2      	mov	sl, r4
 800b93c:	e7d2      	b.n	800b8e4 <_svfiprintf_r+0x9c>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	9103      	str	r1, [sp, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfbb      	ittet	lt
 800b94a:	425b      	neglt	r3, r3
 800b94c:	f042 0202 	orrlt.w	r2, r2, #2
 800b950:	9307      	strge	r3, [sp, #28]
 800b952:	9307      	strlt	r3, [sp, #28]
 800b954:	bfb8      	it	lt
 800b956:	9204      	strlt	r2, [sp, #16]
 800b958:	7823      	ldrb	r3, [r4, #0]
 800b95a:	2b2e      	cmp	r3, #46	; 0x2e
 800b95c:	d10c      	bne.n	800b978 <_svfiprintf_r+0x130>
 800b95e:	7863      	ldrb	r3, [r4, #1]
 800b960:	2b2a      	cmp	r3, #42	; 0x2a
 800b962:	d135      	bne.n	800b9d0 <_svfiprintf_r+0x188>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	1d1a      	adds	r2, r3, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	9203      	str	r2, [sp, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfb8      	it	lt
 800b970:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b974:	3402      	adds	r4, #2
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba44 <_svfiprintf_r+0x1fc>
 800b97c:	7821      	ldrb	r1, [r4, #0]
 800b97e:	2203      	movs	r2, #3
 800b980:	4650      	mov	r0, sl
 800b982:	f7f4 fcd5 	bl	8000330 <memchr>
 800b986:	b140      	cbz	r0, 800b99a <_svfiprintf_r+0x152>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	eba0 000a 	sub.w	r0, r0, sl
 800b98e:	fa03 f000 	lsl.w	r0, r3, r0
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	4303      	orrs	r3, r0
 800b996:	3401      	adds	r4, #1
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99e:	4826      	ldr	r0, [pc, #152]	; (800ba38 <_svfiprintf_r+0x1f0>)
 800b9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a4:	2206      	movs	r2, #6
 800b9a6:	f7f4 fcc3 	bl	8000330 <memchr>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d038      	beq.n	800ba20 <_svfiprintf_r+0x1d8>
 800b9ae:	4b23      	ldr	r3, [pc, #140]	; (800ba3c <_svfiprintf_r+0x1f4>)
 800b9b0:	bb1b      	cbnz	r3, 800b9fa <_svfiprintf_r+0x1b2>
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	3307      	adds	r3, #7
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	4433      	add	r3, r6
 800b9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c4:	e767      	b.n	800b896 <_svfiprintf_r+0x4e>
 800b9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	e7a5      	b.n	800b91c <_svfiprintf_r+0xd4>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	3401      	adds	r4, #1
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f04f 0c0a 	mov.w	ip, #10
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e2:	3a30      	subs	r2, #48	; 0x30
 800b9e4:	2a09      	cmp	r2, #9
 800b9e6:	d903      	bls.n	800b9f0 <_svfiprintf_r+0x1a8>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0c5      	beq.n	800b978 <_svfiprintf_r+0x130>
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	e7c3      	b.n	800b978 <_svfiprintf_r+0x130>
 800b9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e7f0      	b.n	800b9dc <_svfiprintf_r+0x194>
 800b9fa:	ab03      	add	r3, sp, #12
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	462a      	mov	r2, r5
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <_svfiprintf_r+0x1f8>)
 800ba02:	a904      	add	r1, sp, #16
 800ba04:	4638      	mov	r0, r7
 800ba06:	f3af 8000 	nop.w
 800ba0a:	1c42      	adds	r2, r0, #1
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	d1d6      	bne.n	800b9be <_svfiprintf_r+0x176>
 800ba10:	89ab      	ldrh	r3, [r5, #12]
 800ba12:	065b      	lsls	r3, r3, #25
 800ba14:	f53f af2c 	bmi.w	800b870 <_svfiprintf_r+0x28>
 800ba18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba1a:	b01d      	add	sp, #116	; 0x74
 800ba1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <_svfiprintf_r+0x1f8>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f000 f9d4 	bl	800bdd8 <_printf_i>
 800ba30:	e7eb      	b.n	800ba0a <_svfiprintf_r+0x1c2>
 800ba32:	bf00      	nop
 800ba34:	0800cb4d 	.word	0x0800cb4d
 800ba38:	0800cb57 	.word	0x0800cb57
 800ba3c:	00000000 	.word	0x00000000
 800ba40:	0800b791 	.word	0x0800b791
 800ba44:	0800cb53 	.word	0x0800cb53

0800ba48 <__sfputc_r>:
 800ba48:	6893      	ldr	r3, [r2, #8]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	b410      	push	{r4}
 800ba50:	6093      	str	r3, [r2, #8]
 800ba52:	da08      	bge.n	800ba66 <__sfputc_r+0x1e>
 800ba54:	6994      	ldr	r4, [r2, #24]
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	db01      	blt.n	800ba5e <__sfputc_r+0x16>
 800ba5a:	290a      	cmp	r1, #10
 800ba5c:	d103      	bne.n	800ba66 <__sfputc_r+0x1e>
 800ba5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba62:	f000 baef 	b.w	800c044 <__swbuf_r>
 800ba66:	6813      	ldr	r3, [r2, #0]
 800ba68:	1c58      	adds	r0, r3, #1
 800ba6a:	6010      	str	r0, [r2, #0]
 800ba6c:	7019      	strb	r1, [r3, #0]
 800ba6e:	4608      	mov	r0, r1
 800ba70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <__sfputs_r>:
 800ba76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba78:	4606      	mov	r6, r0
 800ba7a:	460f      	mov	r7, r1
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	18d5      	adds	r5, r2, r3
 800ba80:	42ac      	cmp	r4, r5
 800ba82:	d101      	bne.n	800ba88 <__sfputs_r+0x12>
 800ba84:	2000      	movs	r0, #0
 800ba86:	e007      	b.n	800ba98 <__sfputs_r+0x22>
 800ba88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8c:	463a      	mov	r2, r7
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f7ff ffda 	bl	800ba48 <__sfputc_r>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d1f3      	bne.n	800ba80 <__sfputs_r+0xa>
 800ba98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba9c <_vfiprintf_r>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	460d      	mov	r5, r1
 800baa2:	b09d      	sub	sp, #116	; 0x74
 800baa4:	4614      	mov	r4, r2
 800baa6:	4698      	mov	r8, r3
 800baa8:	4606      	mov	r6, r0
 800baaa:	b118      	cbz	r0, 800bab4 <_vfiprintf_r+0x18>
 800baac:	6983      	ldr	r3, [r0, #24]
 800baae:	b90b      	cbnz	r3, 800bab4 <_vfiprintf_r+0x18>
 800bab0:	f000 fcaa 	bl	800c408 <__sinit>
 800bab4:	4b89      	ldr	r3, [pc, #548]	; (800bcdc <_vfiprintf_r+0x240>)
 800bab6:	429d      	cmp	r5, r3
 800bab8:	d11b      	bne.n	800baf2 <_vfiprintf_r+0x56>
 800baba:	6875      	ldr	r5, [r6, #4]
 800babc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800babe:	07d9      	lsls	r1, r3, #31
 800bac0:	d405      	bmi.n	800bace <_vfiprintf_r+0x32>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	059a      	lsls	r2, r3, #22
 800bac6:	d402      	bmi.n	800bace <_vfiprintf_r+0x32>
 800bac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baca:	f000 fd3b 	bl	800c544 <__retarget_lock_acquire_recursive>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	071b      	lsls	r3, r3, #28
 800bad2:	d501      	bpl.n	800bad8 <_vfiprintf_r+0x3c>
 800bad4:	692b      	ldr	r3, [r5, #16]
 800bad6:	b9eb      	cbnz	r3, 800bb14 <_vfiprintf_r+0x78>
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f000 fb04 	bl	800c0e8 <__swsetup_r>
 800bae0:	b1c0      	cbz	r0, 800bb14 <_vfiprintf_r+0x78>
 800bae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae4:	07dc      	lsls	r4, r3, #31
 800bae6:	d50e      	bpl.n	800bb06 <_vfiprintf_r+0x6a>
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baec:	b01d      	add	sp, #116	; 0x74
 800baee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf2:	4b7b      	ldr	r3, [pc, #492]	; (800bce0 <_vfiprintf_r+0x244>)
 800baf4:	429d      	cmp	r5, r3
 800baf6:	d101      	bne.n	800bafc <_vfiprintf_r+0x60>
 800baf8:	68b5      	ldr	r5, [r6, #8]
 800bafa:	e7df      	b.n	800babc <_vfiprintf_r+0x20>
 800bafc:	4b79      	ldr	r3, [pc, #484]	; (800bce4 <_vfiprintf_r+0x248>)
 800bafe:	429d      	cmp	r5, r3
 800bb00:	bf08      	it	eq
 800bb02:	68f5      	ldreq	r5, [r6, #12]
 800bb04:	e7da      	b.n	800babc <_vfiprintf_r+0x20>
 800bb06:	89ab      	ldrh	r3, [r5, #12]
 800bb08:	0598      	lsls	r0, r3, #22
 800bb0a:	d4ed      	bmi.n	800bae8 <_vfiprintf_r+0x4c>
 800bb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0e:	f000 fd1a 	bl	800c546 <__retarget_lock_release_recursive>
 800bb12:	e7e9      	b.n	800bae8 <_vfiprintf_r+0x4c>
 800bb14:	2300      	movs	r3, #0
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	2320      	movs	r3, #32
 800bb1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb22:	2330      	movs	r3, #48	; 0x30
 800bb24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bce8 <_vfiprintf_r+0x24c>
 800bb28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb2c:	f04f 0901 	mov.w	r9, #1
 800bb30:	4623      	mov	r3, r4
 800bb32:	469a      	mov	sl, r3
 800bb34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb38:	b10a      	cbz	r2, 800bb3e <_vfiprintf_r+0xa2>
 800bb3a:	2a25      	cmp	r2, #37	; 0x25
 800bb3c:	d1f9      	bne.n	800bb32 <_vfiprintf_r+0x96>
 800bb3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb42:	d00b      	beq.n	800bb5c <_vfiprintf_r+0xc0>
 800bb44:	465b      	mov	r3, fp
 800bb46:	4622      	mov	r2, r4
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7ff ff93 	bl	800ba76 <__sfputs_r>
 800bb50:	3001      	adds	r0, #1
 800bb52:	f000 80aa 	beq.w	800bcaa <_vfiprintf_r+0x20e>
 800bb56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb58:	445a      	add	r2, fp
 800bb5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 80a2 	beq.w	800bcaa <_vfiprintf_r+0x20e>
 800bb66:	2300      	movs	r3, #0
 800bb68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb70:	f10a 0a01 	add.w	sl, sl, #1
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb7e:	4654      	mov	r4, sl
 800bb80:	2205      	movs	r2, #5
 800bb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb86:	4858      	ldr	r0, [pc, #352]	; (800bce8 <_vfiprintf_r+0x24c>)
 800bb88:	f7f4 fbd2 	bl	8000330 <memchr>
 800bb8c:	9a04      	ldr	r2, [sp, #16]
 800bb8e:	b9d8      	cbnz	r0, 800bbc8 <_vfiprintf_r+0x12c>
 800bb90:	06d1      	lsls	r1, r2, #27
 800bb92:	bf44      	itt	mi
 800bb94:	2320      	movmi	r3, #32
 800bb96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb9a:	0713      	lsls	r3, r2, #28
 800bb9c:	bf44      	itt	mi
 800bb9e:	232b      	movmi	r3, #43	; 0x2b
 800bba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba4:	f89a 3000 	ldrb.w	r3, [sl]
 800bba8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbaa:	d015      	beq.n	800bbd8 <_vfiprintf_r+0x13c>
 800bbac:	9a07      	ldr	r2, [sp, #28]
 800bbae:	4654      	mov	r4, sl
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f04f 0c0a 	mov.w	ip, #10
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbbc:	3b30      	subs	r3, #48	; 0x30
 800bbbe:	2b09      	cmp	r3, #9
 800bbc0:	d94e      	bls.n	800bc60 <_vfiprintf_r+0x1c4>
 800bbc2:	b1b0      	cbz	r0, 800bbf2 <_vfiprintf_r+0x156>
 800bbc4:	9207      	str	r2, [sp, #28]
 800bbc6:	e014      	b.n	800bbf2 <_vfiprintf_r+0x156>
 800bbc8:	eba0 0308 	sub.w	r3, r0, r8
 800bbcc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	9304      	str	r3, [sp, #16]
 800bbd4:	46a2      	mov	sl, r4
 800bbd6:	e7d2      	b.n	800bb7e <_vfiprintf_r+0xe2>
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	1d19      	adds	r1, r3, #4
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	9103      	str	r1, [sp, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	bfbb      	ittet	lt
 800bbe4:	425b      	neglt	r3, r3
 800bbe6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbea:	9307      	strge	r3, [sp, #28]
 800bbec:	9307      	strlt	r3, [sp, #28]
 800bbee:	bfb8      	it	lt
 800bbf0:	9204      	strlt	r2, [sp, #16]
 800bbf2:	7823      	ldrb	r3, [r4, #0]
 800bbf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf6:	d10c      	bne.n	800bc12 <_vfiprintf_r+0x176>
 800bbf8:	7863      	ldrb	r3, [r4, #1]
 800bbfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfc:	d135      	bne.n	800bc6a <_vfiprintf_r+0x1ce>
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	1d1a      	adds	r2, r3, #4
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	9203      	str	r2, [sp, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	bfb8      	it	lt
 800bc0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc0e:	3402      	adds	r4, #2
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcf8 <_vfiprintf_r+0x25c>
 800bc16:	7821      	ldrb	r1, [r4, #0]
 800bc18:	2203      	movs	r2, #3
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	f7f4 fb88 	bl	8000330 <memchr>
 800bc20:	b140      	cbz	r0, 800bc34 <_vfiprintf_r+0x198>
 800bc22:	2340      	movs	r3, #64	; 0x40
 800bc24:	eba0 000a 	sub.w	r0, r0, sl
 800bc28:	fa03 f000 	lsl.w	r0, r3, r0
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	4303      	orrs	r3, r0
 800bc30:	3401      	adds	r4, #1
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc38:	482c      	ldr	r0, [pc, #176]	; (800bcec <_vfiprintf_r+0x250>)
 800bc3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc3e:	2206      	movs	r2, #6
 800bc40:	f7f4 fb76 	bl	8000330 <memchr>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d03f      	beq.n	800bcc8 <_vfiprintf_r+0x22c>
 800bc48:	4b29      	ldr	r3, [pc, #164]	; (800bcf0 <_vfiprintf_r+0x254>)
 800bc4a:	bb1b      	cbnz	r3, 800bc94 <_vfiprintf_r+0x1f8>
 800bc4c:	9b03      	ldr	r3, [sp, #12]
 800bc4e:	3307      	adds	r3, #7
 800bc50:	f023 0307 	bic.w	r3, r3, #7
 800bc54:	3308      	adds	r3, #8
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5a:	443b      	add	r3, r7
 800bc5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5e:	e767      	b.n	800bb30 <_vfiprintf_r+0x94>
 800bc60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc64:	460c      	mov	r4, r1
 800bc66:	2001      	movs	r0, #1
 800bc68:	e7a5      	b.n	800bbb6 <_vfiprintf_r+0x11a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	3401      	adds	r4, #1
 800bc6e:	9305      	str	r3, [sp, #20]
 800bc70:	4619      	mov	r1, r3
 800bc72:	f04f 0c0a 	mov.w	ip, #10
 800bc76:	4620      	mov	r0, r4
 800bc78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc7c:	3a30      	subs	r2, #48	; 0x30
 800bc7e:	2a09      	cmp	r2, #9
 800bc80:	d903      	bls.n	800bc8a <_vfiprintf_r+0x1ee>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0c5      	beq.n	800bc12 <_vfiprintf_r+0x176>
 800bc86:	9105      	str	r1, [sp, #20]
 800bc88:	e7c3      	b.n	800bc12 <_vfiprintf_r+0x176>
 800bc8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc8e:	4604      	mov	r4, r0
 800bc90:	2301      	movs	r3, #1
 800bc92:	e7f0      	b.n	800bc76 <_vfiprintf_r+0x1da>
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4b16      	ldr	r3, [pc, #88]	; (800bcf4 <_vfiprintf_r+0x258>)
 800bc9c:	a904      	add	r1, sp, #16
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f3af 8000 	nop.w
 800bca4:	4607      	mov	r7, r0
 800bca6:	1c78      	adds	r0, r7, #1
 800bca8:	d1d6      	bne.n	800bc58 <_vfiprintf_r+0x1bc>
 800bcaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	d405      	bmi.n	800bcbc <_vfiprintf_r+0x220>
 800bcb0:	89ab      	ldrh	r3, [r5, #12]
 800bcb2:	059a      	lsls	r2, r3, #22
 800bcb4:	d402      	bmi.n	800bcbc <_vfiprintf_r+0x220>
 800bcb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcb8:	f000 fc45 	bl	800c546 <__retarget_lock_release_recursive>
 800bcbc:	89ab      	ldrh	r3, [r5, #12]
 800bcbe:	065b      	lsls	r3, r3, #25
 800bcc0:	f53f af12 	bmi.w	800bae8 <_vfiprintf_r+0x4c>
 800bcc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc6:	e711      	b.n	800baec <_vfiprintf_r+0x50>
 800bcc8:	ab03      	add	r3, sp, #12
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	462a      	mov	r2, r5
 800bcce:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <_vfiprintf_r+0x258>)
 800bcd0:	a904      	add	r1, sp, #16
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f000 f880 	bl	800bdd8 <_printf_i>
 800bcd8:	e7e4      	b.n	800bca4 <_vfiprintf_r+0x208>
 800bcda:	bf00      	nop
 800bcdc:	0800cba0 	.word	0x0800cba0
 800bce0:	0800cbc0 	.word	0x0800cbc0
 800bce4:	0800cb80 	.word	0x0800cb80
 800bce8:	0800cb4d 	.word	0x0800cb4d
 800bcec:	0800cb57 	.word	0x0800cb57
 800bcf0:	00000000 	.word	0x00000000
 800bcf4:	0800ba77 	.word	0x0800ba77
 800bcf8:	0800cb53 	.word	0x0800cb53

0800bcfc <_printf_common>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	4616      	mov	r6, r2
 800bd02:	4699      	mov	r9, r3
 800bd04:	688a      	ldr	r2, [r1, #8]
 800bd06:	690b      	ldr	r3, [r1, #16]
 800bd08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	bfb8      	it	lt
 800bd10:	4613      	movlt	r3, r2
 800bd12:	6033      	str	r3, [r6, #0]
 800bd14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd18:	4607      	mov	r7, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b10a      	cbz	r2, 800bd22 <_printf_common+0x26>
 800bd1e:	3301      	adds	r3, #1
 800bd20:	6033      	str	r3, [r6, #0]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	0699      	lsls	r1, r3, #26
 800bd26:	bf42      	ittt	mi
 800bd28:	6833      	ldrmi	r3, [r6, #0]
 800bd2a:	3302      	addmi	r3, #2
 800bd2c:	6033      	strmi	r3, [r6, #0]
 800bd2e:	6825      	ldr	r5, [r4, #0]
 800bd30:	f015 0506 	ands.w	r5, r5, #6
 800bd34:	d106      	bne.n	800bd44 <_printf_common+0x48>
 800bd36:	f104 0a19 	add.w	sl, r4, #25
 800bd3a:	68e3      	ldr	r3, [r4, #12]
 800bd3c:	6832      	ldr	r2, [r6, #0]
 800bd3e:	1a9b      	subs	r3, r3, r2
 800bd40:	42ab      	cmp	r3, r5
 800bd42:	dc26      	bgt.n	800bd92 <_printf_common+0x96>
 800bd44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd48:	1e13      	subs	r3, r2, #0
 800bd4a:	6822      	ldr	r2, [r4, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2301      	movne	r3, #1
 800bd50:	0692      	lsls	r2, r2, #26
 800bd52:	d42b      	bmi.n	800bdac <_printf_common+0xb0>
 800bd54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	47c0      	blx	r8
 800bd5e:	3001      	adds	r0, #1
 800bd60:	d01e      	beq.n	800bda0 <_printf_common+0xa4>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	68e5      	ldr	r5, [r4, #12]
 800bd66:	6832      	ldr	r2, [r6, #0]
 800bd68:	f003 0306 	and.w	r3, r3, #6
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	bf08      	it	eq
 800bd70:	1aad      	subeq	r5, r5, r2
 800bd72:	68a3      	ldr	r3, [r4, #8]
 800bd74:	6922      	ldr	r2, [r4, #16]
 800bd76:	bf0c      	ite	eq
 800bd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd7c:	2500      	movne	r5, #0
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	bfc4      	itt	gt
 800bd82:	1a9b      	subgt	r3, r3, r2
 800bd84:	18ed      	addgt	r5, r5, r3
 800bd86:	2600      	movs	r6, #0
 800bd88:	341a      	adds	r4, #26
 800bd8a:	42b5      	cmp	r5, r6
 800bd8c:	d11a      	bne.n	800bdc4 <_printf_common+0xc8>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	e008      	b.n	800bda4 <_printf_common+0xa8>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4652      	mov	r2, sl
 800bd96:	4649      	mov	r1, r9
 800bd98:	4638      	mov	r0, r7
 800bd9a:	47c0      	blx	r8
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d103      	bne.n	800bda8 <_printf_common+0xac>
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda8:	3501      	adds	r5, #1
 800bdaa:	e7c6      	b.n	800bd3a <_printf_common+0x3e>
 800bdac:	18e1      	adds	r1, r4, r3
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	2030      	movs	r0, #48	; 0x30
 800bdb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdb6:	4422      	add	r2, r4
 800bdb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	e7c7      	b.n	800bd54 <_printf_common+0x58>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4638      	mov	r0, r7
 800bdcc:	47c0      	blx	r8
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d0e6      	beq.n	800bda0 <_printf_common+0xa4>
 800bdd2:	3601      	adds	r6, #1
 800bdd4:	e7d9      	b.n	800bd8a <_printf_common+0x8e>
	...

0800bdd8 <_printf_i>:
 800bdd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bddc:	7e0f      	ldrb	r7, [r1, #24]
 800bdde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bde0:	2f78      	cmp	r7, #120	; 0x78
 800bde2:	4691      	mov	r9, r2
 800bde4:	4680      	mov	r8, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	469a      	mov	sl, r3
 800bdea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdee:	d807      	bhi.n	800be00 <_printf_i+0x28>
 800bdf0:	2f62      	cmp	r7, #98	; 0x62
 800bdf2:	d80a      	bhi.n	800be0a <_printf_i+0x32>
 800bdf4:	2f00      	cmp	r7, #0
 800bdf6:	f000 80d8 	beq.w	800bfaa <_printf_i+0x1d2>
 800bdfa:	2f58      	cmp	r7, #88	; 0x58
 800bdfc:	f000 80a3 	beq.w	800bf46 <_printf_i+0x16e>
 800be00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be08:	e03a      	b.n	800be80 <_printf_i+0xa8>
 800be0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be0e:	2b15      	cmp	r3, #21
 800be10:	d8f6      	bhi.n	800be00 <_printf_i+0x28>
 800be12:	a101      	add	r1, pc, #4	; (adr r1, 800be18 <_printf_i+0x40>)
 800be14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be18:	0800be71 	.word	0x0800be71
 800be1c:	0800be85 	.word	0x0800be85
 800be20:	0800be01 	.word	0x0800be01
 800be24:	0800be01 	.word	0x0800be01
 800be28:	0800be01 	.word	0x0800be01
 800be2c:	0800be01 	.word	0x0800be01
 800be30:	0800be85 	.word	0x0800be85
 800be34:	0800be01 	.word	0x0800be01
 800be38:	0800be01 	.word	0x0800be01
 800be3c:	0800be01 	.word	0x0800be01
 800be40:	0800be01 	.word	0x0800be01
 800be44:	0800bf91 	.word	0x0800bf91
 800be48:	0800beb5 	.word	0x0800beb5
 800be4c:	0800bf73 	.word	0x0800bf73
 800be50:	0800be01 	.word	0x0800be01
 800be54:	0800be01 	.word	0x0800be01
 800be58:	0800bfb3 	.word	0x0800bfb3
 800be5c:	0800be01 	.word	0x0800be01
 800be60:	0800beb5 	.word	0x0800beb5
 800be64:	0800be01 	.word	0x0800be01
 800be68:	0800be01 	.word	0x0800be01
 800be6c:	0800bf7b 	.word	0x0800bf7b
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	1d1a      	adds	r2, r3, #4
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be80:	2301      	movs	r3, #1
 800be82:	e0a3      	b.n	800bfcc <_printf_i+0x1f4>
 800be84:	6820      	ldr	r0, [r4, #0]
 800be86:	6829      	ldr	r1, [r5, #0]
 800be88:	0606      	lsls	r6, r0, #24
 800be8a:	f101 0304 	add.w	r3, r1, #4
 800be8e:	d50a      	bpl.n	800bea6 <_printf_i+0xce>
 800be90:	680e      	ldr	r6, [r1, #0]
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	2e00      	cmp	r6, #0
 800be96:	da03      	bge.n	800bea0 <_printf_i+0xc8>
 800be98:	232d      	movs	r3, #45	; 0x2d
 800be9a:	4276      	negs	r6, r6
 800be9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bea0:	485e      	ldr	r0, [pc, #376]	; (800c01c <_printf_i+0x244>)
 800bea2:	230a      	movs	r3, #10
 800bea4:	e019      	b.n	800beda <_printf_i+0x102>
 800bea6:	680e      	ldr	r6, [r1, #0]
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beae:	bf18      	it	ne
 800beb0:	b236      	sxthne	r6, r6
 800beb2:	e7ef      	b.n	800be94 <_printf_i+0xbc>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	6820      	ldr	r0, [r4, #0]
 800beb8:	1d19      	adds	r1, r3, #4
 800beba:	6029      	str	r1, [r5, #0]
 800bebc:	0601      	lsls	r1, r0, #24
 800bebe:	d501      	bpl.n	800bec4 <_printf_i+0xec>
 800bec0:	681e      	ldr	r6, [r3, #0]
 800bec2:	e002      	b.n	800beca <_printf_i+0xf2>
 800bec4:	0646      	lsls	r6, r0, #25
 800bec6:	d5fb      	bpl.n	800bec0 <_printf_i+0xe8>
 800bec8:	881e      	ldrh	r6, [r3, #0]
 800beca:	4854      	ldr	r0, [pc, #336]	; (800c01c <_printf_i+0x244>)
 800becc:	2f6f      	cmp	r7, #111	; 0x6f
 800bece:	bf0c      	ite	eq
 800bed0:	2308      	moveq	r3, #8
 800bed2:	230a      	movne	r3, #10
 800bed4:	2100      	movs	r1, #0
 800bed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beda:	6865      	ldr	r5, [r4, #4]
 800bedc:	60a5      	str	r5, [r4, #8]
 800bede:	2d00      	cmp	r5, #0
 800bee0:	bfa2      	ittt	ge
 800bee2:	6821      	ldrge	r1, [r4, #0]
 800bee4:	f021 0104 	bicge.w	r1, r1, #4
 800bee8:	6021      	strge	r1, [r4, #0]
 800beea:	b90e      	cbnz	r6, 800bef0 <_printf_i+0x118>
 800beec:	2d00      	cmp	r5, #0
 800beee:	d04d      	beq.n	800bf8c <_printf_i+0x1b4>
 800bef0:	4615      	mov	r5, r2
 800bef2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bef6:	fb03 6711 	mls	r7, r3, r1, r6
 800befa:	5dc7      	ldrb	r7, [r0, r7]
 800befc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf00:	4637      	mov	r7, r6
 800bf02:	42bb      	cmp	r3, r7
 800bf04:	460e      	mov	r6, r1
 800bf06:	d9f4      	bls.n	800bef2 <_printf_i+0x11a>
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d10b      	bne.n	800bf24 <_printf_i+0x14c>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	07de      	lsls	r6, r3, #31
 800bf10:	d508      	bpl.n	800bf24 <_printf_i+0x14c>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	6861      	ldr	r1, [r4, #4]
 800bf16:	4299      	cmp	r1, r3
 800bf18:	bfde      	ittt	le
 800bf1a:	2330      	movle	r3, #48	; 0x30
 800bf1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf24:	1b52      	subs	r2, r2, r5
 800bf26:	6122      	str	r2, [r4, #16]
 800bf28:	f8cd a000 	str.w	sl, [sp]
 800bf2c:	464b      	mov	r3, r9
 800bf2e:	aa03      	add	r2, sp, #12
 800bf30:	4621      	mov	r1, r4
 800bf32:	4640      	mov	r0, r8
 800bf34:	f7ff fee2 	bl	800bcfc <_printf_common>
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d14c      	bne.n	800bfd6 <_printf_i+0x1fe>
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf40:	b004      	add	sp, #16
 800bf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf46:	4835      	ldr	r0, [pc, #212]	; (800c01c <_printf_i+0x244>)
 800bf48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf4c:	6829      	ldr	r1, [r5, #0]
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf54:	6029      	str	r1, [r5, #0]
 800bf56:	061d      	lsls	r5, r3, #24
 800bf58:	d514      	bpl.n	800bf84 <_printf_i+0x1ac>
 800bf5a:	07df      	lsls	r7, r3, #31
 800bf5c:	bf44      	itt	mi
 800bf5e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf62:	6023      	strmi	r3, [r4, #0]
 800bf64:	b91e      	cbnz	r6, 800bf6e <_printf_i+0x196>
 800bf66:	6823      	ldr	r3, [r4, #0]
 800bf68:	f023 0320 	bic.w	r3, r3, #32
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	2310      	movs	r3, #16
 800bf70:	e7b0      	b.n	800bed4 <_printf_i+0xfc>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	f043 0320 	orr.w	r3, r3, #32
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	2378      	movs	r3, #120	; 0x78
 800bf7c:	4828      	ldr	r0, [pc, #160]	; (800c020 <_printf_i+0x248>)
 800bf7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf82:	e7e3      	b.n	800bf4c <_printf_i+0x174>
 800bf84:	0659      	lsls	r1, r3, #25
 800bf86:	bf48      	it	mi
 800bf88:	b2b6      	uxthmi	r6, r6
 800bf8a:	e7e6      	b.n	800bf5a <_printf_i+0x182>
 800bf8c:	4615      	mov	r5, r2
 800bf8e:	e7bb      	b.n	800bf08 <_printf_i+0x130>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	6826      	ldr	r6, [r4, #0]
 800bf94:	6961      	ldr	r1, [r4, #20]
 800bf96:	1d18      	adds	r0, r3, #4
 800bf98:	6028      	str	r0, [r5, #0]
 800bf9a:	0635      	lsls	r5, r6, #24
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	d501      	bpl.n	800bfa4 <_printf_i+0x1cc>
 800bfa0:	6019      	str	r1, [r3, #0]
 800bfa2:	e002      	b.n	800bfaa <_printf_i+0x1d2>
 800bfa4:	0670      	lsls	r0, r6, #25
 800bfa6:	d5fb      	bpl.n	800bfa0 <_printf_i+0x1c8>
 800bfa8:	8019      	strh	r1, [r3, #0]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6123      	str	r3, [r4, #16]
 800bfae:	4615      	mov	r5, r2
 800bfb0:	e7ba      	b.n	800bf28 <_printf_i+0x150>
 800bfb2:	682b      	ldr	r3, [r5, #0]
 800bfb4:	1d1a      	adds	r2, r3, #4
 800bfb6:	602a      	str	r2, [r5, #0]
 800bfb8:	681d      	ldr	r5, [r3, #0]
 800bfba:	6862      	ldr	r2, [r4, #4]
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f7f4 f9b6 	bl	8000330 <memchr>
 800bfc4:	b108      	cbz	r0, 800bfca <_printf_i+0x1f2>
 800bfc6:	1b40      	subs	r0, r0, r5
 800bfc8:	6060      	str	r0, [r4, #4]
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfd4:	e7a8      	b.n	800bf28 <_printf_i+0x150>
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	462a      	mov	r2, r5
 800bfda:	4649      	mov	r1, r9
 800bfdc:	4640      	mov	r0, r8
 800bfde:	47d0      	blx	sl
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d0ab      	beq.n	800bf3c <_printf_i+0x164>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	079b      	lsls	r3, r3, #30
 800bfe8:	d413      	bmi.n	800c012 <_printf_i+0x23a>
 800bfea:	68e0      	ldr	r0, [r4, #12]
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	4298      	cmp	r0, r3
 800bff0:	bfb8      	it	lt
 800bff2:	4618      	movlt	r0, r3
 800bff4:	e7a4      	b.n	800bf40 <_printf_i+0x168>
 800bff6:	2301      	movs	r3, #1
 800bff8:	4632      	mov	r2, r6
 800bffa:	4649      	mov	r1, r9
 800bffc:	4640      	mov	r0, r8
 800bffe:	47d0      	blx	sl
 800c000:	3001      	adds	r0, #1
 800c002:	d09b      	beq.n	800bf3c <_printf_i+0x164>
 800c004:	3501      	adds	r5, #1
 800c006:	68e3      	ldr	r3, [r4, #12]
 800c008:	9903      	ldr	r1, [sp, #12]
 800c00a:	1a5b      	subs	r3, r3, r1
 800c00c:	42ab      	cmp	r3, r5
 800c00e:	dcf2      	bgt.n	800bff6 <_printf_i+0x21e>
 800c010:	e7eb      	b.n	800bfea <_printf_i+0x212>
 800c012:	2500      	movs	r5, #0
 800c014:	f104 0619 	add.w	r6, r4, #25
 800c018:	e7f5      	b.n	800c006 <_printf_i+0x22e>
 800c01a:	bf00      	nop
 800c01c:	0800cb5e 	.word	0x0800cb5e
 800c020:	0800cb6f 	.word	0x0800cb6f

0800c024 <_sbrk_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d06      	ldr	r5, [pc, #24]	; (800c040 <_sbrk_r+0x1c>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	f7f5 ff8c 	bl	8001f4c <_sbrk>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_sbrk_r+0x1a>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_sbrk_r+0x1a>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	2400c9f8 	.word	0x2400c9f8

0800c044 <__swbuf_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	460e      	mov	r6, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	4605      	mov	r5, r0
 800c04c:	b118      	cbz	r0, 800c056 <__swbuf_r+0x12>
 800c04e:	6983      	ldr	r3, [r0, #24]
 800c050:	b90b      	cbnz	r3, 800c056 <__swbuf_r+0x12>
 800c052:	f000 f9d9 	bl	800c408 <__sinit>
 800c056:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <__swbuf_r+0x98>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	d12b      	bne.n	800c0b4 <__swbuf_r+0x70>
 800c05c:	686c      	ldr	r4, [r5, #4]
 800c05e:	69a3      	ldr	r3, [r4, #24]
 800c060:	60a3      	str	r3, [r4, #8]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	071a      	lsls	r2, r3, #28
 800c066:	d52f      	bpl.n	800c0c8 <__swbuf_r+0x84>
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	b36b      	cbz	r3, 800c0c8 <__swbuf_r+0x84>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	1ac0      	subs	r0, r0, r3
 800c072:	6963      	ldr	r3, [r4, #20]
 800c074:	b2f6      	uxtb	r6, r6
 800c076:	4283      	cmp	r3, r0
 800c078:	4637      	mov	r7, r6
 800c07a:	dc04      	bgt.n	800c086 <__swbuf_r+0x42>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f92e 	bl	800c2e0 <_fflush_r>
 800c084:	bb30      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	3b01      	subs	r3, #1
 800c08a:	60a3      	str	r3, [r4, #8]
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	6022      	str	r2, [r4, #0]
 800c092:	701e      	strb	r6, [r3, #0]
 800c094:	6963      	ldr	r3, [r4, #20]
 800c096:	3001      	adds	r0, #1
 800c098:	4283      	cmp	r3, r0
 800c09a:	d004      	beq.n	800c0a6 <__swbuf_r+0x62>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	07db      	lsls	r3, r3, #31
 800c0a0:	d506      	bpl.n	800c0b0 <__swbuf_r+0x6c>
 800c0a2:	2e0a      	cmp	r6, #10
 800c0a4:	d104      	bne.n	800c0b0 <__swbuf_r+0x6c>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 f919 	bl	800c2e0 <_fflush_r>
 800c0ae:	b988      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <__swbuf_r+0x9c>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d101      	bne.n	800c0be <__swbuf_r+0x7a>
 800c0ba:	68ac      	ldr	r4, [r5, #8]
 800c0bc:	e7cf      	b.n	800c05e <__swbuf_r+0x1a>
 800c0be:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <__swbuf_r+0xa0>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	bf08      	it	eq
 800c0c4:	68ec      	ldreq	r4, [r5, #12]
 800c0c6:	e7ca      	b.n	800c05e <__swbuf_r+0x1a>
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 f80c 	bl	800c0e8 <__swsetup_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d0cb      	beq.n	800c06c <__swbuf_r+0x28>
 800c0d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c0d8:	e7ea      	b.n	800c0b0 <__swbuf_r+0x6c>
 800c0da:	bf00      	nop
 800c0dc:	0800cba0 	.word	0x0800cba0
 800c0e0:	0800cbc0 	.word	0x0800cbc0
 800c0e4:	0800cb80 	.word	0x0800cb80

0800c0e8 <__swsetup_r>:
 800c0e8:	4b32      	ldr	r3, [pc, #200]	; (800c1b4 <__swsetup_r+0xcc>)
 800c0ea:	b570      	push	{r4, r5, r6, lr}
 800c0ec:	681d      	ldr	r5, [r3, #0]
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	b125      	cbz	r5, 800c0fe <__swsetup_r+0x16>
 800c0f4:	69ab      	ldr	r3, [r5, #24]
 800c0f6:	b913      	cbnz	r3, 800c0fe <__swsetup_r+0x16>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f985 	bl	800c408 <__sinit>
 800c0fe:	4b2e      	ldr	r3, [pc, #184]	; (800c1b8 <__swsetup_r+0xd0>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d10f      	bne.n	800c124 <__swsetup_r+0x3c>
 800c104:	686c      	ldr	r4, [r5, #4]
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c10c:	0719      	lsls	r1, r3, #28
 800c10e:	d42c      	bmi.n	800c16a <__swsetup_r+0x82>
 800c110:	06dd      	lsls	r5, r3, #27
 800c112:	d411      	bmi.n	800c138 <__swsetup_r+0x50>
 800c114:	2309      	movs	r3, #9
 800c116:	6033      	str	r3, [r6, #0]
 800c118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c122:	e03e      	b.n	800c1a2 <__swsetup_r+0xba>
 800c124:	4b25      	ldr	r3, [pc, #148]	; (800c1bc <__swsetup_r+0xd4>)
 800c126:	429c      	cmp	r4, r3
 800c128:	d101      	bne.n	800c12e <__swsetup_r+0x46>
 800c12a:	68ac      	ldr	r4, [r5, #8]
 800c12c:	e7eb      	b.n	800c106 <__swsetup_r+0x1e>
 800c12e:	4b24      	ldr	r3, [pc, #144]	; (800c1c0 <__swsetup_r+0xd8>)
 800c130:	429c      	cmp	r4, r3
 800c132:	bf08      	it	eq
 800c134:	68ec      	ldreq	r4, [r5, #12]
 800c136:	e7e6      	b.n	800c106 <__swsetup_r+0x1e>
 800c138:	0758      	lsls	r0, r3, #29
 800c13a:	d512      	bpl.n	800c162 <__swsetup_r+0x7a>
 800c13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c13e:	b141      	cbz	r1, 800c152 <__swsetup_r+0x6a>
 800c140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c144:	4299      	cmp	r1, r3
 800c146:	d002      	beq.n	800c14e <__swsetup_r+0x66>
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff fa41 	bl	800b5d0 <_free_r>
 800c14e:	2300      	movs	r3, #0
 800c150:	6363      	str	r3, [r4, #52]	; 0x34
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	2300      	movs	r3, #0
 800c15c:	6063      	str	r3, [r4, #4]
 800c15e:	6923      	ldr	r3, [r4, #16]
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f043 0308 	orr.w	r3, r3, #8
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	b94b      	cbnz	r3, 800c182 <__swsetup_r+0x9a>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c178:	d003      	beq.n	800c182 <__swsetup_r+0x9a>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4630      	mov	r0, r6
 800c17e:	f000 fa09 	bl	800c594 <__smakebuf_r>
 800c182:	89a0      	ldrh	r0, [r4, #12]
 800c184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c188:	f010 0301 	ands.w	r3, r0, #1
 800c18c:	d00a      	beq.n	800c1a4 <__swsetup_r+0xbc>
 800c18e:	2300      	movs	r3, #0
 800c190:	60a3      	str	r3, [r4, #8]
 800c192:	6963      	ldr	r3, [r4, #20]
 800c194:	425b      	negs	r3, r3
 800c196:	61a3      	str	r3, [r4, #24]
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	b943      	cbnz	r3, 800c1ae <__swsetup_r+0xc6>
 800c19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1a0:	d1ba      	bne.n	800c118 <__swsetup_r+0x30>
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	0781      	lsls	r1, r0, #30
 800c1a6:	bf58      	it	pl
 800c1a8:	6963      	ldrpl	r3, [r4, #20]
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	e7f4      	b.n	800c198 <__swsetup_r+0xb0>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	e7f7      	b.n	800c1a2 <__swsetup_r+0xba>
 800c1b2:	bf00      	nop
 800c1b4:	240001a0 	.word	0x240001a0
 800c1b8:	0800cba0 	.word	0x0800cba0
 800c1bc:	0800cbc0 	.word	0x0800cbc0
 800c1c0:	0800cb80 	.word	0x0800cb80

0800c1c4 <abort>:
 800c1c4:	b508      	push	{r3, lr}
 800c1c6:	2006      	movs	r0, #6
 800c1c8:	f000 faa2 	bl	800c710 <raise>
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	f7f5 fe45 	bl	8001e5c <_exit>
	...

0800c1d4 <__sflush_r>:
 800c1d4:	898a      	ldrh	r2, [r1, #12]
 800c1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1da:	4605      	mov	r5, r0
 800c1dc:	0710      	lsls	r0, r2, #28
 800c1de:	460c      	mov	r4, r1
 800c1e0:	d458      	bmi.n	800c294 <__sflush_r+0xc0>
 800c1e2:	684b      	ldr	r3, [r1, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	dc05      	bgt.n	800c1f4 <__sflush_r+0x20>
 800c1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	dc02      	bgt.n	800c1f4 <__sflush_r+0x20>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	d0f9      	beq.n	800c1ee <__sflush_r+0x1a>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c200:	682f      	ldr	r7, [r5, #0]
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	d032      	beq.n	800c26c <__sflush_r+0x98>
 800c206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	075a      	lsls	r2, r3, #29
 800c20c:	d505      	bpl.n	800c21a <__sflush_r+0x46>
 800c20e:	6863      	ldr	r3, [r4, #4]
 800c210:	1ac0      	subs	r0, r0, r3
 800c212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c214:	b10b      	cbz	r3, 800c21a <__sflush_r+0x46>
 800c216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c218:	1ac0      	subs	r0, r0, r3
 800c21a:	2300      	movs	r3, #0
 800c21c:	4602      	mov	r2, r0
 800c21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c220:	6a21      	ldr	r1, [r4, #32]
 800c222:	4628      	mov	r0, r5
 800c224:	47b0      	blx	r6
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	d106      	bne.n	800c23a <__sflush_r+0x66>
 800c22c:	6829      	ldr	r1, [r5, #0]
 800c22e:	291d      	cmp	r1, #29
 800c230:	d82c      	bhi.n	800c28c <__sflush_r+0xb8>
 800c232:	4a2a      	ldr	r2, [pc, #168]	; (800c2dc <__sflush_r+0x108>)
 800c234:	40ca      	lsrs	r2, r1
 800c236:	07d6      	lsls	r6, r2, #31
 800c238:	d528      	bpl.n	800c28c <__sflush_r+0xb8>
 800c23a:	2200      	movs	r2, #0
 800c23c:	6062      	str	r2, [r4, #4]
 800c23e:	04d9      	lsls	r1, r3, #19
 800c240:	6922      	ldr	r2, [r4, #16]
 800c242:	6022      	str	r2, [r4, #0]
 800c244:	d504      	bpl.n	800c250 <__sflush_r+0x7c>
 800c246:	1c42      	adds	r2, r0, #1
 800c248:	d101      	bne.n	800c24e <__sflush_r+0x7a>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b903      	cbnz	r3, 800c250 <__sflush_r+0x7c>
 800c24e:	6560      	str	r0, [r4, #84]	; 0x54
 800c250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c252:	602f      	str	r7, [r5, #0]
 800c254:	2900      	cmp	r1, #0
 800c256:	d0ca      	beq.n	800c1ee <__sflush_r+0x1a>
 800c258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d002      	beq.n	800c266 <__sflush_r+0x92>
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff f9b5 	bl	800b5d0 <_free_r>
 800c266:	2000      	movs	r0, #0
 800c268:	6360      	str	r0, [r4, #52]	; 0x34
 800c26a:	e7c1      	b.n	800c1f0 <__sflush_r+0x1c>
 800c26c:	6a21      	ldr	r1, [r4, #32]
 800c26e:	2301      	movs	r3, #1
 800c270:	4628      	mov	r0, r5
 800c272:	47b0      	blx	r6
 800c274:	1c41      	adds	r1, r0, #1
 800c276:	d1c7      	bne.n	800c208 <__sflush_r+0x34>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0c4      	beq.n	800c208 <__sflush_r+0x34>
 800c27e:	2b1d      	cmp	r3, #29
 800c280:	d001      	beq.n	800c286 <__sflush_r+0xb2>
 800c282:	2b16      	cmp	r3, #22
 800c284:	d101      	bne.n	800c28a <__sflush_r+0xb6>
 800c286:	602f      	str	r7, [r5, #0]
 800c288:	e7b1      	b.n	800c1ee <__sflush_r+0x1a>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	e7ad      	b.n	800c1f0 <__sflush_r+0x1c>
 800c294:	690f      	ldr	r7, [r1, #16]
 800c296:	2f00      	cmp	r7, #0
 800c298:	d0a9      	beq.n	800c1ee <__sflush_r+0x1a>
 800c29a:	0793      	lsls	r3, r2, #30
 800c29c:	680e      	ldr	r6, [r1, #0]
 800c29e:	bf08      	it	eq
 800c2a0:	694b      	ldreq	r3, [r1, #20]
 800c2a2:	600f      	str	r7, [r1, #0]
 800c2a4:	bf18      	it	ne
 800c2a6:	2300      	movne	r3, #0
 800c2a8:	eba6 0807 	sub.w	r8, r6, r7
 800c2ac:	608b      	str	r3, [r1, #8]
 800c2ae:	f1b8 0f00 	cmp.w	r8, #0
 800c2b2:	dd9c      	ble.n	800c1ee <__sflush_r+0x1a>
 800c2b4:	6a21      	ldr	r1, [r4, #32]
 800c2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2b8:	4643      	mov	r3, r8
 800c2ba:	463a      	mov	r2, r7
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b0      	blx	r6
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dc06      	bgt.n	800c2d2 <__sflush_r+0xfe>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d0:	e78e      	b.n	800c1f0 <__sflush_r+0x1c>
 800c2d2:	4407      	add	r7, r0
 800c2d4:	eba8 0800 	sub.w	r8, r8, r0
 800c2d8:	e7e9      	b.n	800c2ae <__sflush_r+0xda>
 800c2da:	bf00      	nop
 800c2dc:	20400001 	.word	0x20400001

0800c2e0 <_fflush_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	b913      	cbnz	r3, 800c2f0 <_fflush_r+0x10>
 800c2ea:	2500      	movs	r5, #0
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	b118      	cbz	r0, 800c2fa <_fflush_r+0x1a>
 800c2f2:	6983      	ldr	r3, [r0, #24]
 800c2f4:	b90b      	cbnz	r3, 800c2fa <_fflush_r+0x1a>
 800c2f6:	f000 f887 	bl	800c408 <__sinit>
 800c2fa:	4b14      	ldr	r3, [pc, #80]	; (800c34c <_fflush_r+0x6c>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	d11b      	bne.n	800c338 <_fflush_r+0x58>
 800c300:	686c      	ldr	r4, [r5, #4]
 800c302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0ef      	beq.n	800c2ea <_fflush_r+0xa>
 800c30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c30c:	07d0      	lsls	r0, r2, #31
 800c30e:	d404      	bmi.n	800c31a <_fflush_r+0x3a>
 800c310:	0599      	lsls	r1, r3, #22
 800c312:	d402      	bmi.n	800c31a <_fflush_r+0x3a>
 800c314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c316:	f000 f915 	bl	800c544 <__retarget_lock_acquire_recursive>
 800c31a:	4628      	mov	r0, r5
 800c31c:	4621      	mov	r1, r4
 800c31e:	f7ff ff59 	bl	800c1d4 <__sflush_r>
 800c322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c324:	07da      	lsls	r2, r3, #31
 800c326:	4605      	mov	r5, r0
 800c328:	d4e0      	bmi.n	800c2ec <_fflush_r+0xc>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	059b      	lsls	r3, r3, #22
 800c32e:	d4dd      	bmi.n	800c2ec <_fflush_r+0xc>
 800c330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c332:	f000 f908 	bl	800c546 <__retarget_lock_release_recursive>
 800c336:	e7d9      	b.n	800c2ec <_fflush_r+0xc>
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_fflush_r+0x70>)
 800c33a:	429c      	cmp	r4, r3
 800c33c:	d101      	bne.n	800c342 <_fflush_r+0x62>
 800c33e:	68ac      	ldr	r4, [r5, #8]
 800c340:	e7df      	b.n	800c302 <_fflush_r+0x22>
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <_fflush_r+0x74>)
 800c344:	429c      	cmp	r4, r3
 800c346:	bf08      	it	eq
 800c348:	68ec      	ldreq	r4, [r5, #12]
 800c34a:	e7da      	b.n	800c302 <_fflush_r+0x22>
 800c34c:	0800cba0 	.word	0x0800cba0
 800c350:	0800cbc0 	.word	0x0800cbc0
 800c354:	0800cb80 	.word	0x0800cb80

0800c358 <std>:
 800c358:	2300      	movs	r3, #0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	4604      	mov	r4, r0
 800c35e:	e9c0 3300 	strd	r3, r3, [r0]
 800c362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c366:	6083      	str	r3, [r0, #8]
 800c368:	8181      	strh	r1, [r0, #12]
 800c36a:	6643      	str	r3, [r0, #100]	; 0x64
 800c36c:	81c2      	strh	r2, [r0, #14]
 800c36e:	6183      	str	r3, [r0, #24]
 800c370:	4619      	mov	r1, r3
 800c372:	2208      	movs	r2, #8
 800c374:	305c      	adds	r0, #92	; 0x5c
 800c376:	f7fe ffe3 	bl	800b340 <memset>
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x38>)
 800c37c:	6263      	str	r3, [r4, #36]	; 0x24
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x3c>)
 800c380:	62a3      	str	r3, [r4, #40]	; 0x28
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x40>)
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <std+0x44>)
 800c388:	6224      	str	r4, [r4, #32]
 800c38a:	6323      	str	r3, [r4, #48]	; 0x30
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop
 800c390:	0800c749 	.word	0x0800c749
 800c394:	0800c76b 	.word	0x0800c76b
 800c398:	0800c7a3 	.word	0x0800c7a3
 800c39c:	0800c7c7 	.word	0x0800c7c7

0800c3a0 <_cleanup_r>:
 800c3a0:	4901      	ldr	r1, [pc, #4]	; (800c3a8 <_cleanup_r+0x8>)
 800c3a2:	f000 b8af 	b.w	800c504 <_fwalk_reent>
 800c3a6:	bf00      	nop
 800c3a8:	0800c2e1 	.word	0x0800c2e1

0800c3ac <__sfmoreglue>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	2268      	movs	r2, #104	; 0x68
 800c3b0:	1e4d      	subs	r5, r1, #1
 800c3b2:	4355      	muls	r5, r2
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3ba:	f7ff f975 	bl	800b6a8 <_malloc_r>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	b140      	cbz	r0, 800c3d4 <__sfmoreglue+0x28>
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c8:	300c      	adds	r0, #12
 800c3ca:	60a0      	str	r0, [r4, #8]
 800c3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3d0:	f7fe ffb6 	bl	800b340 <memset>
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}

0800c3d8 <__sfp_lock_acquire>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	; (800c3e0 <__sfp_lock_acquire+0x8>)
 800c3da:	f000 b8b3 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800c3de:	bf00      	nop
 800c3e0:	2400c9f5 	.word	0x2400c9f5

0800c3e4 <__sfp_lock_release>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	; (800c3ec <__sfp_lock_release+0x8>)
 800c3e6:	f000 b8ae 	b.w	800c546 <__retarget_lock_release_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	2400c9f5 	.word	0x2400c9f5

0800c3f0 <__sinit_lock_acquire>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__sinit_lock_acquire+0x8>)
 800c3f2:	f000 b8a7 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	2400c9f6 	.word	0x2400c9f6

0800c3fc <__sinit_lock_release>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sinit_lock_release+0x8>)
 800c3fe:	f000 b8a2 	b.w	800c546 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	2400c9f6 	.word	0x2400c9f6

0800c408 <__sinit>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	f7ff fff0 	bl	800c3f0 <__sinit_lock_acquire>
 800c410:	69a3      	ldr	r3, [r4, #24]
 800c412:	b11b      	cbz	r3, 800c41c <__sinit+0x14>
 800c414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c418:	f7ff bff0 	b.w	800c3fc <__sinit_lock_release>
 800c41c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c420:	6523      	str	r3, [r4, #80]	; 0x50
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <__sinit+0x68>)
 800c424:	4a13      	ldr	r2, [pc, #76]	; (800c474 <__sinit+0x6c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	62a2      	str	r2, [r4, #40]	; 0x28
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	bf04      	itt	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	61a3      	streq	r3, [r4, #24]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f820 	bl	800c478 <__sfp>
 800c438:	6060      	str	r0, [r4, #4]
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f81c 	bl	800c478 <__sfp>
 800c440:	60a0      	str	r0, [r4, #8]
 800c442:	4620      	mov	r0, r4
 800c444:	f000 f818 	bl	800c478 <__sfp>
 800c448:	2200      	movs	r2, #0
 800c44a:	60e0      	str	r0, [r4, #12]
 800c44c:	2104      	movs	r1, #4
 800c44e:	6860      	ldr	r0, [r4, #4]
 800c450:	f7ff ff82 	bl	800c358 <std>
 800c454:	68a0      	ldr	r0, [r4, #8]
 800c456:	2201      	movs	r2, #1
 800c458:	2109      	movs	r1, #9
 800c45a:	f7ff ff7d 	bl	800c358 <std>
 800c45e:	68e0      	ldr	r0, [r4, #12]
 800c460:	2202      	movs	r2, #2
 800c462:	2112      	movs	r1, #18
 800c464:	f7ff ff78 	bl	800c358 <std>
 800c468:	2301      	movs	r3, #1
 800c46a:	61a3      	str	r3, [r4, #24]
 800c46c:	e7d2      	b.n	800c414 <__sinit+0xc>
 800c46e:	bf00      	nop
 800c470:	0800c998 	.word	0x0800c998
 800c474:	0800c3a1 	.word	0x0800c3a1

0800c478 <__sfp>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	4607      	mov	r7, r0
 800c47c:	f7ff ffac 	bl	800c3d8 <__sfp_lock_acquire>
 800c480:	4b1e      	ldr	r3, [pc, #120]	; (800c4fc <__sfp+0x84>)
 800c482:	681e      	ldr	r6, [r3, #0]
 800c484:	69b3      	ldr	r3, [r6, #24]
 800c486:	b913      	cbnz	r3, 800c48e <__sfp+0x16>
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ffbd 	bl	800c408 <__sinit>
 800c48e:	3648      	adds	r6, #72	; 0x48
 800c490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c494:	3b01      	subs	r3, #1
 800c496:	d503      	bpl.n	800c4a0 <__sfp+0x28>
 800c498:	6833      	ldr	r3, [r6, #0]
 800c49a:	b30b      	cbz	r3, 800c4e0 <__sfp+0x68>
 800c49c:	6836      	ldr	r6, [r6, #0]
 800c49e:	e7f7      	b.n	800c490 <__sfp+0x18>
 800c4a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4a4:	b9d5      	cbnz	r5, 800c4dc <__sfp+0x64>
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <__sfp+0x88>)
 800c4a8:	60e3      	str	r3, [r4, #12]
 800c4aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c4b0:	f000 f847 	bl	800c542 <__retarget_lock_init_recursive>
 800c4b4:	f7ff ff96 	bl	800c3e4 <__sfp_lock_release>
 800c4b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4c0:	6025      	str	r5, [r4, #0]
 800c4c2:	61a5      	str	r5, [r4, #24]
 800c4c4:	2208      	movs	r2, #8
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4cc:	f7fe ff38 	bl	800b340 <memset>
 800c4d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4dc:	3468      	adds	r4, #104	; 0x68
 800c4de:	e7d9      	b.n	800c494 <__sfp+0x1c>
 800c4e0:	2104      	movs	r1, #4
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7ff ff62 	bl	800c3ac <__sfmoreglue>
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	6030      	str	r0, [r6, #0]
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d1d5      	bne.n	800c49c <__sfp+0x24>
 800c4f0:	f7ff ff78 	bl	800c3e4 <__sfp_lock_release>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	e7ee      	b.n	800c4d8 <__sfp+0x60>
 800c4fa:	bf00      	nop
 800c4fc:	0800c998 	.word	0x0800c998
 800c500:	ffff0001 	.word	0xffff0001

0800c504 <_fwalk_reent>:
 800c504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c508:	4606      	mov	r6, r0
 800c50a:	4688      	mov	r8, r1
 800c50c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c510:	2700      	movs	r7, #0
 800c512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c516:	f1b9 0901 	subs.w	r9, r9, #1
 800c51a:	d505      	bpl.n	800c528 <_fwalk_reent+0x24>
 800c51c:	6824      	ldr	r4, [r4, #0]
 800c51e:	2c00      	cmp	r4, #0
 800c520:	d1f7      	bne.n	800c512 <_fwalk_reent+0xe>
 800c522:	4638      	mov	r0, r7
 800c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c528:	89ab      	ldrh	r3, [r5, #12]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d907      	bls.n	800c53e <_fwalk_reent+0x3a>
 800c52e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c532:	3301      	adds	r3, #1
 800c534:	d003      	beq.n	800c53e <_fwalk_reent+0x3a>
 800c536:	4629      	mov	r1, r5
 800c538:	4630      	mov	r0, r6
 800c53a:	47c0      	blx	r8
 800c53c:	4307      	orrs	r7, r0
 800c53e:	3568      	adds	r5, #104	; 0x68
 800c540:	e7e9      	b.n	800c516 <_fwalk_reent+0x12>

0800c542 <__retarget_lock_init_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_acquire_recursive>:
 800c544:	4770      	bx	lr

0800c546 <__retarget_lock_release_recursive>:
 800c546:	4770      	bx	lr

0800c548 <__swhatbuf_r>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	460e      	mov	r6, r1
 800c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c550:	2900      	cmp	r1, #0
 800c552:	b096      	sub	sp, #88	; 0x58
 800c554:	4614      	mov	r4, r2
 800c556:	461d      	mov	r5, r3
 800c558:	da08      	bge.n	800c56c <__swhatbuf_r+0x24>
 800c55a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	602a      	str	r2, [r5, #0]
 800c562:	061a      	lsls	r2, r3, #24
 800c564:	d410      	bmi.n	800c588 <__swhatbuf_r+0x40>
 800c566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c56a:	e00e      	b.n	800c58a <__swhatbuf_r+0x42>
 800c56c:	466a      	mov	r2, sp
 800c56e:	f000 f951 	bl	800c814 <_fstat_r>
 800c572:	2800      	cmp	r0, #0
 800c574:	dbf1      	blt.n	800c55a <__swhatbuf_r+0x12>
 800c576:	9a01      	ldr	r2, [sp, #4]
 800c578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c57c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c580:	425a      	negs	r2, r3
 800c582:	415a      	adcs	r2, r3
 800c584:	602a      	str	r2, [r5, #0]
 800c586:	e7ee      	b.n	800c566 <__swhatbuf_r+0x1e>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	2000      	movs	r0, #0
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	b016      	add	sp, #88	; 0x58
 800c590:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c594 <__smakebuf_r>:
 800c594:	898b      	ldrh	r3, [r1, #12]
 800c596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c598:	079d      	lsls	r5, r3, #30
 800c59a:	4606      	mov	r6, r0
 800c59c:	460c      	mov	r4, r1
 800c59e:	d507      	bpl.n	800c5b0 <__smakebuf_r+0x1c>
 800c5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	6123      	str	r3, [r4, #16]
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	6163      	str	r3, [r4, #20]
 800c5ac:	b002      	add	sp, #8
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	ab01      	add	r3, sp, #4
 800c5b2:	466a      	mov	r2, sp
 800c5b4:	f7ff ffc8 	bl	800c548 <__swhatbuf_r>
 800c5b8:	9900      	ldr	r1, [sp, #0]
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff f873 	bl	800b6a8 <_malloc_r>
 800c5c2:	b948      	cbnz	r0, 800c5d8 <__smakebuf_r+0x44>
 800c5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c8:	059a      	lsls	r2, r3, #22
 800c5ca:	d4ef      	bmi.n	800c5ac <__smakebuf_r+0x18>
 800c5cc:	f023 0303 	bic.w	r3, r3, #3
 800c5d0:	f043 0302 	orr.w	r3, r3, #2
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	e7e3      	b.n	800c5a0 <__smakebuf_r+0xc>
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <__smakebuf_r+0x7c>)
 800c5da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	6020      	str	r0, [r4, #0]
 800c5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	9b00      	ldr	r3, [sp, #0]
 800c5e8:	6163      	str	r3, [r4, #20]
 800c5ea:	9b01      	ldr	r3, [sp, #4]
 800c5ec:	6120      	str	r0, [r4, #16]
 800c5ee:	b15b      	cbz	r3, 800c608 <__smakebuf_r+0x74>
 800c5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f000 f91f 	bl	800c838 <_isatty_r>
 800c5fa:	b128      	cbz	r0, 800c608 <__smakebuf_r+0x74>
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	f023 0303 	bic.w	r3, r3, #3
 800c602:	f043 0301 	orr.w	r3, r3, #1
 800c606:	81a3      	strh	r3, [r4, #12]
 800c608:	89a0      	ldrh	r0, [r4, #12]
 800c60a:	4305      	orrs	r5, r0
 800c60c:	81a5      	strh	r5, [r4, #12]
 800c60e:	e7cd      	b.n	800c5ac <__smakebuf_r+0x18>
 800c610:	0800c3a1 	.word	0x0800c3a1

0800c614 <memmove>:
 800c614:	4288      	cmp	r0, r1
 800c616:	b510      	push	{r4, lr}
 800c618:	eb01 0402 	add.w	r4, r1, r2
 800c61c:	d902      	bls.n	800c624 <memmove+0x10>
 800c61e:	4284      	cmp	r4, r0
 800c620:	4623      	mov	r3, r4
 800c622:	d807      	bhi.n	800c634 <memmove+0x20>
 800c624:	1e43      	subs	r3, r0, #1
 800c626:	42a1      	cmp	r1, r4
 800c628:	d008      	beq.n	800c63c <memmove+0x28>
 800c62a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c62e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c632:	e7f8      	b.n	800c626 <memmove+0x12>
 800c634:	4402      	add	r2, r0
 800c636:	4601      	mov	r1, r0
 800c638:	428a      	cmp	r2, r1
 800c63a:	d100      	bne.n	800c63e <memmove+0x2a>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c646:	e7f7      	b.n	800c638 <memmove+0x24>

0800c648 <__malloc_lock>:
 800c648:	4801      	ldr	r0, [pc, #4]	; (800c650 <__malloc_lock+0x8>)
 800c64a:	f7ff bf7b 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800c64e:	bf00      	nop
 800c650:	2400c9f4 	.word	0x2400c9f4

0800c654 <__malloc_unlock>:
 800c654:	4801      	ldr	r0, [pc, #4]	; (800c65c <__malloc_unlock+0x8>)
 800c656:	f7ff bf76 	b.w	800c546 <__retarget_lock_release_recursive>
 800c65a:	bf00      	nop
 800c65c:	2400c9f4 	.word	0x2400c9f4

0800c660 <_realloc_r>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	4680      	mov	r8, r0
 800c666:	4614      	mov	r4, r2
 800c668:	460e      	mov	r6, r1
 800c66a:	b921      	cbnz	r1, 800c676 <_realloc_r+0x16>
 800c66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	4611      	mov	r1, r2
 800c672:	f7ff b819 	b.w	800b6a8 <_malloc_r>
 800c676:	b92a      	cbnz	r2, 800c684 <_realloc_r+0x24>
 800c678:	f7fe ffaa 	bl	800b5d0 <_free_r>
 800c67c:	4625      	mov	r5, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	f000 f8fa 	bl	800c87c <_malloc_usable_size_r>
 800c688:	4284      	cmp	r4, r0
 800c68a:	4607      	mov	r7, r0
 800c68c:	d802      	bhi.n	800c694 <_realloc_r+0x34>
 800c68e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c692:	d812      	bhi.n	800c6ba <_realloc_r+0x5a>
 800c694:	4621      	mov	r1, r4
 800c696:	4640      	mov	r0, r8
 800c698:	f7ff f806 	bl	800b6a8 <_malloc_r>
 800c69c:	4605      	mov	r5, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d0ed      	beq.n	800c67e <_realloc_r+0x1e>
 800c6a2:	42bc      	cmp	r4, r7
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	bf28      	it	cs
 800c6aa:	463a      	movcs	r2, r7
 800c6ac:	f7fe fe3a 	bl	800b324 <memcpy>
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4640      	mov	r0, r8
 800c6b4:	f7fe ff8c 	bl	800b5d0 <_free_r>
 800c6b8:	e7e1      	b.n	800c67e <_realloc_r+0x1e>
 800c6ba:	4635      	mov	r5, r6
 800c6bc:	e7df      	b.n	800c67e <_realloc_r+0x1e>

0800c6be <_raise_r>:
 800c6be:	291f      	cmp	r1, #31
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	d904      	bls.n	800c6d2 <_raise_r+0x14>
 800c6c8:	2316      	movs	r3, #22
 800c6ca:	6003      	str	r3, [r0, #0]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6d4:	b112      	cbz	r2, 800c6dc <_raise_r+0x1e>
 800c6d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6da:	b94b      	cbnz	r3, 800c6f0 <_raise_r+0x32>
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 f831 	bl	800c744 <_getpid_r>
 800c6e2:	462a      	mov	r2, r5
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ec:	f000 b818 	b.w	800c720 <_kill_r>
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d00a      	beq.n	800c70a <_raise_r+0x4c>
 800c6f4:	1c59      	adds	r1, r3, #1
 800c6f6:	d103      	bne.n	800c700 <_raise_r+0x42>
 800c6f8:	2316      	movs	r3, #22
 800c6fa:	6003      	str	r3, [r0, #0]
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	e7e7      	b.n	800c6d0 <_raise_r+0x12>
 800c700:	2400      	movs	r4, #0
 800c702:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c706:	4628      	mov	r0, r5
 800c708:	4798      	blx	r3
 800c70a:	2000      	movs	r0, #0
 800c70c:	e7e0      	b.n	800c6d0 <_raise_r+0x12>
	...

0800c710 <raise>:
 800c710:	4b02      	ldr	r3, [pc, #8]	; (800c71c <raise+0xc>)
 800c712:	4601      	mov	r1, r0
 800c714:	6818      	ldr	r0, [r3, #0]
 800c716:	f7ff bfd2 	b.w	800c6be <_raise_r>
 800c71a:	bf00      	nop
 800c71c:	240001a0 	.word	0x240001a0

0800c720 <_kill_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d07      	ldr	r5, [pc, #28]	; (800c740 <_kill_r+0x20>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f5 fb85 	bl	8001e3c <_kill>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d102      	bne.n	800c73c <_kill_r+0x1c>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b103      	cbz	r3, 800c73c <_kill_r+0x1c>
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	2400c9f8 	.word	0x2400c9f8

0800c744 <_getpid_r>:
 800c744:	f7f5 bb72 	b.w	8001e2c <_getpid>

0800c748 <__sread>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	f000 f89c 	bl	800c88c <_read_r>
 800c754:	2800      	cmp	r0, #0
 800c756:	bfab      	itete	ge
 800c758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c75a:	89a3      	ldrhlt	r3, [r4, #12]
 800c75c:	181b      	addge	r3, r3, r0
 800c75e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c762:	bfac      	ite	ge
 800c764:	6563      	strge	r3, [r4, #84]	; 0x54
 800c766:	81a3      	strhlt	r3, [r4, #12]
 800c768:	bd10      	pop	{r4, pc}

0800c76a <__swrite>:
 800c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	461f      	mov	r7, r3
 800c770:	898b      	ldrh	r3, [r1, #12]
 800c772:	05db      	lsls	r3, r3, #23
 800c774:	4605      	mov	r5, r0
 800c776:	460c      	mov	r4, r1
 800c778:	4616      	mov	r6, r2
 800c77a:	d505      	bpl.n	800c788 <__swrite+0x1e>
 800c77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c780:	2302      	movs	r3, #2
 800c782:	2200      	movs	r2, #0
 800c784:	f000 f868 	bl	800c858 <_lseek_r>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c78e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	4628      	mov	r0, r5
 800c79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c79e:	f000 b817 	b.w	800c7d0 <_write_r>

0800c7a2 <__sseek>:
 800c7a2:	b510      	push	{r4, lr}
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7aa:	f000 f855 	bl	800c858 <_lseek_r>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	bf15      	itete	ne
 800c7b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7be:	81a3      	strheq	r3, [r4, #12]
 800c7c0:	bf18      	it	ne
 800c7c2:	81a3      	strhne	r3, [r4, #12]
 800c7c4:	bd10      	pop	{r4, pc}

0800c7c6 <__sclose>:
 800c7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ca:	f000 b813 	b.w	800c7f4 <_close_r>
	...

0800c7d0 <_write_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d07      	ldr	r5, [pc, #28]	; (800c7f0 <_write_r+0x20>)
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	4608      	mov	r0, r1
 800c7d8:	4611      	mov	r1, r2
 800c7da:	2200      	movs	r2, #0
 800c7dc:	602a      	str	r2, [r5, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	f7f5 fb63 	bl	8001eaa <_write>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_write_r+0x1e>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_write_r+0x1e>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	2400c9f8 	.word	0x2400c9f8

0800c7f4 <_close_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	4d06      	ldr	r5, [pc, #24]	; (800c810 <_close_r+0x1c>)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f5 fb6f 	bl	8001ee2 <_close>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_close_r+0x1a>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_close_r+0x1a>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	2400c9f8 	.word	0x2400c9f8

0800c814 <_fstat_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4d07      	ldr	r5, [pc, #28]	; (800c834 <_fstat_r+0x20>)
 800c818:	2300      	movs	r3, #0
 800c81a:	4604      	mov	r4, r0
 800c81c:	4608      	mov	r0, r1
 800c81e:	4611      	mov	r1, r2
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	f7f5 fb6a 	bl	8001efa <_fstat>
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	d102      	bne.n	800c830 <_fstat_r+0x1c>
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	b103      	cbz	r3, 800c830 <_fstat_r+0x1c>
 800c82e:	6023      	str	r3, [r4, #0]
 800c830:	bd38      	pop	{r3, r4, r5, pc}
 800c832:	bf00      	nop
 800c834:	2400c9f8 	.word	0x2400c9f8

0800c838 <_isatty_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4d06      	ldr	r5, [pc, #24]	; (800c854 <_isatty_r+0x1c>)
 800c83c:	2300      	movs	r3, #0
 800c83e:	4604      	mov	r4, r0
 800c840:	4608      	mov	r0, r1
 800c842:	602b      	str	r3, [r5, #0]
 800c844:	f7f5 fb69 	bl	8001f1a <_isatty>
 800c848:	1c43      	adds	r3, r0, #1
 800c84a:	d102      	bne.n	800c852 <_isatty_r+0x1a>
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	b103      	cbz	r3, 800c852 <_isatty_r+0x1a>
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	2400c9f8 	.word	0x2400c9f8

0800c858 <_lseek_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d07      	ldr	r5, [pc, #28]	; (800c878 <_lseek_r+0x20>)
 800c85c:	4604      	mov	r4, r0
 800c85e:	4608      	mov	r0, r1
 800c860:	4611      	mov	r1, r2
 800c862:	2200      	movs	r2, #0
 800c864:	602a      	str	r2, [r5, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f7f5 fb62 	bl	8001f30 <_lseek>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_lseek_r+0x1e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_lseek_r+0x1e>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	2400c9f8 	.word	0x2400c9f8

0800c87c <_malloc_usable_size_r>:
 800c87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c880:	1f18      	subs	r0, r3, #4
 800c882:	2b00      	cmp	r3, #0
 800c884:	bfbc      	itt	lt
 800c886:	580b      	ldrlt	r3, [r1, r0]
 800c888:	18c0      	addlt	r0, r0, r3
 800c88a:	4770      	bx	lr

0800c88c <_read_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_read_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f5 fae8 	bl	8001e70 <_read>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_read_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_read_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	2400c9f8 	.word	0x2400c9f8

0800c8b0 <_init>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	bf00      	nop
 800c8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b6:	bc08      	pop	{r3}
 800c8b8:	469e      	mov	lr, r3
 800c8ba:	4770      	bx	lr

0800c8bc <_fini>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr
