
contact_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800c7a8  0800c7a8  0001c7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ca64  0800ca64  0001ca64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  24000000  0800ca68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000c7f8  24000204  0800cc6c  00020204  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400c9fc  0800cc6c  0002c9fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cca2  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003bb5  00000000  00000000  0003ced4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016c8  00000000  00000000  00040a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001520  00000000  00000000  00042158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036dfa  00000000  00000000  00043678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cbb0  00000000  00000000  0007a472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ee4d  00000000  00000000  00097022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e5e6f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006bb0  00000000  00000000  001e5ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000204 	.word	0x24000204
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c790 	.word	0x0800c790

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000208 	.word	0x24000208
 800030c:	0800c790 	.word	0x0800c790

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	expDuration_us = 6*(int)(exposureVal/60);
 80003da:	4bb3      	ldr	r3, [pc, #716]	; (80006a8 <main+0x2d8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4ab3      	ldr	r2, [pc, #716]	; (80006ac <main+0x2dc>)
 80003e0:	fb82 1203 	smull	r1, r2, r2, r3
 80003e4:	441a      	add	r2, r3
 80003e6:	1152      	asrs	r2, r2, #5
 80003e8:	17db      	asrs	r3, r3, #31
 80003ea:	1ad2      	subs	r2, r2, r3
 80003ec:	4613      	mov	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4413      	add	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	461a      	mov	r2, r3
 80003f6:	4bae      	ldr	r3, [pc, #696]	; (80006b0 <main+0x2e0>)
 80003f8:	601a      	str	r2, [r3, #0]

	uint8_t singlePx_value[TOTAL_PIXELS*2]; //*2 since the USB 8 bit at a time
	unsigned int organizeDataToSend = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f642 028c 	movw	r2, #10380	; 0x288c
 8000400:	443a      	add	r2, r7
 8000402:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f001 fdfa 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 fcde 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 fe90 	bl	8001130 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000410:	f000 fd4a 	bl	8000ea8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000414:	f000 fda0 	bl	8000f58 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000418:	f00a f970 	bl	800a6fc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800041c:	f000 fdea 	bl	8000ff4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000420:	f000 fe36 	bl	8001090 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	/* Configuring AD9826 through SPI*/
	MACRO_AD9826_CLR_SCLK
 8000424:	4ba3      	ldr	r3, [pc, #652]	; (80006b4 <main+0x2e4>)
 8000426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1,(uint8_t *)&reg_AD9826_config, 1, HAL_MAX_DELAY);
 800042c:	f04f 33ff 	mov.w	r3, #4294967295
 8000430:	2201      	movs	r2, #1
 8000432:	49a1      	ldr	r1, [pc, #644]	; (80006b8 <main+0x2e8>)
 8000434:	48a1      	ldr	r0, [pc, #644]	; (80006bc <main+0x2ec>)
 8000436:	f005 fd13 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 800043a:	4b9e      	ldr	r3, [pc, #632]	; (80006b4 <main+0x2e4>)
 800043c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000440:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 8000442:	4b9c      	ldr	r3, [pc, #624]	; (80006b4 <main+0x2e4>)
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_MUXconfig, 1, HAL_MAX_DELAY);
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	2201      	movs	r2, #1
 8000450:	499b      	ldr	r1, [pc, #620]	; (80006c0 <main+0x2f0>)
 8000452:	489a      	ldr	r0, [pc, #616]	; (80006bc <main+0x2ec>)
 8000454:	f005 fd04 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000458:	4b96      	ldr	r3, [pc, #600]	; (80006b4 <main+0x2e4>)
 800045a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800045e:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 8000460:	4b94      	ldr	r3, [pc, #592]	; (80006b4 <main+0x2e4>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	2201      	movs	r2, #1
 800046e:	4995      	ldr	r1, [pc, #596]	; (80006c4 <main+0x2f4>)
 8000470:	4892      	ldr	r0, [pc, #584]	; (80006bc <main+0x2ec>)
 8000472:	f005 fcf5 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000476:	4b8f      	ldr	r3, [pc, #572]	; (80006b4 <main+0x2e4>)
 8000478:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047c:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 800047e:	4b8d      	ldr	r3, [pc, #564]	; (80006b4 <main+0x2e4>)
 8000480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000484:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	2201      	movs	r2, #1
 800048c:	498e      	ldr	r1, [pc, #568]	; (80006c8 <main+0x2f8>)
 800048e:	488b      	ldr	r0, [pc, #556]	; (80006bc <main+0x2ec>)
 8000490:	f005 fce6 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 8000494:	4b87      	ldr	r3, [pc, #540]	; (80006b4 <main+0x2e4>)
 8000496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800049a:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 800049c:	4b85      	ldr	r3, [pc, #532]	; (80006b4 <main+0x2e4>)
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 80004a4:	f04f 33ff 	mov.w	r3, #4294967295
 80004a8:	2201      	movs	r2, #1
 80004aa:	4988      	ldr	r1, [pc, #544]	; (80006cc <main+0x2fc>)
 80004ac:	4883      	ldr	r0, [pc, #524]	; (80006bc <main+0x2ec>)
 80004ae:	f005 fcd7 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004b2:	4b80      	ldr	r3, [pc, #512]	; (80006b4 <main+0x2e4>)
 80004b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004b8:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004ba:	4b7e      	ldr	r3, [pc, #504]	; (80006b4 <main+0x2e4>)
 80004bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	2201      	movs	r2, #1
 80004c8:	4981      	ldr	r1, [pc, #516]	; (80006d0 <main+0x300>)
 80004ca:	487c      	ldr	r0, [pc, #496]	; (80006bc <main+0x2ec>)
 80004cc:	f005 fcc8 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004d0:	4b78      	ldr	r3, [pc, #480]	; (80006b4 <main+0x2e4>)
 80004d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d6:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004d8:	4b76      	ldr	r3, [pc, #472]	; (80006b4 <main+0x2e4>)
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 80004e0:	f04f 33ff 	mov.w	r3, #4294967295
 80004e4:	2201      	movs	r2, #1
 80004e6:	497b      	ldr	r1, [pc, #492]	; (80006d4 <main+0x304>)
 80004e8:	4874      	ldr	r0, [pc, #464]	; (80006bc <main+0x2ec>)
 80004ea:	f005 fcb9 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 80004ee:	4b71      	ldr	r3, [pc, #452]	; (80006b4 <main+0x2e4>)
 80004f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004f4:	619a      	str	r2, [r3, #24]

	MACRO_AD9826_CLR_SCLK
 80004f6:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <main+0x2e4>)
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fc:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	2201      	movs	r2, #1
 8000504:	4974      	ldr	r1, [pc, #464]	; (80006d8 <main+0x308>)
 8000506:	486d      	ldr	r0, [pc, #436]	; (80006bc <main+0x2ec>)
 8000508:	f005 fcaa 	bl	8005e60 <HAL_SPI_Transmit>
	MACRO_AD9826_SET_SCLK
 800050c:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <main+0x2e4>)
 800050e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000512:	619a      	str	r2, [r3, #24]


	//HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
	HAL_TIM_Base_Start_IT(&htim4);	 	// Start timer 4
 8000514:	4871      	ldr	r0, [pc, #452]	; (80006dc <main+0x30c>)
 8000516:	f005 ffd5 	bl	80064c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		// tokenize command recevied in CDC_Receive_FS(...) (file: usbd_cdc_ig.c)
		token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 800051a:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <main+0x310>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4870      	ldr	r0, [pc, #448]	; (80006e4 <main+0x314>)
 8000522:	f00a fea5 	bl	800b270 <strtok>
 8000526:	4603      	mov	r3, r0
 8000528:	4a6f      	ldr	r2, [pc, #444]	; (80006e8 <main+0x318>)
 800052a:	6013      	str	r3, [r2, #0]
		if (token != NULL)
 800052c:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <main+0x318>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	f000 834e 	beq.w	8000bd2 <main+0x802>
		{
			if(strcmp(token,strCMD_1) == 0)
 8000536:	4b6c      	ldr	r3, [pc, #432]	; (80006e8 <main+0x318>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	496c      	ldr	r1, [pc, #432]	; (80006ec <main+0x31c>)
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fee7 	bl	8000310 <strcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d113      	bne.n	8000570 <main+0x1a0>
			{
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always after receiving
 8000548:	2240      	movs	r2, #64	; 0x40
 800054a:	2100      	movs	r1, #0
 800054c:	4865      	ldr	r0, [pc, #404]	; (80006e4 <main+0x314>)
 800054e:	f00a fe67 	bl	800b220 <memset>

				enableSampleTimerFlag = 1;
 8000552:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <main+0x320>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);    // Start timer 2
 8000558:	4866      	ldr	r0, [pc, #408]	; (80006f4 <main+0x324>)
 800055a:	f005 ffb3 	bl	80064c4 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim3);	  // Start timer 3
 800055e:	4866      	ldr	r0, [pc, #408]	; (80006f8 <main+0x328>)
 8000560:	f005 ffb0 	bl	80064c4 <HAL_TIM_Base_Start_IT>

				MACRO_LED_YELLOW_SET
 8000564:	4b65      	ldr	r3, [pc, #404]	; (80006fc <main+0x32c>)
 8000566:	2202      	movs	r2, #2
 8000568:	619a      	str	r2, [r3, #24]
				Led_cnt = 0;
 800056a:	4b65      	ldr	r3, [pc, #404]	; (8000700 <main+0x330>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
				//        GPIOE->BSRR = GPIO_PIN_1;  // On-board Yellow LED Set to "1"
			}
			if(strcmp(token,strCMD_2) == 0)
 8000570:	4b5d      	ldr	r3, [pc, #372]	; (80006e8 <main+0x318>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4963      	ldr	r1, [pc, #396]	; (8000704 <main+0x334>)
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff feca 	bl	8000310 <strcmp>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d137      	bne.n	80005f2 <main+0x222>
			{
				token = strtok(NULL,tokenSeparator);
 8000582:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <main+0x310>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	2000      	movs	r0, #0
 800058a:	f00a fe71 	bl	800b270 <strtok>
 800058e:	4603      	mov	r3, r0
 8000590:	4a55      	ldr	r2, [pc, #340]	; (80006e8 <main+0x318>)
 8000592:	6013      	str	r3, [r2, #0]
				if(strcmp(token,strCMD_2_1) == 0)
 8000594:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <main+0x318>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	495b      	ldr	r1, [pc, #364]	; (8000708 <main+0x338>)
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff feb8 	bl	8000310 <strcmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d120      	bne.n	80005e8 <main+0x218>
				{
					token = strtok(NULL,tokenSeparator);
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <main+0x310>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2000      	movs	r0, #0
 80005ae:	f00a fe5f 	bl	800b270 <strtok>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a4c      	ldr	r2, [pc, #304]	; (80006e8 <main+0x318>)
 80005b6:	6013      	str	r3, [r2, #0]

					exposureVal = atoi(token);
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <main+0x318>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f00a fdf3 	bl	800b1a8 <atoi>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <main+0x2d8>)
 80005c6:	6013      	str	r3, [r2, #0]
					expDuration_us = 6*(int)(exposureVal/15);
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <main+0x2d8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a37      	ldr	r2, [pc, #220]	; (80006ac <main+0x2dc>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	441a      	add	r2, r3
 80005d4:	10d2      	asrs	r2, r2, #3
 80005d6:	17db      	asrs	r3, r3, #31
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <main+0x2e0>)
 80005e6:	601a      	str	r2, [r3, #0]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	2100      	movs	r1, #0
 80005ec:	483d      	ldr	r0, [pc, #244]	; (80006e4 <main+0x314>)
 80005ee:	f00a fe17 	bl	800b220 <memset>
			}

			if(strcmp(token,strCMD_3) == 0)
 80005f2:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <main+0x318>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4945      	ldr	r1, [pc, #276]	; (800070c <main+0x33c>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe89 	bl	8000310 <strcmp>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d137      	bne.n	8000674 <main+0x2a4>
			{
				token = strtok(NULL,tokenSeparator);
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <main+0x310>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	2000      	movs	r0, #0
 800060c:	f00a fe30 	bl	800b270 <strtok>
 8000610:	4603      	mov	r3, r0
 8000612:	4a35      	ldr	r2, [pc, #212]	; (80006e8 <main+0x318>)
 8000614:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <main+0x318>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f00a fdc4 	bl	800b1a8 <atoi>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <main+0x340>)
 8000626:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <main+0x340>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b3f      	cmp	r3, #63	; 0x3f
 800062e:	d81c      	bhi.n	800066a <main+0x29a>
				{
					reg_AD9826_redPGA &= 0xFFC0;  // clear only gain bits
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <main+0x2f4>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000638:	4013      	ands	r3, r2
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <main+0x2f4>)
 800063c:	6013      	str	r3, [r2, #0]
					reg_AD9826_redPGA |= tokenVal;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <main+0x2f4>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <main+0x340>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4313      	orrs	r3, r2
 8000648:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <main+0x2f4>)
 800064a:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0x2e4>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redPGA, 1, HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2201      	movs	r2, #1
 800065a:	491a      	ldr	r1, [pc, #104]	; (80006c4 <main+0x2f4>)
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0x2ec>)
 800065e:	f005 fbff 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <main+0x2e4>)
 8000664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000668:	619a      	str	r2, [r3, #24]

					//          msgVCP_len = sprintf(msgVCP, "RPGA %d\n", tokenVal);
					//          CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	2100      	movs	r1, #0
 800066e:	481d      	ldr	r0, [pc, #116]	; (80006e4 <main+0x314>)
 8000670:	f00a fdd6 	bl	800b220 <memset>
			}

			if(strcmp(token,strCMD_4) == 0)
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x318>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4926      	ldr	r1, [pc, #152]	; (8000714 <main+0x344>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe48 	bl	8000310 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d170      	bne.n	8000768 <main+0x398>
			{
				token = strtok(NULL,tokenSeparator);
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <main+0x310>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2000      	movs	r0, #0
 800068e:	f00a fdef 	bl	800b270 <strtok>
 8000692:	4603      	mov	r3, r0
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <main+0x318>)
 8000696:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main+0x318>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f00a fd83 	bl	800b1a8 <atoi>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	e037      	b.n	8000718 <main+0x348>
 80006a8:	2400009c 	.word	0x2400009c
 80006ac:	88888889 	.word	0x88888889
 80006b0:	24000bac 	.word	0x24000bac
 80006b4:	58020c00 	.word	0x58020c00
 80006b8:	0800c800 	.word	0x0800c800
 80006bc:	24000220 	.word	0x24000220
 80006c0:	0800c804 	.word	0x0800c804
 80006c4:	2400000c 	.word	0x2400000c
 80006c8:	24000010 	.word	0x24000010
 80006cc:	24000014 	.word	0x24000014
 80006d0:	24000018 	.word	0x24000018
 80006d4:	2400001c 	.word	0x2400001c
 80006d8:	24000020 	.word	0x24000020
 80006dc:	24000340 	.word	0x24000340
 80006e0:	24000024 	.word	0x24000024
 80006e4:	2400038c 	.word	0x2400038c
 80006e8:	24000b60 	.word	0x24000b60
 80006ec:	2400002c 	.word	0x2400002c
 80006f0:	24000b70 	.word	0x24000b70
 80006f4:	240002a8 	.word	0x240002a8
 80006f8:	240002f4 	.word	0x240002f4
 80006fc:	58021000 	.word	0x58021000
 8000700:	24000b98 	.word	0x24000b98
 8000704:	2400003c 	.word	0x2400003c
 8000708:	24000040 	.word	0x24000040
 800070c:	24000044 	.word	0x24000044
 8000710:	24000ba8 	.word	0x24000ba8
 8000714:	2400004c 	.word	0x2400004c
 8000718:	4ba5      	ldr	r3, [pc, #660]	; (80009b0 <main+0x5e0>)
 800071a:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 800071c:	4ba4      	ldr	r3, [pc, #656]	; (80009b0 <main+0x5e0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b3f      	cmp	r3, #63	; 0x3f
 8000722:	d81c      	bhi.n	800075e <main+0x38e>
				{
					reg_AD9826_greenPGA &= 0xFFC0;  // clear only gain bits
 8000724:	4ba3      	ldr	r3, [pc, #652]	; (80009b4 <main+0x5e4>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800072c:	4013      	ands	r3, r2
 800072e:	4aa1      	ldr	r2, [pc, #644]	; (80009b4 <main+0x5e4>)
 8000730:	6013      	str	r3, [r2, #0]
					reg_AD9826_greenPGA |= tokenVal;
 8000732:	4ba0      	ldr	r3, [pc, #640]	; (80009b4 <main+0x5e4>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b9e      	ldr	r3, [pc, #632]	; (80009b0 <main+0x5e0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4313      	orrs	r3, r2
 800073c:	4a9d      	ldr	r2, [pc, #628]	; (80009b4 <main+0x5e4>)
 800073e:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000740:	4b9d      	ldr	r3, [pc, #628]	; (80009b8 <main+0x5e8>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenPGA, 1, HAL_MAX_DELAY);
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	4999      	ldr	r1, [pc, #612]	; (80009b4 <main+0x5e4>)
 8000750:	489a      	ldr	r0, [pc, #616]	; (80009bc <main+0x5ec>)
 8000752:	f005 fb85 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000756:	4b98      	ldr	r3, [pc, #608]	; (80009b8 <main+0x5e8>)
 8000758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075c:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 800075e:	2240      	movs	r2, #64	; 0x40
 8000760:	2100      	movs	r1, #0
 8000762:	4897      	ldr	r0, [pc, #604]	; (80009c0 <main+0x5f0>)
 8000764:	f00a fd5c 	bl	800b220 <memset>
			}

			if(strcmp(token,strCMD_5) == 0)
 8000768:	4b96      	ldr	r3, [pc, #600]	; (80009c4 <main+0x5f4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4996      	ldr	r1, [pc, #600]	; (80009c8 <main+0x5f8>)
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fdce 	bl	8000310 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d137      	bne.n	80007ea <main+0x41a>
			{
				token = strtok(NULL,tokenSeparator);
 800077a:	4b94      	ldr	r3, [pc, #592]	; (80009cc <main+0x5fc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	2000      	movs	r0, #0
 8000782:	f00a fd75 	bl	800b270 <strtok>
 8000786:	4603      	mov	r3, r0
 8000788:	4a8e      	ldr	r2, [pc, #568]	; (80009c4 <main+0x5f4>)
 800078a:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800078c:	4b8d      	ldr	r3, [pc, #564]	; (80009c4 <main+0x5f4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f00a fd09 	bl	800b1a8 <atoi>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <main+0x5e0>)
 800079c:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 63)
 800079e:	4b84      	ldr	r3, [pc, #528]	; (80009b0 <main+0x5e0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b3f      	cmp	r3, #63	; 0x3f
 80007a4:	d81c      	bhi.n	80007e0 <main+0x410>
				{
					reg_AD9826_bluePGA &= 0xFFC0;  // clear only gain bits
 80007a6:	4b8a      	ldr	r3, [pc, #552]	; (80009d0 <main+0x600>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80007ae:	4013      	ands	r3, r2
 80007b0:	4a87      	ldr	r2, [pc, #540]	; (80009d0 <main+0x600>)
 80007b2:	6013      	str	r3, [r2, #0]
					reg_AD9826_bluePGA |= tokenVal;
 80007b4:	4b86      	ldr	r3, [pc, #536]	; (80009d0 <main+0x600>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <main+0x5e0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4313      	orrs	r3, r2
 80007be:	4a84      	ldr	r2, [pc, #528]	; (80009d0 <main+0x600>)
 80007c0:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <main+0x5e8>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_bluePGA, 1, HAL_MAX_DELAY);
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	497f      	ldr	r1, [pc, #508]	; (80009d0 <main+0x600>)
 80007d2:	487a      	ldr	r0, [pc, #488]	; (80009bc <main+0x5ec>)
 80007d4:	f005 fb44 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 80007d8:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <main+0x5e8>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	2100      	movs	r1, #0
 80007e4:	4876      	ldr	r0, [pc, #472]	; (80009c0 <main+0x5f0>)
 80007e6:	f00a fd1b 	bl	800b220 <memset>
			}

			if(strcmp(token,strCMD_6) == 0)
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <main+0x5f4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4979      	ldr	r1, [pc, #484]	; (80009d4 <main+0x604>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd8d 	bl	8000310 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d136      	bne.n	800086a <main+0x49a>
			{
				token = strtok(NULL,tokenSeparator);
 80007fc:	4b73      	ldr	r3, [pc, #460]	; (80009cc <main+0x5fc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	2000      	movs	r0, #0
 8000804:	f00a fd34 	bl	800b270 <strtok>
 8000808:	4603      	mov	r3, r0
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <main+0x5f4>)
 800080c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <main+0x5f4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f00a fcc8 	bl	800b1a8 <atoi>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <main+0x5e0>)
 800081e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 8000820:	4b63      	ldr	r3, [pc, #396]	; (80009b0 <main+0x5e0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d81b      	bhi.n	8000860 <main+0x490>
				{
					reg_AD9826_redOffset &= 0xFF00;  // clear only gain bits
 8000828:	4b6b      	ldr	r3, [pc, #428]	; (80009d8 <main+0x608>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000830:	4a69      	ldr	r2, [pc, #420]	; (80009d8 <main+0x608>)
 8000832:	6013      	str	r3, [r2, #0]
					reg_AD9826_redOffset |= tokenVal;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <main+0x608>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <main+0x5e0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4313      	orrs	r3, r2
 800083e:	4a66      	ldr	r2, [pc, #408]	; (80009d8 <main+0x608>)
 8000840:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000842:	4b5d      	ldr	r3, [pc, #372]	; (80009b8 <main+0x5e8>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000848:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_redOffset, 1, HAL_MAX_DELAY);
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	2201      	movs	r2, #1
 8000850:	4961      	ldr	r1, [pc, #388]	; (80009d8 <main+0x608>)
 8000852:	485a      	ldr	r0, [pc, #360]	; (80009bc <main+0x5ec>)
 8000854:	f005 fb04 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000858:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <main+0x5e8>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	2100      	movs	r1, #0
 8000864:	4856      	ldr	r0, [pc, #344]	; (80009c0 <main+0x5f0>)
 8000866:	f00a fcdb 	bl	800b220 <memset>
			}
			if(strcmp(token,strCMD_7) == 0)
 800086a:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <main+0x5f4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	495b      	ldr	r1, [pc, #364]	; (80009dc <main+0x60c>)
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd4d 	bl	8000310 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d136      	bne.n	80008ea <main+0x51a>
			{
				token = strtok(NULL,tokenSeparator);
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <main+0x5fc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	2000      	movs	r0, #0
 8000884:	f00a fcf4 	bl	800b270 <strtok>
 8000888:	4603      	mov	r3, r0
 800088a:	4a4e      	ldr	r2, [pc, #312]	; (80009c4 <main+0x5f4>)
 800088c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800088e:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <main+0x5f4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f00a fc88 	bl	800b1a8 <atoi>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <main+0x5e0>)
 800089e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 80008a0:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <main+0x5e0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d81b      	bhi.n	80008e0 <main+0x510>
				{
					reg_AD9826_greenOffset &= 0xFF00;  // clear only gain bits
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <main+0x610>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80008b0:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <main+0x610>)
 80008b2:	6013      	str	r3, [r2, #0]
					reg_AD9826_greenOffset |= tokenVal;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <main+0x610>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <main+0x5e0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4313      	orrs	r3, r2
 80008be:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <main+0x610>)
 80008c0:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <main+0x5e8>)
 80008c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c8:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_greenOffset, 1, HAL_MAX_DELAY);
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2201      	movs	r2, #1
 80008d0:	4943      	ldr	r1, [pc, #268]	; (80009e0 <main+0x610>)
 80008d2:	483a      	ldr	r0, [pc, #232]	; (80009bc <main+0x5ec>)
 80008d4:	f005 fac4 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <main+0x5e8>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	2100      	movs	r1, #0
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <main+0x5f0>)
 80008e6:	f00a fc9b 	bl	800b220 <memset>
			}
			if(strcmp(token,strCMD_8) == 0)
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <main+0x5f4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	493d      	ldr	r1, [pc, #244]	; (80009e4 <main+0x614>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fd0d 	bl	8000310 <strcmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d136      	bne.n	800096a <main+0x59a>
			{
				token = strtok(NULL,tokenSeparator);
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <main+0x5fc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	2000      	movs	r0, #0
 8000904:	f00a fcb4 	bl	800b270 <strtok>
 8000908:	4603      	mov	r3, r0
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <main+0x5f4>)
 800090c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <main+0x5f4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f00a fc48 	bl	800b1a8 <atoi>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <main+0x5e0>)
 800091e:	601a      	str	r2, [r3, #0]
				if(tokenVal <= 255)
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <main+0x5e0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d81b      	bhi.n	8000960 <main+0x590>
				{
					reg_AD9826_blueOffset &= 0xFF00;  // clear only gain bits
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <main+0x618>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <main+0x618>)
 8000932:	6013      	str	r3, [r2, #0]
					reg_AD9826_blueOffset |= tokenVal;
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <main+0x618>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <main+0x5e0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4313      	orrs	r3, r2
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <main+0x618>)
 8000940:	6013      	str	r3, [r2, #0]

					MACRO_AD9826_CLR_SCLK
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x5e8>)
 8000944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000948:	619a      	str	r2, [r3, #24]
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_AD9826_blueOffset, 1, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	4925      	ldr	r1, [pc, #148]	; (80009e8 <main+0x618>)
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <main+0x5ec>)
 8000954:	f005 fa84 	bl	8005e60 <HAL_SPI_Transmit>
					MACRO_AD9826_SET_SCLK
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x5e8>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000960:	2240      	movs	r2, #64	; 0x40
 8000962:	2100      	movs	r1, #0
 8000964:	4816      	ldr	r0, [pc, #88]	; (80009c0 <main+0x5f0>)
 8000966:	f00a fc5b 	bl	800b220 <memset>
			}


			if(strcmp(token,strCMD_9) == 0)
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <main+0x5f4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <main+0x61c>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fccd 	bl	8000310 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d146      	bne.n	8000a0a <main+0x63a>
			{
				token = strtok(NULL,tokenSeparator);
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <main+0x5fc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	2000      	movs	r0, #0
 8000984:	f00a fc74 	bl	800b270 <strtok>
 8000988:	4603      	mov	r3, r0
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <main+0x5f4>)
 800098c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <main+0x5f4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f00a fc08 	bl	800b1a8 <atoi>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <main+0x5e0>)
 800099e:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <main+0x5e0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d127      	bne.n	80009f8 <main+0x628>
				{
					MACRO_CIS_LED_RED_SET
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main+0x620>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	e022      	b.n	80009f4 <main+0x624>
 80009ae:	bf00      	nop
 80009b0:	24000ba8 	.word	0x24000ba8
 80009b4:	24000010 	.word	0x24000010
 80009b8:	58020c00 	.word	0x58020c00
 80009bc:	24000220 	.word	0x24000220
 80009c0:	2400038c 	.word	0x2400038c
 80009c4:	24000b60 	.word	0x24000b60
 80009c8:	24000054 	.word	0x24000054
 80009cc:	24000024 	.word	0x24000024
 80009d0:	24000014 	.word	0x24000014
 80009d4:	2400005c 	.word	0x2400005c
 80009d8:	24000018 	.word	0x24000018
 80009dc:	24000064 	.word	0x24000064
 80009e0:	2400001c 	.word	0x2400001c
 80009e4:	2400006c 	.word	0x2400006c
 80009e8:	24000020 	.word	0x24000020
 80009ec:	24000074 	.word	0x24000074
 80009f0:	58021000 	.word	0x58021000
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	e003      	b.n	8000a00 <main+0x630>
				}
				else
				{
					MACRO_CIS_LED_RED_CLR
 80009f8:	4b84      	ldr	r3, [pc, #528]	; (8000c0c <main+0x83c>)
 80009fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009fe:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	2100      	movs	r1, #0
 8000a04:	4882      	ldr	r0, [pc, #520]	; (8000c10 <main+0x840>)
 8000a06:	f00a fc0b 	bl	800b220 <memset>
			}
			if(strcmp(token,strCMD_10) == 0)
 8000a0a:	4b82      	ldr	r3, [pc, #520]	; (8000c14 <main+0x844>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4982      	ldr	r1, [pc, #520]	; (8000c18 <main+0x848>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc7d 	bl	8000310 <strcmp>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d122      	bne.n	8000a62 <main+0x692>
			{
				token = strtok(NULL,tokenSeparator);
 8000a1c:	4b7f      	ldr	r3, [pc, #508]	; (8000c1c <main+0x84c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	f00a fc24 	bl	800b270 <strtok>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a7a      	ldr	r2, [pc, #488]	; (8000c14 <main+0x844>)
 8000a2c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000a2e:	4b79      	ldr	r3, [pc, #484]	; (8000c14 <main+0x844>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00a fbb8 	bl	800b1a8 <atoi>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b78      	ldr	r3, [pc, #480]	; (8000c20 <main+0x850>)
 8000a3e:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 8000a40:	4b77      	ldr	r3, [pc, #476]	; (8000c20 <main+0x850>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d103      	bne.n	8000a50 <main+0x680>
				{
					MACRO_CIS_LED_GREEN_SET
 8000a48:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <main+0x83c>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	e003      	b.n	8000a58 <main+0x688>
				}
				else
				{
					MACRO_CIS_LED_GREEN_CLR
 8000a50:	4b6e      	ldr	r3, [pc, #440]	; (8000c0c <main+0x83c>)
 8000a52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a56:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	486c      	ldr	r0, [pc, #432]	; (8000c10 <main+0x840>)
 8000a5e:	f00a fbdf 	bl	800b220 <memset>
			}
			if(strcmp(token,strCMD_11) == 0)
 8000a62:	4b6c      	ldr	r3, [pc, #432]	; (8000c14 <main+0x844>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	496f      	ldr	r1, [pc, #444]	; (8000c24 <main+0x854>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc51 	bl	8000310 <strcmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d122      	bne.n	8000aba <main+0x6ea>
			{
				token = strtok(NULL,tokenSeparator);
 8000a74:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <main+0x84c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f00a fbf8 	bl	800b270 <strtok>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a64      	ldr	r2, [pc, #400]	; (8000c14 <main+0x844>)
 8000a84:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000a86:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <main+0x844>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00a fb8c 	bl	800b1a8 <atoi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b62      	ldr	r3, [pc, #392]	; (8000c20 <main+0x850>)
 8000a96:	601a      	str	r2, [r3, #0]
				if(tokenVal == 1)
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <main+0x850>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <main+0x6d8>
				{
					MACRO_CIS_LED_BLUE_SET
 8000aa0:	4b5a      	ldr	r3, [pc, #360]	; (8000c0c <main+0x83c>)
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	e003      	b.n	8000ab0 <main+0x6e0>
				}
				else
				{
					MACRO_CIS_LED_BLUE_CLR
 8000aa8:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <main+0x83c>)
 8000aaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aae:	619a      	str	r2, [r3, #24]
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000ab0:	2240      	movs	r2, #64	; 0x40
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4856      	ldr	r0, [pc, #344]	; (8000c10 <main+0x840>)
 8000ab6:	f00a fbb3 	bl	800b220 <memset>
			}

			// Configure the LED RED duration
			if(strcmp(token,strCMD_12) == 0)
 8000aba:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <main+0x844>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	495a      	ldr	r1, [pc, #360]	; (8000c28 <main+0x858>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc25 	bl	8000310 <strcmp>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d11a      	bne.n	8000b02 <main+0x732>
			{
				token = strtok(NULL,tokenSeparator);
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <main+0x84c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f00a fbcc 	bl	800b270 <strtok>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <main+0x844>)
 8000adc:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000ade:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <main+0x844>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00a fb60 	bl	800b1a8 <atoi>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <main+0x850>)
 8000aee:	601a      	str	r2, [r3, #0]
				if(tokenVal >= 0)
				{
					ledExpDuration_R = tokenVal;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <main+0x850>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <main+0x85c>)
 8000af6:	6013      	str	r3, [r2, #0]
				}
				else
				{
					ledExpDuration_R = 0;
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	2100      	movs	r1, #0
 8000afc:	4844      	ldr	r0, [pc, #272]	; (8000c10 <main+0x840>)
 8000afe:	f00a fb8f 	bl	800b220 <memset>
			}
			// Configure the LED GREEN duration
			if(strcmp(token,strCMD_13) == 0)
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <main+0x844>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	494a      	ldr	r1, [pc, #296]	; (8000c30 <main+0x860>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc01 	bl	8000310 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d11a      	bne.n	8000b4a <main+0x77a>
			{
				token = strtok(NULL,tokenSeparator);
 8000b14:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <main+0x84c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f00a fba8 	bl	800b270 <strtok>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a3c      	ldr	r2, [pc, #240]	; (8000c14 <main+0x844>)
 8000b24:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <main+0x844>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00a fb3c 	bl	800b1a8 <atoi>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <main+0x850>)
 8000b36:	601a      	str	r2, [r3, #0]
				if(tokenVal >= 0)
				{
					ledExpDuration_G = tokenVal;
 8000b38:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <main+0x850>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <main+0x864>)
 8000b3e:	6013      	str	r3, [r2, #0]
				}
				else
				{
					ledExpDuration_G = 0;
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	2100      	movs	r1, #0
 8000b44:	4832      	ldr	r0, [pc, #200]	; (8000c10 <main+0x840>)
 8000b46:	f00a fb6b 	bl	800b220 <memset>
			}
			// Configure the LED BLUE duration
			if(strcmp(token,strCMD_14) == 0)
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <main+0x844>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	493a      	ldr	r1, [pc, #232]	; (8000c38 <main+0x868>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fbdd 	bl	8000310 <strcmp>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11a      	bne.n	8000b92 <main+0x7c2>
			{
				token = strtok(NULL,tokenSeparator);
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <main+0x84c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	2000      	movs	r0, #0
 8000b64:	f00a fb84 	bl	800b270 <strtok>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <main+0x844>)
 8000b6c:	6013      	str	r3, [r2, #0]

				tokenVal = atoi(token);
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <main+0x844>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00a fb18 	bl	800b1a8 <atoi>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <main+0x850>)
 8000b7e:	601a      	str	r2, [r3, #0]
				if(tokenVal >= 0)
				{
					ledExpDuration_B = tokenVal;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <main+0x850>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <main+0x86c>)
 8000b86:	6013      	str	r3, [r2, #0]
				}
				else
				{
					ledExpDuration_B = 0;
				}
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4820      	ldr	r0, [pc, #128]	; (8000c10 <main+0x840>)
 8000b8e:	f00a fb47 	bl	800b220 <memset>





			if(strcmp(token,strCMD_ver) == 0)
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <main+0x844>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	492a      	ldr	r1, [pc, #168]	; (8000c40 <main+0x870>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fbb9 	bl	8000310 <strcmp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d116      	bne.n	8000bd2 <main+0x802>
			{
				msgVCP_len = sprintf(msgVCP, "Ver: %d.%d\n", codeVer, codeVerTest);
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <main+0x874>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <main+0x878>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4927      	ldr	r1, [pc, #156]	; (8000c4c <main+0x87c>)
 8000bae:	4828      	ldr	r0, [pc, #160]	; (8000c50 <main+0x880>)
 8000bb0:	f00a fb3e 	bl	800b230 <siprintf>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <main+0x884>)
 8000bb8:	6013      	str	r3, [r2, #0]
				CDC_Transmit_HS((uint8_t *)msgVCP, msgVCP_len);
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <main+0x884>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4823      	ldr	r0, [pc, #140]	; (8000c50 <main+0x880>)
 8000bc4:	f009 fe70 	bl	800a8a8 <CDC_Transmit_HS>
				memset (bufferVCP_Rx, '\0', 64);  // clear the VCP buffer always
 8000bc8:	2240      	movs	r2, #64	; 0x40
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <main+0x840>)
 8000bce:	f00a fb27 	bl	800b220 <memset>

		}



		if(send_data_main)
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <main+0x888>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f43f ac9f 	beq.w	800051a <main+0x14a>
		{
			MACRO_LED_YELLOW_CLR
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <main+0x83c>)
 8000bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be2:	619a      	str	r2, [r3, #24]
			//      GPIOE->BSRR = (uint32_t)GPIO_PIN_1 << 16U; // On-board Yellow LED Set to "0"

			HAL_TIM_Base_Stop_IT(&htim2);
 8000be4:	481d      	ldr	r0, [pc, #116]	; (8000c5c <main+0x88c>)
 8000be6:	f005 fcf3 	bl	80065d0 <HAL_TIM_Base_Stop_IT>
			organizeDataToSend = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f642 028c 	movw	r2, #10380	; 0x288c
 8000bf0:	443a      	add	r2, r7
 8000bf2:	6013      	str	r3, [r2, #0]
			idxUSB = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f642 0288 	movw	r2, #10376	; 0x2888
 8000bfa:	443a      	add	r2, r7
 8000bfc:	6013      	str	r3, [r2, #0]
			idx = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f642 0284 	movw	r2, #10372	; 0x2884
 8000c04:	443a      	add	r2, r7
 8000c06:	6013      	str	r3, [r2, #0]


			while(organizeDataToSend == 0)
 8000c08:	e0b9      	b.n	8000d7e <main+0x9ae>
 8000c0a:	bf00      	nop
 8000c0c:	58021000 	.word	0x58021000
 8000c10:	2400038c 	.word	0x2400038c
 8000c14:	24000b60 	.word	0x24000b60
 8000c18:	2400007c 	.word	0x2400007c
 8000c1c:	24000024 	.word	0x24000024
 8000c20:	24000ba8 	.word	0x24000ba8
 8000c24:	24000088 	.word	0x24000088
 8000c28:	24000090 	.word	0x24000090
 8000c2c:	24000b64 	.word	0x24000b64
 8000c30:	24000094 	.word	0x24000094
 8000c34:	24000b68 	.word	0x24000b68
 8000c38:	24000098 	.word	0x24000098
 8000c3c:	24000b6c 	.word	0x24000b6c
 8000c40:	24000028 	.word	0x24000028
 8000c44:	24000000 	.word	0x24000000
 8000c48:	24000004 	.word	0x24000004
 8000c4c:	0800c7ac 	.word	0x0800c7ac
 8000c50:	24000774 	.word	0x24000774
 8000c54:	24000b5c 	.word	0x24000b5c
 8000c58:	24000b74 	.word	0x24000b74
 8000c5c:	240002a8 	.word	0x240002a8
			{
				//-CH1 (red)
				singlePx_value[idxUSB]   = reg_High[idx];
 8000c60:	4a54      	ldr	r2, [pc, #336]	; (8000db4 <main+0x9e4>)
 8000c62:	f642 0384 	movw	r3, #10372	; 0x2884
 8000c66:	443b      	add	r3, r7
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	b2d9      	uxtb	r1, r3
 8000c70:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8000c74:	f6a3 028c 	subw	r2, r3, #2188	; 0x88c
 8000c78:	f642 0388 	movw	r3, #10376	; 0x2888
 8000c7c:	443b      	add	r3, r7
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	460a      	mov	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
				singlePx_value[idxUSB+1] = reg_Low[idx];
 8000c86:	4a4c      	ldr	r2, [pc, #304]	; (8000db8 <main+0x9e8>)
 8000c88:	f642 0384 	movw	r3, #10372	; 0x2884
 8000c8c:	443b      	add	r3, r7
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c94:	f642 0388 	movw	r3, #10376	; 0x2888
 8000c98:	443b      	add	r3, r7
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2d1      	uxtb	r1, r2
 8000ca0:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000ca4:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000ca8:	54d1      	strb	r1, [r2, r3]
				//-CH2 (Green)
				singlePx_value[idxUSB+2] = reg_High[idx+1];
 8000caa:	f642 0384 	movw	r3, #10372	; 0x2884
 8000cae:	443b      	add	r3, r7
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <main+0x9e4>)
 8000cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cba:	f642 0388 	movw	r3, #10376	; 0x2888
 8000cbe:	443b      	add	r3, r7
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	b2d1      	uxtb	r1, r2
 8000cc6:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000cca:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000cce:	54d1      	strb	r1, [r2, r3]
				singlePx_value[idxUSB+3] = reg_Low[idx+1];
 8000cd0:	f642 0384 	movw	r3, #10372	; 0x2884
 8000cd4:	443b      	add	r3, r7
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a37      	ldr	r2, [pc, #220]	; (8000db8 <main+0x9e8>)
 8000cdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce0:	f642 0388 	movw	r3, #10376	; 0x2888
 8000ce4:	443b      	add	r3, r7
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3303      	adds	r3, #3
 8000cea:	b2d1      	uxtb	r1, r2
 8000cec:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000cf0:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000cf4:	54d1      	strb	r1, [r2, r3]
				//-CH3 (Blue)
				singlePx_value[idxUSB+4] = reg_High[idx+2];
 8000cf6:	f642 0384 	movw	r3, #10372	; 0x2884
 8000cfa:	443b      	add	r3, r7
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <main+0x9e4>)
 8000d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d06:	f642 0388 	movw	r3, #10376	; 0x2888
 8000d0a:	443b      	add	r3, r7
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3304      	adds	r3, #4
 8000d10:	b2d1      	uxtb	r1, r2
 8000d12:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000d16:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000d1a:	54d1      	strb	r1, [r2, r3]
				singlePx_value[idxUSB+5] = reg_Low[idx+2];
 8000d1c:	f642 0384 	movw	r3, #10372	; 0x2884
 8000d20:	443b      	add	r3, r7
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3302      	adds	r3, #2
 8000d26:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <main+0x9e8>)
 8000d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2c:	f642 0388 	movw	r3, #10376	; 0x2888
 8000d30:	443b      	add	r3, r7
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3305      	adds	r3, #5
 8000d36:	b2d1      	uxtb	r1, r2
 8000d38:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8000d3c:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8000d40:	54d1      	strb	r1, [r2, r3]

				idxUSB = idxUSB + 6;
 8000d42:	f642 0388 	movw	r3, #10376	; 0x2888
 8000d46:	443b      	add	r3, r7
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	f642 0288 	movw	r2, #10376	; 0x2888
 8000d50:	443a      	add	r2, r7
 8000d52:	6013      	str	r3, [r2, #0]
				idx    = idx + 3;
 8000d54:	f642 0384 	movw	r3, #10372	; 0x2884
 8000d58:	443b      	add	r3, r7
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	f642 0284 	movw	r2, #10372	; 0x2884
 8000d62:	443a      	add	r2, r7
 8000d64:	6013      	str	r3, [r2, #0]

				if(idx >= TOTAL_PIXELS)
 8000d66:	f642 0384 	movw	r3, #10372	; 0x2884
 8000d6a:	443b      	add	r3, r7
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 8000d72:	db04      	blt.n	8000d7e <main+0x9ae>
				{
					organizeDataToSend = 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f642 028c 	movw	r2, #10380	; 0x288c
 8000d7a:	443a      	add	r2, r7
 8000d7c:	6013      	str	r3, [r2, #0]
			while(organizeDataToSend == 0)
 8000d7e:	f642 038c 	movw	r3, #10380	; 0x288c
 8000d82:	443b      	add	r3, r7
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f43f af6a 	beq.w	8000c60 <main+0x890>
				}

			}
			//singlePx_value[TOTAL_PIXELS - 2] = (uint8_t) "\r";
			//singlePx_value[TOTAL_PIXELS - 1] = (uint8_t) "\n";
			__NOP();
 8000d8c:	bf00      	nop
			CDC_Transmit_HS(singlePx_value, TOTAL_PIXELS * 2);
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <main+0x9ec>)
 8000d90:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000d94:	f103 0310 	add.w	r3, r3, #16
 8000d98:	443b      	add	r3, r7
 8000d9a:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fd82 	bl	800a8a8 <CDC_Transmit_HS>
			//HAL_Delay(300);
			//memset(singlePx_value,0,TOTAL_PIXELS * 2);


			//CDC_Transmit_HS((uint8_t *) "\r\n", 1);
			HAL_TIM_Base_Start_IT(&htim2);
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <main+0x9f0>)
 8000da6:	f005 fb8d 	bl	80064c4 <HAL_TIM_Base_Start_IT>
			/*HAL_TIM_Base_Stop_IT(&htim2);   // Stop interrupt of TIM2

			 */
			send_data_main = 0;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <main+0x9f4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
		token = strtok((char*)bufferVCP_Rx,tokenSeparator);
 8000db0:	f7ff bbb3 	b.w	800051a <main+0x14a>
 8000db4:	24000bb8 	.word	0x24000bb8
 8000db8:	24005cb8 	.word	0x24005cb8
 8000dbc:	ffffd774 	.word	0xffffd774
 8000dc0:	240002a8 	.word	0x240002a8
 8000dc4:	24000b74 	.word	0x24000b74

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	; 0x70
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	224c      	movs	r2, #76	; 0x4c
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00a fa22 	bl	800b220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2220      	movs	r2, #32
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00a fa1c 	bl	800b220 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f002 ff7d 	bl	8003ce8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e0a:	bf00      	nop
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <SystemClock_Config+0xdc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e18:	d1f8      	bne.n	8000e0c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e1a:	2321      	movs	r3, #33	; 0x21
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000e34:	2344      	movs	r3, #68	; 0x44
 8000e36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e44:	230c      	movs	r3, #12
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000e4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 ff90 	bl	8003d7c <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e62:	f000 fde7 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e66:	233f      	movs	r3, #63	; 0x3f
 8000e68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e72:	2308      	movs	r3, #8
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fb23 	bl	80044d8 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e98:	f000 fdcc 	bl	8001a34 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3770      	adds	r7, #112	; 0x70
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024800 	.word	0x58024800

08000ea8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000eae:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <MX_SPI1_Init+0xac>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000eb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ed6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI1_Init+0xa8>)
 8000f3c:	f004 fe8a 	bl	8005c54 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f46:	f000 fd75 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000220 	.word	0x24000220
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1375;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f80:	f240 525f 	movw	r2, #1375	; 0x55f
 8000f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9e:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000fa0:	f005 fa39 	bl	8006416 <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000faa:	f000 fd43 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000fbc:	f005 fc56 	bl	800686c <HAL_TIM_ConfigClockSource>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fc6:	f000 fd35 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_TIM2_Init+0x98>)
 8000fd8:	f005 feac 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fe2:	f000 fd27 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240002a8 	.word	0x240002a8

08000ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM3_Init+0x94>)
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <MX_TIM3_Init+0x98>)
 8001016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM3_Init+0x94>)
 800101a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_TIM3_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM3_Init+0x94>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM3_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM3_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM3_Init+0x94>)
 800103a:	f005 f9ec 	bl	8006416 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 fcf6 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM3_Init+0x94>)
 8001056:	f005 fc09 	bl	800686c <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fce8 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM3_Init+0x94>)
 8001072:	f005 fe5f 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 fcda 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	240002f4 	.word	0x240002f4
 800108c:	40000400 	.word	0x40000400

08001090 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_TIM4_Init+0x98>)
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <MX_TIM4_Init+0x9c>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1375;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_TIM4_Init+0x98>)
 80010b6:	f240 525f 	movw	r2, #1375	; 0x55f
 80010ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM4_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_TIM4_Init+0x98>)
 80010c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_TIM4_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM4_Init+0x98>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_TIM4_Init+0x98>)
 80010d8:	f005 f99d 	bl	8006416 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80010e2:	f000 fca7 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM4_Init+0x98>)
 80010f4:	f005 fbba 	bl	800686c <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80010fe:	f000 fc99 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM4_Init+0x98>)
 8001110:	f005 fe10 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800111a:	f000 fc8b 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000340 	.word	0x24000340
 800112c:	40000800 	.word	0x40000800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	4bc1      	ldr	r3, [pc, #772]	; (800144c <MX_GPIO_Init+0x31c>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4abf      	ldr	r2, [pc, #764]	; (800144c <MX_GPIO_Init+0x31c>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4bbd      	ldr	r3, [pc, #756]	; (800144c <MX_GPIO_Init+0x31c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4bb9      	ldr	r3, [pc, #740]	; (800144c <MX_GPIO_Init+0x31c>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4ab8      	ldr	r2, [pc, #736]	; (800144c <MX_GPIO_Init+0x31c>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4bb5      	ldr	r3, [pc, #724]	; (800144c <MX_GPIO_Init+0x31c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4bb2      	ldr	r3, [pc, #712]	; (800144c <MX_GPIO_Init+0x31c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4ab0      	ldr	r2, [pc, #704]	; (800144c <MX_GPIO_Init+0x31c>)
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4bae      	ldr	r3, [pc, #696]	; (800144c <MX_GPIO_Init+0x31c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a0:	4baa      	ldr	r3, [pc, #680]	; (800144c <MX_GPIO_Init+0x31c>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4aa9      	ldr	r2, [pc, #676]	; (800144c <MX_GPIO_Init+0x31c>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4ba6      	ldr	r3, [pc, #664]	; (800144c <MX_GPIO_Init+0x31c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4ba3      	ldr	r3, [pc, #652]	; (800144c <MX_GPIO_Init+0x31c>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4aa1      	ldr	r2, [pc, #644]	; (800144c <MX_GPIO_Init+0x31c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b9f      	ldr	r3, [pc, #636]	; (800144c <MX_GPIO_Init+0x31c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b9b      	ldr	r3, [pc, #620]	; (800144c <MX_GPIO_Init+0x31c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a9a      	ldr	r2, [pc, #616]	; (800144c <MX_GPIO_Init+0x31c>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b97      	ldr	r3, [pc, #604]	; (800144c <MX_GPIO_Init+0x31c>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fa:	4b94      	ldr	r3, [pc, #592]	; (800144c <MX_GPIO_Init+0x31c>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a92      	ldr	r2, [pc, #584]	; (800144c <MX_GPIO_Init+0x31c>)
 8001202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b90      	ldr	r3, [pc, #576]	; (800144c <MX_GPIO_Init+0x31c>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b8c      	ldr	r3, [pc, #560]	; (800144c <MX_GPIO_Init+0x31c>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a8b      	ldr	r2, [pc, #556]	; (800144c <MX_GPIO_Init+0x31c>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <MX_GPIO_Init+0x31c>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DRV_GREEN_Pin|debug_out_Pin|DRV_RED_Pin|DRV_BLUE_Pin
 8001236:	2200      	movs	r2, #0
 8001238:	213e      	movs	r1, #62	; 0x3e
 800123a:	4885      	ldr	r0, [pc, #532]	; (8001450 <MX_GPIO_Init+0x320>)
 800123c:	f001 fa4c 	bl	80026d8 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TEST_PIN_Pin|PIN_TEST1_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001246:	4883      	ldr	r0, [pc, #524]	; (8001454 <MX_GPIO_Init+0x324>)
 8001248:	f001 fa46 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001252:	4881      	ldr	r0, [pc, #516]	; (8001458 <MX_GPIO_Init+0x328>)
 8001254:	f001 fa40 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_TEST2_GPIO_Port, PIN_TEST2_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2102      	movs	r1, #2
 800125c:	487f      	ldr	r0, [pc, #508]	; (800145c <MX_GPIO_Init+0x32c>)
 800125e:	f001 fa3b 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001268:	487d      	ldr	r0, [pc, #500]	; (8001460 <MX_GPIO_Init+0x330>)
 800126a:	f001 fa35 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001274:	487a      	ldr	r0, [pc, #488]	; (8001460 <MX_GPIO_Init+0x330>)
 8001276:	f001 fa2f 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV_GREEN_Pin debug_out_Pin DRV_RED_Pin DRV_BLUE_Pin
                           LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DRV_GREEN_Pin|debug_out_Pin|DRV_RED_Pin|DRV_BLUE_Pin
 800127a:	233e      	movs	r3, #62	; 0x3e
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	486f      	ldr	r0, [pc, #444]	; (8001450 <MX_GPIO_Init+0x320>)
 8001292:	f001 f879 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001296:	f249 53c1 	movw	r3, #38337	; 0x95c1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4869      	ldr	r0, [pc, #420]	; (8001450 <MX_GPIO_Init+0x320>)
 80012ac:	f001 f86c 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin ENCODER_B_Pin ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = B1_Pin|ENCODER_B_Pin|ENCODER_Z_Pin;
 80012b0:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4867      	ldr	r0, [pc, #412]	; (8001464 <MX_GPIO_Init+0x334>)
 80012c6:	f001 f85f 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF8
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012ca:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	485d      	ldr	r0, [pc, #372]	; (8001454 <MX_GPIO_Init+0x324>)
 80012e0:	f001 f852 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_PIN_Pin PIN_TEST1_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin|PIN_TEST1_Pin;
 80012e4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4855      	ldr	r0, [pc, #340]	; (8001454 <MX_GPIO_Init+0x324>)
 80012fe:	f001 f843 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001302:	f641 03cd 	movw	r3, #6349	; 0x18cd
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4853      	ldr	r0, [pc, #332]	; (8001464 <MX_GPIO_Init+0x334>)
 8001318:	f001 f836 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800131c:	2302      	movs	r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132c:	230b      	movs	r3, #11
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	484b      	ldr	r0, [pc, #300]	; (8001464 <MX_GPIO_Init+0x334>)
 8001338:	f001 f826 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 800133c:	f248 13d9 	movw	r3, #33241	; 0x81d9
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001342:	2303      	movs	r3, #3
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4845      	ldr	r0, [pc, #276]	; (8001468 <MX_GPIO_Init+0x338>)
 8001352:	f001 f819 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001356:	2306      	movs	r3, #6
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	483d      	ldr	r0, [pc, #244]	; (8001468 <MX_GPIO_Init+0x338>)
 8001372:	f001 f809 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001376:	2330      	movs	r3, #48	; 0x30
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001386:	230b      	movs	r3, #11
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <MX_GPIO_Init+0x334>)
 8001392:	f000 fff9 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001396:	f244 0301 	movw	r3, #16385	; 0x4001
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <MX_GPIO_Init+0x328>)
 80013b0:	f000 ffea 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB15 PB4 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80013b4:	f649 7316 	movw	r3, #40726	; 0x9f16
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4823      	ldr	r0, [pc, #140]	; (8001458 <MX_GPIO_Init+0x328>)
 80013ca:	f000 ffdd 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 PG4
                           PG5 PG6 PG8 PG9
                           PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013ce:	f248 737d 	movw	r3, #34685	; 0x877d
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	481e      	ldr	r0, [pc, #120]	; (800145c <MX_GPIO_Init+0x32c>)
 80013e4:	f000 ffd0 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_TEST2_Pin */
  GPIO_InitStruct.Pin = PIN_TEST2_Pin;
 80013e8:	2302      	movs	r3, #2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PIN_TEST2_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4817      	ldr	r0, [pc, #92]	; (800145c <MX_GPIO_Init+0x32c>)
 8001400:	f000 ffc2 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D4_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D4_Pin|D3_Pin;
 8001404:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_GPIO_Init+0x320>)
 800141a:	f000 ffb5 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800141e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001430:	230b      	movs	r3, #11
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_GPIO_Init+0x328>)
 800143c:	f000 ffa4 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	e010      	b.n	800146c <MX_GPIO_Init+0x33c>
 800144a:	bf00      	nop
 800144c:	58024400 	.word	0x58024400
 8001450:	58021000 	.word	0x58021000
 8001454:	58021400 	.word	0x58021400
 8001458:	58020400 	.word	0x58020400
 800145c:	58021800 	.word	0x58021800
 8001460:	58020c00 	.word	0x58020c00
 8001464:	58020800 	.word	0x58020800
 8001468:	58020000 	.word	0x58020000
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001476:	2307      	movs	r3, #7
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4837      	ldr	r0, [pc, #220]	; (8001560 <MX_GPIO_Init+0x430>)
 8001482:	f000 ff81 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin SP_Pin CDSCLK2_Pin ADCCLK_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|SP_Pin|CDSCLK2_Pin|ADCCLK_Pin
 8001486:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	4830      	ldr	r0, [pc, #192]	; (8001560 <MX_GPIO_Init+0x430>)
 80014a0:	f000 ff72 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80014a4:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4829      	ldr	r0, [pc, #164]	; (8001560 <MX_GPIO_Init+0x430>)
 80014ba:	f000 ff65 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4824      	ldr	r0, [pc, #144]	; (8001564 <MX_GPIO_Init+0x434>)
 80014d4:	f000 ff58 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80014d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_GPIO_Init+0x438>)
 80014f0:	f000 ff4a 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001506:	230b      	movs	r3, #11
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_GPIO_Init+0x434>)
 8001512:	f000 ff39 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D5_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D5_Pin;
 8001516:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <MX_GPIO_Init+0x434>)
 800152c:	f000 ff2c 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin;
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <MX_GPIO_Init+0x43c>)
 8001544:	f000 ff20 	bl	8002388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2017      	movs	r0, #23
 800154e:	f000 fee6 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001552:	2017      	movs	r0, #23
 8001554:	f000 fefd 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8001558:	bf00      	nop
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58020c00 	.word	0x58020c00
 8001564:	58021800 	.word	0x58021800
 8001568:	58020800 	.word	0x58020800
 800156c:	58020400 	.word	0x58020400

08001570 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (pin PC8)
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001580:	d11a      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0x48>
	{
		encoder_tick++;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800158a:	6013      	str	r3, [r2, #0]
		if(encoder_tick == (unsigned int)(encoder_distance/encoder_resolution))
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d105      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0x48>
		{
			encoder_tick= 0;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
			get_image = 1;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
			// Test pin (PF7)
			// odr = GPIOF->ODR;
			// GPIOF->BSRR = ((odr & GPIO_PIN_7) << 16U) | (~odr & GPIO_PIN_7);
		}
	}
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	24000b78 	.word	0x24000b78
 80015c8:	24000b84 	.word	0x24000b84
 80015cc:	24000b80 	.word	0x24000b80
 80015d0:	24000b7c 	.word	0x24000b7c

080015d4 <HAL_TIM_PeriodElapsedCallback>:



//-Tick every 10[uS]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a7b      	ldr	r2, [pc, #492]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	f040 8171 	bne.w	80018c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>
	{
		if(enableSampleTimerFlag==1)
 80015e6:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f040 816c 	bne.w	80018c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>
		{
			//---ADC_Clk: To generate a 50KHz frequency (ADCCLK - pin PD13)
			odr = GPIOD->ODR;
 80015f0:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a78      	ldr	r2, [pc, #480]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80015f6:	6013      	str	r3, [r2, #0]
			GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 80015f8:	4b77      	ldr	r3, [pc, #476]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001602:	4b75      	ldr	r3, [pc, #468]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	43db      	mvns	r3, r3
 8001608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160c:	4971      	ldr	r1, [pc, #452]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800160e:	4313      	orrs	r3, r2
 8001610:	618b      	str	r3, [r1, #24]
			//    odr = GPIOD->ODR;
			//    GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);


			//---Toggle CDSCLK2 and CP_Clk: To generate the frequency for the ADC Sampling  and the readout (CDSCLK2 and CP_Clk - pin PD12)
			if(Tim2_tick == 0)
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x4e>
			{
				MACRO_CIS_CLR_CPCLK;
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001620:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
			}
			if (Led_cnt == 4)
 8001622:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d10e      	bne.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				flag_enableLEDS = 1;
 800162a:	4b6e      	ldr	r3, [pc, #440]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800162c:	2201      	movs	r2, #1
 800162e:	801a      	strh	r2, [r3, #0]
				// storve LED duration in counter for timer
				cnt_red = ledExpDuration_R;
 8001630:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6d      	ldr	r2, [pc, #436]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001636:	6013      	str	r3, [r2, #0]
				cnt_green = ledExpDuration_G;
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6d      	ldr	r2, [pc, #436]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800163e:	6013      	str	r3, [r2, #0]
				cnt_blue = ledExpDuration_B;
 8001640:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6d      	ldr	r2, [pc, #436]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001646:	6013      	str	r3, [r2, #0]
			}
			// The CP clock is always 6 ticks (4 at low level, 2 at high level) non symetrical clock
			// since this signal is used for the AFE as CDSCLK2
			if (Tim2_tick == 5)
 8001648:	4b64      	ldr	r3, [pc, #400]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d10c      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x96>
			{
				MACRO_CIS_SET_CPCLK;
 8001650:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001656:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = GPIO_PIN_12;                  // CP_Clk set to 1
				Tim2_tick = 0;
 8001658:	4b60      	ldr	r3, [pc, #384]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
				CP_cnt++;
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e004      	b.n	8001674 <HAL_TIM_PeriodElapsedCallback+0xa0>
			}
			else
			{
				Tim2_tick++;
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001672:	6013      	str	r3, [r2, #0]
			}
			Led_cnt++;
 8001674:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a59      	ldr	r2, [pc, #356]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800167c:	6013      	str	r3, [r2, #0]

			//---CIS SP signal to set exposure duration (SP_CIS - pin PD11)
			// sensor starts acquiring immediately at the tick=2 of the timer counter
			// The Integration time is defined by the 'expDuration_us' variable
			// there is no reading of the data from the sensor between these two pulses
			if(tick_SP == 2 || tick_SP == (expDuration_us+2) )
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d007      	beq.n	8001696 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3302      	adds	r3, #2
 800168c:	461a      	mov	r2, r3
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d104      	bne.n	80016a0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			{
				MACRO_CIS_SET_SP;
 8001696:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	e00f      	b.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xec>
				//GPIOD->BSRR = GPIO_PIN_11;              // SP_CIS Set to 1
			}
			else if(tick_SP == 7 || tick_SP == (expDuration_us+7) )
 80016a0:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b07      	cmp	r3, #7
 80016a6:	d007      	beq.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3307      	adds	r3, #7
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d103      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0xec>
			{
				MACRO_CIS_CLR_SP;
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016be:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_11 << 16U; // SP_CIS Set to 0
			}

			if(tick_SP == (expDuration_us+2) )
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3302      	adds	r3, #2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d102      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x102>
			{
				CP_cnt=0;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
			}

			tick_SP++;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016de:	6013      	str	r3, [r2, #0]




			// read all ports
			if ( (CP_cnt > INATIVE_PIXELS) && (CP_cnt <= INATIVE_PIXELS + EFFECTIVE_PIXELS + 100) ) // 100 is an exageration value of
 80016e0:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b28      	cmp	r3, #40	; 0x28
 80016e6:	f240 80d4 	bls.w	8001892 <HAL_TIM_PeriodElapsedCallback+0x2be>
 80016ea:	4b45      	ldr	r3, [pc, #276]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f240 724c 	movw	r2, #1868	; 0x74c
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f200 80cd 	bhi.w	8001892 <HAL_TIM_PeriodElapsedCallback+0x2be>
				// oversampling never reach due to next loop control
			{
				// D0: pin PG12
				ADC_B0 = (GPIOG->IDR >> 12) & 0x01;
 80016f8:	4b44      	ldr	r3, [pc, #272]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	0b1b      	lsrs	r3, r3, #12
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	4a43      	ldr	r2, [pc, #268]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001704:	6013      	str	r3, [r2, #0]
				// D1: pin PE9
				ADC_B1 = (GPIOE->IDR >> 9) & 0x01;
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	0a5b      	lsrs	r3, r3, #9
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001712:	6013      	str	r3, [r2, #0]
				// D2: pin PE11
				ADC_B2 = (GPIOE->IDR >> 11) & 0x01;
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	0adb      	lsrs	r3, r3, #11
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	4a3f      	ldr	r2, [pc, #252]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001720:	6013      	str	r3, [r2, #0]
				// D3: pin PE14
				ADC_B3 = (GPIOE->IDR >> 14) & 0x01;
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	0b9b      	lsrs	r3, r3, #14
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800172e:	6013      	str	r3, [r2, #0]
				// D4: pin PE13
				ADC_B4 = (GPIOE->IDR >> 13) & 0x01;
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	0b5b      	lsrs	r3, r3, #13
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800173c:	6013      	str	r3, [r2, #0]
				// D5: pin PG14
				ADC_B5 = (GPIOG->IDR >> 14) & 0x01;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	0b9b      	lsrs	r3, r3, #14
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	4a37      	ldr	r2, [pc, #220]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800174a:	6013      	str	r3, [r2, #0]
				// D6: pin PB6
				ADC_B6 = (GPIOB->IDR >> 6) & 0x01;
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	4a36      	ldr	r2, [pc, #216]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001758:	6013      	str	r3, [r2, #0]
				// D7: pin PB7
				ADC_B7 = (GPIOB->IDR >> 7) & 0x01;
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	09db      	lsrs	r3, r3, #7
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	4a33      	ldr	r2, [pc, #204]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001766:	6013      	str	r3, [r2, #0]

				if(alternateByte == 1)
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d169      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x270>
				{
					reg_Low[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	431a      	orrs	r2, r3
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	431a      	orrs	r2, r3
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	431a      	orrs	r2, r3
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	431a      	orrs	r2, r3
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	431a      	orrs	r2, r3
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	ea42 0103 	orr.w	r1, r2, r3
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	01da      	lsls	r2, r3, #7
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	4923      	ldr	r1, [pc, #140]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					i++;
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a1f      	ldr	r2, [pc, #124]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017c0:	6013      	str	r3, [r2, #0]
					alternateByte = 0;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e063      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x2be>
 80017ca:	bf00      	nop
 80017cc:	240002a8 	.word	0x240002a8
 80017d0:	24000b70 	.word	0x24000b70
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	24000b88 	.word	0x24000b88
 80017dc:	24000b90 	.word	0x24000b90
 80017e0:	24000b98 	.word	0x24000b98
 80017e4:	24000b72 	.word	0x24000b72
 80017e8:	24000b64 	.word	0x24000b64
 80017ec:	24000b9c 	.word	0x24000b9c
 80017f0:	24000b68 	.word	0x24000b68
 80017f4:	24000ba0 	.word	0x24000ba0
 80017f8:	24000b6c 	.word	0x24000b6c
 80017fc:	24000ba4 	.word	0x24000ba4
 8001800:	24000b8c 	.word	0x24000b8c
 8001804:	24000b94 	.word	0x24000b94
 8001808:	24000bac 	.word	0x24000bac
 800180c:	58021800 	.word	0x58021800
 8001810:	2400adb8 	.word	0x2400adb8
 8001814:	58021000 	.word	0x58021000
 8001818:	2400adbc 	.word	0x2400adbc
 800181c:	2400adc0 	.word	0x2400adc0
 8001820:	2400adc4 	.word	0x2400adc4
 8001824:	2400adc8 	.word	0x2400adc8
 8001828:	2400adcc 	.word	0x2400adcc
 800182c:	58020400 	.word	0x58020400
 8001830:	2400add0 	.word	0x2400add0
 8001834:	2400add4 	.word	0x2400add4
 8001838:	24000bb4 	.word	0x24000bb4
 800183c:	24000bb0 	.word	0x24000bb0
 8001840:	24005cb8 	.word	0x24005cb8
				}
				else
				{
					reg_High[i] = ADC_B0 | (ADC_B1<<1) | (ADC_B2<<2) | (ADC_B3<<3) | (ADC_B4<<4) | (ADC_B5<<5) | (ADC_B6<<6)| (ADC_B7<<7);
 8001844:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	431a      	orrs	r2, r3
 8001850:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	431a      	orrs	r2, r3
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	431a      	orrs	r2, r3
 8001860:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	431a      	orrs	r2, r3
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	431a      	orrs	r2, r3
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	ea42 0103 	orr.w	r1, r2, r3
 800187a:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	01da      	lsls	r2, r3, #7
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	4956      	ldr	r1, [pc, #344]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					alternateByte = 1;
 800188c:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
				}
			}

			if (i == TOTAL_PIXELS)//CP_cnt == (INATIVE_PIXELS + EFFECTIVE_PIXELS+1+1) ) // one oversample cycle added
 8001892:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 800189a:	d115      	bne.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 800189c:	4852      	ldr	r0, [pc, #328]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800189e:	f004 fe97 	bl	80065d0 <HAL_TIM_Base_Stop_IT>

				MACRO_CIS_CLR_CPCLK;
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x418>)
 80018a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a8:	619a      	str	r2, [r3, #24]
				//GPIOD->BSRR = (uint32_t)GPIO_PIN_12 << 16U; // CP_Clk set to 0
				send_data_main = 1;
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
				enableSampleTimerFlag = 0;
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				CP_cnt = 0;
 80018b6:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
				tick_SP = 0;
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x428>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
				i = 0;
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x408>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//Tik every 1uS (led expsoure is in uS)
	if(htim == &htim3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d15a      	bne.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x3b2>
	{
		if(flag_enableLEDS)
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d044      	beq.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x390>
//			{
//				MACRO_LED_GREEN_CLR
//				toggleLEDonBoard_G = 1;
//			}

			if(cnt_red != 0)
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x320>
			{
				MACRO_CIS_LED_RED_SET
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 80018e4:	2210      	movs	r2, #16
 80018e6:	619a      	str	r2, [r3, #24]
				cnt_red--;
 80018e8:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e003      	b.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x328>
			}
			else
			{
				MACRO_CIS_LED_RED_CLR
 80018f4:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 80018f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018fa:	619a      	str	r2, [r3, #24]
			}
			if(cnt_green != 0)
 80018fc:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x342>
			{
				MACRO_CIS_LED_GREEN_SET
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001906:	2204      	movs	r2, #4
 8001908:	619a      	str	r2, [r3, #24]
				cnt_green--;
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	4a3f      	ldr	r2, [pc, #252]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e003      	b.n	800191e <HAL_TIM_PeriodElapsedCallback+0x34a>
			}
			else
			{
				MACRO_CIS_LED_GREEN_CLR
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001918:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800191c:	619a      	str	r2, [r3, #24]
			}
			if(cnt_blue != 0)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x364>
			{
				MACRO_CIS_LED_BLUE_SET
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001928:	2220      	movs	r2, #32
 800192a:	619a      	str	r2, [r3, #24]
				cnt_blue--;
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e003      	b.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x36c>
			}
			else
			{
				MACRO_CIS_LED_BLUE_CLR
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 800193a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800193e:	619a      	str	r2, [r3, #24]
			}
			if(ledExpDuration_R == 0  && ledExpDuration_G== 0 && ledExpDuration_B == 0 )
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10d      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x390>
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x448>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x390>
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x390>
			{
				flag_enableLEDS = 0;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim3); // stop timer 3
 800195e:	4828      	ldr	r0, [pc, #160]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001960:	f004 fe36 	bl	80065d0 <HAL_TIM_Base_Stop_IT>
			}
		}
		odr = GPIOE->ODR;
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x450>)
 800196a:	6013      	str	r3, [r2, #0]
		GPIOE->BSRR = ((odr & GPIO_PIN_3) << 16U) | (~odr & GPIO_PIN_3);
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x450>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	43db      	mvns	r3, r3
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	4922      	ldr	r1, [pc, #136]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001982:	4313      	orrs	r3, r2
 8001984:	618b      	str	r3, [r1, #24]
		//Tim3_tick++;
	}

	if(htim == &htim4)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x454>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d112      	bne.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	{
		if (toggleLEDonBoard == 1)
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x3d2>
		{
				MACRO_LED_RED_SET
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199c:	619a      	str	r2, [r3, #24]
				toggleLEDonBoard = 0;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x458>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    {
        odr = GPIOD->ODR;
        GPIOD->BSRR = ((odr & GPIO_PIN_12) << 16U) | (~odr & GPIO_PIN_12);
    }
	 */
}
 80019a4:	e006      	b.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x3e0>
			MACRO_LED_RED_CLR
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80019a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ac:	619a      	str	r2, [r3, #24]
			toggleLEDonBoard = 1;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x458>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2400adbc 	.word	0x2400adbc
 80019c0:	2400adb8 	.word	0x2400adb8
 80019c4:	2400adc0 	.word	0x2400adc0
 80019c8:	2400adc4 	.word	0x2400adc4
 80019cc:	2400adc8 	.word	0x2400adc8
 80019d0:	2400adcc 	.word	0x2400adcc
 80019d4:	2400add0 	.word	0x2400add0
 80019d8:	2400add4 	.word	0x2400add4
 80019dc:	24000bb0 	.word	0x24000bb0
 80019e0:	24000bb8 	.word	0x24000bb8
 80019e4:	24000bb4 	.word	0x24000bb4
 80019e8:	240002a8 	.word	0x240002a8
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	24000b74 	.word	0x24000b74
 80019f4:	24000b70 	.word	0x24000b70
 80019f8:	24000b8c 	.word	0x24000b8c
 80019fc:	24000b94 	.word	0x24000b94
 8001a00:	240002f4 	.word	0x240002f4
 8001a04:	24000b72 	.word	0x24000b72
 8001a08:	24000b9c 	.word	0x24000b9c
 8001a0c:	58021000 	.word	0x58021000
 8001a10:	24000ba0 	.word	0x24000ba0
 8001a14:	24000ba4 	.word	0x24000ba4
 8001a18:	24000b64 	.word	0x24000b64
 8001a1c:	24000b68 	.word	0x24000b68
 8001a20:	24000b6c 	.word	0x24000b6c
 8001a24:	24000b88 	.word	0x24000b88
 8001a28:	24000340 	.word	0x24000340
 8001a2c:	24000008 	.word	0x24000008
 8001a30:	58020400 	.word	0x58020400

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_MspInit+0x30>)
 8001a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x30>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x30>)
 8001a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	58024400 	.word	0x58024400

08001a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0b8      	sub	sp, #224	; 0xe0
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	22b4      	movs	r2, #180	; 0xb4
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f009 fbc3 	bl	800b220 <memset>
  if(hspi->Instance==SPI1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a36      	ldr	r2, [pc, #216]	; (8001b78 <HAL_SPI_MspInit+0x104>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d165      	bne.n	8001b70 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 f870 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001abe:	f7ff ffb9 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ace:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_SPI_MspInit+0x108>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b34:	2305      	movs	r3, #5
 8001b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480f      	ldr	r0, [pc, #60]	; (8001b80 <HAL_SPI_MspInit+0x10c>)
 8001b42:	f000 fc21 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b46:	2320      	movs	r3, #32
 8001b48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <HAL_SPI_MspInit+0x110>)
 8001b6c:	f000 fc0c 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	37e0      	adds	r7, #224	; 0xe0
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020000 	.word	0x58020000
 8001b84:	58020400 	.word	0x58020400

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d117      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	201c      	movs	r0, #28
 8001bbe:	f000 fbae 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 fbc5 	bl	8002352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bc8:	e038      	b.n	8001c3c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_TIM_Base_MspInit+0xc0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d117      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201d      	movs	r0, #29
 8001bf8:	f000 fb91 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bfc:	201d      	movs	r0, #29
 8001bfe:	f000 fba8 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8001c02:	e01b      	b.n	8001c3c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_TIM_Base_MspInit+0xc4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d116      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_TIM_Base_MspInit+0xbc>)
 8001c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	201e      	movs	r0, #30
 8001c32:	f000 fb74 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c36:	201e      	movs	r0, #30
 8001c38:	f000 fb8b 	bl	8002352 <HAL_NVIC_EnableIRQ>
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58024400 	.word	0x58024400
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40000800 	.word	0x40000800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9c:	f000 fa20 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001ca8:	2080      	movs	r0, #128	; 0x80
 8001caa:	f000 fd2e 	bl	800270a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001cae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb2:	f000 fd2a 	bl	800270a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM2_IRQHandler+0x10>)
 8001cc2:	f004 fcb4 	bl	800662e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	240002a8 	.word	0x240002a8

08001cd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM3_IRQHandler+0x10>)
 8001cd6:	f004 fcaa 	bl	800662e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	240002f4 	.word	0x240002f4

08001ce4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM4_IRQHandler+0x10>)
 8001cea:	f004 fca0 	bl	800662e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	24000340 	.word	0x24000340

08001cf8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <OTG_HS_IRQHandler+0x10>)
 8001cfe:	f000 fe75 	bl	80029ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2400c2c0 	.word	0x2400c2c0

08001d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_kill>:

int _kill(int pid, int sig)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d26:	f009 fa43 	bl	800b1b0 <__errno>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2216      	movs	r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_exit>:

void _exit (int status)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe7 	bl	8001d1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d4e:	e7fe      	b.n	8001d4e <_exit+0x12>

08001d50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e00a      	b.n	8001d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d62:	f3af 8000 	nop.w
 8001d66:	4601      	mov	r1, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	b2ca      	uxtb	r2, r1
 8001d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dbf0      	blt.n	8001d62 <_read+0x12>
	}

return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e009      	b.n	8001db0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf1      	blt.n	8001d9c <_write+0x12>
	}
	return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_close>:

int _close(int file)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dea:	605a      	str	r2, [r3, #4]
	return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_isatty>:

int _isatty(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return 1;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f009 f9a8 	bl	800b1b0 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24050000 	.word	0x24050000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	2400add8 	.word	0x2400add8
 8001e94:	2400ca00 	.word	0x2400ca00

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <SystemInit+0xf0>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <SystemInit+0xf0>)
 8001ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <SystemInit+0xf4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d807      	bhi.n	8001eca <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <SystemInit+0xf4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 030f 	bic.w	r3, r3, #15
 8001ec2:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <SystemInit+0xf4>)
 8001ec4:	f043 0307 	orr.w	r3, r3, #7
 8001ec8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <SystemInit+0xf8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a30      	ldr	r2, [pc, #192]	; (8001f90 <SystemInit+0xf8>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <SystemInit+0xf8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001edc:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <SystemInit+0xf8>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	492b      	ldr	r1, [pc, #172]	; (8001f90 <SystemInit+0xf8>)
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <SystemInit+0xfc>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <SystemInit+0xf4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <SystemInit+0xf4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 030f 	bic.w	r3, r3, #15
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <SystemInit+0xf4>)
 8001efe:	f043 0307 	orr.w	r3, r3, #7
 8001f02:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <SystemInit+0xf8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <SystemInit+0xf8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <SystemInit+0xf8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <SystemInit+0xf8>)
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <SystemInit+0x100>)
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <SystemInit+0xf8>)
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <SystemInit+0x104>)
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <SystemInit+0xf8>)
 8001f24:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <SystemInit+0x108>)
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <SystemInit+0xf8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <SystemInit+0xf8>)
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <SystemInit+0x108>)
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <SystemInit+0xf8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <SystemInit+0xf8>)
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <SystemInit+0x108>)
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <SystemInit+0xf8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <SystemInit+0xf8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <SystemInit+0xf8>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <SystemInit+0xf8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <SystemInit+0xf8>)
 8001f5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <SystemInit+0xf8>)
 8001f60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001f64:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <SystemInit+0xf8>)
 8001f6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f6e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001f70:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <SystemInit+0x10c>)
 8001f74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	52002000 	.word	0x52002000
 8001f90:	58024400 	.word	0x58024400
 8001f94:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f98:	02020200 	.word	0x02020200
 8001f9c:	01ff0000 	.word	0x01ff0000
 8001fa0:	01010280 	.word	0x01010280
 8001fa4:	52004000 	.word	0x52004000

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fac:	f7ff ff74 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f009 f8f1 	bl	800b1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7fe f9f9 	bl	80003d0 <main>
  bx  lr
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fe4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fe8:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8001fec:	0800ca68 	.word	0x0800ca68
  ldr r2, =_sbss
 8001ff0:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 8001ff4:	2400c9fc 	.word	0x2400c9fc

08001ff8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC3_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002002:	2003      	movs	r0, #3
 8002004:	f000 f980 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002008:	f002 fc1c 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_Init+0x68>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	4913      	ldr	r1, [pc, #76]	; (8002068 <HAL_Init+0x6c>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_Init+0x68>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_Init+0x6c>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_Init+0x70>)
 800203e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_Init+0x74>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002046:	2000      	movs	r0, #0
 8002048:	f000 f814 	bl	8002074 <HAL_InitTick>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e002      	b.n	800205c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002056:	f7ff fcf3 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	58024400 	.word	0x58024400
 8002068:	0800c808 	.word	0x0800c808
 800206c:	240000a4 	.word	0x240000a4
 8002070:	240000a0 	.word	0x240000a0

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_InitTick+0x60>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e021      	b.n	80020cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_InitTick+0x64>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_InitTick+0x60>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f965 	bl	800236e <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f92f 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x68>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	240000ac 	.word	0x240000ac
 80020d8:	240000a0 	.word	0x240000a0
 80020dc:	240000a8 	.word	0x240000a8

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	240000ac 	.word	0x240000ac
 8002104:	2400addc 	.word	0x2400addc

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2400addc 	.word	0x2400addc

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	240000ac 	.word	0x240000ac

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <__NVIC_SetPriorityGrouping+0x40>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	4313      	orrs	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00
 80021ac:	05fa0000 	.word	0x05fa0000

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff40 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff90 	bl	800225c <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5f 	bl	8002208 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff33 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa4 	bl	80022c4 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002396:	4b86      	ldr	r3, [pc, #536]	; (80025b0 <HAL_GPIO_Init+0x228>)
 8002398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800239a:	e18c      	b.n	80026b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 817e 	beq.w	80026b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d005      	beq.n	80023cc <HAL_GPIO_Init+0x44>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d130      	bne.n	800242e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002402:	2201      	movs	r2, #1
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 0201 	and.w	r2, r3, #1
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d017      	beq.n	800246a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d123      	bne.n	80024be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80d8 	beq.w	80026b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x22c>)
 8002502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002506:	4a2b      	ldr	r2, [pc, #172]	; (80025b4 <HAL_GPIO_Init+0x22c>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x22c>)
 8002512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_GPIO_Init+0x230>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_GPIO_Init+0x234>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d04a      	beq.n	80025e0 <HAL_GPIO_Init+0x258>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_GPIO_Init+0x238>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02b      	beq.n	80025aa <HAL_GPIO_Init+0x222>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x23c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x21e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <HAL_GPIO_Init+0x240>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_GPIO_Init+0x244>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x216>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_GPIO_Init+0x248>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x212>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_GPIO_Init+0x24c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <HAL_GPIO_Init+0x250>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x20a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a15      	ldr	r2, [pc, #84]	; (80025dc <HAL_GPIO_Init+0x254>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x206>
 800258a:	2309      	movs	r3, #9
 800258c:	e029      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 800258e:	230a      	movs	r3, #10
 8002590:	e027      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 8002592:	2307      	movs	r3, #7
 8002594:	e025      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 8002596:	2306      	movs	r3, #6
 8002598:	e023      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 800259a:	2305      	movs	r3, #5
 800259c:	e021      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 800259e:	2304      	movs	r3, #4
 80025a0:	e01f      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e01d      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e01b      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e019      	b.n	80025e2 <HAL_GPIO_Init+0x25a>
 80025ae:	bf00      	nop
 80025b0:	58000080 	.word	0x58000080
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58000400 	.word	0x58000400
 80025bc:	58020000 	.word	0x58020000
 80025c0:	58020400 	.word	0x58020400
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020c00 	.word	0x58020c00
 80025cc:	58021000 	.word	0x58021000
 80025d0:	58021400 	.word	0x58021400
 80025d4:	58021800 	.word	0x58021800
 80025d8:	58021c00 	.word	0x58021c00
 80025dc:	58022400 	.word	0x58022400
 80025e0:	2300      	movs	r3, #0
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f2:	4938      	ldr	r1, [pc, #224]	; (80026d4 <HAL_GPIO_Init+0x34c>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f47f ae6b 	bne.w	800239c <HAL_GPIO_Init+0x14>
  }
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	3724      	adds	r7, #36	; 0x24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	58000400 	.word	0x58000400

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ff1d 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800273e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002740:	b08f      	sub	sp, #60	; 0x3c
 8002742:	af0a      	add	r7, sp, #40	; 0x28
 8002744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e116      	b.n	800297e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f008 f9e4 	bl	800ab38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fcab 	bl	80070ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	687e      	ldr	r6, [r7, #4]
 800279c:	466d      	mov	r5, sp
 800279e:	f106 0410 	add.w	r4, r6, #16
 80027a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b2:	1d33      	adds	r3, r6, #4
 80027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f004 fb76 	bl	8006ea8 <USB_CoreInit>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0d7      	b.n	800297e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 fc99 	bl	800710c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e04a      	b.n	8002876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	333d      	adds	r3, #61	; 0x3d
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	333c      	adds	r3, #60	; 0x3c
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	b298      	uxth	r0, r3
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3344      	adds	r3, #68	; 0x44
 800281c:	4602      	mov	r2, r0
 800281e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3340      	adds	r3, #64	; 0x40
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3348      	adds	r3, #72	; 0x48
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3af      	bcc.n	80027e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e044      	b.n	8002910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3301      	adds	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d3b5      	bcc.n	8002886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	687e      	ldr	r6, [r7, #4]
 8002922:	466d      	mov	r5, sp
 8002924:	f106 0410 	add.w	r4, r6, #16
 8002928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002934:	e885 0003 	stmia.w	r5, {r0, r1}
 8002938:	1d33      	adds	r3, r6, #4
 800293a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f004 fc31 	bl	80071a4 <USB_DevInit>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e014      	b.n	800297e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 f98b 	bl	8003c88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f005 fd7f 	bl	800847a <USB_DevDisconnect>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002986 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_PCD_Start+0x1c>
 800299e:	2302      	movs	r3, #2
 80029a0:	e020      	b.n	80029e4 <HAL_PCD_Start+0x5e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d109      	bne.n	80029c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d005      	beq.n	80029c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 fb7c 	bl	80070c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 fd2f 	bl	8008438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b08d      	sub	sp, #52	; 0x34
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 fded 	bl	80085e2 <USB_GetMode>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 84b7 	bne.w	800337e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 fd51 	bl	80084bc <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 84ad 	beq.w	800337c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 fd3e 	bl	80084bc <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f002 0202 	and.w	r2, r2, #2
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 fd2c 	bl	80084bc <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d161      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0210 	bic.w	r2, r2, #16
 8002a7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	0c5b      	lsrs	r3, r3, #17
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d124      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d035      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6a38      	ldr	r0, [r7, #32]
 8002aca:	f005 fb63 	bl	8008194 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ada:	441a      	add	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aec:	441a      	add	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	621a      	str	r2, [r3, #32]
 8002af2:	e016      	b.n	8002b22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	0c5b      	lsrs	r3, r3, #17
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d110      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b06:	2208      	movs	r2, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6a38      	ldr	r0, [r7, #32]
 8002b0c:	f005 fb42 	bl	8008194 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0210 	orr.w	r2, r2, #16
 8002b30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fcc0 	bl	80084bc <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b46:	f040 80a7 	bne.w	8002c98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f005 fcc5 	bl	80084e2 <USB_ReadDevAllOutEpInterrupt>
 8002b58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b5a:	e099      	b.n	8002c90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 808e 	beq.w	8002c84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 fce9 	bl	800854a <USB_ReadDevOutEPInterrupt>
 8002b78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2301      	movs	r3, #1
 8002b94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 feef 	bl	800397c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ffc5 	bl	8003b4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2310      	movs	r3, #16
 8002bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d030      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d109      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d108      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f008 f8a4 	bl	800ad80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c44:	461a      	mov	r2, r3
 8002c46:	2302      	movs	r3, #2
 8002c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	2320      	movs	r3, #32
 8002c64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	3301      	adds	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af62 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 fc0d 	bl	80084bc <USB_ReadInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cac:	f040 80db 	bne.w	8002e66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f005 fc2e 	bl	8008516 <USB_ReadDevAllInEpInterrupt>
 8002cba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cc0:	e0cd      	b.n	8002e5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80c2 	beq.w	8002e52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f005 fc54 	bl	8008586 <USB_ReadDevInEPInterrupt>
 8002cde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d057      	beq.n	8002d9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69f9      	ldr	r1, [r7, #28]
 8002d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d132      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334c      	adds	r3, #76	; 0x4c
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4403      	add	r3, r0
 8002d48:	3348      	adds	r3, #72	; 0x48
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4419      	add	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	334c      	adds	r3, #76	; 0x4c
 8002d5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3354      	adds	r3, #84	; 0x54
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d108      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d86:	461a      	mov	r2, r3
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f005 fc5d 	bl	8008648 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f007 ff6e 	bl	800ac76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db0:	461a      	mov	r2, r3
 8002db2:	2308      	movs	r3, #8
 8002db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de8:	461a      	mov	r2, r3
 8002dea:	2340      	movs	r3, #64	; 0x40
 8002dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfa:	6a38      	ldr	r0, [r7, #32]
 8002dfc:	f004 fb30 	bl	8007460 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3338      	adds	r3, #56	; 0x38
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	78db      	ldrb	r3, [r3, #3]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d108      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f007 ffbb 	bl	800ada4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fd08 	bl	8003862 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	3301      	adds	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af2e 	bne.w	8002cc2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f005 fb26 	bl	80084bc <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e7a:	d122      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ff13 	bl	8003cd0 <HAL_PCDEx_LPM_Callback>
 8002eaa:	e002      	b.n	8002eb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f007 ff59 	bl	800ad64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 faf8 	bl	80084bc <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed6:	d112      	bne.n	8002efe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f007 ff15 	bl	800ad18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f005 fada 	bl	80084bc <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f12:	d121      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002f22:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d111      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fec0 	bl	8003cd0 <HAL_PCDEx_LPM_Callback>
 8002f50:	e002      	b.n	8002f58 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f007 fee0 	bl	800ad18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f005 faad 	bl	80084bc <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	f040 80b7 	bne.w	80030de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2110      	movs	r1, #16
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 fa68 	bl	8007460 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f94:	e046      	b.n	8003024 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fa8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	0151      	lsls	r1, r2, #5
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	440a      	add	r2, r1
 8002fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	0151      	lsls	r1, r2, #5
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	440a      	add	r2, r1
 8002ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ffc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	440a      	add	r2, r1
 8003014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800301c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	3301      	adds	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d3b3      	bcc.n	8002f96 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003040:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305a:	f043 030b 	orr.w	r3, r3, #11
 800305e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003070:	f043 030b 	orr.w	r3, r3, #11
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	e015      	b.n	80030a4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	4619      	mov	r1, r3
 8003088:	f242 032b 	movw	r3, #8235	; 0x202b
 800308c:	4313      	orrs	r3, r2
 800308e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800309e:	f043 030b 	orr.w	r3, r3, #11
 80030a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030c8:	461a      	mov	r2, r3
 80030ca:	f005 fabd 	bl	8008648 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f005 f9ea 	bl	80084bc <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d124      	bne.n	800313e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 fa81 	bl	8008600 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f004 fa29 	bl	800755a <USB_GetDevSpeed>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681c      	ldr	r4, [r3, #0]
 8003114:	f001 fd10 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8003118:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	4620      	mov	r0, r4
 8003124:	f003 ff2e 	bl	8006f84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f007 fdcc 	bl	800acc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 f9ba 	bl	80084bc <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b08      	cmp	r3, #8
 8003150:	d10a      	bne.n	8003168 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f007 fda9 	bl	800acaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f002 0208 	and.w	r2, r2, #8
 8003166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f005 f9a5 	bl	80084bc <USB_ReadInterrupts>
 8003172:	4603      	mov	r3, r0
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d122      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003188:	2301      	movs	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
 800318c:	e014      	b.n	80031b8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb27 	bl	8003800 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	3301      	adds	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	429a      	cmp	r2, r3
 80031c0:	d3e5      	bcc.n	800318e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 f978 	bl	80084bc <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d6:	d13b      	bne.n	8003250 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d8:	2301      	movs	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	e02b      	b.n	8003236 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3340      	adds	r3, #64	; 0x40
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d115      	bne.n	8003230 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003204:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003206:	2b00      	cmp	r3, #0
 8003208:	da12      	bge.n	8003230 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	333f      	adds	r3, #63	; 0x3f
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fae8 	bl	8003800 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	3301      	adds	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	429a      	cmp	r2, r3
 800323e:	d3ce      	bcc.n	80031de <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800324e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f005 f931 	bl	80084bc <USB_ReadInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003264:	d155      	bne.n	8003312 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	e045      	b.n	80032f8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d12e      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003294:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	da2b      	bge.n	80032f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d121      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ee:	6053      	str	r3, [r2, #4]
            break;
 80032f0:	e007      	b.n	8003302 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	3301      	adds	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	429a      	cmp	r2, r3
 8003300:	d3b4      	bcc.n	800326c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f005 f8d0 	bl	80084bc <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d10a      	bne.n	800333e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f007 fd4d 	bl	800adc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800333c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 f8ba 	bl	80084bc <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d115      	bne.n	800337e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f007 fd3d 	bl	800ade4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	e000      	b.n	800337e <HAL_PCD_IRQHandler+0x992>
      return;
 800337c:	bf00      	nop
    }
  }
}
 800337e:	3734      	adds	r7, #52	; 0x34
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_SetAddress+0x1a>
 800339a:	2302      	movs	r3, #2
 800339c:	e013      	b.n	80033c6 <HAL_PCD_SetAddress+0x42>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 f818 	bl	80083ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	4608      	mov	r0, r1
 80033d8:	4611      	mov	r1, r2
 80033da:	461a      	mov	r2, r3
 80033dc:	4603      	mov	r3, r0
 80033de:	70fb      	strb	r3, [r7, #3]
 80033e0:	460b      	mov	r3, r1
 80033e2:	803b      	strh	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00f      	b.n	8003434 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003440:	883a      	ldrh	r2, [r7, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	78ba      	ldrb	r2, [r7, #2]
 800344a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800345e:	78bb      	ldrb	r3, [r7, #2]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d102      	bne.n	800346a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_PCD_EP_Open+0xaa>
 8003474:	2302      	movs	r3, #2
 8003476:	e00e      	b.n	8003496 <HAL_PCD_EP_Open+0xc8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 f88c 	bl	80075a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003494:	7afb      	ldrb	r3, [r7, #11]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da0f      	bge.n	80034d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3338      	adds	r3, #56	; 0x38
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	705a      	strb	r2, [r3, #1]
 80034d0:	e00f      	b.n	80034f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_PCD_EP_Close+0x6e>
 8003508:	2302      	movs	r3, #2
 800350a:	e00e      	b.n	800352a <HAL_PCD_EP_Close+0x8c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 f8ca 	bl	80076b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	460b      	mov	r3, r1
 8003540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003574:	7afb      	ldrb	r3, [r7, #11]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	b2da      	uxtb	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800358e:	7afb      	ldrb	r3, [r7, #11]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	6979      	ldr	r1, [r7, #20]
 80035a6:	f004 fbb1 	bl	8007d0c <USB_EP0StartXfer>
 80035aa:	e008      	b.n	80035be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	6979      	ldr	r1, [r7, #20]
 80035ba:	f004 f957 	bl	800786c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3338      	adds	r3, #56	; 0x38
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	b2da      	uxtb	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d102      	bne.n	8003652 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003652:	7afb      	ldrb	r3, [r7, #11]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	f004 fb4f 	bl	8007d0c <USB_EP0StartXfer>
 800366e:	e008      	b.n	8003682 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	6979      	ldr	r1, [r7, #20]
 800367e:	f004 f8f5 	bl	800786c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d901      	bls.n	80036aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e050      	b.n	800374c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da0f      	bge.n	80036d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3338      	adds	r3, #56	; 0x38
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	705a      	strb	r2, [r3, #1]
 80036d0:	e00d      	b.n	80036ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_PCD_EP_SetStall+0x82>
 800370a:	2302      	movs	r3, #2
 800370c:	e01e      	b.n	800374c <HAL_PCD_EP_SetStall+0xc0>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	4618      	mov	r0, r3
 800371e:	f004 fd91 	bl	8008244 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800373c:	461a      	mov	r2, r3
 800373e:	f004 ff83 	bl	8008648 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d901      	bls.n	8003772 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e042      	b.n	80037f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0f      	bge.n	800379a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	3338      	adds	r3, #56	; 0x38
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	705a      	strb	r2, [r3, #1]
 8003798:	e00f      	b.n	80037ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_PCD_EP_ClrStall+0x86>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e00e      	b.n	80037f8 <HAL_PCD_EP_ClrStall+0xa4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 fd99 	bl	8008320 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800380c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003810:	2b00      	cmp	r3, #0
 8003812:	da0c      	bge.n	800382e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	3338      	adds	r3, #56	; 0x38
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e00c      	b.n	8003848 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	4618      	mov	r0, r3
 8003850:	f004 fbb8 	bl	8007fc4 <USB_EPStopXfer>
 8003854:	4603      	mov	r3, r0
 8003856:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003858:	7afb      	ldrb	r3, [r7, #11]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af02      	add	r7, sp, #8
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3338      	adds	r3, #56	; 0x38
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d901      	bls.n	800389a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06c      	b.n	8003974 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d902      	bls.n	80038b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3303      	adds	r3, #3
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038be:	e02b      	b.n	8003918 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d902      	bls.n	80038dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3303      	adds	r3, #3
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6919      	ldr	r1, [r3, #16]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4603      	mov	r3, r0
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f004 fc0c 	bl	8008118 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	441a      	add	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	b29b      	uxth	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	429a      	cmp	r2, r3
 800392c:	d809      	bhi.n	8003942 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003936:	429a      	cmp	r2, r3
 8003938:	d203      	bcs.n	8003942 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1be      	bne.n	80038c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	429a      	cmp	r2, r3
 800394c:	d811      	bhi.n	8003972 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	2201      	movs	r2, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	43db      	mvns	r3, r3
 8003968:	6939      	ldr	r1, [r7, #16]
 800396a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800396e:	4013      	ands	r3, r2
 8003970:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	333c      	adds	r3, #60	; 0x3c
 8003994:	3304      	adds	r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d17b      	bne.n	8003aaa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a61      	ldr	r2, [pc, #388]	; (8003b44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f240 80b9 	bls.w	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80b3 	beq.w	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	461a      	mov	r2, r3
 80039e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e4:	6093      	str	r3, [r2, #8]
 80039e6:	e0a7      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	2320      	movs	r3, #32
 8003a02:	6093      	str	r3, [r2, #8]
 8003a04:	e098      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8093 	bne.w	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	; (8003b44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d90f      	bls.n	8003a3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	e07e      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	0159      	lsls	r1, r3, #5
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d114      	bne.n	8003a9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a84:	461a      	mov	r2, r3
 8003a86:	2101      	movs	r1, #1
 8003a88:	f004 fdde 	bl	8008648 <USB_EP0_OutStart>
 8003a8c:	e006      	b.n	8003a9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	441a      	add	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f007 f8cc 	bl	800ac40 <HAL_PCD_DataOutStageCallback>
 8003aa8:	e046      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d124      	bne.n	8003afc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	e032      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2320      	movs	r3, #32
 8003aec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f007 f8a3 	bl	800ac40 <HAL_PCD_DataOutStageCallback>
 8003afa:	e01d      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b24:	461a      	mov	r2, r3
 8003b26:	2100      	movs	r1, #0
 8003b28:	f004 fd8e 	bl	8008648 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 f884 	bl	800ac40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	4f54300a 	.word	0x4f54300a
 8003b48:	4f54310a 	.word	0x4f54310a

08003b4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	333c      	adds	r3, #60	; 0x3c
 8003b64:	3304      	adds	r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d90e      	bls.n	8003ba0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f007 f83b 	bl	800ac1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d90c      	bls.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f004 fd40 	bl	8008648 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	4f54300a 	.word	0x4f54300a

08003bd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
 8003be4:	4613      	mov	r3, r2
 8003be6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bf6:	883b      	ldrh	r3, [r7, #0]
 8003bf8:	0419      	lsls	r1, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
 8003c04:	e028      	b.n	8003c58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e00d      	b.n	8003c36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3340      	adds	r3, #64	; 0x40
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3301      	adds	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3ec      	bcc.n	8003c1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c40:	883b      	ldrh	r3, [r7, #0]
 8003c42:	0418      	lsls	r0, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4302      	orrs	r2, r0
 8003c50:	3340      	adds	r3, #64	; 0x40
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_PCDEx_ActivateLPM+0x44>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	10000003 	.word	0x10000003

08003cd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d00a      	beq.n	8003d12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01f      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e01d      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	490f      	ldr	r1, [pc, #60]	; (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d22:	f7fe f9f1 	bl	8002108 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d28:	e009      	b.n	8003d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d2a:	f7fe f9ed 	bl	8002108 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d38:	d901      	bls.n	8003d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	d1ee      	bne.n	8003d2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	58024800 	.word	0x58024800

08003d5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58024800 	.word	0x58024800

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e39d      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8087 	beq.w	8003eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9c:	4b88      	ldr	r3, [pc, #544]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003da6:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d007      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x46>
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	2b18      	cmp	r3, #24
 8003db6:	d110      	bne.n	8003dda <HAL_RCC_OscConfig+0x5e>
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d06c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x12c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d168      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e377      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x76>
 8003de4:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a75      	ldr	r2, [pc, #468]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e02e      	b.n	8003e50 <HAL_RCC_OscConfig+0xd4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x98>
 8003dfa:	4b71      	ldr	r3, [pc, #452]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a70      	ldr	r2, [pc, #448]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6d      	ldr	r2, [pc, #436]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xd4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0xbc>
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a64      	ldr	r2, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xd4>
 8003e38:	4b61      	ldr	r3, [pc, #388]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a60      	ldr	r2, [pc, #384]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b5e      	ldr	r3, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5d      	ldr	r2, [pc, #372]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe f956 	bl	8002108 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe f952 	bl	8002108 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e32b      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e72:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xe4>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe f942 	bl	8002108 <HAL_GetTick>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe f93e 	bl	8002108 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e317      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e9a:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x10c>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 808c 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_RCC_OscConfig+0x162>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	2b18      	cmp	r3, #24
 8003ed2:	d137      	bne.n	8003f44 <HAL_RCC_OscConfig+0x1c8>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d132      	bne.n	8003f44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x17a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e2e9      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0219 	bic.w	r2, r3, #25
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	492f      	ldr	r1, [pc, #188]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f08:	f7fe f8fe 	bl	8002108 <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fe f8fa 	bl	8002108 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e2d3      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4920      	ldr	r1, [pc, #128]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f42:	e045      	b.n	8003fd0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d026      	beq.n	8003f9a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 0219 	bic.w	r2, r3, #25
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4919      	ldr	r1, [pc, #100]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe f8d3 	bl	8002108 <HAL_GetTick>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe f8cf 	bl	8002108 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e2a8      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	490b      	ldr	r1, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e01a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe f8af 	bl	8002108 <HAL_GetTick>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe f8ab 	bl	8002108 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d903      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e284      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
 8003fc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fc4:	4b96      	ldr	r3, [pc, #600]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d06a      	beq.n	80040b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fdc:	4b90      	ldr	r3, [pc, #576]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe6:	4b8e      	ldr	r3, [pc, #568]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d007      	beq.n	8004002 <HAL_RCC_OscConfig+0x286>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b18      	cmp	r3, #24
 8003ff6:	d11b      	bne.n	8004030 <HAL_RCC_OscConfig+0x2b4>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004002:	4b87      	ldr	r3, [pc, #540]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x29e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e257      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800401a:	4b81      	ldr	r3, [pc, #516]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	497d      	ldr	r1, [pc, #500]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004038:	4b79      	ldr	r3, [pc, #484]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a78      	ldr	r2, [pc, #480]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe f860 	bl	8002108 <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800404c:	f7fe f85c 	bl	8002108 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e235      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800405e:	4b70      	ldr	r3, [pc, #448]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800406a:	4b6d      	ldr	r3, [pc, #436]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	4969      	ldr	r1, [pc, #420]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	60cb      	str	r3, [r1, #12]
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004080:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a66      	ldr	r2, [pc, #408]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe f83c 	bl	8002108 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004094:	f7fe f838 	bl	8002108 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e211      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040a6:	4b5e      	ldr	r3, [pc, #376]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d036      	beq.n	800412c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b56      	ldr	r3, [pc, #344]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4a55      	ldr	r2, [pc, #340]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fe f819 	bl	8002108 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040da:	f7fe f815 	bl	8002108 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1ee      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ec:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x35e>
 80040f8:	e018      	b.n	800412c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b49      	ldr	r3, [pc, #292]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	4a48      	ldr	r2, [pc, #288]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd ffff 	bl	8002108 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd fffb 	bl	8002108 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e1d4      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d036      	beq.n	80041a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d019      	beq.n	8004174 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a36      	ldr	r2, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800414a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800414c:	f7fd ffdc 	bl	8002108 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004154:	f7fd ffd8 	bl	8002108 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1b1      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x3d8>
 8004172:	e018      	b.n	80041a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800417a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004180:	f7fd ffc2 	bl	8002108 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004188:	f7fd ffbe 	bl	8002108 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e197      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8086 	beq.w	80042c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x4a8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_RCC_OscConfig+0x4a8>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c0:	f7fd ffa2 	bl	8002108 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd ff9e 	bl	8002108 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e177      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_OscConfig+0x4a8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x480>
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	e032      	b.n	8004262 <HAL_RCC_OscConfig+0x4e6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <HAL_RCC_OscConfig+0x4ac>
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a05      	ldr	r2, [pc, #20]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a02      	ldr	r2, [pc, #8]	; (8004220 <HAL_RCC_OscConfig+0x4a4>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e021      	b.n	8004262 <HAL_RCC_OscConfig+0x4e6>
 800421e:	bf00      	nop
 8004220:	58024400 	.word	0x58024400
 8004224:	58024800 	.word	0x58024800
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10c      	bne.n	800424a <HAL_RCC_OscConfig+0x4ce>
 8004230:	4b83      	ldr	r3, [pc, #524]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a82      	ldr	r2, [pc, #520]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	4b80      	ldr	r3, [pc, #512]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a7f      	ldr	r2, [pc, #508]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	e00b      	b.n	8004262 <HAL_RCC_OscConfig+0x4e6>
 800424a:	4b7d      	ldr	r3, [pc, #500]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a7c      	ldr	r2, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b7a      	ldr	r3, [pc, #488]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a79      	ldr	r2, [pc, #484]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d015      	beq.n	8004296 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fd ff4d 	bl	8002108 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fd ff49 	bl	8002108 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e120      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004288:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ee      	beq.n	8004272 <HAL_RCC_OscConfig+0x4f6>
 8004294:	e014      	b.n	80042c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fd ff37 	bl	8002108 <HAL_GetTick>
 800429a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd ff33 	bl	8002108 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e10a      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042b4:	4b62      	ldr	r3, [pc, #392]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1ee      	bne.n	800429e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80ff 	beq.w	80044c8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042ca:	4b5d      	ldr	r3, [pc, #372]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d2:	2b18      	cmp	r3, #24
 80042d4:	f000 80ba 	beq.w	800444c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f040 8095 	bne.w	800440c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b57      	ldr	r3, [pc, #348]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a56      	ldr	r2, [pc, #344]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd ff0b 	bl	8002108 <HAL_GetTick>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd ff07 	bl	8002108 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0e0      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004318:	4b4a      	ldr	r3, [pc, #296]	; (8004444 <HAL_RCC_OscConfig+0x6c8>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	430a      	orrs	r2, r1
 8004328:	4945      	ldr	r1, [pc, #276]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	628b      	str	r3, [r1, #40]	; 0x28
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	3b01      	subs	r3, #1
 8004334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	3b01      	subs	r3, #1
 800433e:	025b      	lsls	r3, r3, #9
 8004340:	b29b      	uxth	r3, r3
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	3b01      	subs	r3, #1
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	3b01      	subs	r3, #1
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800435e:	4938      	ldr	r1, [pc, #224]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004370:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	4b34      	ldr	r3, [pc, #208]	; (8004448 <HAL_RCC_OscConfig+0x6cc>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800437c:	00d2      	lsls	r2, r2, #3
 800437e:	4930      	ldr	r1, [pc, #192]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f023 020c 	bic.w	r2, r3, #12
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	492b      	ldr	r1, [pc, #172]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f023 0202 	bic.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4927      	ldr	r1, [pc, #156]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043a8:	4b25      	ldr	r3, [pc, #148]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fe90 	bl	8002108 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd fe8c 	bl	8002108 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e065      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x670>
 800440a:	e05d      	b.n	80044c8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fe76 	bl	8002108 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd fe72 	bl	8002108 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e04b      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004432:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_OscConfig+0x6c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x6a4>
 800443e:	e043      	b.n	80044c8 <HAL_RCC_OscConfig+0x74c>
 8004440:	58024400 	.word	0x58024400
 8004444:	fffffc0c 	.word	0xfffffc0c
 8004448:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_RCC_OscConfig+0x758>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_RCC_OscConfig+0x758>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b01      	cmp	r3, #1
 800445e:	d031      	beq.n	80044c4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d12a      	bne.n	80044c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d122      	bne.n	80044c4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d11a      	bne.n	80044c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	0a5b      	lsrs	r3, r3, #9
 8004492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d111      	bne.n	80044c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d108      	bne.n	80044c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	58024400 	.word	0x58024400

080044d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e19c      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044ec:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d910      	bls.n	800451c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b87      	ldr	r3, [pc, #540]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	4985      	ldr	r1, [pc, #532]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e184      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004534:	429a      	cmp	r2, r3
 8004536:	d908      	bls.n	800454a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004538:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	4975      	ldr	r1, [pc, #468]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004546:	4313      	orrs	r3, r2
 8004548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d010      	beq.n	8004578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004562:	429a      	cmp	r2, r3
 8004564:	d908      	bls.n	8004578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	496a      	ldr	r1, [pc, #424]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004574:	4313      	orrs	r3, r2
 8004576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004590:	429a      	cmp	r2, r3
 8004592:	d908      	bls.n	80045a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	495e      	ldr	r1, [pc, #376]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045be:	429a      	cmp	r2, r3
 80045c0:	d908      	bls.n	80045d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045c2:	4b56      	ldr	r3, [pc, #344]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	4953      	ldr	r1, [pc, #332]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	4b4d      	ldr	r3, [pc, #308]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d908      	bls.n	8004602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f0:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f023 020f 	bic.w	r2, r3, #15
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4947      	ldr	r1, [pc, #284]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d055      	beq.n	80046ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4940      	ldr	r1, [pc, #256]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800461c:	4313      	orrs	r3, r2
 800461e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d107      	bne.n	8004638 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004628:	4b3c      	ldr	r3, [pc, #240]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d121      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0f6      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004640:	4b36      	ldr	r3, [pc, #216]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d115      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0ea      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004658:	4b30      	ldr	r3, [pc, #192]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0de      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004668:	4b2c      	ldr	r3, [pc, #176]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0d6      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f023 0207 	bic.w	r2, r3, #7
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4925      	ldr	r1, [pc, #148]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fd fd3d 	bl	8002108 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004692:	f7fd fd39 	bl	8002108 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0be      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d1eb      	bne.n	8004692 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d010      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d208      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f023 020f 	bic.w	r2, r3, #15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	490e      	ldr	r1, [pc, #56]	; (800471c <HAL_RCC_ClockConfig+0x244>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d214      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	4906      	ldr	r1, [pc, #24]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCC_ClockConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e086      	b.n	8004826 <HAL_RCC_ClockConfig+0x34e>
 8004718:	52002000 	.word	0x52002000
 800471c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004738:	429a      	cmp	r2, r3
 800473a:	d208      	bcs.n	800474e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800473c:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4939      	ldr	r1, [pc, #228]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 800474a:	4313      	orrs	r3, r2
 800474c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d010      	beq.n	800477c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004766:	429a      	cmp	r2, r3
 8004768:	d208      	bcs.n	800477c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	492e      	ldr	r1, [pc, #184]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 8004778:	4313      	orrs	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004794:	429a      	cmp	r2, r3
 8004796:	d208      	bcs.n	80047aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	4922      	ldr	r1, [pc, #136]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d010      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d208      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4917      	ldr	r1, [pc, #92]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047d8:	f000 f834 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4912      	ldr	r1, [pc, #72]	; (8004834 <HAL_RCC_ClockConfig+0x35c>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <HAL_RCC_ClockConfig+0x358>)
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <HAL_RCC_ClockConfig+0x35c>)
 8004800:	5cd3      	ldrb	r3, [r2, r3]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x360>)
 800480e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x364>)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_RCC_ClockConfig+0x368>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fc2a 	bl	8002074 <HAL_InitTick>
 8004820:	4603      	mov	r3, r0
 8004822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
 8004834:	0800c808 	.word	0x0800c808
 8004838:	240000a4 	.word	0x240000a4
 800483c:	240000a0 	.word	0x240000a0
 8004840:	240000a8 	.word	0x240000a8

08004844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800484a:	4bb3      	ldr	r3, [pc, #716]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004852:	2b18      	cmp	r3, #24
 8004854:	f200 8155 	bhi.w	8004b02 <HAL_RCC_GetSysClockFreq+0x2be>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_RCC_GetSysClockFreq+0x1c>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	080048c5 	.word	0x080048c5
 8004864:	08004b03 	.word	0x08004b03
 8004868:	08004b03 	.word	0x08004b03
 800486c:	08004b03 	.word	0x08004b03
 8004870:	08004b03 	.word	0x08004b03
 8004874:	08004b03 	.word	0x08004b03
 8004878:	08004b03 	.word	0x08004b03
 800487c:	08004b03 	.word	0x08004b03
 8004880:	080048eb 	.word	0x080048eb
 8004884:	08004b03 	.word	0x08004b03
 8004888:	08004b03 	.word	0x08004b03
 800488c:	08004b03 	.word	0x08004b03
 8004890:	08004b03 	.word	0x08004b03
 8004894:	08004b03 	.word	0x08004b03
 8004898:	08004b03 	.word	0x08004b03
 800489c:	08004b03 	.word	0x08004b03
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	08004b03 	.word	0x08004b03
 80048a8:	08004b03 	.word	0x08004b03
 80048ac:	08004b03 	.word	0x08004b03
 80048b0:	08004b03 	.word	0x08004b03
 80048b4:	08004b03 	.word	0x08004b03
 80048b8:	08004b03 	.word	0x08004b03
 80048bc:	08004b03 	.word	0x08004b03
 80048c0:	080048f7 	.word	0x080048f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048c4:	4b94      	ldr	r3, [pc, #592]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048d0:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	4a90      	ldr	r2, [pc, #576]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80048e2:	e111      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048e4:	4b8d      	ldr	r3, [pc, #564]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048e6:	61bb      	str	r3, [r7, #24]
    break;
 80048e8:	e10e      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048ea:	4b8d      	ldr	r3, [pc, #564]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048ec:	61bb      	str	r3, [r7, #24]
    break;
 80048ee:	e10b      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80048f0:	4b8c      	ldr	r3, [pc, #560]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048f2:	61bb      	str	r3, [r7, #24]
    break;
 80048f4:	e108      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004900:	4b85      	ldr	r3, [pc, #532]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800490c:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004916:	4b80      	ldr	r3, [pc, #512]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80e1 	beq.w	8004afc <HAL_RCC_GetSysClockFreq+0x2b8>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f000 8083 	beq.w	8004a48 <HAL_RCC_GetSysClockFreq+0x204>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f200 80a1 	bhi.w	8004a8c <HAL_RCC_GetSysClockFreq+0x248>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x114>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d056      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004956:	e099      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004958:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004964:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	4a6b      	ldr	r2, [pc, #428]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b62      	ldr	r3, [pc, #392]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80049be:	e087      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2e8>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80049e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	e065      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a46:	e043      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004b34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8a:	e021      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ace:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	0a5b      	lsrs	r3, r3, #9
 8004ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ada:	3301      	adds	r3, #1
 8004adc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af4:	ee17 3a90 	vmov	r3, s15
 8004af8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004afa:	e005      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61bb      	str	r3, [r7, #24]
    break;
 8004b00:	e002      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b04:	61bb      	str	r3, [r7, #24]
    break;
 8004b06:	bf00      	nop
  }

  return sysclockfreq;
 8004b08:	69bb      	ldr	r3, [r7, #24]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	03d09000 	.word	0x03d09000
 8004b20:	003d0900 	.word	0x003d0900
 8004b24:	007a1200 	.word	0x007a1200
 8004b28:	46000000 	.word	0x46000000
 8004b2c:	4c742400 	.word	0x4c742400
 8004b30:	4a742400 	.word	0x4a742400
 8004b34:	4af42400 	.word	0x4af42400

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b3e:	f7ff fe81 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	490f      	ldr	r1, [pc, #60]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	0800c808 	.word	0x0800c808
 8004b90:	240000a4 	.word	0x240000a4
 8004b94:	240000a0 	.word	0x240000a0

08004b98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03f      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bbc:	d02a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bc2:	d824      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bc8:	d018      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bce:	d81e      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bda:	e018      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4ba4      	ldr	r3, [pc, #656]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4aa3      	ldr	r2, [pc, #652]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004be8:	e015      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2102      	movs	r1, #2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fecb 	bl	800598c <RCCEx_PLL2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004bfa:	e00c      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	2102      	movs	r1, #2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 ff74 	bl	8005af0 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c1c:	4b94      	ldr	r3, [pc, #592]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	4991      	ldr	r1, [pc, #580]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c2e:	e001      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d03d      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d826      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c65 	.word	0x08004c65
 8004c54:	08004c73 	.word	0x08004c73
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c9d 	.word	0x08004c9d
 8004c60:	08004c9d 	.word	0x08004c9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c64:	4b82      	ldr	r3, [pc, #520]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a81      	ldr	r2, [pc, #516]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c70:	e015      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe87 	bl	800598c <RCCEx_PLL2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c82:	e00c      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 ff30 	bl	8005af0 <RCCEx_PLL3_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca4:	4b72      	ldr	r3, [pc, #456]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	496f      	ldr	r1, [pc, #444]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d051      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004cd2:	d036      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004cd8:	d830      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cde:	d032      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce4:	d82a      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ce6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cea:	d02e      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004cec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cf0:	d824      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d018      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfc:	d81e      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d06:	d007      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d08:	e018      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0a:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a58      	ldr	r2, [pc, #352]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d16:	e019      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fe34 	bl	800598c <RCCEx_PLL2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d28:	e010      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3324      	adds	r3, #36	; 0x24
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fedd 	bl	8005af0 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d3a:	e007      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d60:	4943      	ldr	r1, [pc, #268]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	658b      	str	r3, [r1, #88]	; 0x58
 8004d66:	e001      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d051      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004d82:	d036      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004d84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004d88:	d830      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8e:	d032      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d94:	d82a      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d9a:	d02e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004d9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004da0:	d824      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da6:	d018      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dac:	d81e      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004db2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db6:	d007      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004db8:	e018      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dba:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dc6:	e019      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fddc 	bl	800598c <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dd8:	e010      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fe85 	bl	8005af0 <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dea:	e007      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e004      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e10:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	658b      	str	r3, [r1, #88]	; 0x58
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d035      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d01c      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e30:	2b30      	cmp	r3, #48	; 0x30
 8004e32:	d817      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d00c      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d813      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d019      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d10f      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004e50:	e011      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2102      	movs	r1, #2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fd97 	bl	800598c <RCCEx_PLL2_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004e62:	e008      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e003      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
      break;
 8004e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e7c:	4ba3      	ldr	r3, [pc, #652]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	49a0      	ldr	r1, [pc, #640]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e8e:	e001      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d047      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea8:	d030      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eae:	d82a      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eb4:	d02c      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eba:	d824      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec0:	d018      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec6:	d81e      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d007      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ed2:	e018      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b8d      	ldr	r3, [pc, #564]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	4a8c      	ldr	r2, [pc, #560]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ee0:	e017      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fd4f 	bl	800598c <RCCEx_PLL2_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ef2:	e00e      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fdf8 	bl	8005af0 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f04:	e005      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004f0c:	bf00      	nop
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f18:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	4979      	ldr	r1, [pc, #484]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	650b      	str	r3, [r1, #80]	; 0x50
 8004f2a:	e001      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d049      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f44:	d02e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f4a:	d828      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f50:	d02a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f56:	d822      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5c:	d026      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004f5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f62:	d81c      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f68:	d010      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6e:	d816      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01d      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d111      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fd03 	bl	800598c <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f8a:	e012      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3324      	adds	r3, #36	; 0x24
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fdac 	bl	8005af0 <RCCEx_PLL3_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f9c:	e009      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004fa4:	bf00      	nop
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004fa8:	bf00      	nop
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004fac:	bf00      	nop
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fb8:	4b54      	ldr	r3, [pc, #336]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	4951      	ldr	r1, [pc, #324]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8004fca:	e001      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d04b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe6:	d02e      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fec:	d828      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d02a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d822      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ffe:	d026      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005004:	d81c      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800500a:	d010      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800500c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005010:	d816      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01d      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800501a:	d111      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fcb2 	bl	800598c <RCCEx_PLL2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800502c:	e012      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3324      	adds	r3, #36	; 0x24
 8005032:	2101      	movs	r1, #1
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fd5b 	bl	8005af0 <RCCEx_PLL3_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800503e:	e009      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
      break;
 8005044:	e006      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005046:	bf00      	nop
 8005048:	e004      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005068:	4928      	ldr	r1, [pc, #160]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800506a:	4313      	orrs	r3, r2
 800506c:	658b      	str	r3, [r1, #88]	; 0x58
 800506e:	e001      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005088:	d00e      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508e:	d814      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005098:	d10f      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4a1b      	ldr	r2, [pc, #108]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80050a6:	e00c      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	2101      	movs	r1, #1
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fc6c 	bl	800598c <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
      break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80050c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d4:	490d      	ldr	r1, [pc, #52]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	650b      	str	r3, [r1, #80]	; 0x50
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d034      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d81d      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005137 	.word	0x08005137
 8005100:	08005111 	.word	0x08005111
 8005104:	0800511f 	.word	0x0800511f
 8005108:	08005137 	.word	0x08005137
 800510c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4bb1      	ldr	r3, [pc, #708]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4ab0      	ldr	r2, [pc, #704]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800511c:	e00c      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fc31 	bl	800598c <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800512e:	e003      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800513e:	4ba6      	ldr	r3, [pc, #664]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	49a3      	ldr	r1, [pc, #652]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800514c:	4313      	orrs	r3, r2
 800514e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005150:	e001      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8086 	beq.w	8005270 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005164:	4b9d      	ldr	r3, [pc, #628]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a9c      	ldr	r2, [pc, #624]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005170:	f7fc ffca 	bl	8002108 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005176:	e009      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005178:	f7fc ffc6 	bl	8002108 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d902      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	75fb      	strb	r3, [r7, #23]
        break;
 800518a:	e005      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800518c:	4b93      	ldr	r3, [pc, #588]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ef      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d166      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800519e:	4b8e      	ldr	r3, [pc, #568]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051a8:	4053      	eors	r3, r2
 80051aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d013      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b2:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051bc:	4b86      	ldr	r3, [pc, #536]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	4a85      	ldr	r2, [pc, #532]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c8:	4b83      	ldr	r3, [pc, #524]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	4a82      	ldr	r2, [pc, #520]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051d4:	4a80      	ldr	r2, [pc, #512]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d115      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fc ff8f 	bl	8002108 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ec:	e00b      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fc ff8b 	bl	8002108 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d902      	bls.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	75fb      	strb	r3, [r7, #23]
            break;
 8005204:	e005      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005206:	4b74      	ldr	r3, [pc, #464]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0ed      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d126      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005226:	d10d      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005228:	4b6b      	ldr	r3, [pc, #428]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005236:	0919      	lsrs	r1, r3, #4
 8005238:	4b69      	ldr	r3, [pc, #420]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800523a:	400b      	ands	r3, r1
 800523c:	4966      	ldr	r1, [pc, #408]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800523e:	4313      	orrs	r3, r2
 8005240:	610b      	str	r3, [r1, #16]
 8005242:	e005      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005244:	4b64      	ldr	r3, [pc, #400]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	4a63      	ldr	r2, [pc, #396]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800524a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800524e:	6113      	str	r3, [r2, #16]
 8005250:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800525a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525e:	495e      	ldr	r1, [pc, #376]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005260:	4313      	orrs	r3, r2
 8005262:	670b      	str	r3, [r1, #112]	; 0x70
 8005264:	e004      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	75bb      	strb	r3, [r7, #22]
 800526a:	e001      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d07e      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	2b28      	cmp	r3, #40	; 0x28
 8005282:	d867      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	0800535b 	.word	0x0800535b
 8005290:	08005355 	.word	0x08005355
 8005294:	08005355 	.word	0x08005355
 8005298:	08005355 	.word	0x08005355
 800529c:	08005355 	.word	0x08005355
 80052a0:	08005355 	.word	0x08005355
 80052a4:	08005355 	.word	0x08005355
 80052a8:	08005355 	.word	0x08005355
 80052ac:	08005331 	.word	0x08005331
 80052b0:	08005355 	.word	0x08005355
 80052b4:	08005355 	.word	0x08005355
 80052b8:	08005355 	.word	0x08005355
 80052bc:	08005355 	.word	0x08005355
 80052c0:	08005355 	.word	0x08005355
 80052c4:	08005355 	.word	0x08005355
 80052c8:	08005355 	.word	0x08005355
 80052cc:	08005343 	.word	0x08005343
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005355 	.word	0x08005355
 80052d8:	08005355 	.word	0x08005355
 80052dc:	08005355 	.word	0x08005355
 80052e0:	08005355 	.word	0x08005355
 80052e4:	08005355 	.word	0x08005355
 80052e8:	08005355 	.word	0x08005355
 80052ec:	0800535b 	.word	0x0800535b
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005355 	.word	0x08005355
 80052f8:	08005355 	.word	0x08005355
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005355 	.word	0x08005355
 8005304:	08005355 	.word	0x08005355
 8005308:	08005355 	.word	0x08005355
 800530c:	0800535b 	.word	0x0800535b
 8005310:	08005355 	.word	0x08005355
 8005314:	08005355 	.word	0x08005355
 8005318:	08005355 	.word	0x08005355
 800531c:	08005355 	.word	0x08005355
 8005320:	08005355 	.word	0x08005355
 8005324:	08005355 	.word	0x08005355
 8005328:	08005355 	.word	0x08005355
 800532c:	0800535b 	.word	0x0800535b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb28 	bl	800598c <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005340:	e00c      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3324      	adds	r3, #36	; 0x24
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fbd1 	bl	8005af0 <RCCEx_PLL3_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005352:	e003      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
      break;
 8005358:	e000      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800535a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005362:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536e:	491a      	ldr	r1, [pc, #104]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005370:	4313      	orrs	r3, r2
 8005372:	654b      	str	r3, [r1, #84]	; 0x54
 8005374:	e001      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d03e      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	2b05      	cmp	r3, #5
 800538c:	d820      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053ad 	.word	0x080053ad
 800539c:	080053bf 	.word	0x080053bf
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 faea 	bl	800598c <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053bc:	e013      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	; 0x24
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb93 	bl	8005af0 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053ce:	e00a      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
      break;
 80053d4:	e007      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80053d6:	bf00      	nop
 80053d8:	58024400 	.word	0x58024400
 80053dc:	58024800 	.word	0x58024800
 80053e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80053e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80053ec:	4b9f      	ldr	r3, [pc, #636]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f023 0207 	bic.w	r2, r3, #7
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	499c      	ldr	r1, [pc, #624]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	654b      	str	r3, [r1, #84]	; 0x54
 80053fe:	e001      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d039      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005416:	2b05      	cmp	r3, #5
 8005418:	d820      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005463 	.word	0x08005463
 8005424:	08005439 	.word	0x08005439
 8005428:	0800544b 	.word	0x0800544b
 800542c:	08005463 	.word	0x08005463
 8005430:	08005463 	.word	0x08005463
 8005434:	08005463 	.word	0x08005463
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f000 faa4 	bl	800598c <RCCEx_PLL2_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005448:	e00c      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3324      	adds	r3, #36	; 0x24
 800544e:	2101      	movs	r1, #1
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fb4d 	bl	8005af0 <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800545a:	e003      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
      break;
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800546a:	4b80      	ldr	r3, [pc, #512]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546e:	f023 0207 	bic.w	r2, r3, #7
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	497c      	ldr	r1, [pc, #496]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	658b      	str	r3, [r1, #88]	; 0x58
 800547e:	e001      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549a:	d02e      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800549c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a0:	d828      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a6:	d02a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d822      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80054ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b2:	d026      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80054b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b8:	d81c      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80054ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054be:	d010      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80054c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c4:	d816      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01d      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80054ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ce:	d111      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fa58 	bl	800598c <RCCEx_PLL2_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80054e0:	e012      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3324      	adds	r3, #36	; 0x24
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb01 	bl	8005af0 <RCCEx_PLL3_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80054f2:	e009      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
      break;
 80054f8:	e006      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80054fa:	bf00      	nop
 80054fc:	e004      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80054fe:	bf00      	nop
 8005500:	e002      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800550e:	4b57      	ldr	r3, [pc, #348]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	4953      	ldr	r1, [pc, #332]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800551e:	4313      	orrs	r3, r2
 8005520:	654b      	str	r3, [r1, #84]	; 0x54
 8005522:	e001      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d04b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800553e:	d02e      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005540:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005544:	d828      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	d02a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800554c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005550:	d822      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005556:	d026      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800555c:	d81c      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d010      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d816      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005572:	d111      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa06 	bl	800598c <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005584:	e012      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2102      	movs	r1, #2
 800558c:	4618      	mov	r0, r3
 800558e:	f000 faaf 	bl	8005af0 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80055aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b2:	4b2e      	ldr	r3, [pc, #184]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c0:	492a      	ldr	r1, [pc, #168]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	658b      	str	r3, [r1, #88]	; 0x58
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d04d      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055e2:	d02e      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80055e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055e8:	d828      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ee:	d02a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f4:	d822      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80055f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055fa:	d026      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80055fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005600:	d81c      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005606:	d010      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560c:	d816      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01d      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005616:	d111      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f9b4 	bl	800598c <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005628:	e012      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3324      	adds	r3, #36	; 0x24
 800562e:	2102      	movs	r1, #2
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fa5d 	bl	8005af0 <RCCEx_PLL3_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800563a:	e009      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	75fb      	strb	r3, [r7, #23]
      break;
 8005640:	e006      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005642:	bf00      	nop
 8005644:	e004      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800564e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005664:	4901      	ldr	r1, [pc, #4]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	658b      	str	r3, [r1, #88]	; 0x58
 800566a:	e003      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800566c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005688:	d10a      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3324      	adds	r3, #36	; 0x24
 800568e:	2102      	movs	r1, #2
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa2d 	bl	8005af0 <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80056a0:	4b8a      	ldr	r3, [pc, #552]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ac:	4987      	ldr	r1, [pc, #540]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d10a      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3324      	adds	r3, #36	; 0x24
 80056ce:	2102      	movs	r1, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fa0d 	bl	8005af0 <RCCEx_PLL3_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056e0:	4b7a      	ldr	r3, [pc, #488]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	4977      	ldr	r1, [pc, #476]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d034      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570a:	d01d      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005710:	d817      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d009      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800571c:	e011      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3304      	adds	r3, #4
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f931 	bl	800598c <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800572e:	e00c      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	2102      	movs	r1, #2
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f9da 	bl	8005af0 <RCCEx_PLL3_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005740:	e003      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
      break;
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005750:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800575e:	495b      	ldr	r1, [pc, #364]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005760:	4313      	orrs	r3, r2
 8005762:	658b      	str	r3, [r1, #88]	; 0x58
 8005764:	e001      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d033      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005780:	d01c      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005786:	d816      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800578c:	d003      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800578e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005792:	d007      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005794:	e00f      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005796:	4b4d      	ldr	r3, [pc, #308]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a4c      	ldr	r2, [pc, #304]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80057a2:	e00c      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3324      	adds	r3, #36	; 0x24
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f9a0 	bl	8005af0 <RCCEx_PLL3_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80057bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c4:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d2:	493e      	ldr	r1, [pc, #248]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	654b      	str	r3, [r1, #84]	; 0x54
 80057d8:	e001      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d029      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d007      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80057f8:	e00f      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fa:	4b34      	ldr	r3, [pc, #208]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	4a33      	ldr	r2, [pc, #204]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005806:	e00b      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2102      	movs	r1, #2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f8bc 	bl	800598c <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
      break;
 800581e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005826:	4b29      	ldr	r3, [pc, #164]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	4926      	ldr	r1, [pc, #152]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005834:	4313      	orrs	r3, r2
 8005836:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005838:	e001      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f94d 	bl	8005af0 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d033      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005874:	d017      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587a:	d811      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800587c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005880:	d013      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005886:	d80b      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005888:	2b00      	cmp	r3, #0
 800588a:	d010      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800588c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005890:	d106      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800589e:	e007      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
      break;
 80058a4:	e004      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80058ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c2:	4902      	ldr	r1, [pc, #8]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	654b      	str	r3, [r1, #84]	; 0x54
 80058c8:	e004      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80058ca:	bf00      	nop
 80058cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ec:	4926      	ldr	r1, [pc, #152]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005902:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590a:	491f      	ldr	r1, [pc, #124]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00d      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005922:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005926:	6113      	str	r3, [r2, #16]
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005932:	4915      	ldr	r1, [pc, #84]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da08      	bge.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005944:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	490e      	ldr	r1, [pc, #56]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800594e:	4313      	orrs	r3, r2
 8005950:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596c:	4906      	ldr	r1, [pc, #24]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800596e:	4313      	orrs	r3, r2
 8005970:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005972:	7dbb      	ldrb	r3, [r7, #22]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400

0800598c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800599a:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d101      	bne.n	80059aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e099      	b.n	8005ade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059aa:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fc fba7 	bl	8002108 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059be:	f7fc fba3 	bl	8002108 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e086      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059d0:	4b45      	ldr	r3, [pc, #276]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059dc:	4b42      	ldr	r3, [pc, #264]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	493f      	ldr	r1, [pc, #252]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	628b      	str	r3, [r1, #40]	; 0x28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a20:	4931      	ldr	r1, [pc, #196]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	492d      	ldr	r1, [pc, #180]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a38:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f023 0220 	bic.w	r2, r3, #32
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4928      	ldr	r1, [pc, #160]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <RCCEx_PLL2_Config+0x160>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	69d2      	ldr	r2, [r2, #28]
 8005a62:	00d2      	lsls	r2, r2, #3
 8005a64:	4920      	ldr	r1, [pc, #128]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	f043 0310 	orr.w	r3, r3, #16
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a88:	e00f      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a90:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a9c:	e005      	b.n	8005aaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab6:	f7fc fb27 	bl	8002108 <HAL_GetTick>
 8005aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005abc:	e008      	b.n	8005ad0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005abe:	f7fc fb23 	bl	8002108 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <RCCEx_PLL2_Config+0x15c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	ffff0007 	.word	0xffff0007

08005af0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005afe:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d101      	bne.n	8005b0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e099      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b0e:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4e      	ldr	r2, [pc, #312]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fc faf5 	bl	8002108 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b22:	f7fc faf1 	bl	8002108 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e086      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b34:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b40:	4b42      	ldr	r3, [pc, #264]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	493f      	ldr	r1, [pc, #252]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	628b      	str	r3, [r1, #40]	; 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	025b      	lsls	r3, r3, #9
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	061b      	lsls	r3, r3, #24
 8005b80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b84:	4931      	ldr	r1, [pc, #196]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b8a:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	492d      	ldr	r1, [pc, #180]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	4928      	ldr	r1, [pc, #160]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bae:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <RCCEx_PLL3_Config+0x160>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	69d2      	ldr	r2, [r2, #28]
 8005bc6:	00d2      	lsls	r2, r2, #3
 8005bc8:	4920      	ldr	r1, [pc, #128]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bec:	e00f      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c00:	e005      	b.n	8005c0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1a:	f7fc fa75 	bl	8002108 <HAL_GetTick>
 8005c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c22:	f7fc fa71 	bl	8002108 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e006      	b.n	8005c42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <RCCEx_PLL3_Config+0x15c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	ffff0007 	.word	0xffff0007

08005c54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0f1      	b.n	8005e4a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a78      	ldr	r2, [pc, #480]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <HAL_SPI_Init+0x42>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a77      	ldr	r2, [pc, #476]	; (8005e58 <HAL_SPI_Init+0x204>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00a      	beq.n	8005c96 <HAL_SPI_Init+0x42>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a75      	ldr	r2, [pc, #468]	; (8005e5c <HAL_SPI_Init+0x208>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d005      	beq.n	8005c96 <HAL_SPI_Init+0x42>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	d901      	bls.n	8005c96 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0d9      	b.n	8005e4a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fba2 	bl	80063e0 <SPI_GetPacketSize>
 8005c9c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6c      	ldr	r2, [pc, #432]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_SPI_Init+0x6e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a6a      	ldr	r2, [pc, #424]	; (8005e58 <HAL_SPI_Init+0x204>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <HAL_SPI_Init+0x6e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a69      	ldr	r2, [pc, #420]	; (8005e5c <HAL_SPI_Init+0x208>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d002      	beq.n	8005cc2 <HAL_SPI_Init+0x6e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d811      	bhi.n	8005ce6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cc6:	4a63      	ldr	r2, [pc, #396]	; (8005e54 <HAL_SPI_Init+0x200>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <HAL_SPI_Init+0x204>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_SPI_Init+0x8c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a60      	ldr	r2, [pc, #384]	; (8005e5c <HAL_SPI_Init+0x208>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d104      	bne.n	8005cea <HAL_SPI_Init+0x96>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d901      	bls.n	8005cea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e0af      	b.n	8005e4a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb feb8 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005d26:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d30:	d119      	bne.n	8005d66 <HAL_SPI_Init+0x112>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3a:	d103      	bne.n	8005d44 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10c      	bne.n	8005d66 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d54:	d107      	bne.n	8005d66 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	ea42 0103 	orr.w	r1, r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	ea42 0103 	orr.w	r1, r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d113      	bne.n	8005e06 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40013000 	.word	0x40013000
 8005e58:	40003800 	.word	0x40003800
 8005e5c:	40003c00 	.word	0x40003c00

08005e60 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3320      	adds	r3, #32
 8005e76:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_SPI_Transmit+0x2a>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e1d7      	b.n	800623a <HAL_SPI_Transmit+0x3da>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e92:	f7fc f939 	bl	8002108 <HAL_GetTick>
 8005e96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005eb0:	7efb      	ldrb	r3, [r7, #27]
 8005eb2:	e1c2      	b.n	800623a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_SPI_Transmit+0x60>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ecc:	7efb      	ldrb	r3, [r7, #27]
 8005ece:	e1b4      	b.n	800623a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f20:	d107      	bne.n	8005f32 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b96      	ldr	r3, [pc, #600]	; (8006194 <HAL_SPI_Transmit+0x334>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	88f9      	ldrh	r1, [r7, #6]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5e:	d107      	bne.n	8005f70 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b0f      	cmp	r3, #15
 8005f76:	d947      	bls.n	8006008 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f78:	e03f      	b.n	8005ffa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d114      	bne.n	8005fb2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fb0:	e023      	b.n	8005ffa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb2:	f7fc f8a9 	bl	8002108 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d803      	bhi.n	8005fca <HAL_SPI_Transmit+0x16a>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d102      	bne.n	8005fd0 <HAL_SPI_Transmit+0x170>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f937 	bl	8006244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e11f      	b.n	800623a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1b9      	bne.n	8005f7a <HAL_SPI_Transmit+0x11a>
 8006006:	e0f2      	b.n	80061ee <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b07      	cmp	r3, #7
 800600e:	f240 80e7 	bls.w	80061e0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006012:	e05d      	b.n	80060d0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d132      	bne.n	8006088 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d918      	bls.n	8006060 <HAL_SPI_Transmit+0x200>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d014      	beq.n	8006060 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006046:	1d1a      	adds	r2, r3, #4
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b02      	subs	r3, #2
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800605e:	e037      	b.n	80060d0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006086:	e023      	b.n	80060d0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006088:	f7fc f83e 	bl	8002108 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d803      	bhi.n	80060a0 <HAL_SPI_Transmit+0x240>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d102      	bne.n	80060a6 <HAL_SPI_Transmit+0x246>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d114      	bne.n	80060d0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f8cc 	bl	8006244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0b4      	b.n	800623a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d19b      	bne.n	8006014 <HAL_SPI_Transmit+0x1b4>
 80060dc:	e087      	b.n	80061ee <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d155      	bne.n	8006198 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d918      	bls.n	800612a <HAL_SPI_Transmit+0x2ca>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d914      	bls.n	800612a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b04      	subs	r3, #4
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006128:	e05a      	b.n	80061e0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d917      	bls.n	8006166 <HAL_SPI_Transmit+0x306>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d013      	beq.n	8006166 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b02      	subs	r3, #2
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006164:	e03c      	b.n	80061e0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3320      	adds	r3, #32
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006190:	e026      	b.n	80061e0 <HAL_SPI_Transmit+0x380>
 8006192:	bf00      	nop
 8006194:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006198:	f7fb ffb6 	bl	8002108 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d803      	bhi.n	80061b0 <HAL_SPI_Transmit+0x350>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d102      	bne.n	80061b6 <HAL_SPI_Transmit+0x356>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d114      	bne.n	80061e0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f844 	bl	8006244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e02c      	b.n	800623a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f47f af78 	bne.w	80060de <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2108      	movs	r1, #8
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f8c3 	bl	8006384 <SPI_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f815 	bl	8006244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006238:	7efb      	ldrb	r3, [r7, #27]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop

08006244 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0210 	orr.w	r2, r2, #16
 8006272:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6919      	ldr	r1, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b3c      	ldr	r3, [pc, #240]	; (8006380 <SPI_CloseTransfer+0x13c>)
 8006290:	400b      	ands	r3, r1
 8006292:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d014      	beq.n	80062da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00f      	beq.n	80062da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699a      	ldr	r2, [r3, #24]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0220 	orr.w	r2, r2, #32
 80062d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d014      	beq.n	8006310 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f6:	f043 0204 	orr.w	r2, r3, #4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006320:	f043 0201 	orr.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006338:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800634a:	f043 0208 	orr.w	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006362:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	fffffc90 	.word	0xfffffc90

08006384 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006394:	e010      	b.n	80063b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006396:	f7fb feb7 	bl	8002108 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d803      	bhi.n	80063ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d102      	bne.n	80063b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e00f      	b.n	80063d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4013      	ands	r3, r2
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d0df      	beq.n	8006396 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3307      	adds	r3, #7
 80063fe:	08db      	lsrs	r3, r3, #3
 8006400:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	fb02 f303 	mul.w	r3, r2, r3
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e049      	b.n	80064bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb fba3 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 fb29 	bl	8006aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d001      	beq.n	80064dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e05e      	b.n	800659a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2b      	ldr	r2, [pc, #172]	; (80065a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02c      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d027      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a27      	ldr	r2, [pc, #156]	; (80065ac <HAL_TIM_Base_Start_IT+0xe8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <HAL_TIM_Base_Start_IT+0xec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01d      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <HAL_TIM_Base_Start_IT+0xf4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a21      	ldr	r2, [pc, #132]	; (80065bc <HAL_TIM_Base_Start_IT+0xf8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_TIM_Base_Start_IT+0x100>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x94>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <HAL_TIM_Base_Start_IT+0x104>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d115      	bne.n	8006584 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <HAL_TIM_Base_Start_IT+0x108>)
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b06      	cmp	r3, #6
 8006568:	d015      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0xd2>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d011      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	e008      	b.n	8006596 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e000      	b.n	8006598 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40001800 	.word	0x40001800
 80065c0:	40014000 	.word	0x40014000
 80065c4:	4000e000 	.word	0x4000e000
 80065c8:	4000e400 	.word	0x4000e400
 80065cc:	00010007 	.word	0x00010007

080065d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10f      	bne.n	8006618 <HAL_TIM_Base_Stop_IT+0x48>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6a1a      	ldr	r2, [r3, #32]
 80065fe:	f240 4344 	movw	r3, #1092	; 0x444
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <HAL_TIM_Base_Stop_IT+0x48>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d122      	bne.n	800668a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d11b      	bne.n	800668a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0202 	mvn.w	r2, #2
 800665a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9fd 	bl	8006a70 <HAL_TIM_IC_CaptureCallback>
 8006676:	e005      	b.n	8006684 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9ef 	bl	8006a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa00 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d122      	bne.n	80066de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d11b      	bne.n	80066de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0204 	mvn.w	r2, #4
 80066ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f9d3 	bl	8006a70 <HAL_TIM_IC_CaptureCallback>
 80066ca:	e005      	b.n	80066d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9c5 	bl	8006a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9d6 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d122      	bne.n	8006732 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d11b      	bne.n	8006732 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0208 	mvn.w	r2, #8
 8006702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2204      	movs	r2, #4
 8006708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f9a9 	bl	8006a70 <HAL_TIM_IC_CaptureCallback>
 800671e:	e005      	b.n	800672c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f99b 	bl	8006a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9ac 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d122      	bne.n	8006786 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d11b      	bne.n	8006786 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0210 	mvn.w	r2, #16
 8006756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2208      	movs	r2, #8
 800675c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f97f 	bl	8006a70 <HAL_TIM_IC_CaptureCallback>
 8006772:	e005      	b.n	8006780 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f971 	bl	8006a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f982 	bl	8006a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10e      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0201 	mvn.w	r2, #1
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fa ff11 	bl	80015d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d10e      	bne.n	80067de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb51 	bl	8006e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d10e      	bne.n	800680c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d107      	bne.n	800680c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb44 	bl	8006e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f930 	bl	8006a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b20      	cmp	r3, #32
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b20      	cmp	r3, #32
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0220 	mvn.w	r2, #32
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb04 	bl	8006e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_TIM_ConfigClockSource+0x1c>
 8006884:	2302      	movs	r3, #2
 8006886:	e0dc      	b.n	8006a42 <HAL_TIM_ConfigClockSource+0x1d6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	4b6a      	ldr	r3, [pc, #424]	; (8006a4c <HAL_TIM_ConfigClockSource+0x1e0>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a64      	ldr	r2, [pc, #400]	; (8006a50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f000 80a9 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80068c4:	4a62      	ldr	r2, [pc, #392]	; (8006a50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	f200 80ae 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80068cc:	4a61      	ldr	r2, [pc, #388]	; (8006a54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f000 80a1 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80068d4:	4a5f      	ldr	r2, [pc, #380]	; (8006a54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	f200 80a6 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80068dc:	4a5e      	ldr	r2, [pc, #376]	; (8006a58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f000 8099 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80068e4:	4a5c      	ldr	r2, [pc, #368]	; (8006a58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f200 809e 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80068ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068f0:	f000 8091 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80068f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068f8:	f200 8096 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80068fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006900:	f000 8089 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8006904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006908:	f200 808e 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006910:	d03e      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x124>
 8006912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006916:	f200 8087 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 800691a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691e:	f000 8086 	beq.w	8006a2e <HAL_TIM_ConfigClockSource+0x1c2>
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006926:	d87f      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006928:	2b70      	cmp	r3, #112	; 0x70
 800692a:	d01a      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xf6>
 800692c:	2b70      	cmp	r3, #112	; 0x70
 800692e:	d87b      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006930:	2b60      	cmp	r3, #96	; 0x60
 8006932:	d050      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x16a>
 8006934:	2b60      	cmp	r3, #96	; 0x60
 8006936:	d877      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006938:	2b50      	cmp	r3, #80	; 0x50
 800693a:	d03c      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x14a>
 800693c:	2b50      	cmp	r3, #80	; 0x50
 800693e:	d873      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d058      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x18a>
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d86f      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006948:	2b30      	cmp	r3, #48	; 0x30
 800694a:	d064      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 800694c:	2b30      	cmp	r3, #48	; 0x30
 800694e:	d86b      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006950:	2b20      	cmp	r3, #32
 8006952:	d060      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8006954:	2b20      	cmp	r3, #32
 8006956:	d867      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d05c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 800695c:	2b10      	cmp	r3, #16
 800695e:	d05a      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8006960:	e062      	b.n	8006a28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6899      	ldr	r1, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f000 f9bf 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	609a      	str	r2, [r3, #8]
      break;
 800698e:	e04f      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6899      	ldr	r1, [r3, #8]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f000 f9a8 	bl	8006cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b2:	609a      	str	r2, [r3, #8]
      break;
 80069b4:	e03c      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 f918 	bl	8006bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2150      	movs	r1, #80	; 0x50
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f972 	bl	8006cb8 <TIM_ITRx_SetConfig>
      break;
 80069d4:	e02c      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 f937 	bl	8006c56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2160      	movs	r1, #96	; 0x60
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f962 	bl	8006cb8 <TIM_ITRx_SetConfig>
      break;
 80069f4:	e01c      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 f8f8 	bl	8006bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f952 	bl	8006cb8 <TIM_ITRx_SetConfig>
      break;
 8006a14:	e00c      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f000 f949 	bl	8006cb8 <TIM_ITRx_SetConfig>
      break;
 8006a26:	e003      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2c:	e000      	b.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	ffceff88 	.word	0xffceff88
 8006a50:	00100040 	.word	0x00100040
 8006a54:	00100030 	.word	0x00100030
 8006a58:	00100020 	.word	0x00100020

08006a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a44      	ldr	r2, [pc, #272]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aca:	d00f      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a41      	ldr	r2, [pc, #260]	; (8006bd4 <TIM_Base_SetConfig+0x128>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <TIM_Base_SetConfig+0x130>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3e      	ldr	r2, [pc, #248]	; (8006be0 <TIM_Base_SetConfig+0x134>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d108      	bne.n	8006afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a33      	ldr	r2, [pc, #204]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d027      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0c:	d023      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a30      	ldr	r2, [pc, #192]	; (8006bd4 <TIM_Base_SetConfig+0x128>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01f      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2f      	ldr	r2, [pc, #188]	; (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01b      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2e      	ldr	r2, [pc, #184]	; (8006bdc <TIM_Base_SetConfig+0x130>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d017      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2d      	ldr	r2, [pc, #180]	; (8006be0 <TIM_Base_SetConfig+0x134>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2c      	ldr	r2, [pc, #176]	; (8006be4 <TIM_Base_SetConfig+0x138>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2b      	ldr	r2, [pc, #172]	; (8006be8 <TIM_Base_SetConfig+0x13c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <TIM_Base_SetConfig+0x140>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <TIM_Base_SetConfig+0x144>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0xaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <TIM_Base_SetConfig+0x148>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a10      	ldr	r2, [pc, #64]	; (8006bd0 <TIM_Base_SetConfig+0x124>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00f      	beq.n	8006bb4 <TIM_Base_SetConfig+0x108>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <TIM_Base_SetConfig+0x134>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_Base_SetConfig+0x108>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <TIM_Base_SetConfig+0x138>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_Base_SetConfig+0x108>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0x13c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0x108>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0f      	ldr	r2, [pc, #60]	; (8006bec <TIM_Base_SetConfig+0x140>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d103      	bne.n	8006bbc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	615a      	str	r2, [r3, #20]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	4000e000 	.word	0x4000e000
 8006bf4:	4000e400 	.word	0x4000e400

08006bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f023 0201 	bic.w	r2, r3, #1
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 030a 	bic.w	r3, r3, #10
 8006c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f023 0210 	bic.w	r2, r3, #16
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	031b      	lsls	r3, r3, #12
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <TIM_ITRx_SetConfig+0x38>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f043 0307 	orr.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	609a      	str	r2, [r3, #8]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	ffcfff8f 	.word	0xffcfff8f

08006cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	021a      	lsls	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e077      	b.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a35      	ldr	r2, [pc, #212]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a34      	ldr	r2, [pc, #208]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d108      	bne.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a25      	ldr	r2, [pc, #148]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbe:	d027      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a22      	ldr	r2, [pc, #136]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a21      	ldr	r2, [pc, #132]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1f      	ldr	r2, [pc, #124]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1b      	ldr	r2, [pc, #108]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10c      	bne.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40001800 	.word	0x40001800
 8006e60:	40014000 	.word	0x40014000
 8006e64:	4000e000 	.word	0x4000e000
 8006e68:	4000e400 	.word	0x4000e400

08006e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	f107 001c 	add.w	r0, r7, #28
 8006eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d120      	bne.n	8006f02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	; (8006f7c <USB_CoreInit+0xd4>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fc04 	bl	8008704 <USB_CoreReset>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	e01a      	b.n	8006f38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fbf8 	bl	8008704 <USB_CoreReset>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
 8006f2a:	e005      	b.n	8006f38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d116      	bne.n	8006f6c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <USB_CoreInit+0xd8>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f043 0206 	orr.w	r2, r3, #6
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f043 0220 	orr.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f78:	b004      	add	sp, #16
 8006f7a:	4770      	bx	lr
 8006f7c:	ffbdffbf 	.word	0xffbdffbf
 8006f80:	03ee0000 	.word	0x03ee0000

08006f84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d165      	bne.n	8007064 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a41      	ldr	r2, [pc, #260]	; (80070a0 <USB_SetTurnaroundTime+0x11c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d906      	bls.n	8006fae <USB_SetTurnaroundTime+0x2a>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	; (80070a4 <USB_SetTurnaroundTime+0x120>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d202      	bcs.n	8006fae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006fa8:	230f      	movs	r3, #15
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e062      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4a3c      	ldr	r2, [pc, #240]	; (80070a4 <USB_SetTurnaroundTime+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d306      	bcc.n	8006fc4 <USB_SetTurnaroundTime+0x40>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a3b      	ldr	r2, [pc, #236]	; (80070a8 <USB_SetTurnaroundTime+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d202      	bcs.n	8006fc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006fbe:	230e      	movs	r3, #14
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e057      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <USB_SetTurnaroundTime+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d306      	bcc.n	8006fda <USB_SetTurnaroundTime+0x56>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a37      	ldr	r2, [pc, #220]	; (80070ac <USB_SetTurnaroundTime+0x128>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d202      	bcs.n	8006fda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fd4:	230d      	movs	r3, #13
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e04c      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a33      	ldr	r2, [pc, #204]	; (80070ac <USB_SetTurnaroundTime+0x128>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d306      	bcc.n	8006ff0 <USB_SetTurnaroundTime+0x6c>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a32      	ldr	r2, [pc, #200]	; (80070b0 <USB_SetTurnaroundTime+0x12c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d802      	bhi.n	8006ff0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fea:	230c      	movs	r3, #12
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e041      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <USB_SetTurnaroundTime+0x12c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d906      	bls.n	8007006 <USB_SetTurnaroundTime+0x82>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <USB_SetTurnaroundTime+0x130>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d802      	bhi.n	8007006 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007000:	230b      	movs	r3, #11
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e036      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <USB_SetTurnaroundTime+0x130>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d906      	bls.n	800701c <USB_SetTurnaroundTime+0x98>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a29      	ldr	r2, [pc, #164]	; (80070b8 <USB_SetTurnaroundTime+0x134>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d802      	bhi.n	800701c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007016:	230a      	movs	r3, #10
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	e02b      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4a26      	ldr	r2, [pc, #152]	; (80070b8 <USB_SetTurnaroundTime+0x134>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d906      	bls.n	8007032 <USB_SetTurnaroundTime+0xae>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4a25      	ldr	r2, [pc, #148]	; (80070bc <USB_SetTurnaroundTime+0x138>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d202      	bcs.n	8007032 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800702c:	2309      	movs	r3, #9
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e020      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4a21      	ldr	r2, [pc, #132]	; (80070bc <USB_SetTurnaroundTime+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d306      	bcc.n	8007048 <USB_SetTurnaroundTime+0xc4>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a20      	ldr	r2, [pc, #128]	; (80070c0 <USB_SetTurnaroundTime+0x13c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d802      	bhi.n	8007048 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007042:	2308      	movs	r3, #8
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	e015      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <USB_SetTurnaroundTime+0x13c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d906      	bls.n	800705e <USB_SetTurnaroundTime+0xda>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <USB_SetTurnaroundTime+0x140>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d202      	bcs.n	800705e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007058:	2307      	movs	r3, #7
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e00a      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800705e:	2306      	movs	r3, #6
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e007      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800706a:	2309      	movs	r3, #9
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e001      	b.n	8007074 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007070:	2309      	movs	r3, #9
 8007072:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	029b      	lsls	r3, r3, #10
 8007088:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	00d8acbf 	.word	0x00d8acbf
 80070a4:	00e4e1c0 	.word	0x00e4e1c0
 80070a8:	00f42400 	.word	0x00f42400
 80070ac:	01067380 	.word	0x01067380
 80070b0:	011a499f 	.word	0x011a499f
 80070b4:	01312cff 	.word	0x01312cff
 80070b8:	014ca43f 	.word	0x014ca43f
 80070bc:	016e3600 	.word	0x016e3600
 80070c0:	01a6ab1f 	.word	0x01a6ab1f
 80070c4:	01e84800 	.word	0x01e84800

080070c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f043 0201 	orr.w	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d115      	bne.n	800715a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800713a:	2001      	movs	r0, #1
 800713c:	f7fa fff0 	bl	8002120 <HAL_Delay>
      ms++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fa4b 	bl	80085e2 <USB_GetMode>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d01e      	beq.n	8007190 <USB_SetCurrentMode+0x84>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b31      	cmp	r3, #49	; 0x31
 8007156:	d9f0      	bls.n	800713a <USB_SetCurrentMode+0x2e>
 8007158:	e01a      	b.n	8007190 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d115      	bne.n	800718c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800716c:	2001      	movs	r0, #1
 800716e:	f7fa ffd7 	bl	8002120 <HAL_Delay>
      ms++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fa32 	bl	80085e2 <USB_GetMode>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <USB_SetCurrentMode+0x84>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b31      	cmp	r3, #49	; 0x31
 8007188:	d9f0      	bls.n	800716c <USB_SetCurrentMode+0x60>
 800718a:	e001      	b.n	8007190 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e005      	b.n	800719c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b32      	cmp	r3, #50	; 0x32
 8007194:	d101      	bne.n	800719a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071a4:	b084      	sub	sp, #16
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e009      	b.n	80071d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3340      	adds	r3, #64	; 0x40
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3301      	adds	r3, #1
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2b0e      	cmp	r3, #14
 80071dc:	d9f2      	bls.n	80071c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11c      	bne.n	800721e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071f2:	f043 0302 	orr.w	r3, r3, #2
 80071f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e005      	b.n	800722a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007230:	461a      	mov	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	4619      	mov	r1, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	461a      	mov	r2, r3
 8007246:	680b      	ldr	r3, [r1, #0]
 8007248:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10c      	bne.n	800726a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007256:	2100      	movs	r1, #0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f965 	bl	8007528 <USB_SetDevSpeed>
 800725e:	e008      	b.n	8007272 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f960 	bl	8007528 <USB_SetDevSpeed>
 8007268:	e003      	b.n	8007272 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800726a:	2103      	movs	r1, #3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f95b 	bl	8007528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007272:	2110      	movs	r1, #16
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f8f3 	bl	8007460 <USB_FlushTxFifo>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f91f 	bl	80074c8 <USB_FlushRxFifo>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	461a      	mov	r2, r3
 800729c:	2300      	movs	r3, #0
 800729e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	461a      	mov	r2, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	461a      	mov	r2, r3
 80072b4:	2300      	movs	r3, #0
 80072b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	e043      	b.n	8007346 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d4:	d118      	bne.n	8007308 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	461a      	mov	r2, r3
 80072ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	e013      	b.n	800731a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	461a      	mov	r2, r3
 8007300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e008      	b.n	800731a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	2300      	movs	r3, #0
 800732a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	461a      	mov	r2, r3
 800733a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800733e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3301      	adds	r3, #1
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3b7      	bcc.n	80072be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e043      	b.n	80073dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800736a:	d118      	bne.n	800739e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e013      	b.n	80073b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e008      	b.n	80073b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ce:	461a      	mov	r2, r3
 80073d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d3b7      	bcc.n	8007354 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f043 0210 	orr.w	r2, r3, #16
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <USB_DevInit+0x2b4>)
 800741e:	4313      	orrs	r3, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f043 0208 	orr.w	r2, r3, #8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d105      	bne.n	8007448 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <USB_DevInit+0x2b8>)
 8007442:	4313      	orrs	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007454:	b004      	add	sp, #16
 8007456:	4770      	bx	lr
 8007458:	803c3800 	.word	0x803c3800
 800745c:	40000004 	.word	0x40000004

08007460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a13      	ldr	r2, [pc, #76]	; (80074c4 <USB_FlushTxFifo+0x64>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e01b      	b.n	80074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	daf2      	bge.n	800746e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	019b      	lsls	r3, r3, #6
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <USB_FlushTxFifo+0x64>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d901      	bls.n	80074aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e006      	b.n	80074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d0f0      	beq.n	8007498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	00030d40 	.word	0x00030d40

080074c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <USB_FlushRxFifo+0x5c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e018      	b.n	8007518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	daf2      	bge.n	80074d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2210      	movs	r2, #16
 80074f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a08      	ldr	r2, [pc, #32]	; (8007524 <USB_FlushRxFifo+0x5c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e006      	b.n	8007518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b10      	cmp	r3, #16
 8007514:	d0f0      	beq.n	80074f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	00030d40 	.word	0x00030d40

08007528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4313      	orrs	r3, r2
 800754a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b087      	sub	sp, #28
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0306 	and.w	r3, r3, #6
 8007572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]
 800757e:	e00a      	b.n	8007596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d002      	beq.n	800758c <USB_GetDevSpeed+0x32>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b06      	cmp	r3, #6
 800758a:	d102      	bne.n	8007592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800758c:	2302      	movs	r3, #2
 800758e:	75fb      	strb	r3, [r7, #23]
 8007590:	e001      	b.n	8007596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007592:	230f      	movs	r3, #15
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d139      	bne.n	8007634 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	69da      	ldr	r2, [r3, #28]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	2101      	movs	r1, #1
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075de:	4313      	orrs	r3, r2
 80075e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d153      	bne.n	80076a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	059b      	lsls	r3, r3, #22
 800761a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800761c:	431a      	orrs	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	0159      	lsls	r1, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	440b      	add	r3, r1
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	4619      	mov	r1, r3
 800762c:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <USB_ActivateEndpoint+0x10c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	600b      	str	r3, [r1, #0]
 8007632:	e035      	b.n	80076a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	2101      	movs	r1, #1
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007652:	4313      	orrs	r3, r2
 8007654:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d119      	bne.n	80076a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007688:	430b      	orrs	r3, r1
 800768a:	431a      	orrs	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	0159      	lsls	r1, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	440b      	add	r3, r1
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	4619      	mov	r1, r3
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <USB_ActivateEndpoint+0x10c>)
 800769c:	4313      	orrs	r3, r2
 800769e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	10008000 	.word	0x10008000

080076b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d161      	bne.n	8007794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e6:	d11f      	bne.n	8007728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	43db      	mvns	r3, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007748:	4013      	ands	r3, r2
 800774a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	0159      	lsls	r1, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	440b      	add	r3, r1
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	4619      	mov	r1, r3
 800778c:	4b35      	ldr	r3, [pc, #212]	; (8007864 <USB_DeactivateEndpoint+0x1b0>)
 800778e:	4013      	ands	r3, r2
 8007790:	600b      	str	r3, [r1, #0]
 8007792:	e060      	b.n	8007856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077aa:	d11f      	bne.n	80077ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	0151      	lsls	r1, r2, #5
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	440a      	add	r2, r1
 80077c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	43db      	mvns	r3, r3
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4013      	ands	r3, r2
 800780e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	43db      	mvns	r3, r3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007830:	4013      	ands	r3, r2
 8007832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	0159      	lsls	r1, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	440b      	add	r3, r1
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	4619      	mov	r1, r3
 8007850:	4b05      	ldr	r3, [pc, #20]	; (8007868 <USB_DeactivateEndpoint+0x1b4>)
 8007852:	4013      	ands	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	ec337800 	.word	0xec337800
 8007868:	eff37800 	.word	0xeff37800

0800786c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	f040 8163 	bne.w	8007b54 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d132      	bne.n	80078fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	0159      	lsls	r1, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	440b      	add	r3, r1
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	4619      	mov	r1, r3
 80078b2:	4ba5      	ldr	r3, [pc, #660]	; (8007b48 <USB_EPStartXfer+0x2dc>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	0159      	lsls	r1, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	440b      	add	r3, r1
 80078ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f2:	4619      	mov	r1, r3
 80078f4:	4b95      	ldr	r3, [pc, #596]	; (8007b4c <USB_EPStartXfer+0x2e0>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	610b      	str	r3, [r1, #16]
 80078fa:	e074      	b.n	80079e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	0159      	lsls	r1, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	440b      	add	r3, r1
 8007912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007916:	4619      	mov	r1, r3
 8007918:	4b8c      	ldr	r3, [pc, #560]	; (8007b4c <USB_EPStartXfer+0x2e0>)
 800791a:	4013      	ands	r3, r2
 800791c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	0159      	lsls	r1, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	440b      	add	r3, r1
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	4619      	mov	r1, r3
 800793a:	4b83      	ldr	r3, [pc, #524]	; (8007b48 <USB_EPStartXfer+0x2dc>)
 800793c:	4013      	ands	r3, r2
 800793e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6999      	ldr	r1, [r3, #24]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	440b      	add	r3, r1
 8007958:	1e59      	subs	r1, r3, #1
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007962:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007964:	4b7a      	ldr	r3, [pc, #488]	; (8007b50 <USB_EPStartXfer+0x2e4>)
 8007966:	400b      	ands	r3, r1
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	0148      	lsls	r0, r1, #5
 800796c:	69f9      	ldr	r1, [r7, #28]
 800796e:	4401      	add	r1, r0
 8007970:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007974:	4313      	orrs	r3, r2
 8007976:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	0148      	lsls	r0, r1, #5
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	4401      	add	r1, r0
 8007996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800799a:	4313      	orrs	r3, r2
 800799c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d11f      	bne.n	80079e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d14b      	bne.n	8007a84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	791b      	ldrb	r3, [r3, #4]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d128      	bne.n	8007a62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d110      	bne.n	8007a42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	e00f      	b.n	8007a62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e137      	b.n	8007cf4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007aa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d015      	beq.n	8007ad8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 811f 	beq.w	8007cf4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ad6:	e10d      	b.n	8007cf4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d110      	bne.n	8007b0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e00f      	b.n	8007b2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6919      	ldr	r1, [r3, #16]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	b298      	uxth	r0, r3
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 faea 	bl	8008118 <USB_WritePacket>
 8007b44:	e0d6      	b.n	8007cf4 <USB_EPStartXfer+0x488>
 8007b46:	bf00      	nop
 8007b48:	e007ffff 	.word	0xe007ffff
 8007b4c:	fff80000 	.word	0xfff80000
 8007b50:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	0159      	lsls	r1, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	440b      	add	r3, r1
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4b63      	ldr	r3, [pc, #396]	; (8007d00 <USB_EPStartXfer+0x494>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	0159      	lsls	r1, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	440b      	add	r3, r1
 8007b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b90:	4619      	mov	r1, r3
 8007b92:	4b5c      	ldr	r3, [pc, #368]	; (8007d04 <USB_EPStartXfer+0x498>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d123      	bne.n	8007be8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb6:	69b9      	ldr	r1, [r7, #24]
 8007bb8:	0148      	lsls	r0, r1, #5
 8007bba:	69f9      	ldr	r1, [r7, #28]
 8007bbc:	4401      	add	r1, r0
 8007bbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be4:	6113      	str	r3, [r2, #16]
 8007be6:	e037      	b.n	8007c58 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	1e5a      	subs	r2, r3, #1
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	8afa      	ldrh	r2, [r7, #22]
 8007c04:	fb03 f202 	mul.w	r2, r3, r2
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	8afb      	ldrh	r3, [r7, #22]
 8007c1c:	04d9      	lsls	r1, r3, #19
 8007c1e:	4b3a      	ldr	r3, [pc, #232]	; (8007d08 <USB_EPStartXfer+0x49c>)
 8007c20:	400b      	ands	r3, r1
 8007c22:	69b9      	ldr	r1, [r7, #24]
 8007c24:	0148      	lsls	r0, r1, #5
 8007c26:	69f9      	ldr	r1, [r7, #28]
 8007c28:	4401      	add	r1, r0
 8007c2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	0148      	lsls	r0, r1, #5
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	4401      	add	r1, r0
 8007c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c54:	4313      	orrs	r3, r2
 8007c56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d10d      	bne.n	8007c7a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6919      	ldr	r1, [r3, #16]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	460a      	mov	r2, r1
 8007c78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d128      	bne.n	8007cd4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d110      	bne.n	8007cb4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e00f      	b.n	8007cd4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	fff80000 	.word	0xfff80000
 8007d04:	e007ffff 	.word	0xe007ffff
 8007d08:	1ff80000 	.word	0x1ff80000

08007d0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	f040 80ce 	bne.w	8007eca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d132      	bne.n	8007d9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	0159      	lsls	r1, r3, #5
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	440b      	add	r3, r1
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	4619      	mov	r1, r3
 8007d52:	4b9a      	ldr	r3, [pc, #616]	; (8007fbc <USB_EP0StartXfer+0x2b0>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	0159      	lsls	r1, r3, #5
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	440b      	add	r3, r1
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d92:	4619      	mov	r1, r3
 8007d94:	4b8a      	ldr	r3, [pc, #552]	; (8007fc0 <USB_EP0StartXfer+0x2b4>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	610b      	str	r3, [r1, #16]
 8007d9a:	e04e      	b.n	8007e3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	0159      	lsls	r1, r3, #5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	440b      	add	r3, r1
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	4619      	mov	r1, r3
 8007db8:	4b81      	ldr	r3, [pc, #516]	; (8007fc0 <USB_EP0StartXfer+0x2b4>)
 8007dba:	4013      	ands	r3, r2
 8007dbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	0159      	lsls	r1, r3, #5
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	440b      	add	r3, r1
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4b78      	ldr	r3, [pc, #480]	; (8007fbc <USB_EP0StartXfer+0x2b0>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2a:	6939      	ldr	r1, [r7, #16]
 8007e2c:	0148      	lsls	r0, r1, #5
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	4401      	add	r1, r0
 8007e32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e36:	4313      	orrs	r3, r2
 8007e38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d11e      	bne.n	8007e7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d009      	beq.n	8007e5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	461a      	mov	r2, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	e097      	b.n	8007fae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8083 	beq.w	8007fae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	2101      	movs	r1, #1
 8007eba:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	634b      	str	r3, [r1, #52]	; 0x34
 8007ec8:	e071      	b.n	8007fae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	0159      	lsls	r1, r3, #5
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	440b      	add	r3, r1
 8007ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4b36      	ldr	r3, [pc, #216]	; (8007fc0 <USB_EP0StartXfer+0x2b4>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	0159      	lsls	r1, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	4619      	mov	r1, r3
 8007f08:	4b2c      	ldr	r3, [pc, #176]	; (8007fbc <USB_EP0StartXfer+0x2b0>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5c:	6939      	ldr	r1, [r7, #16]
 8007f5e:	0148      	lsls	r0, r1, #5
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	4401      	add	r1, r0
 8007f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10d      	bne.n	8007f8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6919      	ldr	r1, [r3, #16]
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	e007ffff 	.word	0xe007ffff
 8007fc0:	fff80000 	.word	0xfff80000

08007fc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d14a      	bne.n	8008078 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ffa:	f040 8086 	bne.w	800810a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008020:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	7812      	ldrb	r2, [r2, #0]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008052:	4293      	cmp	r3, r2
 8008054:	d902      	bls.n	800805c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
          break;
 800805a:	e056      	b.n	800810a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008074:	d0e7      	beq.n	8008046 <USB_EPStopXfer+0x82>
 8008076:	e048      	b.n	800810a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008090:	d13b      	bne.n	800810a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	7812      	ldrb	r2, [r2, #0]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	7812      	ldrb	r2, [r2, #0]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d902      	bls.n	80080f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]
          break;
 80080ee:	e00c      	b.n	800810a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008108:	d0e7      	beq.n	80080da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
}
 800810c:	4618      	mov	r0, r3
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008118:	b480      	push	{r7}
 800811a:	b089      	sub	sp, #36	; 0x24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4611      	mov	r1, r2
 8008124:	461a      	mov	r2, r3
 8008126:	460b      	mov	r3, r1
 8008128:	71fb      	strb	r3, [r7, #7]
 800812a:	4613      	mov	r3, r2
 800812c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d123      	bne.n	8008186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800813e:	88bb      	ldrh	r3, [r7, #4]
 8008140:	3303      	adds	r3, #3
 8008142:	089b      	lsrs	r3, r3, #2
 8008144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008146:	2300      	movs	r3, #0
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e018      	b.n	800817e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	031a      	lsls	r2, r3, #12
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008158:	461a      	mov	r2, r3
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	3301      	adds	r3, #1
 8008164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	3301      	adds	r3, #1
 800816a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	3301      	adds	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	3301      	adds	r3, #1
 8008176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	3301      	adds	r3, #1
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	429a      	cmp	r2, r3
 8008184:	d3e2      	bcc.n	800814c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3724      	adds	r7, #36	; 0x24
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008194:	b480      	push	{r7}
 8008196:	b08b      	sub	sp, #44	; 0x2c
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	089b      	lsrs	r3, r3, #2
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081ba:	2300      	movs	r3, #0
 80081bc:	623b      	str	r3, [r7, #32]
 80081be:	e014      	b.n	80081ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	3301      	adds	r3, #1
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	3301      	adds	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	3301      	adds	r3, #1
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	3301      	adds	r3, #1
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	3301      	adds	r3, #1
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d3e6      	bcc.n	80081c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081f2:	8bfb      	ldrh	r3, [r7, #30]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01e      	beq.n	8008236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008202:	461a      	mov	r2, r3
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	701a      	strb	r2, [r3, #0]
      i++;
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	3301      	adds	r3, #1
 8008222:	623b      	str	r3, [r7, #32]
      pDest++;
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	3301      	adds	r3, #1
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800822a:	8bfb      	ldrh	r3, [r7, #30]
 800822c:	3b01      	subs	r3, #1
 800822e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008230:	8bfb      	ldrh	r3, [r7, #30]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1ea      	bne.n	800820c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008238:	4618      	mov	r0, r3
 800823a:	372c      	adds	r7, #44	; 0x2c
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d12c      	bne.n	80082ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	db12      	blt.n	8008298 <USB_EPSetStall+0x54>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00f      	beq.n	8008298 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008296:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e02b      	b.n	8008312 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db12      	blt.n	80082f2 <USB_EPSetStall+0xae>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d128      	bne.n	800838e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800835a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	791b      	ldrb	r3, [r3, #4]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d003      	beq.n	800836c <USB_EPClearStall+0x4c>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	791b      	ldrb	r3, [r3, #4]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d138      	bne.n	80083de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	e027      	b.n	80083de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	791b      	ldrb	r3, [r3, #4]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d003      	beq.n	80083be <USB_EPClearStall+0x9e>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	791b      	ldrb	r3, [r3, #4]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d10f      	bne.n	80083de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800840e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008426:	4313      	orrs	r3, r2
 8008428:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008466:	f023 0302 	bic.w	r3, r3, #2
 800846a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084a8:	f043 0302 	orr.w	r3, r3, #2
 80084ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	4013      	ands	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	0c1b      	lsrs	r3, r3, #16
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	4013      	ands	r3, r2
 8008538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	b29b      	uxth	r3, r3
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4013      	ands	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008578:	68bb      	ldr	r3, [r7, #8]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	01db      	lsls	r3, r3, #7
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4013      	ands	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085d4:	68bb      	ldr	r3, [r7, #8]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f003 0301 	and.w	r3, r3, #1
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	4619      	mov	r1, r3
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <USB_ActivateSetup+0x44>)
 800861e:	4013      	ands	r3, r2
 8008620:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	fffff800 	.word	0xfffff800

08008648 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	460b      	mov	r3, r1
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	333c      	adds	r3, #60	; 0x3c
 800865e:	3304      	adds	r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4a26      	ldr	r2, [pc, #152]	; (8008700 <USB_EP0_OutStart+0xb8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d90a      	bls.n	8008682 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867c:	d101      	bne.n	8008682 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e037      	b.n	80086f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	461a      	mov	r2, r3
 800868a:	2300      	movs	r3, #0
 800868c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800869c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b0:	f043 0318 	orr.w	r3, r3, #24
 80086b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80086c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80086ca:	7afb      	ldrb	r3, [r7, #11]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10f      	bne.n	80086f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	4f54300a 	.word	0x4f54300a

08008704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <USB_CoreReset+0x64>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d901      	bls.n	8008722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e01b      	b.n	800875a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	daf2      	bge.n	8008710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4a09      	ldr	r2, [pc, #36]	; (8008768 <USB_CoreReset+0x64>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d901      	bls.n	800874c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e006      	b.n	800875a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b01      	cmp	r3, #1
 8008756:	d0f0      	beq.n	800873a <USB_CoreReset+0x36>

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	00030d40 	.word	0x00030d40

0800876c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008778:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800877c:	f002 fcd0 	bl	800b120 <USBD_static_malloc>
 8008780:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	2100      	movs	r1, #0
 8008794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008798:	2302      	movs	r3, #2
 800879a:	e0d4      	b.n	8008946 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800879c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f002 fd3c 	bl	800b220 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	32b0      	adds	r2, #176	; 0xb0
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	; 0xb0
 80087c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7c1b      	ldrb	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d138      	bne.n	8008846 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087d4:	4b5e      	ldr	r3, [pc, #376]	; (8008950 <USBD_CDC_Init+0x1e4>)
 80087d6:	7819      	ldrb	r1, [r3, #0]
 80087d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087dc:	2202      	movs	r2, #2
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f002 fb7b 	bl	800aeda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087e4:	4b5a      	ldr	r3, [pc, #360]	; (8008950 <USBD_CDC_Init+0x1e4>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	2201      	movs	r2, #1
 80087fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087fe:	4b55      	ldr	r3, [pc, #340]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008800:	7819      	ldrb	r1, [r3, #0]
 8008802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008806:	2202      	movs	r2, #2
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f002 fb66 	bl	800aeda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800880e:	4b51      	ldr	r3, [pc, #324]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008826:	2201      	movs	r2, #1
 8008828:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800882a:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <USBD_CDC_Init+0x1ec>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 020f 	and.w	r2, r3, #15
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	3326      	adds	r3, #38	; 0x26
 8008840:	2210      	movs	r2, #16
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e035      	b.n	80088b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008846:	4b42      	ldr	r3, [pc, #264]	; (8008950 <USBD_CDC_Init+0x1e4>)
 8008848:	7819      	ldrb	r1, [r3, #0]
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	2202      	movs	r2, #2
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 fb43 	bl	800aeda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008854:	4b3e      	ldr	r3, [pc, #248]	; (8008950 <USBD_CDC_Init+0x1e4>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	2201      	movs	r2, #1
 800886c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800886e:	4b39      	ldr	r3, [pc, #228]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008870:	7819      	ldrb	r1, [r3, #0]
 8008872:	2340      	movs	r3, #64	; 0x40
 8008874:	2202      	movs	r2, #2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f002 fb2f 	bl	800aeda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800887c:	4b35      	ldr	r3, [pc, #212]	; (8008954 <USBD_CDC_Init+0x1e8>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008894:	2201      	movs	r2, #1
 8008896:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008898:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <USBD_CDC_Init+0x1ec>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 020f 	and.w	r2, r3, #15
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	3326      	adds	r3, #38	; 0x26
 80088ae:	2210      	movs	r2, #16
 80088b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088b2:	4b29      	ldr	r3, [pc, #164]	; (8008958 <USBD_CDC_Init+0x1ec>)
 80088b4:	7819      	ldrb	r1, [r3, #0]
 80088b6:	2308      	movs	r3, #8
 80088b8:	2203      	movs	r2, #3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f002 fb0d 	bl	800aeda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <USBD_CDC_Init+0x1ec>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	2201      	movs	r2, #1
 80088d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	33b0      	adds	r3, #176	; 0xb0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008910:	2302      	movs	r3, #2
 8008912:	e018      	b.n	8008946 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <USBD_CDC_Init+0x1e8>)
 800891e:	7819      	ldrb	r1, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f002 fbc4 	bl	800b0b8 <USBD_LL_PrepareReceive>
 8008930:	e008      	b.n	8008944 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <USBD_CDC_Init+0x1e8>)
 8008934:	7819      	ldrb	r1, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 fbba 	bl	800b0b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	24000137 	.word	0x24000137
 8008954:	24000138 	.word	0x24000138
 8008958:	24000139 	.word	0x24000139

0800895c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008968:	4b3a      	ldr	r3, [pc, #232]	; (8008a54 <USBD_CDC_DeInit+0xf8>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f002 fad9 	bl	800af26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008974:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <USBD_CDC_DeInit+0xf8>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	2200      	movs	r2, #0
 800898c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <USBD_CDC_DeInit+0xfc>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f002 fac6 	bl	800af26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <USBD_CDC_DeInit+0xfc>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089b2:	2200      	movs	r2, #0
 80089b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80089b6:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fab2 	bl	800af26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80089c2:	4b26      	ldr	r3, [pc, #152]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f003 020f 	and.w	r2, r3, #15
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	2200      	movs	r2, #0
 80089da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80089dc:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <USBD_CDC_DeInit+0x100>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	3326      	adds	r3, #38	; 0x26
 80089f2:	2200      	movs	r2, #0
 80089f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	32b0      	adds	r2, #176	; 0xb0
 8008a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01f      	beq.n	8008a48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	33b0      	adds	r3, #176	; 0xb0
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	32b0      	adds	r2, #176	; 0xb0
 8008a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f002 fb86 	bl	800b13c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32b0      	adds	r2, #176	; 0xb0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	24000137 	.word	0x24000137
 8008a58:	24000138 	.word	0x24000138
 8008a5c:	24000139 	.word	0x24000139

08008a60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32b0      	adds	r2, #176	; 0xb0
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e0bf      	b.n	8008c10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d050      	beq.n	8008b3e <USBD_CDC_Setup+0xde>
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	f040 80af 	bne.w	8008c00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d03a      	beq.n	8008b20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	da1b      	bge.n	8008aec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	33b0      	adds	r3, #176	; 0xb0
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008aca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	88d2      	ldrh	r2, [r2, #6]
 8008ad0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	bf28      	it	cs
 8008ada:	2307      	movcs	r3, #7
 8008adc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	89fa      	ldrh	r2, [r7, #14]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fd89 	bl	800a5fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008aea:	e090      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785a      	ldrb	r2, [r3, #1]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	88db      	ldrh	r3, [r3, #6]
 8008afa:	2b3f      	cmp	r3, #63	; 0x3f
 8008afc:	d803      	bhi.n	8008b06 <USBD_CDC_Setup+0xa6>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	e000      	b.n	8008b08 <USBD_CDC_Setup+0xa8>
 8008b06:	2240      	movs	r2, #64	; 0x40
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b0e:	6939      	ldr	r1, [r7, #16]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b16:	461a      	mov	r2, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fd9b 	bl	800a654 <USBD_CtlPrepareRx>
      break;
 8008b1e:	e076      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	33b0      	adds	r3, #176	; 0xb0
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	7850      	ldrb	r0, [r2, #1]
 8008b36:	2200      	movs	r2, #0
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	4798      	blx	r3
      break;
 8008b3c:	e067      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b0b      	cmp	r3, #11
 8008b44:	d851      	bhi.n	8008bea <USBD_CDC_Setup+0x18a>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_CDC_Setup+0xec>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b7d 	.word	0x08008b7d
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008beb 	.word	0x08008beb
 8008b58:	08008beb 	.word	0x08008beb
 8008b5c:	08008beb 	.word	0x08008beb
 8008b60:	08008beb 	.word	0x08008beb
 8008b64:	08008beb 	.word	0x08008beb
 8008b68:	08008beb 	.word	0x08008beb
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008beb 	.word	0x08008beb
 8008b74:	08008ba7 	.word	0x08008ba7
 8008b78:	08008bd1 	.word	0x08008bd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d107      	bne.n	8008b98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b88:	f107 030a 	add.w	r3, r7, #10
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fd33 	bl	800a5fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b96:	e032      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fcbd 	bl	800a51a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ba4:	e02b      	b.n	8008bfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d107      	bne.n	8008bc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bb2:	f107 030d 	add.w	r3, r7, #13
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fd1e 	bl	800a5fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bc0:	e01d      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fca8 	bl	800a51a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bce:	e016      	b.n	8008bfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d00f      	beq.n	8008bfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fc9b 	bl	800a51a <USBD_CtlError>
            ret = USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008be8:	e008      	b.n	8008bfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fc94 	bl	800a51a <USBD_CtlError>
          ret = USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf6:	e002      	b.n	8008bfe <USBD_CDC_Setup+0x19e>
          break;
 8008bf8:	bf00      	nop
 8008bfa:	e008      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>
          break;
 8008bfc:	bf00      	nop
      }
      break;
 8008bfe:	e006      	b.n	8008c0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc89 	bl	800a51a <USBD_CtlError>
      ret = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32b0      	adds	r2, #176	; 0xb0
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e065      	b.n	8008d0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	32b0      	adds	r2, #176	; 0xb0
 8008c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3318      	adds	r3, #24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02f      	beq.n	8008ccc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 020f 	and.w	r2, r3, #15
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3318      	adds	r3, #24
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 010f 	and.w	r1, r3, #15
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	440b      	add	r3, r1
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4403      	add	r3, r0
 8008c94:	3348      	adds	r3, #72	; 0x48
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d112      	bne.n	8008ccc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 020f 	and.w	r2, r3, #15
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3318      	adds	r3, #24
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008cbe:	78f9      	ldrb	r1, [r7, #3]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f002 f9d6 	bl	800b076 <USBD_LL_Transmit>
 8008cca:	e01f      	b.n	8008d0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	33b0      	adds	r3, #176	; 0xb0
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	33b0      	adds	r3, #176	; 0xb0
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32b0      	adds	r2, #176	; 0xb0
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32b0      	adds	r2, #176	; 0xb0
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e01a      	b.n	8008d7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f002 f9d4 	bl	800b0fa <USBD_LL_GetRxDataSize>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	33b0      	adds	r3, #176	; 0xb0
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32b0      	adds	r2, #176	; 0xb0
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e025      	b.n	8008df4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	33b0      	adds	r3, #176	; 0xb0
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01a      	beq.n	8008df2 <USBD_CDC_EP0_RxReady+0x6c>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008dc2:	2bff      	cmp	r3, #255	; 0xff
 8008dc4:	d015      	beq.n	8008df2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	33b0      	adds	r3, #176	; 0xb0
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008dde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008de6:	b292      	uxth	r2, r2
 8008de8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	22ff      	movs	r2, #255	; 0xff
 8008dee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e04:	2182      	movs	r1, #130	; 0x82
 8008e06:	4818      	ldr	r0, [pc, #96]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e08:	f000 fd4f 	bl	80098aa <USBD_GetEpDesc>
 8008e0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4815      	ldr	r0, [pc, #84]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e12:	f000 fd4a 	bl	80098aa <USBD_GetEpDesc>
 8008e16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e18:	2181      	movs	r1, #129	; 0x81
 8008e1a:	4813      	ldr	r0, [pc, #76]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e1c:	f000 fd45 	bl	80098aa <USBD_GetEpDesc>
 8008e20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3c:	711a      	strb	r2, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e50:	711a      	strb	r2, [r3, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2243      	movs	r2, #67	; 0x43
 8008e5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	240000f4 	.word	0x240000f4

08008e6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e74:	2182      	movs	r1, #130	; 0x82
 8008e76:	4818      	ldr	r0, [pc, #96]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e78:	f000 fd17 	bl	80098aa <USBD_GetEpDesc>
 8008e7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4815      	ldr	r0, [pc, #84]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e82:	f000 fd12 	bl	80098aa <USBD_GetEpDesc>
 8008e86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e88:	2181      	movs	r1, #129	; 0x81
 8008e8a:	4813      	ldr	r0, [pc, #76]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e8c:	f000 fd0d 	bl	80098aa <USBD_GetEpDesc>
 8008e90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2210      	movs	r2, #16
 8008e9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	711a      	strb	r2, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f042 0202 	orr.w	r2, r2, #2
 8008eb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	711a      	strb	r2, [r3, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f042 0202 	orr.w	r2, r2, #2
 8008ec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2243      	movs	r2, #67	; 0x43
 8008eca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	240000f4 	.word	0x240000f4

08008edc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ee4:	2182      	movs	r1, #130	; 0x82
 8008ee6:	4818      	ldr	r0, [pc, #96]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ee8:	f000 fcdf 	bl	80098aa <USBD_GetEpDesc>
 8008eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4815      	ldr	r0, [pc, #84]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ef2:	f000 fcda 	bl	80098aa <USBD_GetEpDesc>
 8008ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ef8:	2181      	movs	r1, #129	; 0x81
 8008efa:	4813      	ldr	r0, [pc, #76]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008efc:	f000 fcd5 	bl	80098aa <USBD_GetEpDesc>
 8008f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1c:	711a      	strb	r2, [r3, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f30:	711a      	strb	r2, [r3, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2243      	movs	r2, #67	; 0x43
 8008f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	240000f4 	.word	0x240000f4

08008f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220a      	movs	r2, #10
 8008f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	240000b0 	.word	0x240000b0

08008f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e009      	b.n	8008f94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	33b0      	adds	r3, #176	; 0xb0
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	32b0      	adds	r2, #176	; 0xb0
 8008fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e008      	b.n	8008fd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	32b0      	adds	r2, #176	; 0xb0
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e004      	b.n	8009012 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32b0      	adds	r2, #176	; 0xb0
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32b0      	adds	r2, #176	; 0xb0
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	e025      	b.n	800909e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11f      	bne.n	800909c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2201      	movs	r2, #1
 8009060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009064:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <USBD_CDC_TransmitPacket+0x88>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 020f 	and.w	r2, r3, #15
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4403      	add	r3, r0
 800907e:	3318      	adds	r3, #24
 8009080:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <USBD_CDC_TransmitPacket+0x88>)
 8009084:	7819      	ldrb	r1, [r3, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 ffef 	bl	800b076 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	24000137 	.word	0x24000137

080090ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	32b0      	adds	r2, #176	; 0xb0
 80090be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	32b0      	adds	r2, #176	; 0xb0
 80090ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e018      	b.n	800910c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7c1b      	ldrb	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <USBD_CDC_ReceivePacket+0x68>)
 80090e4:	7819      	ldrb	r1, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 ffe1 	bl	800b0b8 <USBD_LL_PrepareReceive>
 80090f6:	e008      	b.n	800910a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <USBD_CDC_ReceivePacket+0x68>)
 80090fa:	7819      	ldrb	r1, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 ffd7 	bl	800b0b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	24000138 	.word	0x24000138

08009118 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e01f      	b.n	8009170 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	79fa      	ldrb	r2, [r7, #7]
 8009162:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f001 fe4b 	bl	800ae00 <USBD_LL_Init>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800916e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800918c:	2303      	movs	r3, #3
 800918e:	e025      	b.n	80091dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32ae      	adds	r2, #174	; 0xae
 80091a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00f      	beq.n	80091cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	; 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	f107 020e 	add.w	r2, r7, #14
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	4602      	mov	r2, r0
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fe59 	bl	800aea4 <USBD_LL_Start>
 80091f2:	4603      	mov	r3, r0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d009      	beq.n	8009240 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	4611      	mov	r1, r2
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f908 	bl	800a4a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d01a      	beq.n	80092f0 <USBD_LL_SetupStage+0x72>
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d822      	bhi.n	8009304 <USBD_LL_SetupStage+0x86>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <USBD_LL_SetupStage+0x4a>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d00a      	beq.n	80092dc <USBD_LL_SetupStage+0x5e>
 80092c6:	e01d      	b.n	8009304 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb5f 	bl	8009994 <USBD_StdDevReq>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
      break;
 80092da:	e020      	b.n	800931e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fbc7 	bl	8009a78 <USBD_StdItfReq>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]
      break;
 80092ee:	e016      	b.n	800931e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fc29 	bl	8009b50 <USBD_StdEPReq>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
      break;
 8009302:	e00c      	b.n	800931e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800930a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800930e:	b2db      	uxtb	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fe26 	bl	800af64 <USBD_LL_StallEP>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
      break;
 800931c:	bf00      	nop
  }

  return ret;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	460b      	mov	r3, r1
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d16e      	bne.n	800941e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009346:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800934e:	2b03      	cmp	r3, #3
 8009350:	f040 8098 	bne.w	8009484 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	429a      	cmp	r2, r3
 800935e:	d913      	bls.n	8009388 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	1ad2      	subs	r2, r2, r3
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4293      	cmp	r3, r2
 8009378:	bf28      	it	cs
 800937a:	4613      	movcs	r3, r2
 800937c:	461a      	mov	r2, r3
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f001 f984 	bl	800a68e <USBD_CtlContinueRx>
 8009386:	e07d      	b.n	8009484 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2b02      	cmp	r3, #2
 8009394:	d014      	beq.n	80093c0 <USBD_LL_DataOutStage+0x98>
 8009396:	2b02      	cmp	r3, #2
 8009398:	d81d      	bhi.n	80093d6 <USBD_LL_DataOutStage+0xae>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <USBD_LL_DataOutStage+0x7c>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d003      	beq.n	80093aa <USBD_LL_DataOutStage+0x82>
 80093a2:	e018      	b.n	80093d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	75bb      	strb	r3, [r7, #22]
            break;
 80093a8:	e018      	b.n	80093dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	4619      	mov	r1, r3
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fa5e 	bl	8009876 <USBD_CoreFindIF>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75bb      	strb	r3, [r7, #22]
            break;
 80093be:	e00d      	b.n	80093dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	4619      	mov	r1, r3
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 fa60 	bl	8009890 <USBD_CoreFindEP>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75bb      	strb	r3, [r7, #22]
            break;
 80093d4:	e002      	b.n	80093dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75bb      	strb	r3, [r7, #22]
            break;
 80093da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80093dc:	7dbb      	ldrb	r3, [r7, #22]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d119      	bne.n	8009416 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d113      	bne.n	8009416 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80093ee:	7dba      	ldrb	r2, [r7, #22]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	32ae      	adds	r2, #174	; 0xae
 80093f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009406:	7dba      	ldrb	r2, [r7, #22]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	32ae      	adds	r2, #174	; 0xae
 800940c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f001 f94a 	bl	800a6b0 <USBD_CtlSendStatus>
 800941c:	e032      	b.n	8009484 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009424:	b2db      	uxtb	r3, r3
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fa31 	bl	8009890 <USBD_CoreFindEP>
 800942e:	4603      	mov	r3, r0
 8009430:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009432:	7dbb      	ldrb	r3, [r7, #22]
 8009434:	2bff      	cmp	r3, #255	; 0xff
 8009436:	d025      	beq.n	8009484 <USBD_LL_DataOutStage+0x15c>
 8009438:	7dbb      	ldrb	r3, [r7, #22]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d122      	bne.n	8009484 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d117      	bne.n	800947a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800944a:	7dba      	ldrb	r2, [r7, #22]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	32ae      	adds	r2, #174	; 0xae
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00f      	beq.n	800947a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800945a:	7dba      	ldrb	r2, [r7, #22]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009462:	7dba      	ldrb	r2, [r7, #22]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	32ae      	adds	r2, #174	; 0xae
 8009468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	7afa      	ldrb	r2, [r7, #11]
 8009470:	4611      	mov	r1, r2
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	e000      	b.n	8009486 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b086      	sub	sp, #24
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	460b      	mov	r3, r1
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800949c:	7afb      	ldrb	r3, [r7, #11]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d16f      	bne.n	8009582 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3314      	adds	r3, #20
 80094a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d15a      	bne.n	8009568 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d914      	bls.n	80094e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	461a      	mov	r2, r3
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f001 f8ac 	bl	800a632 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fde9 	bl	800b0b8 <USBD_LL_PrepareReceive>
 80094e6:	e03f      	b.n	8009568 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d11c      	bne.n	800952e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d316      	bcc.n	800952e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800950a:	429a      	cmp	r2, r3
 800950c:	d20f      	bcs.n	800952e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800950e:	2200      	movs	r2, #0
 8009510:	2100      	movs	r1, #0
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f001 f88d 	bl	800a632 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009520:	2300      	movs	r3, #0
 8009522:	2200      	movs	r2, #0
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f001 fdc6 	bl	800b0b8 <USBD_LL_PrepareReceive>
 800952c:	e01c      	b.n	8009568 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d10f      	bne.n	800955a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800955a:	2180      	movs	r1, #128	; 0x80
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f001 fd01 	bl	800af64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f8b7 	bl	800a6d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d03a      	beq.n	80095e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fe42 	bl	80091fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009580:	e032      	b.n	80095e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009588:	b2db      	uxtb	r3, r3
 800958a:	4619      	mov	r1, r3
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f97f 	bl	8009890 <USBD_CoreFindEP>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d025      	beq.n	80095e8 <USBD_LL_DataInStage+0x15a>
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d122      	bne.n	80095e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d11c      	bne.n	80095e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095ae:	7dfa      	ldrb	r2, [r7, #23]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	32ae      	adds	r2, #174	; 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d014      	beq.n	80095e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80095be:	7dfa      	ldrb	r2, [r7, #23]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80095c6:	7dfa      	ldrb	r2, [r7, #23]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	32ae      	adds	r2, #174	; 0xae
 80095cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	7afa      	ldrb	r2, [r7, #11]
 80095d4:	4611      	mov	r1, r2
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	4798      	blx	r3
 80095da:	4603      	mov	r3, r0
 80095dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80095de:	7dbb      	ldrb	r3, [r7, #22]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80095e4:	7dbb      	ldrb	r3, [r7, #22]
 80095e6:	e000      	b.n	80095ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d014      	beq.n	8009658 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00e      	beq.n	8009658 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6852      	ldr	r2, [r2, #4]
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	4611      	mov	r1, r2
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009654:	2303      	movs	r3, #3
 8009656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	2200      	movs	r2, #0
 800965c:	2100      	movs	r1, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fc3b 	bl	800aeda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	2200      	movs	r2, #0
 8009678:	2180      	movs	r1, #128	; 0x80
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fc2d 	bl	800aeda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2240      	movs	r2, #64	; 0x40
 800968a:	621a      	str	r2, [r3, #32]

  return ret;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d106      	bne.n	8009704 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d110      	bne.n	8009748 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	32ae      	adds	r2, #174	; 0xae
 8009768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009770:	2303      	movs	r3, #3
 8009772:	e01c      	b.n	80097ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b03      	cmp	r3, #3
 800977e:	d115      	bne.n	80097ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	32ae      	adds	r2, #174	; 0xae
 800978a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00b      	beq.n	80097ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	32ae      	adds	r2, #174	; 0xae
 800979e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	4611      	mov	r1, r2
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	32ae      	adds	r2, #174	; 0xae
 80097cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e01c      	b.n	8009812 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d115      	bne.n	8009810 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	32ae      	adds	r2, #174	; 0xae
 8009802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00e      	beq.n	800986c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6852      	ldr	r2, [r2, #4]
 800985a:	b2d2      	uxtb	r2, r2
 800985c:	4611      	mov	r1, r2
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009868:	2303      	movs	r3, #3
 800986a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009882:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800989c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b086      	sub	sp, #24
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d920      	bls.n	8009914 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80098da:	e013      	b.n	8009904 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80098dc:	f107 030a 	add.w	r3, r7, #10
 80098e0:	4619      	mov	r1, r3
 80098e2:	6978      	ldr	r0, [r7, #20]
 80098e4:	f000 f81b 	bl	800991e <USBD_GetNextDesc>
 80098e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d108      	bne.n	8009904 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d008      	beq.n	8009912 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	885b      	ldrh	r3, [r3, #2]
 8009908:	b29a      	uxth	r2, r3
 800990a:	897b      	ldrh	r3, [r7, #10]
 800990c:	429a      	cmp	r2, r3
 800990e:	d8e5      	bhi.n	80098dc <USBD_GetEpDesc+0x32>
 8009910:	e000      	b.n	8009914 <USBD_GetEpDesc+0x6a>
          break;
 8009912:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009914:	693b      	ldr	r3, [r7, #16]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	881a      	ldrh	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	4413      	add	r3, r2
 8009938:	b29a      	uxth	r2, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4413      	add	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	3301      	adds	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009976:	8a3b      	ldrh	r3, [r7, #16]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	b21a      	sxth	r2, r3
 800997c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009980:	4313      	orrs	r3, r2
 8009982:	b21b      	sxth	r3, r3
 8009984:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009986:	89fb      	ldrh	r3, [r7, #14]
}
 8009988:	4618      	mov	r0, r3
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099aa:	2b40      	cmp	r3, #64	; 0x40
 80099ac:	d005      	beq.n	80099ba <USBD_StdDevReq+0x26>
 80099ae:	2b40      	cmp	r3, #64	; 0x40
 80099b0:	d857      	bhi.n	8009a62 <USBD_StdDevReq+0xce>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00f      	beq.n	80099d6 <USBD_StdDevReq+0x42>
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	d153      	bne.n	8009a62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	32ae      	adds	r2, #174	; 0xae
 80099c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	4798      	blx	r3
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
      break;
 80099d4:	e04a      	b.n	8009a6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d83b      	bhi.n	8009a56 <USBD_StdDevReq+0xc2>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBD_StdDevReq+0x50>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a39 	.word	0x08009a39
 80099e8:	08009a4d 	.word	0x08009a4d
 80099ec:	08009a57 	.word	0x08009a57
 80099f0:	08009a43 	.word	0x08009a43
 80099f4:	08009a57 	.word	0x08009a57
 80099f8:	08009a17 	.word	0x08009a17
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a57 	.word	0x08009a57
 8009a04:	08009a2f 	.word	0x08009a2f
 8009a08:	08009a21 	.word	0x08009a21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa3c 	bl	8009e8c <USBD_GetDescriptor>
          break;
 8009a14:	e024      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fba1 	bl	800a160 <USBD_SetAddress>
          break;
 8009a1e:	e01f      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fbe0 	bl	800a1e8 <USBD_SetConfig>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a2c:	e018      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc83 	bl	800a33c <USBD_GetConfig>
          break;
 8009a36:	e013      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fcb4 	bl	800a3a8 <USBD_GetStatus>
          break;
 8009a40:	e00e      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fce3 	bl	800a410 <USBD_SetFeature>
          break;
 8009a4a:	e009      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fd07 	bl	800a462 <USBD_ClrFeature>
          break;
 8009a54:	e004      	b.n	8009a60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fd5e 	bl	800a51a <USBD_CtlError>
          break;
 8009a5e:	bf00      	nop
      }
      break;
 8009a60:	e004      	b.n	8009a6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fd58 	bl	800a51a <USBD_CtlError>
      break;
 8009a6a:	bf00      	nop
  }

  return ret;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop

08009a78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d005      	beq.n	8009a9e <USBD_StdItfReq+0x26>
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	d852      	bhi.n	8009b3c <USBD_StdItfReq+0xc4>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <USBD_StdItfReq+0x26>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d14e      	bne.n	8009b3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d840      	bhi.n	8009b2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	889b      	ldrh	r3, [r3, #4]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d836      	bhi.n	8009b24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	889b      	ldrh	r3, [r3, #4]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fed9 	bl	8009876 <USBD_CoreFindIF>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2bff      	cmp	r3, #255	; 0xff
 8009acc:	d01d      	beq.n	8009b0a <USBD_StdItfReq+0x92>
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d11a      	bne.n	8009b0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ad4:	7bba      	ldrb	r2, [r7, #14]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32ae      	adds	r2, #174	; 0xae
 8009ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00f      	beq.n	8009b04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ae4:	7bba      	ldrb	r2, [r7, #14]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009aec:	7bba      	ldrb	r2, [r7, #14]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32ae      	adds	r2, #174	; 0xae
 8009af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b02:	e004      	b.n	8009b0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b08:	e001      	b.n	8009b0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	88db      	ldrh	r3, [r3, #6]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d110      	bne.n	8009b38 <USBD_StdItfReq+0xc0>
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10d      	bne.n	8009b38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fdc7 	bl	800a6b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b22:	e009      	b.n	8009b38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fcf7 	bl	800a51a <USBD_CtlError>
          break;
 8009b2c:	e004      	b.n	8009b38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fcf2 	bl	800a51a <USBD_CtlError>
          break;
 8009b36:	e000      	b.n	8009b3a <USBD_StdItfReq+0xc2>
          break;
 8009b38:	bf00      	nop
      }
      break;
 8009b3a:	e004      	b.n	8009b46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fceb 	bl	800a51a <USBD_CtlError>
      break;
 8009b44:	bf00      	nop
  }

  return ret;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	889b      	ldrh	r3, [r3, #4]
 8009b62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d007      	beq.n	8009b80 <USBD_StdEPReq+0x30>
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	f200 817f 	bhi.w	8009e74 <USBD_StdEPReq+0x324>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d02a      	beq.n	8009bd0 <USBD_StdEPReq+0x80>
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	f040 817a 	bne.w	8009e74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fe83 	bl	8009890 <USBD_CoreFindEP>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b8e:	7b7b      	ldrb	r3, [r7, #13]
 8009b90:	2bff      	cmp	r3, #255	; 0xff
 8009b92:	f000 8174 	beq.w	8009e7e <USBD_StdEPReq+0x32e>
 8009b96:	7b7b      	ldrb	r3, [r7, #13]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f040 8170 	bne.w	8009e7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b9e:	7b7a      	ldrb	r2, [r7, #13]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ba6:	7b7a      	ldrb	r2, [r7, #13]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	32ae      	adds	r2, #174	; 0xae
 8009bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 8163 	beq.w	8009e7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009bb8:	7b7a      	ldrb	r2, [r7, #13]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	; 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009bce:	e156      	b.n	8009e7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	785b      	ldrb	r3, [r3, #1]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d008      	beq.n	8009bea <USBD_StdEPReq+0x9a>
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	f300 8145 	bgt.w	8009e68 <USBD_StdEPReq+0x318>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 809b 	beq.w	8009d1a <USBD_StdEPReq+0x1ca>
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d03c      	beq.n	8009c62 <USBD_StdEPReq+0x112>
 8009be8:	e13e      	b.n	8009e68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d002      	beq.n	8009bfc <USBD_StdEPReq+0xac>
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d016      	beq.n	8009c28 <USBD_StdEPReq+0xd8>
 8009bfa:	e02c      	b.n	8009c56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00d      	beq.n	8009c1e <USBD_StdEPReq+0xce>
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b80      	cmp	r3, #128	; 0x80
 8009c06:	d00a      	beq.n	8009c1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f9a9 	bl	800af64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c12:	2180      	movs	r1, #128	; 0x80
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 f9a5 	bl	800af64 <USBD_LL_StallEP>
 8009c1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c1c:	e020      	b.n	8009c60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fc7a 	bl	800a51a <USBD_CtlError>
              break;
 8009c26:	e01b      	b.n	8009c60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	885b      	ldrh	r3, [r3, #2]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10e      	bne.n	8009c4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <USBD_StdEPReq+0xfe>
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b80      	cmp	r3, #128	; 0x80
 8009c3a:	d008      	beq.n	8009c4e <USBD_StdEPReq+0xfe>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	88db      	ldrh	r3, [r3, #6]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d104      	bne.n	8009c4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f98b 	bl	800af64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fd2e 	bl	800a6b0 <USBD_CtlSendStatus>

              break;
 8009c54:	e004      	b.n	8009c60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc5e 	bl	800a51a <USBD_CtlError>
              break;
 8009c5e:	bf00      	nop
          }
          break;
 8009c60:	e107      	b.n	8009e72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d002      	beq.n	8009c74 <USBD_StdEPReq+0x124>
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d016      	beq.n	8009ca0 <USBD_StdEPReq+0x150>
 8009c72:	e04b      	b.n	8009d0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00d      	beq.n	8009c96 <USBD_StdEPReq+0x146>
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b80      	cmp	r3, #128	; 0x80
 8009c7e:	d00a      	beq.n	8009c96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f96d 	bl	800af64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c8a:	2180      	movs	r1, #128	; 0x80
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 f969 	bl	800af64 <USBD_LL_StallEP>
 8009c92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c94:	e040      	b.n	8009d18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc3e 	bl	800a51a <USBD_CtlError>
              break;
 8009c9e:	e03b      	b.n	8009d18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	885b      	ldrh	r3, [r3, #2]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d136      	bne.n	8009d16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f973 	bl	800afa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fcf7 	bl	800a6b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff fde2 	bl	8009890 <USBD_CoreFindEP>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cd0:	7b7b      	ldrb	r3, [r7, #13]
 8009cd2:	2bff      	cmp	r3, #255	; 0xff
 8009cd4:	d01f      	beq.n	8009d16 <USBD_StdEPReq+0x1c6>
 8009cd6:	7b7b      	ldrb	r3, [r7, #13]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d11c      	bne.n	8009d16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009cdc:	7b7a      	ldrb	r2, [r7, #13]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ce4:	7b7a      	ldrb	r2, [r7, #13]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	32ae      	adds	r2, #174	; 0xae
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d010      	beq.n	8009d16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009cf4:	7b7a      	ldrb	r2, [r7, #13]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	32ae      	adds	r2, #174	; 0xae
 8009cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	4798      	blx	r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d0a:	e004      	b.n	8009d16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fc03 	bl	800a51a <USBD_CtlError>
              break;
 8009d14:	e000      	b.n	8009d18 <USBD_StdEPReq+0x1c8>
              break;
 8009d16:	bf00      	nop
          }
          break;
 8009d18:	e0ab      	b.n	8009e72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d002      	beq.n	8009d2c <USBD_StdEPReq+0x1dc>
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d032      	beq.n	8009d90 <USBD_StdEPReq+0x240>
 8009d2a:	e097      	b.n	8009e5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <USBD_StdEPReq+0x1f2>
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b80      	cmp	r3, #128	; 0x80
 8009d36:	d004      	beq.n	8009d42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fbed 	bl	800a51a <USBD_CtlError>
                break;
 8009d40:	e091      	b.n	8009e66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da0b      	bge.n	8009d62 <USBD_StdEPReq+0x212>
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	3310      	adds	r3, #16
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3304      	adds	r3, #4
 8009d60:	e00b      	b.n	8009d7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	3304      	adds	r3, #4
 8009d7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2202      	movs	r2, #2
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc37 	bl	800a5fc <USBD_CtlSendData>
              break;
 8009d8e:	e06a      	b.n	8009e66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	da11      	bge.n	8009dbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	3324      	adds	r3, #36	; 0x24
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d117      	bne.n	8009de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fbb0 	bl	800a51a <USBD_CtlError>
                  break;
 8009dba:	e054      	b.n	8009e66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	f003 020f 	and.w	r2, r3, #15
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	440b      	add	r3, r1
 8009dce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d104      	bne.n	8009de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fb9d 	bl	800a51a <USBD_CtlError>
                  break;
 8009de0:	e041      	b.n	8009e66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da0b      	bge.n	8009e02 <USBD_StdEPReq+0x2b2>
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	3310      	adds	r3, #16
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3304      	adds	r3, #4
 8009e00:	e00b      	b.n	8009e1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	4413      	add	r3, r2
 8009e18:	3304      	adds	r3, #4
 8009e1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <USBD_StdEPReq+0x2d8>
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b80      	cmp	r3, #128	; 0x80
 8009e26:	d103      	bne.n	8009e30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e00e      	b.n	8009e4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f8d3 	bl	800afe0 <USBD_LL_IsStallEP>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2201      	movs	r2, #1
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e002      	b.n	8009e4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2202      	movs	r2, #2
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fbd1 	bl	800a5fc <USBD_CtlSendData>
              break;
 8009e5a:	e004      	b.n	8009e66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fb5b 	bl	800a51a <USBD_CtlError>
              break;
 8009e64:	bf00      	nop
          }
          break;
 8009e66:	e004      	b.n	8009e72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fb55 	bl	800a51a <USBD_CtlError>
          break;
 8009e70:	bf00      	nop
      }
      break;
 8009e72:	e005      	b.n	8009e80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb4f 	bl	800a51a <USBD_CtlError>
      break;
 8009e7c:	e000      	b.n	8009e80 <USBD_StdEPReq+0x330>
      break;
 8009e7e:	bf00      	nop
  }

  return ret;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	885b      	ldrh	r3, [r3, #2]
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	2b06      	cmp	r3, #6
 8009eae:	f200 8128 	bhi.w	800a102 <USBD_GetDescriptor+0x276>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBD_GetDescriptor+0x2c>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009ed5 	.word	0x08009ed5
 8009ebc:	08009eed 	.word	0x08009eed
 8009ec0:	08009f2d 	.word	0x08009f2d
 8009ec4:	0800a103 	.word	0x0800a103
 8009ec8:	0800a103 	.word	0x0800a103
 8009ecc:	0800a0a3 	.word	0x0800a0a3
 8009ed0:	0800a0cf 	.word	0x0800a0cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7c12      	ldrb	r2, [r2, #16]
 8009ee0:	f107 0108 	add.w	r1, r7, #8
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4798      	blx	r3
 8009ee8:	60f8      	str	r0, [r7, #12]
      break;
 8009eea:	e112      	b.n	800a112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7c1b      	ldrb	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10d      	bne.n	8009f10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	f107 0208 	add.w	r2, r7, #8
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f0e:	e100      	b.n	800a112 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	f107 0208 	add.w	r2, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3301      	adds	r3, #1
 8009f26:	2202      	movs	r2, #2
 8009f28:	701a      	strb	r2, [r3, #0]
      break;
 8009f2a:	e0f2      	b.n	800a112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	885b      	ldrh	r3, [r3, #2]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	f200 80ac 	bhi.w	800a090 <USBD_GetDescriptor+0x204>
 8009f38:	a201      	add	r2, pc, #4	; (adr r2, 8009f40 <USBD_GetDescriptor+0xb4>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009f59 	.word	0x08009f59
 8009f44:	08009f8d 	.word	0x08009f8d
 8009f48:	08009fc1 	.word	0x08009fc1
 8009f4c:	08009ff5 	.word	0x08009ff5
 8009f50:	0800a029 	.word	0x0800a029
 8009f54:	0800a05d 	.word	0x0800a05d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7c12      	ldrb	r2, [r2, #16]
 8009f70:	f107 0108 	add.w	r1, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7a:	e091      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 facb 	bl	800a51a <USBD_CtlError>
            err++;
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	3301      	adds	r3, #1
 8009f88:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8a:	e089      	b.n	800a0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	7c12      	ldrb	r2, [r2, #16]
 8009fa4:	f107 0108 	add.w	r1, r7, #8
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
 8009fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fae:	e077      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fab1 	bl	800a51a <USBD_CtlError>
            err++;
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fbe:	e06f      	b.n	800a0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	7c12      	ldrb	r2, [r2, #16]
 8009fd8:	f107 0108 	add.w	r1, r7, #8
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
 8009fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fe2:	e05d      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fa97 	bl	800a51a <USBD_CtlError>
            err++;
 8009fec:	7afb      	ldrb	r3, [r7, #11]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ff2:	e055      	b.n	800a0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a016:	e043      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa7d 	bl	800a51a <USBD_CtlError>
            err++;
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	3301      	adds	r3, #1
 800a024:	72fb      	strb	r3, [r7, #11]
          break;
 800a026:	e03b      	b.n	800a0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e029      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fa63 	bl	800a51a <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e021      	b.n	800a0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e00f      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa49 	bl	800a51a <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e007      	b.n	800a0a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa41 	bl	800a51a <USBD_CtlError>
          err++;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	3301      	adds	r3, #1
 800a09c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a09e:	bf00      	nop
      }
      break;
 800a0a0:	e037      	b.n	800a112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	7c1b      	ldrb	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b2:	f107 0208 	add.w	r2, r7, #8
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4798      	blx	r3
 800a0ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0bc:	e029      	b.n	800a112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa2a 	bl	800a51a <USBD_CtlError>
        err++;
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800a0cc:	e021      	b.n	800a112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7c1b      	ldrb	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10d      	bne.n	800a0f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
 800a0e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0f0:	e00f      	b.n	800a112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa10 	bl	800a51a <USBD_CtlError>
        err++;
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a100:	e007      	b.n	800a112 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa08 	bl	800a51a <USBD_CtlError>
      err++;
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	3301      	adds	r3, #1
 800a10e:	72fb      	strb	r3, [r7, #11]
      break;
 800a110:	bf00      	nop
  }

  if (err != 0U)
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d11e      	bne.n	800a156 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	88db      	ldrh	r3, [r3, #6]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d016      	beq.n	800a14e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a120:	893b      	ldrh	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00e      	beq.n	800a144 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	88da      	ldrh	r2, [r3, #6]
 800a12a:	893b      	ldrh	r3, [r7, #8]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	bf28      	it	cs
 800a130:	4613      	movcs	r3, r2
 800a132:	b29b      	uxth	r3, r3
 800a134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a136:	893b      	ldrh	r3, [r7, #8]
 800a138:	461a      	mov	r2, r3
 800a13a:	68f9      	ldr	r1, [r7, #12]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fa5d 	bl	800a5fc <USBD_CtlSendData>
 800a142:	e009      	b.n	800a158 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f9e7 	bl	800a51a <USBD_CtlError>
 800a14c:	e004      	b.n	800a158 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 faae 	bl	800a6b0 <USBD_CtlSendStatus>
 800a154:	e000      	b.n	800a158 <USBD_GetDescriptor+0x2cc>
    return;
 800a156:	bf00      	nop
  }
}
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop

0800a160 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	889b      	ldrh	r3, [r3, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d131      	bne.n	800a1d6 <USBD_SetAddress+0x76>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	88db      	ldrh	r3, [r3, #6]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d12d      	bne.n	800a1d6 <USBD_SetAddress+0x76>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	885b      	ldrh	r3, [r3, #2]
 800a17e:	2b7f      	cmp	r3, #127	; 0x7f
 800a180:	d829      	bhi.n	800a1d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	885b      	ldrh	r3, [r3, #2]
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b03      	cmp	r3, #3
 800a198:	d104      	bne.n	800a1a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f9bc 	bl	800a51a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a2:	e01d      	b.n	800a1e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7bfa      	ldrb	r2, [r7, #15]
 800a1a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 ff41 	bl	800b038 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa7a 	bl	800a6b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ca:	e009      	b.n	800a1e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d4:	e004      	b.n	800a1e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f99e 	bl	800a51a <USBD_CtlError>
  }
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	4b4e      	ldr	r3, [pc, #312]	; (800a338 <USBD_SetConfig+0x150>)
 800a1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a200:	4b4d      	ldr	r3, [pc, #308]	; (800a338 <USBD_SetConfig+0x150>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d905      	bls.n	800a214 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f985 	bl	800a51a <USBD_CtlError>
    return USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	e08c      	b.n	800a32e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d002      	beq.n	800a226 <USBD_SetConfig+0x3e>
 800a220:	2b03      	cmp	r3, #3
 800a222:	d029      	beq.n	800a278 <USBD_SetConfig+0x90>
 800a224:	e075      	b.n	800a312 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a226:	4b44      	ldr	r3, [pc, #272]	; (800a338 <USBD_SetConfig+0x150>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d020      	beq.n	800a270 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a22e:	4b42      	ldr	r3, [pc, #264]	; (800a338 <USBD_SetConfig+0x150>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a238:	4b3f      	ldr	r3, [pc, #252]	; (800a338 <USBD_SetConfig+0x150>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7fe ffe7 	bl	8009212 <USBD_SetClassConfig>
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d008      	beq.n	800a260 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f962 	bl	800a51a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2202      	movs	r2, #2
 800a25a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a25e:	e065      	b.n	800a32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa25 	bl	800a6b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2203      	movs	r2, #3
 800a26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a26e:	e05d      	b.n	800a32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fa1d 	bl	800a6b0 <USBD_CtlSendStatus>
      break;
 800a276:	e059      	b.n	800a32c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a278:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <USBD_SetConfig+0x150>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d112      	bne.n	800a2a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a288:	4b2b      	ldr	r3, [pc, #172]	; (800a338 <USBD_SetConfig+0x150>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a292:	4b29      	ldr	r3, [pc, #164]	; (800a338 <USBD_SetConfig+0x150>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7fe ffd6 	bl	800924a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa06 	bl	800a6b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2a4:	e042      	b.n	800a32c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2a6:	4b24      	ldr	r3, [pc, #144]	; (800a338 <USBD_SetConfig+0x150>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d02a      	beq.n	800a30a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7fe ffc4 	bl	800924a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <USBD_SetConfig+0x150>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <USBD_SetConfig+0x150>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7fe ff9d 	bl	8009212 <USBD_SetClassConfig>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00f      	beq.n	800a302 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f918 	bl	800a51a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7fe ffa9 	bl	800924a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a300:	e014      	b.n	800a32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f9d4 	bl	800a6b0 <USBD_CtlSendStatus>
      break;
 800a308:	e010      	b.n	800a32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9d0 	bl	800a6b0 <USBD_CtlSendStatus>
      break;
 800a310:	e00c      	b.n	800a32c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f900 	bl	800a51a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a31a:	4b07      	ldr	r3, [pc, #28]	; (800a338 <USBD_SetConfig+0x150>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7fe ff92 	bl	800924a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	73fb      	strb	r3, [r7, #15]
      break;
 800a32a:	bf00      	nop
  }

  return ret;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2400ade0 	.word	0x2400ade0

0800a33c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d004      	beq.n	800a358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f8e2 	bl	800a51a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a356:	e023      	b.n	800a3a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	dc02      	bgt.n	800a36a <USBD_GetConfig+0x2e>
 800a364:	2b00      	cmp	r3, #0
 800a366:	dc03      	bgt.n	800a370 <USBD_GetConfig+0x34>
 800a368:	e015      	b.n	800a396 <USBD_GetConfig+0x5a>
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d00b      	beq.n	800a386 <USBD_GetConfig+0x4a>
 800a36e:	e012      	b.n	800a396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3308      	adds	r3, #8
 800a37a:	2201      	movs	r2, #1
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f93c 	bl	800a5fc <USBD_CtlSendData>
        break;
 800a384:	e00c      	b.n	800a3a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	2201      	movs	r2, #1
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f934 	bl	800a5fc <USBD_CtlSendData>
        break;
 800a394:	e004      	b.n	800a3a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f8be 	bl	800a51a <USBD_CtlError>
        break;
 800a39e:	bf00      	nop
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d81e      	bhi.n	800a3fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	88db      	ldrh	r3, [r3, #6]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d004      	beq.n	800a3d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f8a5 	bl	800a51a <USBD_CtlError>
        break;
 800a3d0:	e01a      	b.n	800a408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f043 0202 	orr.w	r2, r3, #2
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f900 	bl	800a5fc <USBD_CtlSendData>
      break;
 800a3fc:	e004      	b.n	800a408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f88a 	bl	800a51a <USBD_CtlError>
      break;
 800a406:	bf00      	nop
  }
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d107      	bne.n	800a432 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f940 	bl	800a6b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a430:	e013      	b.n	800a45a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d10b      	bne.n	800a452 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	889b      	ldrh	r3, [r3, #4]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	b29b      	uxth	r3, r3
 800a442:	b2da      	uxtb	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f930 	bl	800a6b0 <USBD_CtlSendStatus>
}
 800a450:	e003      	b.n	800a45a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f860 	bl	800a51a <USBD_CtlError>
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a472:	b2db      	uxtb	r3, r3
 800a474:	3b01      	subs	r3, #1
 800a476:	2b02      	cmp	r3, #2
 800a478:	d80b      	bhi.n	800a492 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	885b      	ldrh	r3, [r3, #2]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10c      	bne.n	800a49c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f910 	bl	800a6b0 <USBD_CtlSendStatus>
      }
      break;
 800a490:	e004      	b.n	800a49c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f840 	bl	800a51a <USBD_CtlError>
      break;
 800a49a:	e000      	b.n	800a49e <USBD_ClrFeature+0x3c>
      break;
 800a49c:	bf00      	nop
  }
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	781a      	ldrb	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fa41 	bl	8009958 <SWAPBYTE>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff fa34 	bl	8009958 <SWAPBYTE>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3301      	adds	r3, #1
 800a502:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7ff fa27 	bl	8009958 <SWAPBYTE>
 800a50a:	4603      	mov	r3, r0
 800a50c:	461a      	mov	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	80da      	strh	r2, [r3, #6]
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a524:	2180      	movs	r1, #128	; 0x80
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fd1c 	bl	800af64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fd18 	bl	800af64 <USBD_LL_StallEP>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a548:	2300      	movs	r3, #0
 800a54a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d036      	beq.n	800a5c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a556:	6938      	ldr	r0, [r7, #16]
 800a558:	f000 f836 	bl	800a5c8 <USBD_GetLen>
 800a55c:	4603      	mov	r3, r0
 800a55e:	3301      	adds	r3, #1
 800a560:	b29b      	uxth	r3, r3
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	4413      	add	r3, r2
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	701a      	strb	r2, [r3, #0]
  idx++;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	3301      	adds	r3, #1
 800a57a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	4413      	add	r3, r2
 800a582:	2203      	movs	r2, #3
 800a584:	701a      	strb	r2, [r3, #0]
  idx++;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	3301      	adds	r3, #1
 800a58a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a58c:	e013      	b.n	800a5b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	4413      	add	r3, r2
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	7812      	ldrb	r2, [r2, #0]
 800a598:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	3301      	adds	r3, #1
 800a59e:	613b      	str	r3, [r7, #16]
    idx++;
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1e7      	bne.n	800a58e <USBD_GetString+0x52>
 800a5be:	e000      	b.n	800a5c2 <USBD_GetString+0x86>
    return;
 800a5c0:	bf00      	nop
  }
}
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a5d8:	e005      	b.n	800a5e6 <USBD_GetLen+0x1e>
  {
    len++;
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f5      	bne.n	800a5da <USBD_GetLen+0x12>
  }

  return len;
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	2100      	movs	r1, #0
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 fd27 	bl	800b076 <USBD_LL_Transmit>

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	2100      	movs	r1, #0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fd16 	bl	800b076 <USBD_LL_Transmit>

  return USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2203      	movs	r2, #3
 800a664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	2100      	movs	r1, #0
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fd1a 	bl	800b0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	2100      	movs	r1, #0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fd09 	bl	800b0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fcd5 	bl	800b076 <USBD_LL_Transmit>

  return USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2205      	movs	r2, #5
 800a6e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fce3 	bl	800b0b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a700:	2201      	movs	r2, #1
 800a702:	4913      	ldr	r1, [pc, #76]	; (800a750 <MX_USB_DEVICE_Init+0x54>)
 800a704:	4813      	ldr	r0, [pc, #76]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a706:	f7fe fd07 	bl	8009118 <USBD_Init>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a710:	f7f7 f990 	bl	8001a34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a714:	4910      	ldr	r1, [pc, #64]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a716:	480f      	ldr	r0, [pc, #60]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a718:	f7fe fd2e 	bl	8009178 <USBD_RegisterClass>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a722:	f7f7 f987 	bl	8001a34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a726:	490d      	ldr	r1, [pc, #52]	; (800a75c <MX_USB_DEVICE_Init+0x60>)
 800a728:	480a      	ldr	r0, [pc, #40]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a72a:	f7fe fc1f 	bl	8008f6c <USBD_CDC_RegisterInterface>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a734:	f7f7 f97e 	bl	8001a34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a738:	4806      	ldr	r0, [pc, #24]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a73a:	f7fe fd53 	bl	80091e4 <USBD_Start>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a744:	f7f7 f976 	bl	8001a34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a748:	f7f9 fb08 	bl	8003d5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a74c:	bf00      	nop
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	24000150 	.word	0x24000150
 800a754:	2400ade4 	.word	0x2400ade4
 800a758:	240000bc 	.word	0x240000bc
 800a75c:	2400013c 	.word	0x2400013c

0800a760 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a764:	2200      	movs	r2, #0
 800a766:	4905      	ldr	r1, [pc, #20]	; (800a77c <CDC_Init_HS+0x1c>)
 800a768:	4805      	ldr	r0, [pc, #20]	; (800a780 <CDC_Init_HS+0x20>)
 800a76a:	f7fe fc19 	bl	8008fa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a76e:	4905      	ldr	r1, [pc, #20]	; (800a784 <CDC_Init_HS+0x24>)
 800a770:	4803      	ldr	r0, [pc, #12]	; (800a780 <CDC_Init_HS+0x20>)
 800a772:	f7fe fc37 	bl	8008fe4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a776:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a778:	4618      	mov	r0, r3
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2400b8c0 	.word	0x2400b8c0
 800a780:	2400ade4 	.word	0x2400ade4
 800a784:	2400b0c0 	.word	0x2400b0c0

0800a788 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a78c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a78e:	4618      	mov	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	2b23      	cmp	r3, #35	; 0x23
 800a7ac:	d84a      	bhi.n	800a844 <CDC_Control_HS+0xac>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <CDC_Control_HS+0x1c>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a845 	.word	0x0800a845
 800a7b8:	0800a845 	.word	0x0800a845
 800a7bc:	0800a845 	.word	0x0800a845
 800a7c0:	0800a845 	.word	0x0800a845
 800a7c4:	0800a845 	.word	0x0800a845
 800a7c8:	0800a845 	.word	0x0800a845
 800a7cc:	0800a845 	.word	0x0800a845
 800a7d0:	0800a845 	.word	0x0800a845
 800a7d4:	0800a845 	.word	0x0800a845
 800a7d8:	0800a845 	.word	0x0800a845
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a845 	.word	0x0800a845
 800a7e4:	0800a845 	.word	0x0800a845
 800a7e8:	0800a845 	.word	0x0800a845
 800a7ec:	0800a845 	.word	0x0800a845
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a845 	.word	0x0800a845
 800a7f8:	0800a845 	.word	0x0800a845
 800a7fc:	0800a845 	.word	0x0800a845
 800a800:	0800a845 	.word	0x0800a845
 800a804:	0800a845 	.word	0x0800a845
 800a808:	0800a845 	.word	0x0800a845
 800a80c:	0800a845 	.word	0x0800a845
 800a810:	0800a845 	.word	0x0800a845
 800a814:	0800a845 	.word	0x0800a845
 800a818:	0800a845 	.word	0x0800a845
 800a81c:	0800a845 	.word	0x0800a845
 800a820:	0800a845 	.word	0x0800a845
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a845 	.word	0x0800a845
 800a82c:	0800a845 	.word	0x0800a845
 800a830:	0800a845 	.word	0x0800a845
 800a834:	0800a845 	.word	0x0800a845
 800a838:	0800a845 	.word	0x0800a845
 800a83c:	0800a845 	.word	0x0800a845
 800a840:	0800a845 	.word	0x0800a845
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a844:	bf00      	nop
  }

  return (USBD_OK);
 800a846:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	480f      	ldr	r0, [pc, #60]	; (800a8a0 <CDC_Receive_HS+0x4c>)
 800a862:	f7fe fbbf 	bl	8008fe4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a866:	480e      	ldr	r0, [pc, #56]	; (800a8a0 <CDC_Receive_HS+0x4c>)
 800a868:	f7fe fc20 	bl	80090ac <USBD_CDC_ReceivePacket>

  memset (bufferVCP_Rx, '\0', 64);  // clear the buffer
 800a86c:	2240      	movs	r2, #64	; 0x40
 800a86e:	2100      	movs	r1, #0
 800a870:	480c      	ldr	r0, [pc, #48]	; (800a8a4 <CDC_Receive_HS+0x50>)
 800a872:	f000 fcd5 	bl	800b220 <memset>
  uint8_t len = (uint8_t)*Len;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferVCP_Rx, Buf, len);  // copy the data to the buffer
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	461a      	mov	r2, r3
 800a880:	6879      	ldr	r1, [r7, #4]
 800a882:	4808      	ldr	r0, [pc, #32]	; (800a8a4 <CDC_Receive_HS+0x50>)
 800a884:	f000 fcbe 	bl	800b204 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	461a      	mov	r2, r3
 800a88c:	2100      	movs	r1, #0
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fcc6 	bl	800b220 <memset>

  return (USBD_OK);
 800a894:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	2400ade4 	.word	0x2400ade4
 800a8a4:	2400038c 	.word	0x2400038c

0800a8a8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <CDC_Transmit_HS+0x48>)
 800a8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e00b      	b.n	800a8e6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a8ce:	887b      	ldrh	r3, [r7, #2]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	4806      	ldr	r0, [pc, #24]	; (800a8f0 <CDC_Transmit_HS+0x48>)
 800a8d6:	f7fe fb63 	bl	8008fa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a8da:	4805      	ldr	r0, [pc, #20]	; (800a8f0 <CDC_Transmit_HS+0x48>)
 800a8dc:	f7fe fba0 	bl	8009020 <USBD_CDC_TransmitPacket>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	2400ade4 	.word	0x2400ade4

0800a8f4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
	...

0800a918 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	6039      	str	r1, [r7, #0]
 800a922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2212      	movs	r2, #18
 800a928:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a92a:	4b03      	ldr	r3, [pc, #12]	; (800a938 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	2400016c 	.word	0x2400016c

0800a93c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2204      	movs	r2, #4
 800a94c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a94e:	4b03      	ldr	r3, [pc, #12]	; (800a95c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	24000180 	.word	0x24000180

0800a960 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d105      	bne.n	800a97e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	4907      	ldr	r1, [pc, #28]	; (800a994 <USBD_HS_ProductStrDescriptor+0x34>)
 800a976:	4808      	ldr	r0, [pc, #32]	; (800a998 <USBD_HS_ProductStrDescriptor+0x38>)
 800a978:	f7ff fde0 	bl	800a53c <USBD_GetString>
 800a97c:	e004      	b.n	800a988 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	4904      	ldr	r1, [pc, #16]	; (800a994 <USBD_HS_ProductStrDescriptor+0x34>)
 800a982:	4805      	ldr	r0, [pc, #20]	; (800a998 <USBD_HS_ProductStrDescriptor+0x38>)
 800a984:	f7ff fdda 	bl	800a53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a988:	4b02      	ldr	r3, [pc, #8]	; (800a994 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2400c0c0 	.word	0x2400c0c0
 800a998:	0800c7b8 	.word	0x0800c7b8

0800a99c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6039      	str	r1, [r7, #0]
 800a9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	4904      	ldr	r1, [pc, #16]	; (800a9bc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a9ac:	4804      	ldr	r0, [pc, #16]	; (800a9c0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a9ae:	f7ff fdc5 	bl	800a53c <USBD_GetString>
  return USBD_StrDesc;
 800a9b2:	4b02      	ldr	r3, [pc, #8]	; (800a9bc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2400c0c0 	.word	0x2400c0c0
 800a9c0:	0800c7d0 	.word	0x0800c7d0

0800a9c4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6039      	str	r1, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	221a      	movs	r2, #26
 800a9d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9d6:	f000 f843 	bl	800aa60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a9da:	4b02      	ldr	r3, [pc, #8]	; (800a9e4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	24000184 	.word	0x24000184

0800a9e8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	6039      	str	r1, [r7, #0]
 800a9f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4907      	ldr	r1, [pc, #28]	; (800aa1c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a9fe:	4808      	ldr	r0, [pc, #32]	; (800aa20 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aa00:	f7ff fd9c 	bl	800a53c <USBD_GetString>
 800aa04:	e004      	b.n	800aa10 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4904      	ldr	r1, [pc, #16]	; (800aa1c <USBD_HS_ConfigStrDescriptor+0x34>)
 800aa0a:	4805      	ldr	r0, [pc, #20]	; (800aa20 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aa0c:	f7ff fd96 	bl	800a53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa10:	4b02      	ldr	r3, [pc, #8]	; (800aa1c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	2400c0c0 	.word	0x2400c0c0
 800aa20:	0800c7e4 	.word	0x0800c7e4

0800aa24 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	6039      	str	r1, [r7, #0]
 800aa2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d105      	bne.n	800aa42 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4907      	ldr	r1, [pc, #28]	; (800aa58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aa3a:	4808      	ldr	r0, [pc, #32]	; (800aa5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aa3c:	f7ff fd7e 	bl	800a53c <USBD_GetString>
 800aa40:	e004      	b.n	800aa4c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	4904      	ldr	r1, [pc, #16]	; (800aa58 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aa46:	4805      	ldr	r0, [pc, #20]	; (800aa5c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aa48:	f7ff fd78 	bl	800a53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa4c:	4b02      	ldr	r3, [pc, #8]	; (800aa58 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	2400c0c0 	.word	0x2400c0c0
 800aa5c:	0800c7f0 	.word	0x0800c7f0

0800aa60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa66:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <Get_SerialNum+0x44>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa6c:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <Get_SerialNum+0x48>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa72:	4b0e      	ldr	r3, [pc, #56]	; (800aaac <Get_SerialNum+0x4c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa86:	2208      	movs	r2, #8
 800aa88:	4909      	ldr	r1, [pc, #36]	; (800aab0 <Get_SerialNum+0x50>)
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 f814 	bl	800aab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa90:	2204      	movs	r2, #4
 800aa92:	4908      	ldr	r1, [pc, #32]	; (800aab4 <Get_SerialNum+0x54>)
 800aa94:	68b8      	ldr	r0, [r7, #8]
 800aa96:	f000 f80f 	bl	800aab8 <IntToUnicode>
  }
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	1ff1e800 	.word	0x1ff1e800
 800aaa8:	1ff1e804 	.word	0x1ff1e804
 800aaac:	1ff1e808 	.word	0x1ff1e808
 800aab0:	24000186 	.word	0x24000186
 800aab4:	24000196 	.word	0x24000196

0800aab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaca:	2300      	movs	r3, #0
 800aacc:	75fb      	strb	r3, [r7, #23]
 800aace:	e027      	b.n	800ab20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	0f1b      	lsrs	r3, r3, #28
 800aad4:	2b09      	cmp	r3, #9
 800aad6:	d80b      	bhi.n	800aaf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0f1b      	lsrs	r3, r3, #28
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4619      	mov	r1, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	440b      	add	r3, r1
 800aae8:	3230      	adds	r2, #48	; 0x30
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
 800aaee:	e00a      	b.n	800ab06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	0f1b      	lsrs	r3, r3, #28
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4619      	mov	r1, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	440b      	add	r3, r1
 800ab00:	3237      	adds	r2, #55	; 0x37
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	3301      	adds	r3, #1
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	4413      	add	r3, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	7dfa      	ldrb	r2, [r7, #23]
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d3d3      	bcc.n	800aad0 <IntToUnicode+0x18>
  }
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
	...

0800ab38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b0b6      	sub	sp, #216	; 0xd8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	609a      	str	r2, [r3, #8]
 800ab4c:	60da      	str	r2, [r3, #12]
 800ab4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab50:	f107 0310 	add.w	r3, r7, #16
 800ab54:	22b4      	movs	r2, #180	; 0xb4
 800ab56:	2100      	movs	r1, #0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fb61 	bl	800b220 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a2b      	ldr	r2, [pc, #172]	; (800ac10 <HAL_PCD_MspInit+0xd8>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d14e      	bne.n	800ac06 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ab68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ab6e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800ab72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab76:	f107 0310 	add.w	r3, r7, #16
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fa f80c 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800ab86:	f7f6 ff55 	bl	8001a34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ab8a:	f7f9 f8e7 	bl	8003d5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab8e:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800ab90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab94:	4a1f      	ldr	r2, [pc, #124]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800ab96:	f043 0301 	orr.w	r3, r3, #1
 800ab9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ab9e:	4b1d      	ldr	r3, [pc, #116]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800aba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800abac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb4:	2302      	movs	r3, #2
 800abb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800abc6:	230a      	movs	r3, #10
 800abc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800abcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800abd0:	4619      	mov	r1, r3
 800abd2:	4811      	ldr	r0, [pc, #68]	; (800ac18 <HAL_PCD_MspInit+0xe0>)
 800abd4:	f7f7 fbd8 	bl	8002388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800abd8:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800abda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800abde:	4a0d      	ldr	r2, [pc, #52]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800abe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abe4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800abe8:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <HAL_PCD_MspInit+0xdc>)
 800abea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800abee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abf2:	60bb      	str	r3, [r7, #8]
 800abf4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800abf6:	2200      	movs	r2, #0
 800abf8:	2100      	movs	r1, #0
 800abfa:	204d      	movs	r0, #77	; 0x4d
 800abfc:	f7f7 fb8f 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ac00:	204d      	movs	r0, #77	; 0x4d
 800ac02:	f7f7 fba6 	bl	8002352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ac06:	bf00      	nop
 800ac08:	37d8      	adds	r7, #216	; 0xd8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40040000 	.word	0x40040000
 800ac14:	58024400 	.word	0x58024400
 800ac18:	58020000 	.word	0x58020000

0800ac1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f7fe fb23 	bl	800927e <USBD_LL_SetupStage>
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f7fe fb5d 	bl	8009328 <USBD_LL_DataOutStage>
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	460b      	mov	r3, r1
 800ac80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	4413      	add	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	440b      	add	r3, r1
 800ac96:	334c      	adds	r3, #76	; 0x4c
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f7fe fbf6 	bl	800948e <USBD_LL_DataInStage>
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fd2a 	bl	8009712 <USBD_LL_SOF>
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acce:	2301      	movs	r3, #1
 800acd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d102      	bne.n	800ace0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800acda:	2300      	movs	r3, #0
 800acdc:	73fb      	strb	r3, [r7, #15]
 800acde:	e008      	b.n	800acf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d102      	bne.n	800acee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ace8:	2301      	movs	r3, #1
 800acea:	73fb      	strb	r3, [r7, #15]
 800acec:	e001      	b.n	800acf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800acee:	f7f6 fea1 	bl	8001a34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fcca 	bl	8009696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fc72 	bl	80095f2 <USBD_LL_Reset>
}
 800ad0e:	bf00      	nop
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fcc5 	bl	80096b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <HAL_PCD_SuspendCallback+0x48>)
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	4a03      	ldr	r2, [pc, #12]	; (800ad60 <HAL_PCD_SuspendCallback+0x48>)
 800ad52:	f043 0306 	orr.w	r3, r3, #6
 800ad56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	e000ed00 	.word	0xe000ed00

0800ad64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fcb5 	bl	80096e2 <USBD_LL_Resume>
}
 800ad78:	bf00      	nop
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad92:	78fa      	ldrb	r2, [r7, #3]
 800ad94:	4611      	mov	r1, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe fd0d 	bl	80097b6 <USBD_LL_IsoOUTIncomplete>
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adb6:	78fa      	ldrb	r2, [r7, #3]
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fcc9 	bl	8009752 <USBD_LL_IsoINIncomplete>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fd1f 	bl	800981a <USBD_LL_DevConnected>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fd1c 	bl	8009830 <USBD_LL_DevDisconnected>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d140      	bne.n	800ae92 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ae10:	4a22      	ldr	r2, [pc, #136]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a20      	ldr	r2, [pc, #128]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ae20:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae22:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <USBD_LL_Init+0xa0>)
 800ae24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ae26:	4b1d      	ldr	r3, [pc, #116]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae28:	2209      	movs	r2, #9
 800ae2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ae2c:	4b1b      	ldr	r3, [pc, #108]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae2e:	2202      	movs	r2, #2
 800ae30:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ae32:	4b1a      	ldr	r3, [pc, #104]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ae38:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ae3e:	4b17      	ldr	r3, [pc, #92]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ae44:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ae4a:	4b14      	ldr	r3, [pc, #80]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ae56:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ae62:	480e      	ldr	r0, [pc, #56]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae64:	f7f7 fc6b 	bl	800273e <HAL_PCD_Init>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ae6e:	f7f6 fde1 	bl	8001a34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ae72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae76:	4809      	ldr	r0, [pc, #36]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae78:	f7f8 fef5 	bl	8003c66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ae7c:	2280      	movs	r2, #128	; 0x80
 800ae7e:	2100      	movs	r1, #0
 800ae80:	4806      	ldr	r0, [pc, #24]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae82:	f7f8 fea9 	bl	8003bd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ae86:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4803      	ldr	r0, [pc, #12]	; (800ae9c <USBD_LL_Init+0x9c>)
 800ae8e:	f7f8 fea3 	bl	8003bd8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	2400c2c0 	.word	0x2400c2c0
 800aea0:	40040000 	.word	0x40040000

0800aea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f7 fd63 	bl	8002986 <HAL_PCD_Start>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f942 	bl	800b150 <USBD_Get_USB_Status>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	4608      	mov	r0, r1
 800aee4:	4611      	mov	r1, r2
 800aee6:	461a      	mov	r2, r3
 800aee8:	4603      	mov	r3, r0
 800aeea:	70fb      	strb	r3, [r7, #3]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70bb      	strb	r3, [r7, #2]
 800aef0:	4613      	mov	r3, r2
 800aef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af02:	78bb      	ldrb	r3, [r7, #2]
 800af04:	883a      	ldrh	r2, [r7, #0]
 800af06:	78f9      	ldrb	r1, [r7, #3]
 800af08:	f7f8 fa61 	bl	80033ce <HAL_PCD_EP_Open>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f91c 	bl	800b150 <USBD_Get_USB_Status>
 800af18:	4603      	mov	r3, r0
 800af1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af40:	78fa      	ldrb	r2, [r7, #3]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f7f8 faaa 	bl	800349e <HAL_PCD_EP_Close>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
 800af50:	4618      	mov	r0, r3
 800af52:	f000 f8fd 	bl	800b150 <USBD_Get_USB_Status>
 800af56:	4603      	mov	r3, r0
 800af58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 fb82 	bl	800368c <HAL_PCD_EP_SetStall>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f8de 	bl	800b150 <USBD_Get_USB_Status>
 800af94:	4603      	mov	r3, r0
 800af96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af98:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	460b      	mov	r3, r1
 800afac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	4611      	mov	r1, r2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7f8 fbc7 	bl	8003754 <HAL_PCD_EP_ClrStall>
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 f8bf 	bl	800b150 <USBD_Get_USB_Status>
 800afd2:	4603      	mov	r3, r0
 800afd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	da0b      	bge.n	800b014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	4613      	mov	r3, r2
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	333e      	adds	r3, #62	; 0x3e
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	e00b      	b.n	800b02c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b01a:	68f9      	ldr	r1, [r7, #12]
 800b01c:	4613      	mov	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b02a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b052:	78fa      	ldrb	r2, [r7, #3]
 800b054:	4611      	mov	r1, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f7f8 f994 	bl	8003384 <HAL_PCD_SetAddress>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f874 	bl	800b150 <USBD_Get_USB_Status>
 800b068:	4603      	mov	r3, r0
 800b06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b086      	sub	sp, #24
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
 800b082:	460b      	mov	r3, r1
 800b084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b094:	7af9      	ldrb	r1, [r7, #11]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	f7f8 faad 	bl	80035f8 <HAL_PCD_EP_Transmit>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 f853 	bl	800b150 <USBD_Get_USB_Status>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	607a      	str	r2, [r7, #4]
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0d6:	7af9      	ldrb	r1, [r7, #11]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	f7f8 fa29 	bl	8003532 <HAL_PCD_EP_Receive>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f832 	bl	800b150 <USBD_Get_USB_Status>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7f8 fa59 	bl	80035c8 <HAL_PCD_EP_GetRxCount>
 800b116:	4603      	mov	r3, r0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b128:	4b03      	ldr	r3, [pc, #12]	; (800b138 <USBD_static_malloc+0x18>)
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	2400c7cc 	.word	0x2400c7cc

0800b13c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]

}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b15e:	79fb      	ldrb	r3, [r7, #7]
 800b160:	2b03      	cmp	r3, #3
 800b162:	d817      	bhi.n	800b194 <USBD_Get_USB_Status+0x44>
 800b164:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <USBD_Get_USB_Status+0x1c>)
 800b166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16a:	bf00      	nop
 800b16c:	0800b17d 	.word	0x0800b17d
 800b170:	0800b183 	.word	0x0800b183
 800b174:	0800b189 	.word	0x0800b189
 800b178:	0800b18f 	.word	0x0800b18f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
    break;
 800b180:	e00b      	b.n	800b19a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b182:	2303      	movs	r3, #3
 800b184:	73fb      	strb	r3, [r7, #15]
    break;
 800b186:	e008      	b.n	800b19a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b188:	2301      	movs	r3, #1
 800b18a:	73fb      	strb	r3, [r7, #15]
    break;
 800b18c:	e005      	b.n	800b19a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b18e:	2303      	movs	r3, #3
 800b190:	73fb      	strb	r3, [r7, #15]
    break;
 800b192:	e002      	b.n	800b19a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	73fb      	strb	r3, [r7, #15]
    break;
 800b198:	bf00      	nop
  }
  return usb_status;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <atoi>:
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	f000 b93e 	b.w	800b42c <strtol>

0800b1b0 <__errno>:
 800b1b0:	4b01      	ldr	r3, [pc, #4]	; (800b1b8 <__errno+0x8>)
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	240001a0 	.word	0x240001a0

0800b1bc <__libc_init_array>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4d0d      	ldr	r5, [pc, #52]	; (800b1f4 <__libc_init_array+0x38>)
 800b1c0:	4c0d      	ldr	r4, [pc, #52]	; (800b1f8 <__libc_init_array+0x3c>)
 800b1c2:	1b64      	subs	r4, r4, r5
 800b1c4:	10a4      	asrs	r4, r4, #2
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	42a6      	cmp	r6, r4
 800b1ca:	d109      	bne.n	800b1e0 <__libc_init_array+0x24>
 800b1cc:	4d0b      	ldr	r5, [pc, #44]	; (800b1fc <__libc_init_array+0x40>)
 800b1ce:	4c0c      	ldr	r4, [pc, #48]	; (800b200 <__libc_init_array+0x44>)
 800b1d0:	f001 fade 	bl	800c790 <_init>
 800b1d4:	1b64      	subs	r4, r4, r5
 800b1d6:	10a4      	asrs	r4, r4, #2
 800b1d8:	2600      	movs	r6, #0
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	d105      	bne.n	800b1ea <__libc_init_array+0x2e>
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e4:	4798      	blx	r3
 800b1e6:	3601      	adds	r6, #1
 800b1e8:	e7ee      	b.n	800b1c8 <__libc_init_array+0xc>
 800b1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ee:	4798      	blx	r3
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	e7f2      	b.n	800b1da <__libc_init_array+0x1e>
 800b1f4:	0800ca60 	.word	0x0800ca60
 800b1f8:	0800ca60 	.word	0x0800ca60
 800b1fc:	0800ca60 	.word	0x0800ca60
 800b200:	0800ca64 	.word	0x0800ca64

0800b204 <memcpy>:
 800b204:	440a      	add	r2, r1
 800b206:	4291      	cmp	r1, r2
 800b208:	f100 33ff 	add.w	r3, r0, #4294967295
 800b20c:	d100      	bne.n	800b210 <memcpy+0xc>
 800b20e:	4770      	bx	lr
 800b210:	b510      	push	{r4, lr}
 800b212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b21a:	4291      	cmp	r1, r2
 800b21c:	d1f9      	bne.n	800b212 <memcpy+0xe>
 800b21e:	bd10      	pop	{r4, pc}

0800b220 <memset>:
 800b220:	4402      	add	r2, r0
 800b222:	4603      	mov	r3, r0
 800b224:	4293      	cmp	r3, r2
 800b226:	d100      	bne.n	800b22a <memset+0xa>
 800b228:	4770      	bx	lr
 800b22a:	f803 1b01 	strb.w	r1, [r3], #1
 800b22e:	e7f9      	b.n	800b224 <memset+0x4>

0800b230 <siprintf>:
 800b230:	b40e      	push	{r1, r2, r3}
 800b232:	b500      	push	{lr}
 800b234:	b09c      	sub	sp, #112	; 0x70
 800b236:	ab1d      	add	r3, sp, #116	; 0x74
 800b238:	9002      	str	r0, [sp, #8]
 800b23a:	9006      	str	r0, [sp, #24]
 800b23c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b240:	4809      	ldr	r0, [pc, #36]	; (800b268 <siprintf+0x38>)
 800b242:	9107      	str	r1, [sp, #28]
 800b244:	9104      	str	r1, [sp, #16]
 800b246:	4909      	ldr	r1, [pc, #36]	; (800b26c <siprintf+0x3c>)
 800b248:	f853 2b04 	ldr.w	r2, [r3], #4
 800b24c:	9105      	str	r1, [sp, #20]
 800b24e:	6800      	ldr	r0, [r0, #0]
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	a902      	add	r1, sp, #8
 800b254:	f000 fa68 	bl	800b728 <_svfiprintf_r>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
 800b25e:	b01c      	add	sp, #112	; 0x70
 800b260:	f85d eb04 	ldr.w	lr, [sp], #4
 800b264:	b003      	add	sp, #12
 800b266:	4770      	bx	lr
 800b268:	240001a0 	.word	0x240001a0
 800b26c:	ffff0208 	.word	0xffff0208

0800b270 <strtok>:
 800b270:	4b16      	ldr	r3, [pc, #88]	; (800b2cc <strtok+0x5c>)
 800b272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b274:	681e      	ldr	r6, [r3, #0]
 800b276:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b278:	4605      	mov	r5, r0
 800b27a:	b9fc      	cbnz	r4, 800b2bc <strtok+0x4c>
 800b27c:	2050      	movs	r0, #80	; 0x50
 800b27e:	9101      	str	r1, [sp, #4]
 800b280:	f000 f90e 	bl	800b4a0 <malloc>
 800b284:	9901      	ldr	r1, [sp, #4]
 800b286:	65b0      	str	r0, [r6, #88]	; 0x58
 800b288:	4602      	mov	r2, r0
 800b28a:	b920      	cbnz	r0, 800b296 <strtok+0x26>
 800b28c:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <strtok+0x60>)
 800b28e:	4811      	ldr	r0, [pc, #68]	; (800b2d4 <strtok+0x64>)
 800b290:	2157      	movs	r1, #87	; 0x57
 800b292:	f000 f8d5 	bl	800b440 <__assert_func>
 800b296:	e9c0 4400 	strd	r4, r4, [r0]
 800b29a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b29e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b2a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b2a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b2aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b2ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b2b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b2b6:	6184      	str	r4, [r0, #24]
 800b2b8:	7704      	strb	r4, [r0, #28]
 800b2ba:	6244      	str	r4, [r0, #36]	; 0x24
 800b2bc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b2be:	2301      	movs	r3, #1
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	b002      	add	sp, #8
 800b2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2c8:	f000 b806 	b.w	800b2d8 <__strtok_r>
 800b2cc:	240001a0 	.word	0x240001a0
 800b2d0:	0800c81c 	.word	0x0800c81c
 800b2d4:	0800c833 	.word	0x0800c833

0800b2d8 <__strtok_r>:
 800b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2da:	b908      	cbnz	r0, 800b2e0 <__strtok_r+0x8>
 800b2dc:	6810      	ldr	r0, [r2, #0]
 800b2de:	b188      	cbz	r0, 800b304 <__strtok_r+0x2c>
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2ee:	b91e      	cbnz	r6, 800b2f8 <__strtok_r+0x20>
 800b2f0:	b965      	cbnz	r5, 800b30c <__strtok_r+0x34>
 800b2f2:	6015      	str	r5, [r2, #0]
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	e005      	b.n	800b304 <__strtok_r+0x2c>
 800b2f8:	42b5      	cmp	r5, r6
 800b2fa:	d1f6      	bne.n	800b2ea <__strtok_r+0x12>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1f0      	bne.n	800b2e2 <__strtok_r+0xa>
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	7003      	strb	r3, [r0, #0]
 800b304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b306:	461c      	mov	r4, r3
 800b308:	e00c      	b.n	800b324 <__strtok_r+0x4c>
 800b30a:	b915      	cbnz	r5, 800b312 <__strtok_r+0x3a>
 800b30c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b310:	460e      	mov	r6, r1
 800b312:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b316:	42ab      	cmp	r3, r5
 800b318:	d1f7      	bne.n	800b30a <__strtok_r+0x32>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0f3      	beq.n	800b306 <__strtok_r+0x2e>
 800b31e:	2300      	movs	r3, #0
 800b320:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b324:	6014      	str	r4, [r2, #0]
 800b326:	e7ed      	b.n	800b304 <__strtok_r+0x2c>

0800b328 <_strtol_l.constprop.0>:
 800b328:	2b01      	cmp	r3, #1
 800b32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b32e:	d001      	beq.n	800b334 <_strtol_l.constprop.0+0xc>
 800b330:	2b24      	cmp	r3, #36	; 0x24
 800b332:	d906      	bls.n	800b342 <_strtol_l.constprop.0+0x1a>
 800b334:	f7ff ff3c 	bl	800b1b0 <__errno>
 800b338:	2316      	movs	r3, #22
 800b33a:	6003      	str	r3, [r0, #0]
 800b33c:	2000      	movs	r0, #0
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b428 <_strtol_l.constprop.0+0x100>
 800b346:	460d      	mov	r5, r1
 800b348:	462e      	mov	r6, r5
 800b34a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b34e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b352:	f017 0708 	ands.w	r7, r7, #8
 800b356:	d1f7      	bne.n	800b348 <_strtol_l.constprop.0+0x20>
 800b358:	2c2d      	cmp	r4, #45	; 0x2d
 800b35a:	d132      	bne.n	800b3c2 <_strtol_l.constprop.0+0x9a>
 800b35c:	782c      	ldrb	r4, [r5, #0]
 800b35e:	2701      	movs	r7, #1
 800b360:	1cb5      	adds	r5, r6, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d05b      	beq.n	800b41e <_strtol_l.constprop.0+0xf6>
 800b366:	2b10      	cmp	r3, #16
 800b368:	d109      	bne.n	800b37e <_strtol_l.constprop.0+0x56>
 800b36a:	2c30      	cmp	r4, #48	; 0x30
 800b36c:	d107      	bne.n	800b37e <_strtol_l.constprop.0+0x56>
 800b36e:	782c      	ldrb	r4, [r5, #0]
 800b370:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b374:	2c58      	cmp	r4, #88	; 0x58
 800b376:	d14d      	bne.n	800b414 <_strtol_l.constprop.0+0xec>
 800b378:	786c      	ldrb	r4, [r5, #1]
 800b37a:	2310      	movs	r3, #16
 800b37c:	3502      	adds	r5, #2
 800b37e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b382:	f108 38ff 	add.w	r8, r8, #4294967295
 800b386:	f04f 0c00 	mov.w	ip, #0
 800b38a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b38e:	4666      	mov	r6, ip
 800b390:	fb03 8a19 	mls	sl, r3, r9, r8
 800b394:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b398:	f1be 0f09 	cmp.w	lr, #9
 800b39c:	d816      	bhi.n	800b3cc <_strtol_l.constprop.0+0xa4>
 800b39e:	4674      	mov	r4, lr
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	dd24      	ble.n	800b3ee <_strtol_l.constprop.0+0xc6>
 800b3a4:	f1bc 0f00 	cmp.w	ip, #0
 800b3a8:	db1e      	blt.n	800b3e8 <_strtol_l.constprop.0+0xc0>
 800b3aa:	45b1      	cmp	r9, r6
 800b3ac:	d31c      	bcc.n	800b3e8 <_strtol_l.constprop.0+0xc0>
 800b3ae:	d101      	bne.n	800b3b4 <_strtol_l.constprop.0+0x8c>
 800b3b0:	45a2      	cmp	sl, r4
 800b3b2:	db19      	blt.n	800b3e8 <_strtol_l.constprop.0+0xc0>
 800b3b4:	fb06 4603 	mla	r6, r6, r3, r4
 800b3b8:	f04f 0c01 	mov.w	ip, #1
 800b3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3c0:	e7e8      	b.n	800b394 <_strtol_l.constprop.0+0x6c>
 800b3c2:	2c2b      	cmp	r4, #43	; 0x2b
 800b3c4:	bf04      	itt	eq
 800b3c6:	782c      	ldrbeq	r4, [r5, #0]
 800b3c8:	1cb5      	addeq	r5, r6, #2
 800b3ca:	e7ca      	b.n	800b362 <_strtol_l.constprop.0+0x3a>
 800b3cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b3d0:	f1be 0f19 	cmp.w	lr, #25
 800b3d4:	d801      	bhi.n	800b3da <_strtol_l.constprop.0+0xb2>
 800b3d6:	3c37      	subs	r4, #55	; 0x37
 800b3d8:	e7e2      	b.n	800b3a0 <_strtol_l.constprop.0+0x78>
 800b3da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b3de:	f1be 0f19 	cmp.w	lr, #25
 800b3e2:	d804      	bhi.n	800b3ee <_strtol_l.constprop.0+0xc6>
 800b3e4:	3c57      	subs	r4, #87	; 0x57
 800b3e6:	e7db      	b.n	800b3a0 <_strtol_l.constprop.0+0x78>
 800b3e8:	f04f 3cff 	mov.w	ip, #4294967295
 800b3ec:	e7e6      	b.n	800b3bc <_strtol_l.constprop.0+0x94>
 800b3ee:	f1bc 0f00 	cmp.w	ip, #0
 800b3f2:	da05      	bge.n	800b400 <_strtol_l.constprop.0+0xd8>
 800b3f4:	2322      	movs	r3, #34	; 0x22
 800b3f6:	6003      	str	r3, [r0, #0]
 800b3f8:	4646      	mov	r6, r8
 800b3fa:	b942      	cbnz	r2, 800b40e <_strtol_l.constprop.0+0xe6>
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	e79e      	b.n	800b33e <_strtol_l.constprop.0+0x16>
 800b400:	b107      	cbz	r7, 800b404 <_strtol_l.constprop.0+0xdc>
 800b402:	4276      	negs	r6, r6
 800b404:	2a00      	cmp	r2, #0
 800b406:	d0f9      	beq.n	800b3fc <_strtol_l.constprop.0+0xd4>
 800b408:	f1bc 0f00 	cmp.w	ip, #0
 800b40c:	d000      	beq.n	800b410 <_strtol_l.constprop.0+0xe8>
 800b40e:	1e69      	subs	r1, r5, #1
 800b410:	6011      	str	r1, [r2, #0]
 800b412:	e7f3      	b.n	800b3fc <_strtol_l.constprop.0+0xd4>
 800b414:	2430      	movs	r4, #48	; 0x30
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1b1      	bne.n	800b37e <_strtol_l.constprop.0+0x56>
 800b41a:	2308      	movs	r3, #8
 800b41c:	e7af      	b.n	800b37e <_strtol_l.constprop.0+0x56>
 800b41e:	2c30      	cmp	r4, #48	; 0x30
 800b420:	d0a5      	beq.n	800b36e <_strtol_l.constprop.0+0x46>
 800b422:	230a      	movs	r3, #10
 800b424:	e7ab      	b.n	800b37e <_strtol_l.constprop.0+0x56>
 800b426:	bf00      	nop
 800b428:	0800c8cd 	.word	0x0800c8cd

0800b42c <strtol>:
 800b42c:	4613      	mov	r3, r2
 800b42e:	460a      	mov	r2, r1
 800b430:	4601      	mov	r1, r0
 800b432:	4802      	ldr	r0, [pc, #8]	; (800b43c <strtol+0x10>)
 800b434:	6800      	ldr	r0, [r0, #0]
 800b436:	f7ff bf77 	b.w	800b328 <_strtol_l.constprop.0>
 800b43a:	bf00      	nop
 800b43c:	240001a0 	.word	0x240001a0

0800b440 <__assert_func>:
 800b440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b442:	4614      	mov	r4, r2
 800b444:	461a      	mov	r2, r3
 800b446:	4b09      	ldr	r3, [pc, #36]	; (800b46c <__assert_func+0x2c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4605      	mov	r5, r0
 800b44c:	68d8      	ldr	r0, [r3, #12]
 800b44e:	b14c      	cbz	r4, 800b464 <__assert_func+0x24>
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <__assert_func+0x30>)
 800b452:	9100      	str	r1, [sp, #0]
 800b454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b458:	4906      	ldr	r1, [pc, #24]	; (800b474 <__assert_func+0x34>)
 800b45a:	462b      	mov	r3, r5
 800b45c:	f000 f80e 	bl	800b47c <fiprintf>
 800b460:	f000 fe20 	bl	800c0a4 <abort>
 800b464:	4b04      	ldr	r3, [pc, #16]	; (800b478 <__assert_func+0x38>)
 800b466:	461c      	mov	r4, r3
 800b468:	e7f3      	b.n	800b452 <__assert_func+0x12>
 800b46a:	bf00      	nop
 800b46c:	240001a0 	.word	0x240001a0
 800b470:	0800c890 	.word	0x0800c890
 800b474:	0800c89d 	.word	0x0800c89d
 800b478:	0800c8cb 	.word	0x0800c8cb

0800b47c <fiprintf>:
 800b47c:	b40e      	push	{r1, r2, r3}
 800b47e:	b503      	push	{r0, r1, lr}
 800b480:	4601      	mov	r1, r0
 800b482:	ab03      	add	r3, sp, #12
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <fiprintf+0x20>)
 800b486:	f853 2b04 	ldr.w	r2, [r3], #4
 800b48a:	6800      	ldr	r0, [r0, #0]
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	f000 fa75 	bl	800b97c <_vfiprintf_r>
 800b492:	b002      	add	sp, #8
 800b494:	f85d eb04 	ldr.w	lr, [sp], #4
 800b498:	b003      	add	sp, #12
 800b49a:	4770      	bx	lr
 800b49c:	240001a0 	.word	0x240001a0

0800b4a0 <malloc>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	; (800b4ac <malloc+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f000 b86f 	b.w	800b588 <_malloc_r>
 800b4aa:	bf00      	nop
 800b4ac:	240001a0 	.word	0x240001a0

0800b4b0 <_free_r>:
 800b4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	d044      	beq.n	800b540 <_free_r+0x90>
 800b4b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ba:	9001      	str	r0, [sp, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f1a1 0404 	sub.w	r4, r1, #4
 800b4c2:	bfb8      	it	lt
 800b4c4:	18e4      	addlt	r4, r4, r3
 800b4c6:	f001 f82f 	bl	800c528 <__malloc_lock>
 800b4ca:	4a1e      	ldr	r2, [pc, #120]	; (800b544 <_free_r+0x94>)
 800b4cc:	9801      	ldr	r0, [sp, #4]
 800b4ce:	6813      	ldr	r3, [r2, #0]
 800b4d0:	b933      	cbnz	r3, 800b4e0 <_free_r+0x30>
 800b4d2:	6063      	str	r3, [r4, #4]
 800b4d4:	6014      	str	r4, [r2, #0]
 800b4d6:	b003      	add	sp, #12
 800b4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4dc:	f001 b82a 	b.w	800c534 <__malloc_unlock>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d908      	bls.n	800b4f6 <_free_r+0x46>
 800b4e4:	6825      	ldr	r5, [r4, #0]
 800b4e6:	1961      	adds	r1, r4, r5
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf01      	itttt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	1949      	addeq	r1, r1, r5
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	e7ed      	b.n	800b4d2 <_free_r+0x22>
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b10b      	cbz	r3, 800b500 <_free_r+0x50>
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d9fa      	bls.n	800b4f6 <_free_r+0x46>
 800b500:	6811      	ldr	r1, [r2, #0]
 800b502:	1855      	adds	r5, r2, r1
 800b504:	42a5      	cmp	r5, r4
 800b506:	d10b      	bne.n	800b520 <_free_r+0x70>
 800b508:	6824      	ldr	r4, [r4, #0]
 800b50a:	4421      	add	r1, r4
 800b50c:	1854      	adds	r4, r2, r1
 800b50e:	42a3      	cmp	r3, r4
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	d1e0      	bne.n	800b4d6 <_free_r+0x26>
 800b514:	681c      	ldr	r4, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	6053      	str	r3, [r2, #4]
 800b51a:	4421      	add	r1, r4
 800b51c:	6011      	str	r1, [r2, #0]
 800b51e:	e7da      	b.n	800b4d6 <_free_r+0x26>
 800b520:	d902      	bls.n	800b528 <_free_r+0x78>
 800b522:	230c      	movs	r3, #12
 800b524:	6003      	str	r3, [r0, #0]
 800b526:	e7d6      	b.n	800b4d6 <_free_r+0x26>
 800b528:	6825      	ldr	r5, [r4, #0]
 800b52a:	1961      	adds	r1, r4, r5
 800b52c:	428b      	cmp	r3, r1
 800b52e:	bf04      	itt	eq
 800b530:	6819      	ldreq	r1, [r3, #0]
 800b532:	685b      	ldreq	r3, [r3, #4]
 800b534:	6063      	str	r3, [r4, #4]
 800b536:	bf04      	itt	eq
 800b538:	1949      	addeq	r1, r1, r5
 800b53a:	6021      	streq	r1, [r4, #0]
 800b53c:	6054      	str	r4, [r2, #4]
 800b53e:	e7ca      	b.n	800b4d6 <_free_r+0x26>
 800b540:	b003      	add	sp, #12
 800b542:	bd30      	pop	{r4, r5, pc}
 800b544:	2400c9ec 	.word	0x2400c9ec

0800b548 <sbrk_aligned>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	4e0e      	ldr	r6, [pc, #56]	; (800b584 <sbrk_aligned+0x3c>)
 800b54c:	460c      	mov	r4, r1
 800b54e:	6831      	ldr	r1, [r6, #0]
 800b550:	4605      	mov	r5, r0
 800b552:	b911      	cbnz	r1, 800b55a <sbrk_aligned+0x12>
 800b554:	f000 fcd6 	bl	800bf04 <_sbrk_r>
 800b558:	6030      	str	r0, [r6, #0]
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f000 fcd1 	bl	800bf04 <_sbrk_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	d00a      	beq.n	800b57c <sbrk_aligned+0x34>
 800b566:	1cc4      	adds	r4, r0, #3
 800b568:	f024 0403 	bic.w	r4, r4, #3
 800b56c:	42a0      	cmp	r0, r4
 800b56e:	d007      	beq.n	800b580 <sbrk_aligned+0x38>
 800b570:	1a21      	subs	r1, r4, r0
 800b572:	4628      	mov	r0, r5
 800b574:	f000 fcc6 	bl	800bf04 <_sbrk_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	d101      	bne.n	800b580 <sbrk_aligned+0x38>
 800b57c:	f04f 34ff 	mov.w	r4, #4294967295
 800b580:	4620      	mov	r0, r4
 800b582:	bd70      	pop	{r4, r5, r6, pc}
 800b584:	2400c9f0 	.word	0x2400c9f0

0800b588 <_malloc_r>:
 800b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	1ccd      	adds	r5, r1, #3
 800b58e:	f025 0503 	bic.w	r5, r5, #3
 800b592:	3508      	adds	r5, #8
 800b594:	2d0c      	cmp	r5, #12
 800b596:	bf38      	it	cc
 800b598:	250c      	movcc	r5, #12
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	4607      	mov	r7, r0
 800b59e:	db01      	blt.n	800b5a4 <_malloc_r+0x1c>
 800b5a0:	42a9      	cmp	r1, r5
 800b5a2:	d905      	bls.n	800b5b0 <_malloc_r+0x28>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b0:	4e2e      	ldr	r6, [pc, #184]	; (800b66c <_malloc_r+0xe4>)
 800b5b2:	f000 ffb9 	bl	800c528 <__malloc_lock>
 800b5b6:	6833      	ldr	r3, [r6, #0]
 800b5b8:	461c      	mov	r4, r3
 800b5ba:	bb34      	cbnz	r4, 800b60a <_malloc_r+0x82>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f7ff ffc2 	bl	800b548 <sbrk_aligned>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	d14d      	bne.n	800b666 <_malloc_r+0xde>
 800b5ca:	6834      	ldr	r4, [r6, #0]
 800b5cc:	4626      	mov	r6, r4
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d140      	bne.n	800b654 <_malloc_r+0xcc>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	eb04 0803 	add.w	r8, r4, r3
 800b5dc:	f000 fc92 	bl	800bf04 <_sbrk_r>
 800b5e0:	4580      	cmp	r8, r0
 800b5e2:	d13a      	bne.n	800b65a <_malloc_r+0xd2>
 800b5e4:	6821      	ldr	r1, [r4, #0]
 800b5e6:	3503      	adds	r5, #3
 800b5e8:	1a6d      	subs	r5, r5, r1
 800b5ea:	f025 0503 	bic.w	r5, r5, #3
 800b5ee:	3508      	adds	r5, #8
 800b5f0:	2d0c      	cmp	r5, #12
 800b5f2:	bf38      	it	cc
 800b5f4:	250c      	movcc	r5, #12
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7ff ffa5 	bl	800b548 <sbrk_aligned>
 800b5fe:	3001      	adds	r0, #1
 800b600:	d02b      	beq.n	800b65a <_malloc_r+0xd2>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	442b      	add	r3, r5
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	e00e      	b.n	800b628 <_malloc_r+0xa0>
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	1b52      	subs	r2, r2, r5
 800b60e:	d41e      	bmi.n	800b64e <_malloc_r+0xc6>
 800b610:	2a0b      	cmp	r2, #11
 800b612:	d916      	bls.n	800b642 <_malloc_r+0xba>
 800b614:	1961      	adds	r1, r4, r5
 800b616:	42a3      	cmp	r3, r4
 800b618:	6025      	str	r5, [r4, #0]
 800b61a:	bf18      	it	ne
 800b61c:	6059      	strne	r1, [r3, #4]
 800b61e:	6863      	ldr	r3, [r4, #4]
 800b620:	bf08      	it	eq
 800b622:	6031      	streq	r1, [r6, #0]
 800b624:	5162      	str	r2, [r4, r5]
 800b626:	604b      	str	r3, [r1, #4]
 800b628:	4638      	mov	r0, r7
 800b62a:	f104 060b 	add.w	r6, r4, #11
 800b62e:	f000 ff81 	bl	800c534 <__malloc_unlock>
 800b632:	f026 0607 	bic.w	r6, r6, #7
 800b636:	1d23      	adds	r3, r4, #4
 800b638:	1af2      	subs	r2, r6, r3
 800b63a:	d0b6      	beq.n	800b5aa <_malloc_r+0x22>
 800b63c:	1b9b      	subs	r3, r3, r6
 800b63e:	50a3      	str	r3, [r4, r2]
 800b640:	e7b3      	b.n	800b5aa <_malloc_r+0x22>
 800b642:	6862      	ldr	r2, [r4, #4]
 800b644:	42a3      	cmp	r3, r4
 800b646:	bf0c      	ite	eq
 800b648:	6032      	streq	r2, [r6, #0]
 800b64a:	605a      	strne	r2, [r3, #4]
 800b64c:	e7ec      	b.n	800b628 <_malloc_r+0xa0>
 800b64e:	4623      	mov	r3, r4
 800b650:	6864      	ldr	r4, [r4, #4]
 800b652:	e7b2      	b.n	800b5ba <_malloc_r+0x32>
 800b654:	4634      	mov	r4, r6
 800b656:	6876      	ldr	r6, [r6, #4]
 800b658:	e7b9      	b.n	800b5ce <_malloc_r+0x46>
 800b65a:	230c      	movs	r3, #12
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	4638      	mov	r0, r7
 800b660:	f000 ff68 	bl	800c534 <__malloc_unlock>
 800b664:	e7a1      	b.n	800b5aa <_malloc_r+0x22>
 800b666:	6025      	str	r5, [r4, #0]
 800b668:	e7de      	b.n	800b628 <_malloc_r+0xa0>
 800b66a:	bf00      	nop
 800b66c:	2400c9ec 	.word	0x2400c9ec

0800b670 <__ssputs_r>:
 800b670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b674:	688e      	ldr	r6, [r1, #8]
 800b676:	429e      	cmp	r6, r3
 800b678:	4682      	mov	sl, r0
 800b67a:	460c      	mov	r4, r1
 800b67c:	4690      	mov	r8, r2
 800b67e:	461f      	mov	r7, r3
 800b680:	d838      	bhi.n	800b6f4 <__ssputs_r+0x84>
 800b682:	898a      	ldrh	r2, [r1, #12]
 800b684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b688:	d032      	beq.n	800b6f0 <__ssputs_r+0x80>
 800b68a:	6825      	ldr	r5, [r4, #0]
 800b68c:	6909      	ldr	r1, [r1, #16]
 800b68e:	eba5 0901 	sub.w	r9, r5, r1
 800b692:	6965      	ldr	r5, [r4, #20]
 800b694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b69c:	3301      	adds	r3, #1
 800b69e:	444b      	add	r3, r9
 800b6a0:	106d      	asrs	r5, r5, #1
 800b6a2:	429d      	cmp	r5, r3
 800b6a4:	bf38      	it	cc
 800b6a6:	461d      	movcc	r5, r3
 800b6a8:	0553      	lsls	r3, r2, #21
 800b6aa:	d531      	bpl.n	800b710 <__ssputs_r+0xa0>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	f7ff ff6b 	bl	800b588 <_malloc_r>
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	b950      	cbnz	r0, 800b6cc <__ssputs_r+0x5c>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	f8ca 3000 	str.w	r3, [sl]
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6cc:	6921      	ldr	r1, [r4, #16]
 800b6ce:	464a      	mov	r2, r9
 800b6d0:	f7ff fd98 	bl	800b204 <memcpy>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6de:	81a3      	strh	r3, [r4, #12]
 800b6e0:	6126      	str	r6, [r4, #16]
 800b6e2:	6165      	str	r5, [r4, #20]
 800b6e4:	444e      	add	r6, r9
 800b6e6:	eba5 0509 	sub.w	r5, r5, r9
 800b6ea:	6026      	str	r6, [r4, #0]
 800b6ec:	60a5      	str	r5, [r4, #8]
 800b6ee:	463e      	mov	r6, r7
 800b6f0:	42be      	cmp	r6, r7
 800b6f2:	d900      	bls.n	800b6f6 <__ssputs_r+0x86>
 800b6f4:	463e      	mov	r6, r7
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	4641      	mov	r1, r8
 800b6fc:	f000 fefa 	bl	800c4f4 <memmove>
 800b700:	68a3      	ldr	r3, [r4, #8]
 800b702:	1b9b      	subs	r3, r3, r6
 800b704:	60a3      	str	r3, [r4, #8]
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	4433      	add	r3, r6
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7db      	b.n	800b6c8 <__ssputs_r+0x58>
 800b710:	462a      	mov	r2, r5
 800b712:	f000 ff15 	bl	800c540 <_realloc_r>
 800b716:	4606      	mov	r6, r0
 800b718:	2800      	cmp	r0, #0
 800b71a:	d1e1      	bne.n	800b6e0 <__ssputs_r+0x70>
 800b71c:	6921      	ldr	r1, [r4, #16]
 800b71e:	4650      	mov	r0, sl
 800b720:	f7ff fec6 	bl	800b4b0 <_free_r>
 800b724:	e7c7      	b.n	800b6b6 <__ssputs_r+0x46>
	...

0800b728 <_svfiprintf_r>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	4698      	mov	r8, r3
 800b72e:	898b      	ldrh	r3, [r1, #12]
 800b730:	061b      	lsls	r3, r3, #24
 800b732:	b09d      	sub	sp, #116	; 0x74
 800b734:	4607      	mov	r7, r0
 800b736:	460d      	mov	r5, r1
 800b738:	4614      	mov	r4, r2
 800b73a:	d50e      	bpl.n	800b75a <_svfiprintf_r+0x32>
 800b73c:	690b      	ldr	r3, [r1, #16]
 800b73e:	b963      	cbnz	r3, 800b75a <_svfiprintf_r+0x32>
 800b740:	2140      	movs	r1, #64	; 0x40
 800b742:	f7ff ff21 	bl	800b588 <_malloc_r>
 800b746:	6028      	str	r0, [r5, #0]
 800b748:	6128      	str	r0, [r5, #16]
 800b74a:	b920      	cbnz	r0, 800b756 <_svfiprintf_r+0x2e>
 800b74c:	230c      	movs	r3, #12
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	f04f 30ff 	mov.w	r0, #4294967295
 800b754:	e0d1      	b.n	800b8fa <_svfiprintf_r+0x1d2>
 800b756:	2340      	movs	r3, #64	; 0x40
 800b758:	616b      	str	r3, [r5, #20]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9309      	str	r3, [sp, #36]	; 0x24
 800b75e:	2320      	movs	r3, #32
 800b760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b764:	f8cd 800c 	str.w	r8, [sp, #12]
 800b768:	2330      	movs	r3, #48	; 0x30
 800b76a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b914 <_svfiprintf_r+0x1ec>
 800b76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b772:	f04f 0901 	mov.w	r9, #1
 800b776:	4623      	mov	r3, r4
 800b778:	469a      	mov	sl, r3
 800b77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77e:	b10a      	cbz	r2, 800b784 <_svfiprintf_r+0x5c>
 800b780:	2a25      	cmp	r2, #37	; 0x25
 800b782:	d1f9      	bne.n	800b778 <_svfiprintf_r+0x50>
 800b784:	ebba 0b04 	subs.w	fp, sl, r4
 800b788:	d00b      	beq.n	800b7a2 <_svfiprintf_r+0x7a>
 800b78a:	465b      	mov	r3, fp
 800b78c:	4622      	mov	r2, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff ff6d 	bl	800b670 <__ssputs_r>
 800b796:	3001      	adds	r0, #1
 800b798:	f000 80aa 	beq.w	800b8f0 <_svfiprintf_r+0x1c8>
 800b79c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b79e:	445a      	add	r2, fp
 800b7a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80a2 	beq.w	800b8f0 <_svfiprintf_r+0x1c8>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	9307      	str	r3, [sp, #28]
 800b7be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7c4:	4654      	mov	r4, sl
 800b7c6:	2205      	movs	r2, #5
 800b7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7cc:	4851      	ldr	r0, [pc, #324]	; (800b914 <_svfiprintf_r+0x1ec>)
 800b7ce:	f7f4 fdaf 	bl	8000330 <memchr>
 800b7d2:	9a04      	ldr	r2, [sp, #16]
 800b7d4:	b9d8      	cbnz	r0, 800b80e <_svfiprintf_r+0xe6>
 800b7d6:	06d0      	lsls	r0, r2, #27
 800b7d8:	bf44      	itt	mi
 800b7da:	2320      	movmi	r3, #32
 800b7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e0:	0711      	lsls	r1, r2, #28
 800b7e2:	bf44      	itt	mi
 800b7e4:	232b      	movmi	r3, #43	; 0x2b
 800b7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f0:	d015      	beq.n	800b81e <_svfiprintf_r+0xf6>
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	4654      	mov	r4, sl
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f04f 0c0a 	mov.w	ip, #10
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b802:	3b30      	subs	r3, #48	; 0x30
 800b804:	2b09      	cmp	r3, #9
 800b806:	d94e      	bls.n	800b8a6 <_svfiprintf_r+0x17e>
 800b808:	b1b0      	cbz	r0, 800b838 <_svfiprintf_r+0x110>
 800b80a:	9207      	str	r2, [sp, #28]
 800b80c:	e014      	b.n	800b838 <_svfiprintf_r+0x110>
 800b80e:	eba0 0308 	sub.w	r3, r0, r8
 800b812:	fa09 f303 	lsl.w	r3, r9, r3
 800b816:	4313      	orrs	r3, r2
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	46a2      	mov	sl, r4
 800b81c:	e7d2      	b.n	800b7c4 <_svfiprintf_r+0x9c>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	1d19      	adds	r1, r3, #4
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	9103      	str	r1, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfbb      	ittet	lt
 800b82a:	425b      	neglt	r3, r3
 800b82c:	f042 0202 	orrlt.w	r2, r2, #2
 800b830:	9307      	strge	r3, [sp, #28]
 800b832:	9307      	strlt	r3, [sp, #28]
 800b834:	bfb8      	it	lt
 800b836:	9204      	strlt	r2, [sp, #16]
 800b838:	7823      	ldrb	r3, [r4, #0]
 800b83a:	2b2e      	cmp	r3, #46	; 0x2e
 800b83c:	d10c      	bne.n	800b858 <_svfiprintf_r+0x130>
 800b83e:	7863      	ldrb	r3, [r4, #1]
 800b840:	2b2a      	cmp	r3, #42	; 0x2a
 800b842:	d135      	bne.n	800b8b0 <_svfiprintf_r+0x188>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1d1a      	adds	r2, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	9203      	str	r2, [sp, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	bfb8      	it	lt
 800b850:	f04f 33ff 	movlt.w	r3, #4294967295
 800b854:	3402      	adds	r4, #2
 800b856:	9305      	str	r3, [sp, #20]
 800b858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b924 <_svfiprintf_r+0x1fc>
 800b85c:	7821      	ldrb	r1, [r4, #0]
 800b85e:	2203      	movs	r2, #3
 800b860:	4650      	mov	r0, sl
 800b862:	f7f4 fd65 	bl	8000330 <memchr>
 800b866:	b140      	cbz	r0, 800b87a <_svfiprintf_r+0x152>
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	eba0 000a 	sub.w	r0, r0, sl
 800b86e:	fa03 f000 	lsl.w	r0, r3, r0
 800b872:	9b04      	ldr	r3, [sp, #16]
 800b874:	4303      	orrs	r3, r0
 800b876:	3401      	adds	r4, #1
 800b878:	9304      	str	r3, [sp, #16]
 800b87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87e:	4826      	ldr	r0, [pc, #152]	; (800b918 <_svfiprintf_r+0x1f0>)
 800b880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b884:	2206      	movs	r2, #6
 800b886:	f7f4 fd53 	bl	8000330 <memchr>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d038      	beq.n	800b900 <_svfiprintf_r+0x1d8>
 800b88e:	4b23      	ldr	r3, [pc, #140]	; (800b91c <_svfiprintf_r+0x1f4>)
 800b890:	bb1b      	cbnz	r3, 800b8da <_svfiprintf_r+0x1b2>
 800b892:	9b03      	ldr	r3, [sp, #12]
 800b894:	3307      	adds	r3, #7
 800b896:	f023 0307 	bic.w	r3, r3, #7
 800b89a:	3308      	adds	r3, #8
 800b89c:	9303      	str	r3, [sp, #12]
 800b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a0:	4433      	add	r3, r6
 800b8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a4:	e767      	b.n	800b776 <_svfiprintf_r+0x4e>
 800b8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	e7a5      	b.n	800b7fc <_svfiprintf_r+0xd4>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	3401      	adds	r4, #1
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	f04f 0c0a 	mov.w	ip, #10
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8c2:	3a30      	subs	r2, #48	; 0x30
 800b8c4:	2a09      	cmp	r2, #9
 800b8c6:	d903      	bls.n	800b8d0 <_svfiprintf_r+0x1a8>
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0c5      	beq.n	800b858 <_svfiprintf_r+0x130>
 800b8cc:	9105      	str	r1, [sp, #20]
 800b8ce:	e7c3      	b.n	800b858 <_svfiprintf_r+0x130>
 800b8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e7f0      	b.n	800b8bc <_svfiprintf_r+0x194>
 800b8da:	ab03      	add	r3, sp, #12
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	462a      	mov	r2, r5
 800b8e0:	4b0f      	ldr	r3, [pc, #60]	; (800b920 <_svfiprintf_r+0x1f8>)
 800b8e2:	a904      	add	r1, sp, #16
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f3af 8000 	nop.w
 800b8ea:	1c42      	adds	r2, r0, #1
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	d1d6      	bne.n	800b89e <_svfiprintf_r+0x176>
 800b8f0:	89ab      	ldrh	r3, [r5, #12]
 800b8f2:	065b      	lsls	r3, r3, #25
 800b8f4:	f53f af2c 	bmi.w	800b750 <_svfiprintf_r+0x28>
 800b8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8fa:	b01d      	add	sp, #116	; 0x74
 800b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b900:	ab03      	add	r3, sp, #12
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	462a      	mov	r2, r5
 800b906:	4b06      	ldr	r3, [pc, #24]	; (800b920 <_svfiprintf_r+0x1f8>)
 800b908:	a904      	add	r1, sp, #16
 800b90a:	4638      	mov	r0, r7
 800b90c:	f000 f9d4 	bl	800bcb8 <_printf_i>
 800b910:	e7eb      	b.n	800b8ea <_svfiprintf_r+0x1c2>
 800b912:	bf00      	nop
 800b914:	0800c9cd 	.word	0x0800c9cd
 800b918:	0800c9d7 	.word	0x0800c9d7
 800b91c:	00000000 	.word	0x00000000
 800b920:	0800b671 	.word	0x0800b671
 800b924:	0800c9d3 	.word	0x0800c9d3

0800b928 <__sfputc_r>:
 800b928:	6893      	ldr	r3, [r2, #8]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	b410      	push	{r4}
 800b930:	6093      	str	r3, [r2, #8]
 800b932:	da08      	bge.n	800b946 <__sfputc_r+0x1e>
 800b934:	6994      	ldr	r4, [r2, #24]
 800b936:	42a3      	cmp	r3, r4
 800b938:	db01      	blt.n	800b93e <__sfputc_r+0x16>
 800b93a:	290a      	cmp	r1, #10
 800b93c:	d103      	bne.n	800b946 <__sfputc_r+0x1e>
 800b93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b942:	f000 baef 	b.w	800bf24 <__swbuf_r>
 800b946:	6813      	ldr	r3, [r2, #0]
 800b948:	1c58      	adds	r0, r3, #1
 800b94a:	6010      	str	r0, [r2, #0]
 800b94c:	7019      	strb	r1, [r3, #0]
 800b94e:	4608      	mov	r0, r1
 800b950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <__sfputs_r>:
 800b956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b958:	4606      	mov	r6, r0
 800b95a:	460f      	mov	r7, r1
 800b95c:	4614      	mov	r4, r2
 800b95e:	18d5      	adds	r5, r2, r3
 800b960:	42ac      	cmp	r4, r5
 800b962:	d101      	bne.n	800b968 <__sfputs_r+0x12>
 800b964:	2000      	movs	r0, #0
 800b966:	e007      	b.n	800b978 <__sfputs_r+0x22>
 800b968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96c:	463a      	mov	r2, r7
 800b96e:	4630      	mov	r0, r6
 800b970:	f7ff ffda 	bl	800b928 <__sfputc_r>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d1f3      	bne.n	800b960 <__sfputs_r+0xa>
 800b978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b97c <_vfiprintf_r>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	460d      	mov	r5, r1
 800b982:	b09d      	sub	sp, #116	; 0x74
 800b984:	4614      	mov	r4, r2
 800b986:	4698      	mov	r8, r3
 800b988:	4606      	mov	r6, r0
 800b98a:	b118      	cbz	r0, 800b994 <_vfiprintf_r+0x18>
 800b98c:	6983      	ldr	r3, [r0, #24]
 800b98e:	b90b      	cbnz	r3, 800b994 <_vfiprintf_r+0x18>
 800b990:	f000 fcaa 	bl	800c2e8 <__sinit>
 800b994:	4b89      	ldr	r3, [pc, #548]	; (800bbbc <_vfiprintf_r+0x240>)
 800b996:	429d      	cmp	r5, r3
 800b998:	d11b      	bne.n	800b9d2 <_vfiprintf_r+0x56>
 800b99a:	6875      	ldr	r5, [r6, #4]
 800b99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b99e:	07d9      	lsls	r1, r3, #31
 800b9a0:	d405      	bmi.n	800b9ae <_vfiprintf_r+0x32>
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	059a      	lsls	r2, r3, #22
 800b9a6:	d402      	bmi.n	800b9ae <_vfiprintf_r+0x32>
 800b9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9aa:	f000 fd3b 	bl	800c424 <__retarget_lock_acquire_recursive>
 800b9ae:	89ab      	ldrh	r3, [r5, #12]
 800b9b0:	071b      	lsls	r3, r3, #28
 800b9b2:	d501      	bpl.n	800b9b8 <_vfiprintf_r+0x3c>
 800b9b4:	692b      	ldr	r3, [r5, #16]
 800b9b6:	b9eb      	cbnz	r3, 800b9f4 <_vfiprintf_r+0x78>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f000 fb04 	bl	800bfc8 <__swsetup_r>
 800b9c0:	b1c0      	cbz	r0, 800b9f4 <_vfiprintf_r+0x78>
 800b9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c4:	07dc      	lsls	r4, r3, #31
 800b9c6:	d50e      	bpl.n	800b9e6 <_vfiprintf_r+0x6a>
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	b01d      	add	sp, #116	; 0x74
 800b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d2:	4b7b      	ldr	r3, [pc, #492]	; (800bbc0 <_vfiprintf_r+0x244>)
 800b9d4:	429d      	cmp	r5, r3
 800b9d6:	d101      	bne.n	800b9dc <_vfiprintf_r+0x60>
 800b9d8:	68b5      	ldr	r5, [r6, #8]
 800b9da:	e7df      	b.n	800b99c <_vfiprintf_r+0x20>
 800b9dc:	4b79      	ldr	r3, [pc, #484]	; (800bbc4 <_vfiprintf_r+0x248>)
 800b9de:	429d      	cmp	r5, r3
 800b9e0:	bf08      	it	eq
 800b9e2:	68f5      	ldreq	r5, [r6, #12]
 800b9e4:	e7da      	b.n	800b99c <_vfiprintf_r+0x20>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	0598      	lsls	r0, r3, #22
 800b9ea:	d4ed      	bmi.n	800b9c8 <_vfiprintf_r+0x4c>
 800b9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ee:	f000 fd1a 	bl	800c426 <__retarget_lock_release_recursive>
 800b9f2:	e7e9      	b.n	800b9c8 <_vfiprintf_r+0x4c>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f8:	2320      	movs	r3, #32
 800b9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba02:	2330      	movs	r3, #48	; 0x30
 800ba04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbc8 <_vfiprintf_r+0x24c>
 800ba08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba0c:	f04f 0901 	mov.w	r9, #1
 800ba10:	4623      	mov	r3, r4
 800ba12:	469a      	mov	sl, r3
 800ba14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba18:	b10a      	cbz	r2, 800ba1e <_vfiprintf_r+0xa2>
 800ba1a:	2a25      	cmp	r2, #37	; 0x25
 800ba1c:	d1f9      	bne.n	800ba12 <_vfiprintf_r+0x96>
 800ba1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba22:	d00b      	beq.n	800ba3c <_vfiprintf_r+0xc0>
 800ba24:	465b      	mov	r3, fp
 800ba26:	4622      	mov	r2, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ff93 	bl	800b956 <__sfputs_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	f000 80aa 	beq.w	800bb8a <_vfiprintf_r+0x20e>
 800ba36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba38:	445a      	add	r2, fp
 800ba3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 80a2 	beq.w	800bb8a <_vfiprintf_r+0x20e>
 800ba46:	2300      	movs	r3, #0
 800ba48:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba50:	f10a 0a01 	add.w	sl, sl, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	9307      	str	r3, [sp, #28]
 800ba58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2205      	movs	r2, #5
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	4858      	ldr	r0, [pc, #352]	; (800bbc8 <_vfiprintf_r+0x24c>)
 800ba68:	f7f4 fc62 	bl	8000330 <memchr>
 800ba6c:	9a04      	ldr	r2, [sp, #16]
 800ba6e:	b9d8      	cbnz	r0, 800baa8 <_vfiprintf_r+0x12c>
 800ba70:	06d1      	lsls	r1, r2, #27
 800ba72:	bf44      	itt	mi
 800ba74:	2320      	movmi	r3, #32
 800ba76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba7a:	0713      	lsls	r3, r2, #28
 800ba7c:	bf44      	itt	mi
 800ba7e:	232b      	movmi	r3, #43	; 0x2b
 800ba80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba84:	f89a 3000 	ldrb.w	r3, [sl]
 800ba88:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8a:	d015      	beq.n	800bab8 <_vfiprintf_r+0x13c>
 800ba8c:	9a07      	ldr	r2, [sp, #28]
 800ba8e:	4654      	mov	r4, sl
 800ba90:	2000      	movs	r0, #0
 800ba92:	f04f 0c0a 	mov.w	ip, #10
 800ba96:	4621      	mov	r1, r4
 800ba98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9c:	3b30      	subs	r3, #48	; 0x30
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d94e      	bls.n	800bb40 <_vfiprintf_r+0x1c4>
 800baa2:	b1b0      	cbz	r0, 800bad2 <_vfiprintf_r+0x156>
 800baa4:	9207      	str	r2, [sp, #28]
 800baa6:	e014      	b.n	800bad2 <_vfiprintf_r+0x156>
 800baa8:	eba0 0308 	sub.w	r3, r0, r8
 800baac:	fa09 f303 	lsl.w	r3, r9, r3
 800bab0:	4313      	orrs	r3, r2
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	46a2      	mov	sl, r4
 800bab6:	e7d2      	b.n	800ba5e <_vfiprintf_r+0xe2>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	1d19      	adds	r1, r3, #4
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	9103      	str	r1, [sp, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfbb      	ittet	lt
 800bac4:	425b      	neglt	r3, r3
 800bac6:	f042 0202 	orrlt.w	r2, r2, #2
 800baca:	9307      	strge	r3, [sp, #28]
 800bacc:	9307      	strlt	r3, [sp, #28]
 800bace:	bfb8      	it	lt
 800bad0:	9204      	strlt	r2, [sp, #16]
 800bad2:	7823      	ldrb	r3, [r4, #0]
 800bad4:	2b2e      	cmp	r3, #46	; 0x2e
 800bad6:	d10c      	bne.n	800baf2 <_vfiprintf_r+0x176>
 800bad8:	7863      	ldrb	r3, [r4, #1]
 800bada:	2b2a      	cmp	r3, #42	; 0x2a
 800badc:	d135      	bne.n	800bb4a <_vfiprintf_r+0x1ce>
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	1d1a      	adds	r2, r3, #4
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	9203      	str	r2, [sp, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bfb8      	it	lt
 800baea:	f04f 33ff 	movlt.w	r3, #4294967295
 800baee:	3402      	adds	r4, #2
 800baf0:	9305      	str	r3, [sp, #20]
 800baf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbd8 <_vfiprintf_r+0x25c>
 800baf6:	7821      	ldrb	r1, [r4, #0]
 800baf8:	2203      	movs	r2, #3
 800bafa:	4650      	mov	r0, sl
 800bafc:	f7f4 fc18 	bl	8000330 <memchr>
 800bb00:	b140      	cbz	r0, 800bb14 <_vfiprintf_r+0x198>
 800bb02:	2340      	movs	r3, #64	; 0x40
 800bb04:	eba0 000a 	sub.w	r0, r0, sl
 800bb08:	fa03 f000 	lsl.w	r0, r3, r0
 800bb0c:	9b04      	ldr	r3, [sp, #16]
 800bb0e:	4303      	orrs	r3, r0
 800bb10:	3401      	adds	r4, #1
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb18:	482c      	ldr	r0, [pc, #176]	; (800bbcc <_vfiprintf_r+0x250>)
 800bb1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb1e:	2206      	movs	r2, #6
 800bb20:	f7f4 fc06 	bl	8000330 <memchr>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d03f      	beq.n	800bba8 <_vfiprintf_r+0x22c>
 800bb28:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <_vfiprintf_r+0x254>)
 800bb2a:	bb1b      	cbnz	r3, 800bb74 <_vfiprintf_r+0x1f8>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	3307      	adds	r3, #7
 800bb30:	f023 0307 	bic.w	r3, r3, #7
 800bb34:	3308      	adds	r3, #8
 800bb36:	9303      	str	r3, [sp, #12]
 800bb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3a:	443b      	add	r3, r7
 800bb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3e:	e767      	b.n	800ba10 <_vfiprintf_r+0x94>
 800bb40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb44:	460c      	mov	r4, r1
 800bb46:	2001      	movs	r0, #1
 800bb48:	e7a5      	b.n	800ba96 <_vfiprintf_r+0x11a>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	3401      	adds	r4, #1
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	4619      	mov	r1, r3
 800bb52:	f04f 0c0a 	mov.w	ip, #10
 800bb56:	4620      	mov	r0, r4
 800bb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb5c:	3a30      	subs	r2, #48	; 0x30
 800bb5e:	2a09      	cmp	r2, #9
 800bb60:	d903      	bls.n	800bb6a <_vfiprintf_r+0x1ee>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0c5      	beq.n	800baf2 <_vfiprintf_r+0x176>
 800bb66:	9105      	str	r1, [sp, #20]
 800bb68:	e7c3      	b.n	800baf2 <_vfiprintf_r+0x176>
 800bb6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb6e:	4604      	mov	r4, r0
 800bb70:	2301      	movs	r3, #1
 800bb72:	e7f0      	b.n	800bb56 <_vfiprintf_r+0x1da>
 800bb74:	ab03      	add	r3, sp, #12
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	462a      	mov	r2, r5
 800bb7a:	4b16      	ldr	r3, [pc, #88]	; (800bbd4 <_vfiprintf_r+0x258>)
 800bb7c:	a904      	add	r1, sp, #16
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f3af 8000 	nop.w
 800bb84:	4607      	mov	r7, r0
 800bb86:	1c78      	adds	r0, r7, #1
 800bb88:	d1d6      	bne.n	800bb38 <_vfiprintf_r+0x1bc>
 800bb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb8c:	07d9      	lsls	r1, r3, #31
 800bb8e:	d405      	bmi.n	800bb9c <_vfiprintf_r+0x220>
 800bb90:	89ab      	ldrh	r3, [r5, #12]
 800bb92:	059a      	lsls	r2, r3, #22
 800bb94:	d402      	bmi.n	800bb9c <_vfiprintf_r+0x220>
 800bb96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb98:	f000 fc45 	bl	800c426 <__retarget_lock_release_recursive>
 800bb9c:	89ab      	ldrh	r3, [r5, #12]
 800bb9e:	065b      	lsls	r3, r3, #25
 800bba0:	f53f af12 	bmi.w	800b9c8 <_vfiprintf_r+0x4c>
 800bba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bba6:	e711      	b.n	800b9cc <_vfiprintf_r+0x50>
 800bba8:	ab03      	add	r3, sp, #12
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	462a      	mov	r2, r5
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <_vfiprintf_r+0x258>)
 800bbb0:	a904      	add	r1, sp, #16
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f880 	bl	800bcb8 <_printf_i>
 800bbb8:	e7e4      	b.n	800bb84 <_vfiprintf_r+0x208>
 800bbba:	bf00      	nop
 800bbbc:	0800ca20 	.word	0x0800ca20
 800bbc0:	0800ca40 	.word	0x0800ca40
 800bbc4:	0800ca00 	.word	0x0800ca00
 800bbc8:	0800c9cd 	.word	0x0800c9cd
 800bbcc:	0800c9d7 	.word	0x0800c9d7
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	0800b957 	.word	0x0800b957
 800bbd8:	0800c9d3 	.word	0x0800c9d3

0800bbdc <_printf_common>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	4616      	mov	r6, r2
 800bbe2:	4699      	mov	r9, r3
 800bbe4:	688a      	ldr	r2, [r1, #8]
 800bbe6:	690b      	ldr	r3, [r1, #16]
 800bbe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbec:	4293      	cmp	r3, r2
 800bbee:	bfb8      	it	lt
 800bbf0:	4613      	movlt	r3, r2
 800bbf2:	6033      	str	r3, [r6, #0]
 800bbf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	b10a      	cbz	r2, 800bc02 <_printf_common+0x26>
 800bbfe:	3301      	adds	r3, #1
 800bc00:	6033      	str	r3, [r6, #0]
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	0699      	lsls	r1, r3, #26
 800bc06:	bf42      	ittt	mi
 800bc08:	6833      	ldrmi	r3, [r6, #0]
 800bc0a:	3302      	addmi	r3, #2
 800bc0c:	6033      	strmi	r3, [r6, #0]
 800bc0e:	6825      	ldr	r5, [r4, #0]
 800bc10:	f015 0506 	ands.w	r5, r5, #6
 800bc14:	d106      	bne.n	800bc24 <_printf_common+0x48>
 800bc16:	f104 0a19 	add.w	sl, r4, #25
 800bc1a:	68e3      	ldr	r3, [r4, #12]
 800bc1c:	6832      	ldr	r2, [r6, #0]
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	dc26      	bgt.n	800bc72 <_printf_common+0x96>
 800bc24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc28:	1e13      	subs	r3, r2, #0
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	bf18      	it	ne
 800bc2e:	2301      	movne	r3, #1
 800bc30:	0692      	lsls	r2, r2, #26
 800bc32:	d42b      	bmi.n	800bc8c <_printf_common+0xb0>
 800bc34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	47c0      	blx	r8
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d01e      	beq.n	800bc80 <_printf_common+0xa4>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	68e5      	ldr	r5, [r4, #12]
 800bc46:	6832      	ldr	r2, [r6, #0]
 800bc48:	f003 0306 	and.w	r3, r3, #6
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	bf08      	it	eq
 800bc50:	1aad      	subeq	r5, r5, r2
 800bc52:	68a3      	ldr	r3, [r4, #8]
 800bc54:	6922      	ldr	r2, [r4, #16]
 800bc56:	bf0c      	ite	eq
 800bc58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc5c:	2500      	movne	r5, #0
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	bfc4      	itt	gt
 800bc62:	1a9b      	subgt	r3, r3, r2
 800bc64:	18ed      	addgt	r5, r5, r3
 800bc66:	2600      	movs	r6, #0
 800bc68:	341a      	adds	r4, #26
 800bc6a:	42b5      	cmp	r5, r6
 800bc6c:	d11a      	bne.n	800bca4 <_printf_common+0xc8>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e008      	b.n	800bc84 <_printf_common+0xa8>
 800bc72:	2301      	movs	r3, #1
 800bc74:	4652      	mov	r2, sl
 800bc76:	4649      	mov	r1, r9
 800bc78:	4638      	mov	r0, r7
 800bc7a:	47c0      	blx	r8
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d103      	bne.n	800bc88 <_printf_common+0xac>
 800bc80:	f04f 30ff 	mov.w	r0, #4294967295
 800bc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc88:	3501      	adds	r5, #1
 800bc8a:	e7c6      	b.n	800bc1a <_printf_common+0x3e>
 800bc8c:	18e1      	adds	r1, r4, r3
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	2030      	movs	r0, #48	; 0x30
 800bc92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc96:	4422      	add	r2, r4
 800bc98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bca0:	3302      	adds	r3, #2
 800bca2:	e7c7      	b.n	800bc34 <_printf_common+0x58>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4622      	mov	r2, r4
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4638      	mov	r0, r7
 800bcac:	47c0      	blx	r8
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d0e6      	beq.n	800bc80 <_printf_common+0xa4>
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	e7d9      	b.n	800bc6a <_printf_common+0x8e>
	...

0800bcb8 <_printf_i>:
 800bcb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcbc:	7e0f      	ldrb	r7, [r1, #24]
 800bcbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcc0:	2f78      	cmp	r7, #120	; 0x78
 800bcc2:	4691      	mov	r9, r2
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	469a      	mov	sl, r3
 800bcca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcce:	d807      	bhi.n	800bce0 <_printf_i+0x28>
 800bcd0:	2f62      	cmp	r7, #98	; 0x62
 800bcd2:	d80a      	bhi.n	800bcea <_printf_i+0x32>
 800bcd4:	2f00      	cmp	r7, #0
 800bcd6:	f000 80d8 	beq.w	800be8a <_printf_i+0x1d2>
 800bcda:	2f58      	cmp	r7, #88	; 0x58
 800bcdc:	f000 80a3 	beq.w	800be26 <_printf_i+0x16e>
 800bce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bce8:	e03a      	b.n	800bd60 <_printf_i+0xa8>
 800bcea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcee:	2b15      	cmp	r3, #21
 800bcf0:	d8f6      	bhi.n	800bce0 <_printf_i+0x28>
 800bcf2:	a101      	add	r1, pc, #4	; (adr r1, 800bcf8 <_printf_i+0x40>)
 800bcf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcf8:	0800bd51 	.word	0x0800bd51
 800bcfc:	0800bd65 	.word	0x0800bd65
 800bd00:	0800bce1 	.word	0x0800bce1
 800bd04:	0800bce1 	.word	0x0800bce1
 800bd08:	0800bce1 	.word	0x0800bce1
 800bd0c:	0800bce1 	.word	0x0800bce1
 800bd10:	0800bd65 	.word	0x0800bd65
 800bd14:	0800bce1 	.word	0x0800bce1
 800bd18:	0800bce1 	.word	0x0800bce1
 800bd1c:	0800bce1 	.word	0x0800bce1
 800bd20:	0800bce1 	.word	0x0800bce1
 800bd24:	0800be71 	.word	0x0800be71
 800bd28:	0800bd95 	.word	0x0800bd95
 800bd2c:	0800be53 	.word	0x0800be53
 800bd30:	0800bce1 	.word	0x0800bce1
 800bd34:	0800bce1 	.word	0x0800bce1
 800bd38:	0800be93 	.word	0x0800be93
 800bd3c:	0800bce1 	.word	0x0800bce1
 800bd40:	0800bd95 	.word	0x0800bd95
 800bd44:	0800bce1 	.word	0x0800bce1
 800bd48:	0800bce1 	.word	0x0800bce1
 800bd4c:	0800be5b 	.word	0x0800be5b
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	1d1a      	adds	r2, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	602a      	str	r2, [r5, #0]
 800bd58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd60:	2301      	movs	r3, #1
 800bd62:	e0a3      	b.n	800beac <_printf_i+0x1f4>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	6829      	ldr	r1, [r5, #0]
 800bd68:	0606      	lsls	r6, r0, #24
 800bd6a:	f101 0304 	add.w	r3, r1, #4
 800bd6e:	d50a      	bpl.n	800bd86 <_printf_i+0xce>
 800bd70:	680e      	ldr	r6, [r1, #0]
 800bd72:	602b      	str	r3, [r5, #0]
 800bd74:	2e00      	cmp	r6, #0
 800bd76:	da03      	bge.n	800bd80 <_printf_i+0xc8>
 800bd78:	232d      	movs	r3, #45	; 0x2d
 800bd7a:	4276      	negs	r6, r6
 800bd7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd80:	485e      	ldr	r0, [pc, #376]	; (800befc <_printf_i+0x244>)
 800bd82:	230a      	movs	r3, #10
 800bd84:	e019      	b.n	800bdba <_printf_i+0x102>
 800bd86:	680e      	ldr	r6, [r1, #0]
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd8e:	bf18      	it	ne
 800bd90:	b236      	sxthne	r6, r6
 800bd92:	e7ef      	b.n	800bd74 <_printf_i+0xbc>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	6820      	ldr	r0, [r4, #0]
 800bd98:	1d19      	adds	r1, r3, #4
 800bd9a:	6029      	str	r1, [r5, #0]
 800bd9c:	0601      	lsls	r1, r0, #24
 800bd9e:	d501      	bpl.n	800bda4 <_printf_i+0xec>
 800bda0:	681e      	ldr	r6, [r3, #0]
 800bda2:	e002      	b.n	800bdaa <_printf_i+0xf2>
 800bda4:	0646      	lsls	r6, r0, #25
 800bda6:	d5fb      	bpl.n	800bda0 <_printf_i+0xe8>
 800bda8:	881e      	ldrh	r6, [r3, #0]
 800bdaa:	4854      	ldr	r0, [pc, #336]	; (800befc <_printf_i+0x244>)
 800bdac:	2f6f      	cmp	r7, #111	; 0x6f
 800bdae:	bf0c      	ite	eq
 800bdb0:	2308      	moveq	r3, #8
 800bdb2:	230a      	movne	r3, #10
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdba:	6865      	ldr	r5, [r4, #4]
 800bdbc:	60a5      	str	r5, [r4, #8]
 800bdbe:	2d00      	cmp	r5, #0
 800bdc0:	bfa2      	ittt	ge
 800bdc2:	6821      	ldrge	r1, [r4, #0]
 800bdc4:	f021 0104 	bicge.w	r1, r1, #4
 800bdc8:	6021      	strge	r1, [r4, #0]
 800bdca:	b90e      	cbnz	r6, 800bdd0 <_printf_i+0x118>
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	d04d      	beq.n	800be6c <_printf_i+0x1b4>
 800bdd0:	4615      	mov	r5, r2
 800bdd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdd6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdda:	5dc7      	ldrb	r7, [r0, r7]
 800bddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bde0:	4637      	mov	r7, r6
 800bde2:	42bb      	cmp	r3, r7
 800bde4:	460e      	mov	r6, r1
 800bde6:	d9f4      	bls.n	800bdd2 <_printf_i+0x11a>
 800bde8:	2b08      	cmp	r3, #8
 800bdea:	d10b      	bne.n	800be04 <_printf_i+0x14c>
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	07de      	lsls	r6, r3, #31
 800bdf0:	d508      	bpl.n	800be04 <_printf_i+0x14c>
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	6861      	ldr	r1, [r4, #4]
 800bdf6:	4299      	cmp	r1, r3
 800bdf8:	bfde      	ittt	le
 800bdfa:	2330      	movle	r3, #48	; 0x30
 800bdfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be04:	1b52      	subs	r2, r2, r5
 800be06:	6122      	str	r2, [r4, #16]
 800be08:	f8cd a000 	str.w	sl, [sp]
 800be0c:	464b      	mov	r3, r9
 800be0e:	aa03      	add	r2, sp, #12
 800be10:	4621      	mov	r1, r4
 800be12:	4640      	mov	r0, r8
 800be14:	f7ff fee2 	bl	800bbdc <_printf_common>
 800be18:	3001      	adds	r0, #1
 800be1a:	d14c      	bne.n	800beb6 <_printf_i+0x1fe>
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	b004      	add	sp, #16
 800be22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be26:	4835      	ldr	r0, [pc, #212]	; (800befc <_printf_i+0x244>)
 800be28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be2c:	6829      	ldr	r1, [r5, #0]
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	f851 6b04 	ldr.w	r6, [r1], #4
 800be34:	6029      	str	r1, [r5, #0]
 800be36:	061d      	lsls	r5, r3, #24
 800be38:	d514      	bpl.n	800be64 <_printf_i+0x1ac>
 800be3a:	07df      	lsls	r7, r3, #31
 800be3c:	bf44      	itt	mi
 800be3e:	f043 0320 	orrmi.w	r3, r3, #32
 800be42:	6023      	strmi	r3, [r4, #0]
 800be44:	b91e      	cbnz	r6, 800be4e <_printf_i+0x196>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	f023 0320 	bic.w	r3, r3, #32
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	2310      	movs	r3, #16
 800be50:	e7b0      	b.n	800bdb4 <_printf_i+0xfc>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	f043 0320 	orr.w	r3, r3, #32
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	2378      	movs	r3, #120	; 0x78
 800be5c:	4828      	ldr	r0, [pc, #160]	; (800bf00 <_printf_i+0x248>)
 800be5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be62:	e7e3      	b.n	800be2c <_printf_i+0x174>
 800be64:	0659      	lsls	r1, r3, #25
 800be66:	bf48      	it	mi
 800be68:	b2b6      	uxthmi	r6, r6
 800be6a:	e7e6      	b.n	800be3a <_printf_i+0x182>
 800be6c:	4615      	mov	r5, r2
 800be6e:	e7bb      	b.n	800bde8 <_printf_i+0x130>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	6826      	ldr	r6, [r4, #0]
 800be74:	6961      	ldr	r1, [r4, #20]
 800be76:	1d18      	adds	r0, r3, #4
 800be78:	6028      	str	r0, [r5, #0]
 800be7a:	0635      	lsls	r5, r6, #24
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	d501      	bpl.n	800be84 <_printf_i+0x1cc>
 800be80:	6019      	str	r1, [r3, #0]
 800be82:	e002      	b.n	800be8a <_printf_i+0x1d2>
 800be84:	0670      	lsls	r0, r6, #25
 800be86:	d5fb      	bpl.n	800be80 <_printf_i+0x1c8>
 800be88:	8019      	strh	r1, [r3, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	6123      	str	r3, [r4, #16]
 800be8e:	4615      	mov	r5, r2
 800be90:	e7ba      	b.n	800be08 <_printf_i+0x150>
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	1d1a      	adds	r2, r3, #4
 800be96:	602a      	str	r2, [r5, #0]
 800be98:	681d      	ldr	r5, [r3, #0]
 800be9a:	6862      	ldr	r2, [r4, #4]
 800be9c:	2100      	movs	r1, #0
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7f4 fa46 	bl	8000330 <memchr>
 800bea4:	b108      	cbz	r0, 800beaa <_printf_i+0x1f2>
 800bea6:	1b40      	subs	r0, r0, r5
 800bea8:	6060      	str	r0, [r4, #4]
 800beaa:	6863      	ldr	r3, [r4, #4]
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	2300      	movs	r3, #0
 800beb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beb4:	e7a8      	b.n	800be08 <_printf_i+0x150>
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	462a      	mov	r2, r5
 800beba:	4649      	mov	r1, r9
 800bebc:	4640      	mov	r0, r8
 800bebe:	47d0      	blx	sl
 800bec0:	3001      	adds	r0, #1
 800bec2:	d0ab      	beq.n	800be1c <_printf_i+0x164>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	079b      	lsls	r3, r3, #30
 800bec8:	d413      	bmi.n	800bef2 <_printf_i+0x23a>
 800beca:	68e0      	ldr	r0, [r4, #12]
 800becc:	9b03      	ldr	r3, [sp, #12]
 800bece:	4298      	cmp	r0, r3
 800bed0:	bfb8      	it	lt
 800bed2:	4618      	movlt	r0, r3
 800bed4:	e7a4      	b.n	800be20 <_printf_i+0x168>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4632      	mov	r2, r6
 800beda:	4649      	mov	r1, r9
 800bedc:	4640      	mov	r0, r8
 800bede:	47d0      	blx	sl
 800bee0:	3001      	adds	r0, #1
 800bee2:	d09b      	beq.n	800be1c <_printf_i+0x164>
 800bee4:	3501      	adds	r5, #1
 800bee6:	68e3      	ldr	r3, [r4, #12]
 800bee8:	9903      	ldr	r1, [sp, #12]
 800beea:	1a5b      	subs	r3, r3, r1
 800beec:	42ab      	cmp	r3, r5
 800beee:	dcf2      	bgt.n	800bed6 <_printf_i+0x21e>
 800bef0:	e7eb      	b.n	800beca <_printf_i+0x212>
 800bef2:	2500      	movs	r5, #0
 800bef4:	f104 0619 	add.w	r6, r4, #25
 800bef8:	e7f5      	b.n	800bee6 <_printf_i+0x22e>
 800befa:	bf00      	nop
 800befc:	0800c9de 	.word	0x0800c9de
 800bf00:	0800c9ef 	.word	0x0800c9ef

0800bf04 <_sbrk_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4d06      	ldr	r5, [pc, #24]	; (800bf20 <_sbrk_r+0x1c>)
 800bf08:	2300      	movs	r3, #0
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4608      	mov	r0, r1
 800bf0e:	602b      	str	r3, [r5, #0]
 800bf10:	f7f5 ff8c 	bl	8001e2c <_sbrk>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d102      	bne.n	800bf1e <_sbrk_r+0x1a>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	b103      	cbz	r3, 800bf1e <_sbrk_r+0x1a>
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	2400c9f8 	.word	0x2400c9f8

0800bf24 <__swbuf_r>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	460e      	mov	r6, r1
 800bf28:	4614      	mov	r4, r2
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	b118      	cbz	r0, 800bf36 <__swbuf_r+0x12>
 800bf2e:	6983      	ldr	r3, [r0, #24]
 800bf30:	b90b      	cbnz	r3, 800bf36 <__swbuf_r+0x12>
 800bf32:	f000 f9d9 	bl	800c2e8 <__sinit>
 800bf36:	4b21      	ldr	r3, [pc, #132]	; (800bfbc <__swbuf_r+0x98>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	d12b      	bne.n	800bf94 <__swbuf_r+0x70>
 800bf3c:	686c      	ldr	r4, [r5, #4]
 800bf3e:	69a3      	ldr	r3, [r4, #24]
 800bf40:	60a3      	str	r3, [r4, #8]
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	071a      	lsls	r2, r3, #28
 800bf46:	d52f      	bpl.n	800bfa8 <__swbuf_r+0x84>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	b36b      	cbz	r3, 800bfa8 <__swbuf_r+0x84>
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	6820      	ldr	r0, [r4, #0]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	6963      	ldr	r3, [r4, #20]
 800bf54:	b2f6      	uxtb	r6, r6
 800bf56:	4283      	cmp	r3, r0
 800bf58:	4637      	mov	r7, r6
 800bf5a:	dc04      	bgt.n	800bf66 <__swbuf_r+0x42>
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f000 f92e 	bl	800c1c0 <_fflush_r>
 800bf64:	bb30      	cbnz	r0, 800bfb4 <__swbuf_r+0x90>
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	60a3      	str	r3, [r4, #8]
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	6022      	str	r2, [r4, #0]
 800bf72:	701e      	strb	r6, [r3, #0]
 800bf74:	6963      	ldr	r3, [r4, #20]
 800bf76:	3001      	adds	r0, #1
 800bf78:	4283      	cmp	r3, r0
 800bf7a:	d004      	beq.n	800bf86 <__swbuf_r+0x62>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	07db      	lsls	r3, r3, #31
 800bf80:	d506      	bpl.n	800bf90 <__swbuf_r+0x6c>
 800bf82:	2e0a      	cmp	r6, #10
 800bf84:	d104      	bne.n	800bf90 <__swbuf_r+0x6c>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f000 f919 	bl	800c1c0 <_fflush_r>
 800bf8e:	b988      	cbnz	r0, 800bfb4 <__swbuf_r+0x90>
 800bf90:	4638      	mov	r0, r7
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <__swbuf_r+0x9c>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d101      	bne.n	800bf9e <__swbuf_r+0x7a>
 800bf9a:	68ac      	ldr	r4, [r5, #8]
 800bf9c:	e7cf      	b.n	800bf3e <__swbuf_r+0x1a>
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <__swbuf_r+0xa0>)
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	bf08      	it	eq
 800bfa4:	68ec      	ldreq	r4, [r5, #12]
 800bfa6:	e7ca      	b.n	800bf3e <__swbuf_r+0x1a>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 f80c 	bl	800bfc8 <__swsetup_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0cb      	beq.n	800bf4c <__swbuf_r+0x28>
 800bfb4:	f04f 37ff 	mov.w	r7, #4294967295
 800bfb8:	e7ea      	b.n	800bf90 <__swbuf_r+0x6c>
 800bfba:	bf00      	nop
 800bfbc:	0800ca20 	.word	0x0800ca20
 800bfc0:	0800ca40 	.word	0x0800ca40
 800bfc4:	0800ca00 	.word	0x0800ca00

0800bfc8 <__swsetup_r>:
 800bfc8:	4b32      	ldr	r3, [pc, #200]	; (800c094 <__swsetup_r+0xcc>)
 800bfca:	b570      	push	{r4, r5, r6, lr}
 800bfcc:	681d      	ldr	r5, [r3, #0]
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	b125      	cbz	r5, 800bfde <__swsetup_r+0x16>
 800bfd4:	69ab      	ldr	r3, [r5, #24]
 800bfd6:	b913      	cbnz	r3, 800bfde <__swsetup_r+0x16>
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 f985 	bl	800c2e8 <__sinit>
 800bfde:	4b2e      	ldr	r3, [pc, #184]	; (800c098 <__swsetup_r+0xd0>)
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	d10f      	bne.n	800c004 <__swsetup_r+0x3c>
 800bfe4:	686c      	ldr	r4, [r5, #4]
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfec:	0719      	lsls	r1, r3, #28
 800bfee:	d42c      	bmi.n	800c04a <__swsetup_r+0x82>
 800bff0:	06dd      	lsls	r5, r3, #27
 800bff2:	d411      	bmi.n	800c018 <__swsetup_r+0x50>
 800bff4:	2309      	movs	r3, #9
 800bff6:	6033      	str	r3, [r6, #0]
 800bff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	e03e      	b.n	800c082 <__swsetup_r+0xba>
 800c004:	4b25      	ldr	r3, [pc, #148]	; (800c09c <__swsetup_r+0xd4>)
 800c006:	429c      	cmp	r4, r3
 800c008:	d101      	bne.n	800c00e <__swsetup_r+0x46>
 800c00a:	68ac      	ldr	r4, [r5, #8]
 800c00c:	e7eb      	b.n	800bfe6 <__swsetup_r+0x1e>
 800c00e:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <__swsetup_r+0xd8>)
 800c010:	429c      	cmp	r4, r3
 800c012:	bf08      	it	eq
 800c014:	68ec      	ldreq	r4, [r5, #12]
 800c016:	e7e6      	b.n	800bfe6 <__swsetup_r+0x1e>
 800c018:	0758      	lsls	r0, r3, #29
 800c01a:	d512      	bpl.n	800c042 <__swsetup_r+0x7a>
 800c01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c01e:	b141      	cbz	r1, 800c032 <__swsetup_r+0x6a>
 800c020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c024:	4299      	cmp	r1, r3
 800c026:	d002      	beq.n	800c02e <__swsetup_r+0x66>
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff fa41 	bl	800b4b0 <_free_r>
 800c02e:	2300      	movs	r3, #0
 800c030:	6363      	str	r3, [r4, #52]	; 0x34
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	2300      	movs	r3, #0
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f043 0308 	orr.w	r3, r3, #8
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	b94b      	cbnz	r3, 800c062 <__swsetup_r+0x9a>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c058:	d003      	beq.n	800c062 <__swsetup_r+0x9a>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f000 fa09 	bl	800c474 <__smakebuf_r>
 800c062:	89a0      	ldrh	r0, [r4, #12]
 800c064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c068:	f010 0301 	ands.w	r3, r0, #1
 800c06c:	d00a      	beq.n	800c084 <__swsetup_r+0xbc>
 800c06e:	2300      	movs	r3, #0
 800c070:	60a3      	str	r3, [r4, #8]
 800c072:	6963      	ldr	r3, [r4, #20]
 800c074:	425b      	negs	r3, r3
 800c076:	61a3      	str	r3, [r4, #24]
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	b943      	cbnz	r3, 800c08e <__swsetup_r+0xc6>
 800c07c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c080:	d1ba      	bne.n	800bff8 <__swsetup_r+0x30>
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	0781      	lsls	r1, r0, #30
 800c086:	bf58      	it	pl
 800c088:	6963      	ldrpl	r3, [r4, #20]
 800c08a:	60a3      	str	r3, [r4, #8]
 800c08c:	e7f4      	b.n	800c078 <__swsetup_r+0xb0>
 800c08e:	2000      	movs	r0, #0
 800c090:	e7f7      	b.n	800c082 <__swsetup_r+0xba>
 800c092:	bf00      	nop
 800c094:	240001a0 	.word	0x240001a0
 800c098:	0800ca20 	.word	0x0800ca20
 800c09c:	0800ca40 	.word	0x0800ca40
 800c0a0:	0800ca00 	.word	0x0800ca00

0800c0a4 <abort>:
 800c0a4:	b508      	push	{r3, lr}
 800c0a6:	2006      	movs	r0, #6
 800c0a8:	f000 faa2 	bl	800c5f0 <raise>
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	f7f5 fe45 	bl	8001d3c <_exit>
	...

0800c0b4 <__sflush_r>:
 800c0b4:	898a      	ldrh	r2, [r1, #12]
 800c0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	0710      	lsls	r0, r2, #28
 800c0be:	460c      	mov	r4, r1
 800c0c0:	d458      	bmi.n	800c174 <__sflush_r+0xc0>
 800c0c2:	684b      	ldr	r3, [r1, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dc05      	bgt.n	800c0d4 <__sflush_r+0x20>
 800c0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dc02      	bgt.n	800c0d4 <__sflush_r+0x20>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d0f9      	beq.n	800c0ce <__sflush_r+0x1a>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0e0:	682f      	ldr	r7, [r5, #0]
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	d032      	beq.n	800c14c <__sflush_r+0x98>
 800c0e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	075a      	lsls	r2, r3, #29
 800c0ec:	d505      	bpl.n	800c0fa <__sflush_r+0x46>
 800c0ee:	6863      	ldr	r3, [r4, #4]
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0f4:	b10b      	cbz	r3, 800c0fa <__sflush_r+0x46>
 800c0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0f8:	1ac0      	subs	r0, r0, r3
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c100:	6a21      	ldr	r1, [r4, #32]
 800c102:	4628      	mov	r0, r5
 800c104:	47b0      	blx	r6
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	d106      	bne.n	800c11a <__sflush_r+0x66>
 800c10c:	6829      	ldr	r1, [r5, #0]
 800c10e:	291d      	cmp	r1, #29
 800c110:	d82c      	bhi.n	800c16c <__sflush_r+0xb8>
 800c112:	4a2a      	ldr	r2, [pc, #168]	; (800c1bc <__sflush_r+0x108>)
 800c114:	40ca      	lsrs	r2, r1
 800c116:	07d6      	lsls	r6, r2, #31
 800c118:	d528      	bpl.n	800c16c <__sflush_r+0xb8>
 800c11a:	2200      	movs	r2, #0
 800c11c:	6062      	str	r2, [r4, #4]
 800c11e:	04d9      	lsls	r1, r3, #19
 800c120:	6922      	ldr	r2, [r4, #16]
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	d504      	bpl.n	800c130 <__sflush_r+0x7c>
 800c126:	1c42      	adds	r2, r0, #1
 800c128:	d101      	bne.n	800c12e <__sflush_r+0x7a>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	b903      	cbnz	r3, 800c130 <__sflush_r+0x7c>
 800c12e:	6560      	str	r0, [r4, #84]	; 0x54
 800c130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c132:	602f      	str	r7, [r5, #0]
 800c134:	2900      	cmp	r1, #0
 800c136:	d0ca      	beq.n	800c0ce <__sflush_r+0x1a>
 800c138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d002      	beq.n	800c146 <__sflush_r+0x92>
 800c140:	4628      	mov	r0, r5
 800c142:	f7ff f9b5 	bl	800b4b0 <_free_r>
 800c146:	2000      	movs	r0, #0
 800c148:	6360      	str	r0, [r4, #52]	; 0x34
 800c14a:	e7c1      	b.n	800c0d0 <__sflush_r+0x1c>
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	2301      	movs	r3, #1
 800c150:	4628      	mov	r0, r5
 800c152:	47b0      	blx	r6
 800c154:	1c41      	adds	r1, r0, #1
 800c156:	d1c7      	bne.n	800c0e8 <__sflush_r+0x34>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0c4      	beq.n	800c0e8 <__sflush_r+0x34>
 800c15e:	2b1d      	cmp	r3, #29
 800c160:	d001      	beq.n	800c166 <__sflush_r+0xb2>
 800c162:	2b16      	cmp	r3, #22
 800c164:	d101      	bne.n	800c16a <__sflush_r+0xb6>
 800c166:	602f      	str	r7, [r5, #0]
 800c168:	e7b1      	b.n	800c0ce <__sflush_r+0x1a>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	e7ad      	b.n	800c0d0 <__sflush_r+0x1c>
 800c174:	690f      	ldr	r7, [r1, #16]
 800c176:	2f00      	cmp	r7, #0
 800c178:	d0a9      	beq.n	800c0ce <__sflush_r+0x1a>
 800c17a:	0793      	lsls	r3, r2, #30
 800c17c:	680e      	ldr	r6, [r1, #0]
 800c17e:	bf08      	it	eq
 800c180:	694b      	ldreq	r3, [r1, #20]
 800c182:	600f      	str	r7, [r1, #0]
 800c184:	bf18      	it	ne
 800c186:	2300      	movne	r3, #0
 800c188:	eba6 0807 	sub.w	r8, r6, r7
 800c18c:	608b      	str	r3, [r1, #8]
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	dd9c      	ble.n	800c0ce <__sflush_r+0x1a>
 800c194:	6a21      	ldr	r1, [r4, #32]
 800c196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c198:	4643      	mov	r3, r8
 800c19a:	463a      	mov	r2, r7
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b0      	blx	r6
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	dc06      	bgt.n	800c1b2 <__sflush_r+0xfe>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1aa:	81a3      	strh	r3, [r4, #12]
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	e78e      	b.n	800c0d0 <__sflush_r+0x1c>
 800c1b2:	4407      	add	r7, r0
 800c1b4:	eba8 0800 	sub.w	r8, r8, r0
 800c1b8:	e7e9      	b.n	800c18e <__sflush_r+0xda>
 800c1ba:	bf00      	nop
 800c1bc:	20400001 	.word	0x20400001

0800c1c0 <_fflush_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	690b      	ldr	r3, [r1, #16]
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	b913      	cbnz	r3, 800c1d0 <_fflush_r+0x10>
 800c1ca:	2500      	movs	r5, #0
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	b118      	cbz	r0, 800c1da <_fflush_r+0x1a>
 800c1d2:	6983      	ldr	r3, [r0, #24]
 800c1d4:	b90b      	cbnz	r3, 800c1da <_fflush_r+0x1a>
 800c1d6:	f000 f887 	bl	800c2e8 <__sinit>
 800c1da:	4b14      	ldr	r3, [pc, #80]	; (800c22c <_fflush_r+0x6c>)
 800c1dc:	429c      	cmp	r4, r3
 800c1de:	d11b      	bne.n	800c218 <_fflush_r+0x58>
 800c1e0:	686c      	ldr	r4, [r5, #4]
 800c1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d0ef      	beq.n	800c1ca <_fflush_r+0xa>
 800c1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1ec:	07d0      	lsls	r0, r2, #31
 800c1ee:	d404      	bmi.n	800c1fa <_fflush_r+0x3a>
 800c1f0:	0599      	lsls	r1, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_fflush_r+0x3a>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1f6:	f000 f915 	bl	800c424 <__retarget_lock_acquire_recursive>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	f7ff ff59 	bl	800c0b4 <__sflush_r>
 800c202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c204:	07da      	lsls	r2, r3, #31
 800c206:	4605      	mov	r5, r0
 800c208:	d4e0      	bmi.n	800c1cc <_fflush_r+0xc>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	059b      	lsls	r3, r3, #22
 800c20e:	d4dd      	bmi.n	800c1cc <_fflush_r+0xc>
 800c210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c212:	f000 f908 	bl	800c426 <__retarget_lock_release_recursive>
 800c216:	e7d9      	b.n	800c1cc <_fflush_r+0xc>
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_fflush_r+0x70>)
 800c21a:	429c      	cmp	r4, r3
 800c21c:	d101      	bne.n	800c222 <_fflush_r+0x62>
 800c21e:	68ac      	ldr	r4, [r5, #8]
 800c220:	e7df      	b.n	800c1e2 <_fflush_r+0x22>
 800c222:	4b04      	ldr	r3, [pc, #16]	; (800c234 <_fflush_r+0x74>)
 800c224:	429c      	cmp	r4, r3
 800c226:	bf08      	it	eq
 800c228:	68ec      	ldreq	r4, [r5, #12]
 800c22a:	e7da      	b.n	800c1e2 <_fflush_r+0x22>
 800c22c:	0800ca20 	.word	0x0800ca20
 800c230:	0800ca40 	.word	0x0800ca40
 800c234:	0800ca00 	.word	0x0800ca00

0800c238 <std>:
 800c238:	2300      	movs	r3, #0
 800c23a:	b510      	push	{r4, lr}
 800c23c:	4604      	mov	r4, r0
 800c23e:	e9c0 3300 	strd	r3, r3, [r0]
 800c242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c246:	6083      	str	r3, [r0, #8]
 800c248:	8181      	strh	r1, [r0, #12]
 800c24a:	6643      	str	r3, [r0, #100]	; 0x64
 800c24c:	81c2      	strh	r2, [r0, #14]
 800c24e:	6183      	str	r3, [r0, #24]
 800c250:	4619      	mov	r1, r3
 800c252:	2208      	movs	r2, #8
 800c254:	305c      	adds	r0, #92	; 0x5c
 800c256:	f7fe ffe3 	bl	800b220 <memset>
 800c25a:	4b05      	ldr	r3, [pc, #20]	; (800c270 <std+0x38>)
 800c25c:	6263      	str	r3, [r4, #36]	; 0x24
 800c25e:	4b05      	ldr	r3, [pc, #20]	; (800c274 <std+0x3c>)
 800c260:	62a3      	str	r3, [r4, #40]	; 0x28
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <std+0x40>)
 800c264:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c266:	4b05      	ldr	r3, [pc, #20]	; (800c27c <std+0x44>)
 800c268:	6224      	str	r4, [r4, #32]
 800c26a:	6323      	str	r3, [r4, #48]	; 0x30
 800c26c:	bd10      	pop	{r4, pc}
 800c26e:	bf00      	nop
 800c270:	0800c629 	.word	0x0800c629
 800c274:	0800c64b 	.word	0x0800c64b
 800c278:	0800c683 	.word	0x0800c683
 800c27c:	0800c6a7 	.word	0x0800c6a7

0800c280 <_cleanup_r>:
 800c280:	4901      	ldr	r1, [pc, #4]	; (800c288 <_cleanup_r+0x8>)
 800c282:	f000 b8af 	b.w	800c3e4 <_fwalk_reent>
 800c286:	bf00      	nop
 800c288:	0800c1c1 	.word	0x0800c1c1

0800c28c <__sfmoreglue>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	2268      	movs	r2, #104	; 0x68
 800c290:	1e4d      	subs	r5, r1, #1
 800c292:	4355      	muls	r5, r2
 800c294:	460e      	mov	r6, r1
 800c296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c29a:	f7ff f975 	bl	800b588 <_malloc_r>
 800c29e:	4604      	mov	r4, r0
 800c2a0:	b140      	cbz	r0, 800c2b4 <__sfmoreglue+0x28>
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	e9c0 1600 	strd	r1, r6, [r0]
 800c2a8:	300c      	adds	r0, #12
 800c2aa:	60a0      	str	r0, [r4, #8]
 800c2ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2b0:	f7fe ffb6 	bl	800b220 <memset>
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}

0800c2b8 <__sfp_lock_acquire>:
 800c2b8:	4801      	ldr	r0, [pc, #4]	; (800c2c0 <__sfp_lock_acquire+0x8>)
 800c2ba:	f000 b8b3 	b.w	800c424 <__retarget_lock_acquire_recursive>
 800c2be:	bf00      	nop
 800c2c0:	2400c9f5 	.word	0x2400c9f5

0800c2c4 <__sfp_lock_release>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	; (800c2cc <__sfp_lock_release+0x8>)
 800c2c6:	f000 b8ae 	b.w	800c426 <__retarget_lock_release_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	2400c9f5 	.word	0x2400c9f5

0800c2d0 <__sinit_lock_acquire>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	; (800c2d8 <__sinit_lock_acquire+0x8>)
 800c2d2:	f000 b8a7 	b.w	800c424 <__retarget_lock_acquire_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	2400c9f6 	.word	0x2400c9f6

0800c2dc <__sinit_lock_release>:
 800c2dc:	4801      	ldr	r0, [pc, #4]	; (800c2e4 <__sinit_lock_release+0x8>)
 800c2de:	f000 b8a2 	b.w	800c426 <__retarget_lock_release_recursive>
 800c2e2:	bf00      	nop
 800c2e4:	2400c9f6 	.word	0x2400c9f6

0800c2e8 <__sinit>:
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	f7ff fff0 	bl	800c2d0 <__sinit_lock_acquire>
 800c2f0:	69a3      	ldr	r3, [r4, #24]
 800c2f2:	b11b      	cbz	r3, 800c2fc <__sinit+0x14>
 800c2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f8:	f7ff bff0 	b.w	800c2dc <__sinit_lock_release>
 800c2fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c300:	6523      	str	r3, [r4, #80]	; 0x50
 800c302:	4b13      	ldr	r3, [pc, #76]	; (800c350 <__sinit+0x68>)
 800c304:	4a13      	ldr	r2, [pc, #76]	; (800c354 <__sinit+0x6c>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	62a2      	str	r2, [r4, #40]	; 0x28
 800c30a:	42a3      	cmp	r3, r4
 800c30c:	bf04      	itt	eq
 800c30e:	2301      	moveq	r3, #1
 800c310:	61a3      	streq	r3, [r4, #24]
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f820 	bl	800c358 <__sfp>
 800c318:	6060      	str	r0, [r4, #4]
 800c31a:	4620      	mov	r0, r4
 800c31c:	f000 f81c 	bl	800c358 <__sfp>
 800c320:	60a0      	str	r0, [r4, #8]
 800c322:	4620      	mov	r0, r4
 800c324:	f000 f818 	bl	800c358 <__sfp>
 800c328:	2200      	movs	r2, #0
 800c32a:	60e0      	str	r0, [r4, #12]
 800c32c:	2104      	movs	r1, #4
 800c32e:	6860      	ldr	r0, [r4, #4]
 800c330:	f7ff ff82 	bl	800c238 <std>
 800c334:	68a0      	ldr	r0, [r4, #8]
 800c336:	2201      	movs	r2, #1
 800c338:	2109      	movs	r1, #9
 800c33a:	f7ff ff7d 	bl	800c238 <std>
 800c33e:	68e0      	ldr	r0, [r4, #12]
 800c340:	2202      	movs	r2, #2
 800c342:	2112      	movs	r1, #18
 800c344:	f7ff ff78 	bl	800c238 <std>
 800c348:	2301      	movs	r3, #1
 800c34a:	61a3      	str	r3, [r4, #24]
 800c34c:	e7d2      	b.n	800c2f4 <__sinit+0xc>
 800c34e:	bf00      	nop
 800c350:	0800c818 	.word	0x0800c818
 800c354:	0800c281 	.word	0x0800c281

0800c358 <__sfp>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	4607      	mov	r7, r0
 800c35c:	f7ff ffac 	bl	800c2b8 <__sfp_lock_acquire>
 800c360:	4b1e      	ldr	r3, [pc, #120]	; (800c3dc <__sfp+0x84>)
 800c362:	681e      	ldr	r6, [r3, #0]
 800c364:	69b3      	ldr	r3, [r6, #24]
 800c366:	b913      	cbnz	r3, 800c36e <__sfp+0x16>
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff ffbd 	bl	800c2e8 <__sinit>
 800c36e:	3648      	adds	r6, #72	; 0x48
 800c370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c374:	3b01      	subs	r3, #1
 800c376:	d503      	bpl.n	800c380 <__sfp+0x28>
 800c378:	6833      	ldr	r3, [r6, #0]
 800c37a:	b30b      	cbz	r3, 800c3c0 <__sfp+0x68>
 800c37c:	6836      	ldr	r6, [r6, #0]
 800c37e:	e7f7      	b.n	800c370 <__sfp+0x18>
 800c380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c384:	b9d5      	cbnz	r5, 800c3bc <__sfp+0x64>
 800c386:	4b16      	ldr	r3, [pc, #88]	; (800c3e0 <__sfp+0x88>)
 800c388:	60e3      	str	r3, [r4, #12]
 800c38a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c38e:	6665      	str	r5, [r4, #100]	; 0x64
 800c390:	f000 f847 	bl	800c422 <__retarget_lock_init_recursive>
 800c394:	f7ff ff96 	bl	800c2c4 <__sfp_lock_release>
 800c398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c39c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3a0:	6025      	str	r5, [r4, #0]
 800c3a2:	61a5      	str	r5, [r4, #24]
 800c3a4:	2208      	movs	r2, #8
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3ac:	f7fe ff38 	bl	800b220 <memset>
 800c3b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3bc:	3468      	adds	r4, #104	; 0x68
 800c3be:	e7d9      	b.n	800c374 <__sfp+0x1c>
 800c3c0:	2104      	movs	r1, #4
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f7ff ff62 	bl	800c28c <__sfmoreglue>
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	6030      	str	r0, [r6, #0]
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d1d5      	bne.n	800c37c <__sfp+0x24>
 800c3d0:	f7ff ff78 	bl	800c2c4 <__sfp_lock_release>
 800c3d4:	230c      	movs	r3, #12
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	e7ee      	b.n	800c3b8 <__sfp+0x60>
 800c3da:	bf00      	nop
 800c3dc:	0800c818 	.word	0x0800c818
 800c3e0:	ffff0001 	.word	0xffff0001

0800c3e4 <_fwalk_reent>:
 800c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	4688      	mov	r8, r1
 800c3ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3f0:	2700      	movs	r7, #0
 800c3f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3f6:	f1b9 0901 	subs.w	r9, r9, #1
 800c3fa:	d505      	bpl.n	800c408 <_fwalk_reent+0x24>
 800c3fc:	6824      	ldr	r4, [r4, #0]
 800c3fe:	2c00      	cmp	r4, #0
 800c400:	d1f7      	bne.n	800c3f2 <_fwalk_reent+0xe>
 800c402:	4638      	mov	r0, r7
 800c404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c408:	89ab      	ldrh	r3, [r5, #12]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d907      	bls.n	800c41e <_fwalk_reent+0x3a>
 800c40e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c412:	3301      	adds	r3, #1
 800c414:	d003      	beq.n	800c41e <_fwalk_reent+0x3a>
 800c416:	4629      	mov	r1, r5
 800c418:	4630      	mov	r0, r6
 800c41a:	47c0      	blx	r8
 800c41c:	4307      	orrs	r7, r0
 800c41e:	3568      	adds	r5, #104	; 0x68
 800c420:	e7e9      	b.n	800c3f6 <_fwalk_reent+0x12>

0800c422 <__retarget_lock_init_recursive>:
 800c422:	4770      	bx	lr

0800c424 <__retarget_lock_acquire_recursive>:
 800c424:	4770      	bx	lr

0800c426 <__retarget_lock_release_recursive>:
 800c426:	4770      	bx	lr

0800c428 <__swhatbuf_r>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	460e      	mov	r6, r1
 800c42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c430:	2900      	cmp	r1, #0
 800c432:	b096      	sub	sp, #88	; 0x58
 800c434:	4614      	mov	r4, r2
 800c436:	461d      	mov	r5, r3
 800c438:	da08      	bge.n	800c44c <__swhatbuf_r+0x24>
 800c43a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	602a      	str	r2, [r5, #0]
 800c442:	061a      	lsls	r2, r3, #24
 800c444:	d410      	bmi.n	800c468 <__swhatbuf_r+0x40>
 800c446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44a:	e00e      	b.n	800c46a <__swhatbuf_r+0x42>
 800c44c:	466a      	mov	r2, sp
 800c44e:	f000 f951 	bl	800c6f4 <_fstat_r>
 800c452:	2800      	cmp	r0, #0
 800c454:	dbf1      	blt.n	800c43a <__swhatbuf_r+0x12>
 800c456:	9a01      	ldr	r2, [sp, #4]
 800c458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c45c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c460:	425a      	negs	r2, r3
 800c462:	415a      	adcs	r2, r3
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	e7ee      	b.n	800c446 <__swhatbuf_r+0x1e>
 800c468:	2340      	movs	r3, #64	; 0x40
 800c46a:	2000      	movs	r0, #0
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	b016      	add	sp, #88	; 0x58
 800c470:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c474 <__smakebuf_r>:
 800c474:	898b      	ldrh	r3, [r1, #12]
 800c476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c478:	079d      	lsls	r5, r3, #30
 800c47a:	4606      	mov	r6, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	d507      	bpl.n	800c490 <__smakebuf_r+0x1c>
 800c480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	2301      	movs	r3, #1
 800c48a:	6163      	str	r3, [r4, #20]
 800c48c:	b002      	add	sp, #8
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	ab01      	add	r3, sp, #4
 800c492:	466a      	mov	r2, sp
 800c494:	f7ff ffc8 	bl	800c428 <__swhatbuf_r>
 800c498:	9900      	ldr	r1, [sp, #0]
 800c49a:	4605      	mov	r5, r0
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff f873 	bl	800b588 <_malloc_r>
 800c4a2:	b948      	cbnz	r0, 800c4b8 <__smakebuf_r+0x44>
 800c4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a8:	059a      	lsls	r2, r3, #22
 800c4aa:	d4ef      	bmi.n	800c48c <__smakebuf_r+0x18>
 800c4ac:	f023 0303 	bic.w	r3, r3, #3
 800c4b0:	f043 0302 	orr.w	r3, r3, #2
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	e7e3      	b.n	800c480 <__smakebuf_r+0xc>
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <__smakebuf_r+0x7c>)
 800c4ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	6020      	str	r0, [r4, #0]
 800c4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	9b00      	ldr	r3, [sp, #0]
 800c4c8:	6163      	str	r3, [r4, #20]
 800c4ca:	9b01      	ldr	r3, [sp, #4]
 800c4cc:	6120      	str	r0, [r4, #16]
 800c4ce:	b15b      	cbz	r3, 800c4e8 <__smakebuf_r+0x74>
 800c4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f000 f91f 	bl	800c718 <_isatty_r>
 800c4da:	b128      	cbz	r0, 800c4e8 <__smakebuf_r+0x74>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	f023 0303 	bic.w	r3, r3, #3
 800c4e2:	f043 0301 	orr.w	r3, r3, #1
 800c4e6:	81a3      	strh	r3, [r4, #12]
 800c4e8:	89a0      	ldrh	r0, [r4, #12]
 800c4ea:	4305      	orrs	r5, r0
 800c4ec:	81a5      	strh	r5, [r4, #12]
 800c4ee:	e7cd      	b.n	800c48c <__smakebuf_r+0x18>
 800c4f0:	0800c281 	.word	0x0800c281

0800c4f4 <memmove>:
 800c4f4:	4288      	cmp	r0, r1
 800c4f6:	b510      	push	{r4, lr}
 800c4f8:	eb01 0402 	add.w	r4, r1, r2
 800c4fc:	d902      	bls.n	800c504 <memmove+0x10>
 800c4fe:	4284      	cmp	r4, r0
 800c500:	4623      	mov	r3, r4
 800c502:	d807      	bhi.n	800c514 <memmove+0x20>
 800c504:	1e43      	subs	r3, r0, #1
 800c506:	42a1      	cmp	r1, r4
 800c508:	d008      	beq.n	800c51c <memmove+0x28>
 800c50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c512:	e7f8      	b.n	800c506 <memmove+0x12>
 800c514:	4402      	add	r2, r0
 800c516:	4601      	mov	r1, r0
 800c518:	428a      	cmp	r2, r1
 800c51a:	d100      	bne.n	800c51e <memmove+0x2a>
 800c51c:	bd10      	pop	{r4, pc}
 800c51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c526:	e7f7      	b.n	800c518 <memmove+0x24>

0800c528 <__malloc_lock>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__malloc_lock+0x8>)
 800c52a:	f7ff bf7b 	b.w	800c424 <__retarget_lock_acquire_recursive>
 800c52e:	bf00      	nop
 800c530:	2400c9f4 	.word	0x2400c9f4

0800c534 <__malloc_unlock>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__malloc_unlock+0x8>)
 800c536:	f7ff bf76 	b.w	800c426 <__retarget_lock_release_recursive>
 800c53a:	bf00      	nop
 800c53c:	2400c9f4 	.word	0x2400c9f4

0800c540 <_realloc_r>:
 800c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c544:	4680      	mov	r8, r0
 800c546:	4614      	mov	r4, r2
 800c548:	460e      	mov	r6, r1
 800c54a:	b921      	cbnz	r1, 800c556 <_realloc_r+0x16>
 800c54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	4611      	mov	r1, r2
 800c552:	f7ff b819 	b.w	800b588 <_malloc_r>
 800c556:	b92a      	cbnz	r2, 800c564 <_realloc_r+0x24>
 800c558:	f7fe ffaa 	bl	800b4b0 <_free_r>
 800c55c:	4625      	mov	r5, r4
 800c55e:	4628      	mov	r0, r5
 800c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c564:	f000 f8fa 	bl	800c75c <_malloc_usable_size_r>
 800c568:	4284      	cmp	r4, r0
 800c56a:	4607      	mov	r7, r0
 800c56c:	d802      	bhi.n	800c574 <_realloc_r+0x34>
 800c56e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c572:	d812      	bhi.n	800c59a <_realloc_r+0x5a>
 800c574:	4621      	mov	r1, r4
 800c576:	4640      	mov	r0, r8
 800c578:	f7ff f806 	bl	800b588 <_malloc_r>
 800c57c:	4605      	mov	r5, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d0ed      	beq.n	800c55e <_realloc_r+0x1e>
 800c582:	42bc      	cmp	r4, r7
 800c584:	4622      	mov	r2, r4
 800c586:	4631      	mov	r1, r6
 800c588:	bf28      	it	cs
 800c58a:	463a      	movcs	r2, r7
 800c58c:	f7fe fe3a 	bl	800b204 <memcpy>
 800c590:	4631      	mov	r1, r6
 800c592:	4640      	mov	r0, r8
 800c594:	f7fe ff8c 	bl	800b4b0 <_free_r>
 800c598:	e7e1      	b.n	800c55e <_realloc_r+0x1e>
 800c59a:	4635      	mov	r5, r6
 800c59c:	e7df      	b.n	800c55e <_realloc_r+0x1e>

0800c59e <_raise_r>:
 800c59e:	291f      	cmp	r1, #31
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	460d      	mov	r5, r1
 800c5a6:	d904      	bls.n	800c5b2 <_raise_r+0x14>
 800c5a8:	2316      	movs	r3, #22
 800c5aa:	6003      	str	r3, [r0, #0]
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b0:	bd38      	pop	{r3, r4, r5, pc}
 800c5b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5b4:	b112      	cbz	r2, 800c5bc <_raise_r+0x1e>
 800c5b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5ba:	b94b      	cbnz	r3, 800c5d0 <_raise_r+0x32>
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 f831 	bl	800c624 <_getpid_r>
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5cc:	f000 b818 	b.w	800c600 <_kill_r>
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d00a      	beq.n	800c5ea <_raise_r+0x4c>
 800c5d4:	1c59      	adds	r1, r3, #1
 800c5d6:	d103      	bne.n	800c5e0 <_raise_r+0x42>
 800c5d8:	2316      	movs	r3, #22
 800c5da:	6003      	str	r3, [r0, #0]
 800c5dc:	2001      	movs	r0, #1
 800c5de:	e7e7      	b.n	800c5b0 <_raise_r+0x12>
 800c5e0:	2400      	movs	r4, #0
 800c5e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	4798      	blx	r3
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e7e0      	b.n	800c5b0 <_raise_r+0x12>
	...

0800c5f0 <raise>:
 800c5f0:	4b02      	ldr	r3, [pc, #8]	; (800c5fc <raise+0xc>)
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	6818      	ldr	r0, [r3, #0]
 800c5f6:	f7ff bfd2 	b.w	800c59e <_raise_r>
 800c5fa:	bf00      	nop
 800c5fc:	240001a0 	.word	0x240001a0

0800c600 <_kill_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d07      	ldr	r5, [pc, #28]	; (800c620 <_kill_r+0x20>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	4611      	mov	r1, r2
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	f7f5 fb85 	bl	8001d1c <_kill>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d102      	bne.n	800c61c <_kill_r+0x1c>
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	b103      	cbz	r3, 800c61c <_kill_r+0x1c>
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	bf00      	nop
 800c620:	2400c9f8 	.word	0x2400c9f8

0800c624 <_getpid_r>:
 800c624:	f7f5 bb72 	b.w	8001d0c <_getpid>

0800c628 <__sread>:
 800c628:	b510      	push	{r4, lr}
 800c62a:	460c      	mov	r4, r1
 800c62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c630:	f000 f89c 	bl	800c76c <_read_r>
 800c634:	2800      	cmp	r0, #0
 800c636:	bfab      	itete	ge
 800c638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c63a:	89a3      	ldrhlt	r3, [r4, #12]
 800c63c:	181b      	addge	r3, r3, r0
 800c63e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c642:	bfac      	ite	ge
 800c644:	6563      	strge	r3, [r4, #84]	; 0x54
 800c646:	81a3      	strhlt	r3, [r4, #12]
 800c648:	bd10      	pop	{r4, pc}

0800c64a <__swrite>:
 800c64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c64e:	461f      	mov	r7, r3
 800c650:	898b      	ldrh	r3, [r1, #12]
 800c652:	05db      	lsls	r3, r3, #23
 800c654:	4605      	mov	r5, r0
 800c656:	460c      	mov	r4, r1
 800c658:	4616      	mov	r6, r2
 800c65a:	d505      	bpl.n	800c668 <__swrite+0x1e>
 800c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c660:	2302      	movs	r3, #2
 800c662:	2200      	movs	r2, #0
 800c664:	f000 f868 	bl	800c738 <_lseek_r>
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	4632      	mov	r2, r6
 800c676:	463b      	mov	r3, r7
 800c678:	4628      	mov	r0, r5
 800c67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	f000 b817 	b.w	800c6b0 <_write_r>

0800c682 <__sseek>:
 800c682:	b510      	push	{r4, lr}
 800c684:	460c      	mov	r4, r1
 800c686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68a:	f000 f855 	bl	800c738 <_lseek_r>
 800c68e:	1c43      	adds	r3, r0, #1
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	bf15      	itete	ne
 800c694:	6560      	strne	r0, [r4, #84]	; 0x54
 800c696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c69e:	81a3      	strheq	r3, [r4, #12]
 800c6a0:	bf18      	it	ne
 800c6a2:	81a3      	strhne	r3, [r4, #12]
 800c6a4:	bd10      	pop	{r4, pc}

0800c6a6 <__sclose>:
 800c6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6aa:	f000 b813 	b.w	800c6d4 <_close_r>
	...

0800c6b0 <_write_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4d07      	ldr	r5, [pc, #28]	; (800c6d0 <_write_r+0x20>)
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	4608      	mov	r0, r1
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	602a      	str	r2, [r5, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f7f5 fb63 	bl	8001d8a <_write>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d102      	bne.n	800c6ce <_write_r+0x1e>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	b103      	cbz	r3, 800c6ce <_write_r+0x1e>
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	2400c9f8 	.word	0x2400c9f8

0800c6d4 <_close_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4d06      	ldr	r5, [pc, #24]	; (800c6f0 <_close_r+0x1c>)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	4604      	mov	r4, r0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	602b      	str	r3, [r5, #0]
 800c6e0:	f7f5 fb6f 	bl	8001dc2 <_close>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d102      	bne.n	800c6ee <_close_r+0x1a>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	b103      	cbz	r3, 800c6ee <_close_r+0x1a>
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	2400c9f8 	.word	0x2400c9f8

0800c6f4 <_fstat_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d07      	ldr	r5, [pc, #28]	; (800c714 <_fstat_r+0x20>)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4608      	mov	r0, r1
 800c6fe:	4611      	mov	r1, r2
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	f7f5 fb6a 	bl	8001dda <_fstat>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d102      	bne.n	800c710 <_fstat_r+0x1c>
 800c70a:	682b      	ldr	r3, [r5, #0]
 800c70c:	b103      	cbz	r3, 800c710 <_fstat_r+0x1c>
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	bd38      	pop	{r3, r4, r5, pc}
 800c712:	bf00      	nop
 800c714:	2400c9f8 	.word	0x2400c9f8

0800c718 <_isatty_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d06      	ldr	r5, [pc, #24]	; (800c734 <_isatty_r+0x1c>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f5 fb69 	bl	8001dfa <_isatty>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_isatty_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_isatty_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	2400c9f8 	.word	0x2400c9f8

0800c738 <_lseek_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d07      	ldr	r5, [pc, #28]	; (800c758 <_lseek_r+0x20>)
 800c73c:	4604      	mov	r4, r0
 800c73e:	4608      	mov	r0, r1
 800c740:	4611      	mov	r1, r2
 800c742:	2200      	movs	r2, #0
 800c744:	602a      	str	r2, [r5, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	f7f5 fb62 	bl	8001e10 <_lseek>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d102      	bne.n	800c756 <_lseek_r+0x1e>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	b103      	cbz	r3, 800c756 <_lseek_r+0x1e>
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	2400c9f8 	.word	0x2400c9f8

0800c75c <_malloc_usable_size_r>:
 800c75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c760:	1f18      	subs	r0, r3, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	bfbc      	itt	lt
 800c766:	580b      	ldrlt	r3, [r1, r0]
 800c768:	18c0      	addlt	r0, r0, r3
 800c76a:	4770      	bx	lr

0800c76c <_read_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4d07      	ldr	r5, [pc, #28]	; (800c78c <_read_r+0x20>)
 800c770:	4604      	mov	r4, r0
 800c772:	4608      	mov	r0, r1
 800c774:	4611      	mov	r1, r2
 800c776:	2200      	movs	r2, #0
 800c778:	602a      	str	r2, [r5, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	f7f5 fae8 	bl	8001d50 <_read>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_read_r+0x1e>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_read_r+0x1e>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	2400c9f8 	.word	0x2400c9f8

0800c790 <_init>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	bf00      	nop
 800c794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c796:	bc08      	pop	{r3}
 800c798:	469e      	mov	lr, r3
 800c79a:	4770      	bx	lr

0800c79c <_fini>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr
